# Generated with h2o 0.1.18

# autogenerated bash script

_bamtools()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          convert) _bamtools_convert
            return
            ;;

          count) _bamtools_count
            return
            ;;

          coverage) _bamtools_coverage
            return
            ;;

          filter) _bamtools_filter
            return
            ;;

          header) _bamtools_header
            return
            ;;

          index) _bamtools_index
            return
            ;;

          merge) _bamtools_merge
            return
            ;;

          random) _bamtools_random
            return
            ;;

          resolve) _bamtools_resolve
            return
            ;;

          revert) _bamtools_revert
            return
            ;;

          sort) _bamtools_sort
            return
            ;;

          split) _bamtools_split
            return
            ;;

          stats) _bamtools_stats
            return
            ;;

      *)
          word_list=" convert count coverage filter header index merge random resolve revert sort split stats " 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_bamtools_convert ()
{
    local cur word_list
    word_list=" -in -list -out -format -region -fasta -mapqual -noheader --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_count ()
{
    local cur word_list
    word_list=" -in -list -region --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_coverage ()
{
    local cur word_list
    word_list=" -in -out --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_filter ()
{
    local cur word_list
    word_list=" -in -list -out -region -script -forceCompression -alignmentFlag -insertSize -length -mapQuality -name -queryBases -tag -isDuplicate -isFailedQC -isFirstMate -isMapped -isMateMapped -isMateReverseStrand -isPaired -isPrimaryAlignment -isProperPair -isReverseStrand -isSecondMate -isSingleton --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_header ()
{
    local cur word_list
    word_list=" -in -list --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_index ()
{
    local cur word_list
    word_list=" -in -bti --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_merge ()
{
    local cur word_list
    word_list=" -in -list -out -forceCompression -region --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_random ()
{
    local cur word_list
    word_list=" -in -list -out -region -forceCompression -n -seed --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_resolve ()
{
    local cur word_list
    word_list=" -in -out -stats -forceCompression -makeStats -markPairs -twoPass -minMQ -ci -umt -force --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_revert ()
{
    local cur word_list
    word_list=" -in -out -forceCompression -keepDuplicate -keepQualities --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_sort ()
{
    local cur word_list
    word_list=" -in -out -byname -n -mem --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_split ()
{
    local cur word_list
    word_list=" -in -refPrefix -tagPrefix -stub -tagListDelim -mapped -paired -reference -tag --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bamtools_stats ()
{
    local cur word_list
    word_list=" -in -list -insert --help -h" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bamtools bamtools
