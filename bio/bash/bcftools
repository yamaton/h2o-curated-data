# Generated with h2o 0.1.18

# autogenerated bash script

_bcftools()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          index) _bcftools_index
            return
            ;;

          annotate) _bcftools_annotate
            return
            ;;

          concat) _bcftools_concat
            return
            ;;

          convert) _bcftools_convert
            return
            ;;

          isec) _bcftools_isec
            return
            ;;

          merge) _bcftools_merge
            return
            ;;

          norm) _bcftools_norm
            return
            ;;

          plugin) _bcftools_plugin
            return
            ;;

          query) _bcftools_query
            return
            ;;

          reheader) _bcftools_reheader
            return
            ;;

          sort) _bcftools_sort
            return
            ;;

          view) _bcftools_view
            return
            ;;

          call) _bcftools_call
            return
            ;;

          consensus) _bcftools_consensus
            return
            ;;

          cnv) _bcftools_cnv
            return
            ;;

          csq) _bcftools_csq
            return
            ;;

          filter) _bcftools_filter
            return
            ;;

          gtcheck) _bcftools_gtcheck
            return
            ;;

          mpileup) _bcftools_mpileup
            return
            ;;

          polysomy) _bcftools_polysomy
            return
            ;;

          roh) _bcftools_roh
            return
            ;;

          stats) _bcftools_stats
            return
            ;;

      *)
          word_list=" index annotate concat convert isec merge norm plugin query reheader sort view call consensus cnv csq filter gtcheck mpileup polysomy roh stats " 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_bcftools_index ()
{
    local cur word_list
    word_list=" -c --csi -f --force -m --min-shift -o --output -t --tbi --threads -n --nrecords -s --stats" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_annotate ()
{
    local cur word_list
    word_list=" -a --annotations --collapse -c --columns -e --exclude --force -h --header-lines -I --set-id -i --include -k --keep-sites -l --merge-logic -m --mark-sites --no-version -o --output -O --output-type -r --regions -R --regions-file --rename-chrs -s --samples -S --samples-file --single-overlaps -x --remove --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_concat ()
{
    local cur word_list
    word_list=" -a --allow-overlaps -c --compact-PS -d --rm-dups -D --remove-duplicates -f --file-list -l --ligate --no-version -n --naive --naive-force -o --output -O --output-type -q --min-PQ -r --regions -R --regions-file --threads -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_convert ()
{
    local cur word_list
    word_list=" -e --exclude -i --include -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file --no-version -o --output -O --output-type --threads -G --gensample2vcf -g --gensample --tag --chrom --keep-duplicates --sex --vcf-ids --gvcf2vcf -f --fasta-ref --hapsample2vcf --hapsample --haploid2diploid --vcf-ids -H --haplegendsample2vcf -h --haplegendsample --tsv2vcf -c --columns -s --samples -S --samples-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_isec ()
{
    local cur word_list
    word_list=" -c --collapse -C --complement -e --exclude -f --apply-filters -i --include --no-version -o --output -O --output-type -p --prefix -r --regions -R --regions-file -t --targets -T --targets-file --threads -w --write" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_merge ()
{
    local cur word_list
    word_list=" --force-samples --print-header --use-header -0 --missing-to-ref -f --apply-filters -F --filter-logic -g --gvcf -i --info-rules -l --file-list -L --local-alleles -m --merge --no-index --no-version -o --output -O --output-type -r --regions -R --regions-file --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_norm ()
{
    local cur word_list
    word_list=" -c --check-ref -D --remove-duplicates -d --rm-dup -f --fasta-ref --force --keep-sum -m --multiallelics --no-version -N --do-not-normalize -o --output -O --output-type -r --regions -R --regions-file -s --strict-filter -t --targets -T --targets-file --threads -w --site-win" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_plugin ()
{
    local cur word_list
    word_list=" -e --exclude -i --include -r --regions -R --regions-file -t --targets -T --targets-file --no-version -o --output -O --output-type --threads -h --help -l --list-plugins -v --verbose -V --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_query ()
{
    local cur word_list
    word_list=" -e --exclude -f --format -H --print-header -i --include -l --list-samples -o --output -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file -u --allow-undef-tags -v --vcf-list" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_reheader ()
{
    local cur word_list
    word_list=" -f --fai -h --header -o --output -s --samples --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_sort ()
{
    local cur word_list
    word_list=" -m --max-mem -o --output -O --output-type -T --temp-dir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_view ()
{
    local cur word_list
    word_list=" -G --drop-genotypes -l --compression-level --no-version -o --output -O --output-type -r --regions -R --regions-file -t --targets -T --targets-file -a --trim-alt-alleles -I --no-update -s --samples -S --samples-file --force-samples -f --apply-filters -g --genotype" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_call ()
{
    local cur word_list
    word_list=" --no-version -o --output -O --output-type --ploidy --ploidy-file -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file --threads -A --keep-alts -f --format-fields -F --prior-freqs -G --group-samples -g --gvcf -i --insert-missed -M --keep-masked-ref -V --skip-variants -v --variants-only -c --consensus-caller -C --constrain -m --multiallelic-caller -n --novel-rate -p --pval-threshold -P --prior" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_consensus ()
{
    local cur word_list
    word_list=" --sample --sample -c --chain -a --absent -e --exclude -f --fasta-ref -H --haplotype -i --include -I --iupac-codes -m --mask -M --missing -o --output -p --prefix -s --sample" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_cnv ()
{
    local cur word_list
    word_list=" -c --control-sample -f --AF-file -o --output-dir -p --plot-threshold -r --regions -R --regions-file -s --query-sample -t --targets -T --targets-file -a --aberrant -b --BAF-weight -d --BAF-dev -e --err-prob -k --LRR-dev -l --LRR-weight -L --LRR-smooth-win -O --optimize -P --same-prob -x --xy-prob" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_csq ()
{
    local cur word_list
    word_list=" -f --fasta-ref -g --gff-annot -b --brief-predictions -c --custom-tag -l --local-csq -n --ncsq -p --phase -e --exclude --force -i --include --no-version -o --output -O --output-type -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file --threads -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_filter ()
{
    local cur word_list
    word_list=" -e --exclude -g --SnpGap -G --IndelGap -i --include -m --mode --no-version -o --output -O --output-type -r --regions -R --regions-file -s --soft-filter -S --set-GTs -t --targets -T --targets-file --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_gtcheck ()
{
    local cur word_list
    word_list=" --distinctive-sites --dry-run -e --error-probability -g --genotypes -H --homs-only --n-matches --no-HWE-prob -p --pairs -P --pairs-file -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file -u --use" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_mpileup ()
{
    local cur word_list
    word_list=" -6 --illumina1.3+ -A --count-orphans -b --bam-list -B --no-BAQ -C --adjust-MQ -d --max-depth -E --redo-BAQ -f --fasta-ref --no-reference -G --read-groups -q --min-MQ -Q --min-BQ -r --regions -R --regions-file --ignore-RG -s --samples -S --samples-file -t --targets -T --targets-file -x --ignore-overlaps --rf --incl-flags --ff --excl-flags -a --annotate -g --gvcf --no-version -o --output -O --output-type --threads -e --ext-prob -F --gap-frac -h --tandem-qual -I --skip-indels -L --max-idepth -m --min-ireads -o --open-prob -p --per-sample-mF -P --platforms" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_polysomy ()
{
    local cur word_list
    word_list=" -o --output-dir -r --regions -R --regions-file -s --sample -t --targets -T --targets-file -b --peak-size -c --cn-penalty -f --fit-th -i --include-aa -m --min-fraction -p --peak-symmetry" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_roh ()
{
    local cur word_list
    word_list=" --AF-dflt --AF-tag --AF-file -b --buffer-size -e --estimate-AF --exclude -G --GTs-only --include -i --ignore-homref --include-noalt -I --skip-indels -m --genetic-map -M --rec-rate -o --output -O --output-type -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file --threads -a --hw-to-az -H --az-to-hw -V --viterbi-training" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bcftools_stats ()
{
    local cur word_list
    word_list=" --af-bins --af-tag -1 --1st-allele-only -c --collapse -d --depth -e --exclude -E --exons -f --apply-filters -F --fasta-ref -i --include -I --split-by-ID -r --regions -R --regions-file -s --samples -S --samples-file -t --targets -T --targets-file -u --user-tstv --threads -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bcftools bcftools
