# Generated with h2o 0.1.18

# autogenerated bash script

_bedtools()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          intersect) _bedtools_intersect
            return
            ;;

          window) _bedtools_window
            return
            ;;

          closest) _bedtools_closest
            return
            ;;

          coverage) _bedtools_coverage
            return
            ;;

          map) _bedtools_map
            return
            ;;

          genomecov) _bedtools_genomecov
            return
            ;;

          merge) _bedtools_merge
            return
            ;;

          cluster) _bedtools_cluster
            return
            ;;

          complement) _bedtools_complement
            return
            ;;

          shift) _bedtools_shift
            return
            ;;

          subtract) _bedtools_subtract
            return
            ;;

          slop) _bedtools_slop
            return
            ;;

          flank) _bedtools_flank
            return
            ;;

          sort) _bedtools_sort
            return
            ;;

          random) _bedtools_random
            return
            ;;

          shuffle) _bedtools_shuffle
            return
            ;;

          sample) _bedtools_sample
            return
            ;;

          spacing) _bedtools_spacing
            return
            ;;

          annotate) _bedtools_annotate
            return
            ;;

          multiinter) _bedtools_multiinter
            return
            ;;

          unionbedg) _bedtools_unionbedg
            return
            ;;

          pairtobed) _bedtools_pairtobed
            return
            ;;

          pairtopair) _bedtools_pairtopair
            return
            ;;

          bamtobed) _bedtools_bamtobed
            return
            ;;

          bedtobam) _bedtools_bedtobam
            return
            ;;

          bamtofastq) _bedtools_bamtofastq
            return
            ;;

          bedpetobam) _bedtools_bedpetobam
            return
            ;;

          bed12tobed6) _bedtools_bed12tobed6
            return
            ;;

          getfasta) _bedtools_getfasta
            return
            ;;

          maskfasta) _bedtools_maskfasta
            return
            ;;

          nuc) _bedtools_nuc
            return
            ;;

          multicov) _bedtools_multicov
            return
            ;;

          tag) _bedtools_tag
            return
            ;;

          jaccard) _bedtools_jaccard
            return
            ;;

          reldist) _bedtools_reldist
            return
            ;;

          fisher) _bedtools_fisher
            return
            ;;

          overlap) _bedtools_overlap
            return
            ;;

          igv) _bedtools_igv
            return
            ;;

          links) _bedtools_links
            return
            ;;

          makewindows) _bedtools_makewindows
            return
            ;;

          groupby) _bedtools_groupby
            return
            ;;

          expand) _bedtools_expand
            return
            ;;

          split) _bedtools_split
            return
            ;;

          summary) _bedtools_summary
            return
            ;;

      *)
          word_list=" intersect window closest coverage map genomecov merge cluster complement shift subtract slop flank sort random shuffle sample spacing annotate multiinter unionbedg pairtobed pairtopair bamtobed bedtobam bamtofastq bedpetobam bed12tobed6 getfasta maskfasta nuc multicov tag jaccard reldist fisher overlap igv links makewindows groupby expand split summary --cram-ref --help --version --contact" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_bedtools_intersect ()
{
    local cur word_list
    word_list=" -wa -wb -loj -wo -wao -u -c -C -v -ubam -s -S -f -F -r -e -split -g -nonamecheck -sorted -names -filenames -sortout -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_window ()
{
    local cur word_list
    word_list=" -abam -ubam -bed -w -l -r -sw -sm -Sm -u -c -v -header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_closest ()
{
    local cur word_list
    word_list=" -d -D -io -iu -id -fu -fd -t -mdb -k -N -s -S -f -F -r -e -split -g -nonamecheck -names -filenames -sortout -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_coverage ()
{
    local cur word_list
    word_list=" -hist -d -counts -mean -s -S -f -F -r -e -split -g -nonamecheck -sorted -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_map ()
{
    local cur word_list
    word_list=" -c -o -delim -prec -s -S -f -F -r -e -split -g -nonamecheck -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_genomecov ()
{
    local cur word_list
    word_list=" -ibam -d -dz -bg -bga -split -ignoreD -strand -pc -fs -du -5 -3 -max -scale -trackline -trackopts -trackopts" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_merge ()
{
    local cur word_list
    word_list=" -s -S -d -c -o -delim -prec -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_cluster ()
{
    local cur word_list
    word_list=" -s -d" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_complement ()
{
    local cur word_list
    word_list=" -L" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_shift ()
{
    local cur word_list
    word_list=" -s -p -m -pct -header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_subtract ()
{
    local cur word_list
    word_list=" -A -N -wb -wo -s -S -f -F -r -e -split -g -nonamecheck -sorted -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_slop ()
{
    local cur word_list
    word_list=" -b -l -r -s -pct -header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_flank ()
{
    local cur word_list
    word_list=" -b -l -r -s -pct -header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_sort ()
{
    local cur word_list
    word_list=" -sizeA -sizeD -chrThenSizeA -chrThenSizeD -chrThenScoreA -chrThenScoreD -g -faidx -header" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_random ()
{
    local cur word_list
    word_list=" -l -n -seed" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_shuffle ()
{
    local cur word_list
    word_list=" -excl -incl -chrom -seed -f -chromFirst -bedpe -maxTries -noOverlapping -allowBeyondChromEnd" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_sample ()
{
    local cur word_list
    word_list=" -n -seed -ubam -s -header -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_spacing ()
{
    local cur word_list
    word_list=" -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_annotate ()
{
    local cur word_list
    word_list=" -names -counts -both -s -S" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_pairtobed ()
{
    local cur word_list
    word_list=" -abam -ubam -bedpe -ed -f -s -S -type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_pairtopair ()
{
    local cur word_list
    word_list=" -f -type -slop -ss -is -rdn" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_bamtobed ()
{
    local cur word_list
    word_list=" -bedpe -mate1 -bed12 -split -splitD -ed -tag -color -cigar" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_bedtobam ()
{
    local cur word_list
    word_list=" -mapq -bed12 -ubam" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_bamtofastq ()
{
    local cur word_list
    word_list=" -fq2 -tags" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_bedpetobam ()
{
    local cur word_list
    word_list=" -mapq -ubam" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_bed12tobed6 ()
{
    local cur word_list
    word_list=" -n" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_getfasta ()
{
    local cur word_list
    word_list=" -fi -fo -bed -name -name+ -nameOnly -split -tab -bedOut -s -fullHeader -rna" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_maskfasta ()
{
    local cur word_list
    word_list=" -fi -bed -fo -soft -mc -fullHeader" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_nuc ()
{
    local cur word_list
    word_list=" -fi -bed -s -seq -pattern -C -fullHeader" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_multicov ()
{
    local cur word_list
    word_list=" -bams -bed -split -s -S -f -r -q -D -F -p" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_tag ()
{
    local cur word_list
    word_list=" -s -S -f -tag -names -scores -intervals" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_jaccard ()
{
    local cur word_list
    word_list=" -s -S -f -F -r -e -split -g -nonamecheck -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_reldist ()
{
    local cur word_list
    word_list=" -detail" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_fisher ()
{
    local cur word_list
    word_list=" -m -s -S -f -F -r -e -split -g -nonamecheck -bed -header -nobuf -iobuf" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_overlap ()
{
    local cur word_list
    word_list=" -i -cols" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_igv ()
{
    local cur word_list
    word_list=" -path -sess -sort -clps -name -slop -img" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_links ()
{
    local cur word_list
    word_list=" -base -org -db -base" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_makewindows ()
{
    local cur word_list
    word_list=" -g -b -w -s -n -reverse -i" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_groupby ()
{
    local cur word_list
    word_list=" -i -g -grp -c -opCols -o -ops -full -inheader -outheader -header -ignorecase -prec -delim" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_expand ()
{
    local cur word_list
    word_list=" -i -c" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_bedtools_split ()
{
    local cur word_list
    word_list=" -i --input -n --number -p --prefix -a --algorithm -a --algorithm -h --help -v --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bedtools bedtools
