# Generated with h2o 0.1.18

# autogenerated bash script

_nanopolish()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          call-methylation) _nanopolish_call-methylation
            return
            ;;

          eventalign) _nanopolish_eventalign
            return
            ;;

          extract) _nanopolish_extract
            return
            ;;

          getmodel) _nanopolish_getmodel
            return
            ;;

          index) _nanopolish_index
            return
            ;;

          methyltrain) _nanopolish_methyltrain
            return
            ;;

          phase-reads) _nanopolish_phase-reads
            return
            ;;

          polya) _nanopolish_polya
            return
            ;;

          scorereads) _nanopolish_scorereads
            return
            ;;

          variants) _nanopolish_variants
            return
            ;;

          vcf2fasta) _nanopolish_vcf2fasta
            return
            ;;

      *)
          word_list=" call-methylation eventalign extract getmodel index methyltrain phase-reads polya scorereads variants vcf2fasta " 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_nanopolish_call-methylation ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -r --reads -b --bam -g --genome -q --methylation -t --threads --watch --watch-write-bam -c --watch-process-total -i --watch-process-index --progress -K --batchsize" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_eventalign ()
{
    local cur word_list
    word_list=" -v --verbose --version --help --sam -w --window -r --reads -b --bam -g --genome -t --threads -q --min-mapping-quality --scale-events --progress -n --print-read-names --summary --samples --signal-index --models-fofn" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_extract ()
{
    local cur word_list
    word_list=" --help --version -v --verbose -r --recurse -q --fastq -t --type -b --basecaller -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_getmodel ()
{
    local cur word_list
    word_list=" -v --verbose --version --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_index ()
{
    local cur word_list
    word_list=" --help --version -v --verbose -d --directory -s --sequencing-summary -f --summary-fofn" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_methyltrain ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -m --models-fofn --train-kmers -c --calibrate --no-update-models --output-scores -r --reads -b --bam -g --genome -t --threads --filter-policy -s --out-suffix --out-fofn --rounds --max-reads --progress --stdv --max-events" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_phase-reads ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -r --reads -b --bam -g --genome -w --window -t --threads --progress" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_polya ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -w --window -r --reads -b --bam -g --genome -t --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_scorereads ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -m --models-fofn -c --calibrate -z --zero-drift -i --individual-reads -r --reads -b --bam -g --genome -w --window -t --threads --train-transitions" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_variants ()
{
    local cur word_list
    word_list=" -v --verbose --version --help --snps --consensus --fix-homopolymers --faster -w --window -r --reads -b --bam -e --event-bam -g --genome -p --ploidy -q --methylation-aware --genotype -o --outfile -t --threads -m --min-candidate-frequency -i --indel-bias -d --min-candidate-depth -x --max-haplotypes --min-flanking-sequence --max-rounds -c --candidates --read-group --calculate-all-support --models-fofn" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nanopolish_vcf2fasta ()
{
    local cur word_list
    word_list=" -v --verbose --version --help -g --genome -f --fofn --skip-checks" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _nanopolish nanopolish
