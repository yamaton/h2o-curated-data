# Generated with h2o 0.1.18

# autogenerated bash script

_nextflow()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          clean) _nextflow_clean
            return
            ;;

          clone) _nextflow_clone
            return
            ;;

          config) _nextflow_config
            return
            ;;

          console) _nextflow_console
            return
            ;;

          drop) _nextflow_drop
            return
            ;;

          help) _nextflow_help
            return
            ;;

          info) _nextflow_info
            return
            ;;

          kuberun) _nextflow_kuberun
            return
            ;;

          list) _nextflow_list
            return
            ;;

          log) _nextflow_log
            return
            ;;

          pull) _nextflow_pull
            return
            ;;

          run) _nextflow_run
            return
            ;;

          self-update) _nextflow_self-update
            return
            ;;

          view) _nextflow_view
            return
            ;;

      *)
          word_list=" clean clone config console drop help info kuberun list log pull run self-update view -C -D -bg -c -config -d -dockerize -h -log -q -quiet -syslog -v -version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_nextflow_clean ()
{
    local cur word_list
    word_list=" -after -before -but -n -dry-run -f -force -h -help -k -keep-logs -q -quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_clone ()
{
    local cur word_list
    word_list=" -h -help -hub -r -user" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_config ()
{
    local cur word_list
    word_list=" -flat -h -help -profile -properties -a -show-profiles -sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_console ()
{
    local cur word_list
    word_list=" -h -help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_drop ()
{
    local cur word_list
    word_list=" -f -h -help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_help ()
{
    local cur word_list
    word_list=" -h -help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_info ()
{
    local cur word_list
    word_list=" -u -check-updates -d -h -help -o" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_kuberun ()
{
    local cur word_list
    word_list=" -E -ansi-log -bucket-dir -cache -dsl2 -dump-channels -dump-hashes -e. -entry -h -help -hub -latest -lib -main-script -name -n -namespace -offline -params-file -plugins -pod-image -process. -profile -qs -queue-size -resume -r -revision -stub-run -stub -test -user -v -volume-mount -with-charliecloud -with-conda -with-dag -with-docker -N -with-notification -with-podman -with-report -with-singularity -with-timeline -with-tower -with-trace -with-weblog -without-docker -without-podman -w -work-dir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_list ()
{
    local cur word_list
    word_list=" -h -help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_log ()
{
    local cur word_list
    word_list=" -after -before -but -f -fields -F -filter -h -help -l -list-fields -q -quiet -s -t -template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_pull ()
{
    local cur word_list
    word_list=" -all -h -help -hub -r -revision -user" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_run ()
{
    local cur word_list
    word_list=" -E -ansi-log -bucket-dir -cache -dsl2 -dump-channels -dump-hashes -e. -entry -h -help -hub -latest -lib -main-script -name -offline -params-file -plugins -process. -profile -qs -queue-size -resume -r -revision -stub-run -stub -test -user -with-charliecloud -with-conda -with-dag -with-docker -N -with-notification -with-podman -with-report -with-singularity -with-timeline -with-tower -with-trace -with-weblog -without-docker -without-podman -w -work-dir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_self-update ()
{
    local cur word_list
    word_list=" -h -help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_nextflow_view ()
{
    local cur word_list
    word_list=" -h -help -l -q" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _nextflow nextflow
