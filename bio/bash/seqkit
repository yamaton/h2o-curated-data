# Generated with h2o 0.1.18

# autogenerated bash script

_seqkit()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          amplicon) _seqkit_amplicon
            return
            ;;

          bam) _seqkit_bam
            return
            ;;

          common) _seqkit_common
            return
            ;;

          concat) _seqkit_concat
            return
            ;;

          convert) _seqkit_convert
            return
            ;;

          duplicate) _seqkit_duplicate
            return
            ;;

          faidx) _seqkit_faidx
            return
            ;;

          fish) _seqkit_fish
            return
            ;;

          fq2fa) _seqkit_fq2fa
            return
            ;;

          fx2tab) _seqkit_fx2tab
            return
            ;;

          genautocomplete) _seqkit_genautocomplete
            return
            ;;

          grep) _seqkit_grep
            return
            ;;

          head) _seqkit_head
            return
            ;;

          help) _seqkit_help
            return
            ;;

          locate) _seqkit_locate
            return
            ;;

          mutate) _seqkit_mutate
            return
            ;;

          pair) _seqkit_pair
            return
            ;;

          range) _seqkit_range
            return
            ;;

          rename) _seqkit_rename
            return
            ;;

          replace) _seqkit_replace
            return
            ;;

          restart) _seqkit_restart
            return
            ;;

          rmdup) _seqkit_rmdup
            return
            ;;

          sample) _seqkit_sample
            return
            ;;

          sana) _seqkit_sana
            return
            ;;

          scat) _seqkit_scat
            return
            ;;

          seq) _seqkit_seq
            return
            ;;

          shuffle) _seqkit_shuffle
            return
            ;;

          sliding) _seqkit_sliding
            return
            ;;

          sort) _seqkit_sort
            return
            ;;

          split) _seqkit_split
            return
            ;;

          split2) _seqkit_split2
            return
            ;;

          stats) _seqkit_stats
            return
            ;;

          subseq) _seqkit_subseq
            return
            ;;

          tab2fx) _seqkit_tab2fx
            return
            ;;

          translate) _seqkit_translate
            return
            ;;

          version) _seqkit_version
            return
            ;;

          watch) _seqkit_watch
            return
            ;;

      *)
          word_list=" amplicon bam common concat convert duplicate faidx fish fq2fa fx2tab genautocomplete grep head help locate mutate pair range rename replace restart rmdup sample sana scat seq shuffle sliding sort split split2 stats subseq tab2fx translate version watch --alphabet-guess-seq-length -h --help --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_seqkit_amplicon ()
{
    local cur word_list
    word_list=" --bed -f --flanking-region -F --forward -h --help -I --immediate-output -m --max-mismatch -P --only-positive-strand -p --primer-file -r --region -R --reverse -s --strict-mode --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_bam ()
{
    local cur word_list
    word_list=" -B --bins -N --bundle -c --count -W --delay -y --dump -G --exclude-ids -e --exec-after -E --exec-before -f --field -g --grep-ids -h --help -C --idx-count -i --idx-stat -O --img -H --list-fields -L --log -q --map-qual -x --pass -k --pretty -F --prim-only -p --print-freq -Q --quiet-mode -M --range-max -m --range-min -R --reset -Z --silent-mode -s --stat -T --tool -@ --top-bam -? --top-size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_common ()
{
    local cur word_list
    word_list=" -n --by-name --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -s --by-seq -h --help -i --ignore-case" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_concat ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_convert ()
{
    local cur word_list
    word_list=" -d --dry-run -f --force --from -h --help -n --nrecords -N --thresh-B-in-n-most-common -F --thresh-illumina1.5-frac --to --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_duplicate ()
{
    local cur word_list
    word_list=" -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_faidx ()
{
    local cur word_list
    word_list=" -f --full-head -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_fish ()
{
    local cur word_list
    word_list=" -a --all -p --aln-params -h --help -i --invert -q --min-qual -b --out-bam -x --pass -g --print-aln -D --print-desc -f --query-fastx -F --query-sequences -r --ranges -s --stranded -v --validate-seq -V --validate-seq-length --alphabet-guess-seq-length" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_fq2fa ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_fx2tab ()
{
    local cur word_list
    word_list=" -a --alphabet -q --avg-qual -B --base-content -C --base-count -I --case-sensitive -g --gc -G --gc-skew -H --header-line -h --help -l --length -n --name -i --only-id -b --qual-ascii-base -s --seq-hash" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_genautocomplete ()
{
    local cur word_list
    word_list=" --file -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_grep ()
{
    local cur word_list
    word_list=" -n --by-name -s --by-seq -c --circular -d --degenerate --delete-matched -h --help -i --ignore-case -I --immediate-output -v --invert-match -m --max-mismatch -P --only-positive-strand -p --pattern -f --pattern-file -R --region -r --use-regexp" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_head ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help -n --number" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_help ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_locate ()
{
    local cur word_list
    word_list=" --bed -c --circular -d --degenerate --gtf -h --help -M --hide-matched -i --ignore-case -I --immediate-output -m --max-mismatch -G --non-greedy -P --only-positive-strand -p --pattern -f --pattern-file -F --use-fmi -r --use-regexp -V --validate-seq-length --alphabet-guess-seq-length" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_mutate ()
{
    local cur word_list
    word_list=" -n --by-name -d --deletion -h --help -I --ignore-case -i --insertion -v --invert-match -s --pattern -f --pattern-file -p --point -r --use-regexp" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_pair ()
{
    local cur word_list
    word_list=" -f --force -h --help -2 --read2 -u --save-unpaired --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_range ()
{
    local cur word_list
    word_list=" -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_rename ()
{
    local cur word_list
    word_list=" -n --by-name -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -O --out-dir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_replace ()
{
    local cur word_list
    word_list=" -s --by-seq -h --help -i --ignore-case -K --keep-key -U --keep-untouch -I --key-capt-idx -m --key-miss-repl -k --kv-file --nr-width -p --pattern -r --replacement" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_restart ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help -i --new-start" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_rmdup ()
{
    local cur word_list
    word_list=" -n --by-name -s --by-seq -d --dup-seqs-file -h --help -i --ignore-case --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_sample ()
{
    local cur word_list
    word_list=" -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_sana ()
{
    local cur word_list
    word_list=" -A --allow-gaps -i --format -h --help -I --in-format --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_scat ()
{
    local cur word_list
    word_list=" -A --allow-gaps -d --delta -D --drop-time -f --find-only -i --format -g --gz-only -h --help -I --in-format -O --out-format -b --qual-ascii-base -r --regexp -T --time-limit -p --wait-pid" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_seq ()
{
    local cur word_list
    word_list=" -k --color -p --complement --dna2rna -G --gap-letters -h --help -l --lower-case -M --max-len -R --max-qual -m --min-len -Q --min-qual -n --name -i --only-id -q --qual -b --qual-ascii-base -g --remove-gaps -r --reverse --rna2dna -s --seq -u --upper-case -v --validate-seq -V --validate-seq-length --alphabet-guess-seq-length" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_shuffle ()
{
    local cur word_list
    word_list=" -h --help -2 --two-pass --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_sliding ()
{
    local cur word_list
    word_list=" -c --circular -C --circular-genome -g --greedy --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -h --help -s --step -W --window" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_sort ()
{
    local cur word_list
    word_list=" -l --by-length -n --by-name -s --by-seq -h --help -i --ignore-case -k --keep-temp -N --natural-order -r --reverse -L --seq-prefix-length -2 --two-pass --alphabet-guess-seq-lengt" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_split ()
{
    local cur word_list
    word_list=" -i --by-id -p --by-part -r --by-region -s --by-size -d --dry-run -f --force -h --help -k --keep-temp -O --out-dir -2 --two-pass" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_split2 ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -l --by-length -p --by-part -s --by-size -f --force -h --help -O --out-dir -1 --read1 -2 --read2" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_stats ()
{
    local cur word_list
    word_list=" -a --all -E --fq-encoding -h --help -e --skip-err -i --stdin-label -T --tabular --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_subseq ()
{
    local cur word_list
    word_list=" --bed --chr -d --down-stream --feature --gtf --gtf-tag -h --help -f --only-flank -r --region -u --up-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_tab2fx ()
{
    local cur word_list
    word_list=" -p --comment-line-prefix -h --help --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_translate ()
{
    local cur word_list
    word_list=" -x --allow-unknown-codon -F --append-frame --clean -f --frame -h --help -M --init-codon-as-M -l --list-transl-table -L --list-transl-table-with-amb-codons -T --transl-table --trim --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width --quiet -t --seq-type -j --threads" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_version ()
{
    local cur word_list
    word_list=" --alphabet-guess-seq-length --id-ncbi --id-regexp --infile-list -w --line-width -o --out-file --quiet -t --seq-type -j --threads -u --check-update -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_seqkit_watch ()
{
    local cur word_list
    word_list=" -B --bins -W --delay -y --dump -f --fields -h --help -O --img -H --list-fields -L --log -x --pass -p --print-freq -b --qual-ascii-base -Q --quiet-mode -R --reset -v --validate-seq -V --validate-seq-length --alphabet-guess-seq-length" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _seqkit seqkit
