# Generated with h2o 0.1.18

# autogenerated bash script

_singularity()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          build) _singularity_build
            return
            ;;

          cache) _singularity_cache
            return
            ;;

          capability) _singularity_capability
            return
            ;;

          config) _singularity_config
            return
            ;;

          delete) _singularity_delete
            return
            ;;

          exec) _singularity_exec
            return
            ;;

          help) _singularity_help
            return
            ;;

          inspect) _singularity_inspect
            return
            ;;

          instance) _singularity_instance
            return
            ;;

          key) _singularity_key
            return
            ;;

          oci) _singularity_oci
            return
            ;;

          overlay) _singularity_overlay
            return
            ;;

          plugin) _singularity_plugin
            return
            ;;

          pull) _singularity_pull
            return
            ;;

          push) _singularity_push
            return
            ;;

          remote) _singularity_remote
            return
            ;;

          run) _singularity_run
            return
            ;;

          run-help) _singularity_run-help
            return
            ;;

          search) _singularity_search
            return
            ;;

          shell) _singularity_shell
            return
            ;;

          sif) _singularity_sif
            return
            ;;

          sign) _singularity_sign
            return
            ;;

          test) _singularity_test
            return
            ;;

          verify) _singularity_verify
            return
            ;;

          version) _singularity_version
            return
            ;;

      *)
          word_list=" build cache capability config delete exec help inspect instance key oci overlay plugin pull push remote run run-help search shell sif sign test verify version -c --config -d --debug -h --help --nocolor -q --quiet -s --silent -v --verbose --version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_singularity_build ()
{
    local cur word_list
    word_list=" --arch -B --bind --builder -d --detached --disable-cache --docker-login -e --encrypt -f --fakeroot --fix-perms -F --force -h --help --json --library --no-cleanup --nohttps -T --notest --nv --passphrase --pem-path -r --remote --rocm -s --sandbox --section -u --update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_cache ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_capability ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_config ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_delete ()
{
    local cur word_list
    word_list=" -A --arch -F --force -h --help --library" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_exec ()
{
    local cur word_list
    word_list=" --add-caps --allow-setuid --app --apply-cgroups -B --bind -e --cleanenv -c --contain -C --containall --disable-cache --dns --docker-login --drop-caps --env --env-file -f --fakeroot --fusemount -h --help -H --home --hostname -i --ipc --keep-privs -n --net --network --network-args --no-home --no-init --no-mount --no-privs --no-umask --nohttps --nonet --nv -o --overlay --passphrase --pem-path -p --pid --pwd --rocm -S --scratch --security -u --userns --uts --vm --vm-cpu --vm-err --vm-ip --vm-ram -W --workdir -w --writable --writable-tmpfs" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_help ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_inspect ()
{
    local cur word_list
    word_list=" --all --app -d --deffile -e --environment -h --help -H --helpfile -j --json -l --labels --list-apps -r --runscript -s --startscript -t --test" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_instance ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_key ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_oci ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_overlay ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_plugin ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_pull ()
{
    local cur word_list
    word_list=" --arch --dir --disable-cache --docker-login -F --force -h --help --library --no-cleanup --nohttps" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_push ()
{
    local cur word_list
    word_list=" -U --allow-unsigned -D --description -h --help --library" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_remote ()
{
    local cur word_list
    word_list=" -c --config -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_run ()
{
    local cur word_list
    word_list=" --add-caps --allow-setuid --app --apply-cgroups -B --bind -e --cleanenv -c --contain -C --containall --disable-cache --dns --docker-login --drop-caps --env --env-file -f --fakeroot --fusemount -h --help -H --home --hostname -i --ipc --keep-privs -n --net --network --network-args --no-home --no-init --no-mount --no-privs --no-umask --nohttps --nonet --nv -o --overlay --passphrase --pem-path -p --pid --pwd --rocm -S --scratch --security -u --userns --uts --vm --vm-cpu --vm-err --vm-ip --vm-ram -W --workdir -w --writable --writable-tmpfs" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_run-help ()
{
    local cur word_list
    word_list=" --app -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_search ()
{
    local cur word_list
    word_list=" --arch -h --help --library --signed" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_shell ()
{
    local cur word_list
    word_list=" --add-caps --allow-setuid --app --apply-cgroups -B --bind -e --cleanenv -c --contain -C --containall --disable-cache --dns --docker-login --drop-caps --env --env-file -f --fakeroot --fusemount -h --help -H --home --hostname -i --ipc --keep-privs -n --net --network --network-args --no-home --no-init --no-mount --no-privs --no-umask --nohttps --nonet --nv -o --overlay --passphrase --pem-path -p --pid --pwd --rocm -S --scratch --security -s --shell --syos -u --userns --uts --vm --vm-cpu --vm-err --vm-ip --vm-ram -W --workdir -w --writable --writable-tmpfs" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_sif ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_sign ()
{
    local cur word_list
    word_list=" -g --group-id -h --help -k --keyidx -i --sif-id" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_test ()
{
    local cur word_list
    word_list=" --add-caps --allow-setuid --app --apply-cgroups -B --bind -e --cleanenv -c --contain -C --containall --disable-cache --dns --docker-login --drop-caps --env --env-file -f --fakeroot --fusemount -h --help -H --home --hostname -i --ipc --keep-privs -n --net --network --network-args --no-home --no-init --no-mount --no-privs --no-umask --nohttps --nonet --nv -o --overlay --passphrase --pem-path -p --pid --pwd --rocm -S --scratch --security -u --userns --uts --vm --vm-cpu --vm-err --vm-ip --vm-ram -W --workdir -w --writable --writable-tmpfs" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_verify ()
{
    local cur word_list
    word_list=" -a --all -g --group-id -h --help -j --json --legacy-insecure -l --local -i --sif-id -u --url" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_singularity_version ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _singularity singularity
