{"name":"bowtie2","description":"bowtie2","options":[{"names":["-x"],"argument":"<bt2-idx-file-prefix>","description":"Index filename prefix (minus trailing .X.bt2)."},{"names":["-1"],"argument":"<m1-files>","description":"Files with #1 mates, paired with files in <m2>."},{"names":["-2"],"argument":"<m2-files>","description":"Files with #2 mates, paired with files in <m1>."},{"names":["-U"],"argument":"<files>","description":"Files with unpaired reads."},{"names":["--interleaved"],"argument":"<files>","description":"Files with interleaved paired-end FASTQ/FASTA reads."},{"names":["-b"],"argument":"<bam-files>","description":"Files are unaligned BAM sorted by read name."},{"names":["-S"],"argument":"<sam-file>","description":"File for SAM output (default: stdout)."},{"names":["-q"],"argument":"","description":"query input files are FASTQ .fq/.fastq (default)"},{"names":["--tab5"],"argument":"","description":"query input files are TAB5 .tab5"},{"names":["--tab6"],"argument":"","description":"query input files are TAB6 .tab6"},{"names":["--qseq"],"argument":"","description":"query input files are in Illumina's qseq format"},{"names":["-f"],"argument":"","description":"query input files are (multi-)FASTA .fa/.mfa"},{"names":["-r"],"argument":"","description":"query input files are raw one-sequence-per-line"},{"names":["-F"],"argument":"k:<int>,i:<int>","description":"query input files are continuous FASTA where reads are substrings (k-mers) extracted from a FASTA file <s> and aligned at offsets 1, 1+i, 1+2i ... end of reference"},{"names":["-c"],"argument":"","description":"<m1>, <m2>, <r> are sequences themselves, not files"},{"names":["-s","--skip"],"argument":"<int>","description":"skip the first <int> reads/pairs in the input (none)"},{"names":["-u","--upto"],"argument":"<int>","description":"stop after first <int> reads/pairs (no limit)"},{"names":["-5","--trim5"],"argument":"<int>","description":"trim <int> bases from 5'/left end of reads (0)"},{"names":["-3","--trim3"],"argument":"<int>","description":"trim <int> bases from 3'/right end of reads (0)"},{"names":["--trim-to"],"argument":"[3:|5:]<int>","description":"trim reads exceeding <int> bases from either 3' or 5' end   If the read end is not specified then it defaults to 3 (0)"},{"names":["--phred33"],"argument":"","description":"qualities are Phred+33 (default)"},{"names":["--phred64"],"argument":"","description":"qualities are Phred+64"},{"names":["--int-quals"],"argument":"","description":"qualities encoded as space-delimited integers"},{"names":["-N"],"argument":"<int>","description":"max # mismatches in seed alignment; can be 0 or 1 (0)"},{"names":["-L"],"argument":"<int>","description":"length of seed substrings; must be >3, <32 (22)"},{"names":["-i"],"argument":"<func>","description":"interval between seed substrings w/r/t read len (S,1,1.15)"},{"names":["--n-ceil"],"argument":"<func>","description":"func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)"},{"names":["--dpad"],"argument":"<int>","description":"include <int> extra ref chars on sides of DP table (15)"},{"names":["--gbar"],"argument":"<int>","description":"disallow gaps within <int> nucs of read extremes (4)"},{"names":["--ignore-quals"],"argument":"","description":"treat all quality values as 30 on Phred scale (off)"},{"names":["--nofw"],"argument":"","description":"do not align forward (original) version of read (off)"},{"names":["--norc"],"argument":"","description":"do not align reverse-complement version of read (off)"},{"names":["--no-1mm-upfront"],"argument":"","description":"do not allow 1 mismatch alignments before attempting to scan for the optimal seeded alignments"},{"names":["--end-to-end"],"argument":"","description":"entire read must align; no clipping (on)"},{"names":["--local"],"argument":"","description":"local alignment; ends might be soft clipped (off)"},{"names":["--ma"],"argument":"<int>","description":"match bonus (0 for --end-to-end, 2 for --local)"},{"names":["--mp"],"argument":"<int>","description":"max penalty for mismatch; lower qual = lower penalty (6)"},{"names":["--np"],"argument":"<int>","description":"penalty for non-A/C/G/Ts in read/ref (1)"},{"names":["--rdg"],"argument":"<int>,<int>","description":"read gap open, extend penalties (5,3)"},{"names":["--rfg"],"argument":"<int>,<int>","description":"reference gap open, extend penalties (5,3)"},{"names":["--score-min"],"argument":"<func>","description":"min acceptable alignment score w/r/t read length (G,20,8 for local, L,-0.6,-0.6 for end-to-end)"},{"names":["-k"],"argument":"<int>","description":"report up to <int> alns per read; MAPQ not meaningful"},{"names":["-a","--all"],"argument":"","description":"report all alignments; very slow, MAPQ not meaningful"},{"names":["-D"],"argument":"<int>","description":"give up extending after <int> failed extends in a row (15)"},{"names":["-R"],"argument":"<int>","description":"for reads w/ repetitive seeds, try <int> sets of seeds (2)"},{"names":["-I","--minins"],"argument":"<int>","description":"minimum fragment length (0)"},{"names":["-X","--maxins"],"argument":"<int>","description":"maximum fragment length (500)"},{"names":["--fr","--rf","--ff"],"argument":"","description":"-1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)"},{"names":["--no-mixed"],"argument":"","description":"suppress unpaired alignments for paired reads"},{"names":["--no-discordant"],"argument":"","description":"suppress discordant alignments for paired reads"},{"names":["--dovetail"],"argument":"","description":"concordant when mates extend past each other"},{"names":["--no-contain"],"argument":"","description":"not concordant when one mate alignment contains other"},{"names":["--no-overlap"],"argument":"","description":"not concordant when mates overlap at all"},{"names":["--align-paired-reads"],"argument":"","description":"Bowtie2 will, by default, attempt to align unpaired BAM reads. Use this option to align paired-end reads instead."},{"names":["--preserve-tags"],"argument":"","description":"Preserve tags from the original BAM record by appending them to the end of the corresponding SAM output."},{"names":["-t","--time"],"argument":"","description":"print wall-clock time taken by search phases"},{"names":["--un"],"argument":"<path>","description":"write unpaired reads that didn't align to <path>"},{"names":["--al"],"argument":"<path>","description":"write unpaired reads that aligned at least once to <path>"},{"names":["--un-conc"],"argument":"<path>","description":"write pairs that didn't align concordantly to <path>"},{"names":["--al-conc"],"argument":"<path>","description":"write pairs that aligned concordantly at least once to <path>"},{"names":["--quiet"],"argument":"","description":"print nothing to stderr except serious errors"},{"names":["--met-file"],"argument":"<path>","description":"send metrics to file at <path> (off)"},{"names":["--met-stderr"],"argument":"","description":"send metrics to stderr (off)"},{"names":["--met"],"argument":"<int>","description":"report internal counters & metrics every <int> secs (1)"},{"names":["--no-unal"],"argument":"","description":"suppress SAM records for unaligned reads"},{"names":["--no-head"],"argument":"","description":"suppress header lines, i.e. lines starting with @"},{"names":["--no-sq"],"argument":"","description":"suppress @SQ header lines"},{"names":["--rg-id"],"argument":"<text>","description":"set read group id, reflected in @RG line and RG:Z: opt field"},{"names":["--rg"],"argument":"<text>","description":"add <text> (\"lab:value\") to @RG line of SAM header. Note: @RG line only printed when --rg-id is set."},{"names":["--omit-sec-seq"],"argument":"","description":"put '*' in SEQ and QUAL fields for secondary alignments."},{"names":["--sam-no-qname-trunc"],"argument":"","description":"Suppress standard behavior of truncating readname at first whitespace at the expense of generating non-standard SAM."},{"names":["--xeq"],"argument":"","description":"Use '='/'X', instead of 'M,' to specify matches/mismatches in SAM record."},{"names":["--soft-clipped-unmapped-tlen"],"argument":"","description":"Exclude soft-clipped bases when reporting TLEN"},{"names":["--sam-append-comment"],"argument":"","description":"Append FASTA/FASTQ comment to SAM record"},{"names":["-p","--threads"],"argument":"<int>","description":"number of alignment threads to launch (1)"},{"names":["--reorder"],"argument":"","description":"force SAM output order to match order of input reads"},{"names":["--mm"],"argument":"","description":"use memory-mapped I/O for index; many 'bowtie's can share"},{"names":["--qc-filter"],"argument":"","description":"filter out reads that are bad according to QSEQ filter"},{"names":["--seed"],"argument":"<int>","description":"seed for random number generator (0)"},{"names":["--non-deterministic"],"argument":"","description":"seed rand. gen. arbitrarily instead of using read attributes"},{"names":["--version"],"argument":"","description":"print version information and quit"},{"names":["-h","--help"],"argument":"","description":"print this usage message"}],"usage":"bowtie2 [options]* -x <bt2-idx> {-1 <m1> -2 <m2> | -U <r> | --interleaved <i> | -b <bam>} [-S <sam>]","version":"version 2.4.5","tldr":"> A fast and sensitive gapped read aligner\n> More information: <https://github.com/BenLangmead/bowtie2>\n\n- Align unpaired reads\n\n`bowtie2 -x {{example/index/lambda_virus}} -U {{example/reads/longreads.fq}}`\n\n- Align paired reads\n\n`bowtie2 -x {{example/index/lambda_virus}} -1 {{example/reads/reads_1.fq}} -2 {{example/reads/reads_2.fq}}`\n"}
