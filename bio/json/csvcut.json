{"name":"csvcut","description":"csvcut","options":[{"names":["-h","--help"],"argument":"","description":"show this help message and exit"},{"names":["-d","--delimiter"],"argument":"DELIMITER","description":"Delimiting character of the input CSV file."},{"names":["-t","--tabs"],"argument":"","description":"Specify that the input CSV file is delimited with tabs. Overrides \"-d\"."},{"names":["-q","--quotechar"],"argument":"QUOTECHAR","description":"Character used to quote strings in the input CSV file."},{"names":["-u","--quoting"],"argument":"{0,1,2,3}","description":"Quoting style used in the input CSV file. 0 = Quote Minimal, 1 = Quote All, 2 = Quote Non-numeric, 3 = Quote None."},{"names":["-b","--no-doublequote"],"argument":"","description":"Whether or not double quotes are doubled in the input CSV file."},{"names":["-p","--escapechar"],"argument":"ESCAPECHAR","description":"Character used to escape the delimiter if --quoting 3 (\"Quote None\") is specified and to escape the QUOTECHAR if --no-doublequote is specified."},{"names":["-z","--maxfieldsize"],"argument":"FIELD_SIZE_LIMIT","description":"Maximum length of a single field in the input CSV file."},{"names":["-e","--encoding"],"argument":"ENCODING","description":"Specify the encoding of the input CSV file."},{"names":["-S","--skipinitialspace"],"argument":"","description":"Ignore whitespace immediately following the delimiter."},{"names":["-H","--no-header-row"],"argument":"","description":"Specify that the input CSV file has no header row. Will create default headers (a,b,c,...)."},{"names":["-K","--skip-lines"],"argument":"SKIP_LINES","description":"Specify the number of initial lines to skip before the header row (e.g. comments, copyright notices, empty rows)."},{"names":["-v","--verbose"],"argument":"","description":"Print detailed tracebacks when errors occur."},{"names":["-l","--linenumbers"],"argument":"","description":"Insert a column of line numbers at the front of the output. Useful when piping to grep or as a simple primary key."},{"names":["--zero"],"argument":"","description":"When interpreting or displaying column numbers, use zero-based numbering instead of the default 1-based numbering."},{"names":["-V","--version"],"argument":"","description":"Display version information and exit."},{"names":["-n","--names"],"argument":"","description":"Display column names and indices from the input CSV and exit."},{"names":["-c","--columns"],"argument":"COLUMNS","description":"A comma-separated list of column indices, names or ranges to be extracted, e.g. \"1,id,3-5\". Defaults to all columns."},{"names":["-C","--not-columns"],"argument":"NOT_COLUMNS","description":"A comma-separated list of column indices, names or ranges to be excluded, e.g. \"1,id,3-5\". Defaults to no columns."},{"names":["-x","--delete-empty-rows"],"argument":"","description":"After cutting, delete rows which are completely empty."}],"version":"csvcut 1.0.7","tldr":"> Filter and truncate CSV files. Like Unix's `cut` command, but for tabular data.\n> Included in csvkit.\n> More information: <https://csvkit.readthedocs.io/en/latest/scripts/csvcut.html>.\n\n- Print indices and names of all columns:\n\n`csvcut -n {{data.csv}}`\n\n- Extract the first and third columns:\n\n`csvcut -c {{1,3}} {{data.csv}}`\n\n- Extract all columns **except** the fourth one:\n\n`csvcut -C {{4}} {{data.csv}}`\n\n- Extract the columns named \"id\" and \"first name\" (in that order):\n\n`csvcut -c {{id,\"first name\"}} {{data.csv}}`\n"}
