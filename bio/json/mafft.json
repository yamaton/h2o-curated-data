{"name":"mafft","description":"mafft","options":[{"names":["--auto"],"argument":"","description":"Automatically selects an appropriate strategy from L-INS-i, FFT-NS-i and FFT-NS-2, according to data size. Default: off (always FFT-NS-2)"},{"names":["--6merpair"],"argument":"","description":"Distance is calculated based on the number of shared 6mers. Default: on"},{"names":["--globalpair"],"argument":"","description":"All pairwise alignments are computed with the Needleman-Wunsch algorithm. More accurate but slower than --6merpair. Suitable for a set of globally alignable sequences. Applicable to up to ~200 sequences. A combination with --maxiterate 1000 is recommended (G-INS-i). Default: off (6mer distance is used)"},{"names":["--localpair"],"argument":"","description":"All pairwise alignments are computed with the Smith-Waterman algorithm. More accurate but slower than --6merpair. Suitable for a set of locally alignable sequences. Applicable to up to ~200 sequences. A combination with --maxiterate 1000 is recommended (L-INS-i). Default: off (6mer distance is used)"},{"names":["--genafpair"],"argument":"","description":"All pairwise alignments are computed with a local algorithm with the generalized affine gap cost (Altschul 1998). More accurate but slower than --6merpair. Suitable when large internal gaps are expected. Applicable to up to ~200 sequences. A combination with --maxiterate 1000 is recommended (E-INS-i). Default: off (6mer distance is used)"},{"names":["--fastapair"],"argument":"","description":"All pairwise alignments are computed with FASTA (Pearson and Lipman 1988). FASTA is required. Default: off (6mer distance is used)"},{"names":["--weighti"],"argument":"number","description":"Weighting factor for the consistency term calculated from pairwise alignments. Valid when either of --globalpair, --localpair, --genafpair, --fastapair or --blastpair is selected. Default: 2.7"},{"names":["--retree"],"argument":"number","description":"Guide tree is built number times in the progressive stage. Valid with 6mer distance. Default: 2"},{"names":["--maxiterate"],"argument":"number","description":"number cycles of iterative refinement are performed. Default: 0"},{"names":["--fft"],"argument":"","description":"Use FFT approximation in group-to-group alignment. Default: on"},{"names":["--nofft"],"argument":"","description":"Do not use FFT approximation in group-to-group alignment. Default: off"},{"names":["--noscore"],"argument":"","description":"Alignment score is not checked in the iterative refinement stage. Default: off (score is checked)"},{"names":["--memsave"],"argument":"","description":"Use the Myers-Miller (1988) algorithm. Default: automatically turned on when the alignment length exceeds 10,000 (aa/nt)."},{"names":["--parttree"],"argument":"","description":"Use a fast tree-building method (PartTree, Katoh and Toh 2007) with the 6mer distance. Recommended for a large number (> ~10,000) of sequences are input. Default: off"},{"names":["--dpparttree"],"argument":"","description":"The PartTree algorithm is used with distances based on DP. Slightly more accurate and slower than --parttree. Recommended for a large number (> ~10,000) of sequences are input. Default: off"},{"names":["--fastaparttree"],"argument":"","description":"The PartTree algorithm is used with distances based on FASTA. Slightly more accurate and slower than --parttree. Recommended for a large number (> ~10,000) of sequences are input. FASTA is required. Default: off"},{"names":["--partsize"],"argument":"number","description":"The number of partitions in the PartTree algorithm. Default: 50"},{"names":["--groupsize"],"argument":"number","description":"Do not make alignment larger than number sequences. Valid only with the --*parttree options. Default: the number of input sequences"},{"names":["--op"],"argument":"number","description":"Gap opening penalty at group-to-group alignment. Default: 1.53"},{"names":["--ep"],"argument":"number","description":"Offset value, which works like gap extension penalty, for group-to-group alignment. Default: 0.123"},{"names":["--lop"],"argument":"number","description":"Gap opening penalty at local pairwise alignment. Valid when the --localpair or --genafpair option is selected. Default: -2.00"},{"names":["--lep"],"argument":"number","description":"Offset value at local pairwise alignment. Valid when the --localpair or --genafpair option is selected. Default: 0.1"},{"names":["--lexp"],"argument":"number","description":"Gap extension penalty at local pairwise alignment. Valid when the --localpair or --genafpair option is selected. Default: -0.1"},{"names":["--LOP"],"argument":"number","description":"Gap opening penalty to skip the alignment. Valid when the --genafpair option is selected. Default: -6.00"},{"names":["--LEXP"],"argument":"number","description":"Gap extension penalty to skip the alignment. Valid when the --genafpair option is selected. Default: 0.00"},{"names":["--bl"],"argument":"number","description":"BLOSUM number matrix (Henikoff and Henikoff 1992) is used. number=30, 45, 62 or 80. Default: 62"},{"names":["--jtt"],"argument":"number","description":"JTT PAM number (Jones et al. 1992) matrix is used. number>0. Default: BLOSUM62"},{"names":["--tm"],"argument":"number","description":"Transmembrane PAM number (Jones et al. 1994) matrix is used. number>0. Default: BLOSUM62"},{"names":["--aamatrix"],"argument":"matrixfile","description":"Use a user-defined AA scoring matrix. The format of matrixfile is the same to that of BLAST. Ignored when nucleotide sequences are input. Default: BLOSUM62"},{"names":["--fmodel"],"argument":"","description":"Incorporate the AA/nuc composition information into the scoring matrix. Default: off"},{"names":["--clustalout"],"argument":"","description":"Output format: clustal format. Default: off (fasta format)"},{"names":["--inputorder"],"argument":"","description":"Output order: same as input. Default: on"},{"names":["--reorder"],"argument":"","description":"Output order: aligned. Default: off (inputorder)"},{"names":["--treeout"],"argument":"","description":"Guide tree is output to the input.tree file. Default: off"},{"names":["--quiet"],"argument":"","description":"Do not report progress. Default: off"},{"names":["--nuc"],"argument":"","description":"Assume the sequences are nucleotide. Default: auto"},{"names":["--amino"],"argument":"","description":"Assume the sequences are amino acid. Default: auto"},{"names":["--seed"],"argument":"alignment1 [--seed alignment2 --seed alignment3 ...]","description":"Seed alignments given in alignment_n (fasta format) are aligned with sequences in input. The alignment within every seed is preserved."},{"names":["--thread"],"argument":"#","description":"Number of threads (if unsure, --thread -1)"},{"names":["--dash"],"argument":"","description":"Add structural information (Rozewicki et al, submitted)"}],"version":"v7.505 (2022/Apr/10)","tldr":"> Multiple alignment program for amino acid or nucleotide sequences\n> More information: <https://mafft.cbrc.jp/alignment/software/>.\n\n- Align sequences without specifying options\n\n`mafft --auto {{in.fa}} > {{out.fa}}`\n"}
