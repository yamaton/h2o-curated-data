{"name":"mmseqs","description":"mmseqs","options":[],"subcommands":[{"name":"easy-search","description":"Sensitive homology search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [5.700]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--format-mode"],"argument":"INT","description":"Output format: 0: BLAST-TAB, 1: SAM, 2: BLAST-TAB + query/db length, 3: Pretty HTML [0]"},{"names":["--format-output"],"argument":"STR","description":"Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,qframe,tframe,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineage,qorfstart,qorfend,torfstart,torfend [query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits]"},{"names":["--overlap"],"argument":"FLOAT","description":"Maximum overlap of covered regions [0.000]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]"},{"names":["--greedy-best-hits"],"argument":"BOOL","description":"Choose the best hits greedily to cover the query [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [0]"}]},{"name":"easy-linsearch","description":"Fast, less sensitive homology search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--pick-n-sim-kmer"],"argument":"INT","description":"Add N similar k-mers to search [1]"},{"names":["--result-direction"],"argument":"INT","description":"result is 0: query, 1: target centric [1]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--format-mode"],"argument":"INT","description":"Output format: 0: BLAST-TAB, 1: SAM, 2: BLAST-TAB + query/db length, 3: Pretty HTML [0]"},{"names":["--format-output"],"argument":"STR","description":"Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,qframe,tframe,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineage,qorfstart,qorfend,torfstart,torfend [query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"}]},{"name":"easy-cluster","description":"Slower, sensitive clustering","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [20]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--single-step-clustering"],"argument":"BOOL","description":"Switch from cascaded to simple clustering workflow [0]"},{"names":["--cluster-steps"],"argument":"INT","description":"Cascaded clustering steps from 1 to -s [3]"},{"names":["--cluster-reassign"],"argument":"BOOL","description":"Cascaded clustering can cluster sequence that do not fulfill the clustering criteria. Cluster reassignment corrects these errors [0]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [1]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [0]"}]},{"name":"easy-linclust","description":"Fast linear time cluster, less sensitive clustering","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [1]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [0]"}]},{"name":"easy-taxonomy","description":"Taxonomic classification","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--orf-filter"],"argument":"INT","description":"Prefilter query ORFs with non-selective search Only used during nucleotide-vs-protein classification NOTE: Consider disabling when classifying short reads [0]"},{"names":["--orf-filter-e"],"argument":"DOUBLE","description":"E-value threshold used for query ORF prefiltering [1.000E+02]"},{"names":["--orf-filter-s"],"argument":"FLOAT","description":"Sensitivity used for query ORF prefiltering [2.000]"},{"names":["--lca-mode"],"argument":"INT","description":"LCA Mode 1: single search LCA , 2/3: approximate 2bLCA, 4: top hit [3]"},{"names":["--majority"],"argument":"FLOAT","description":"minimal fraction of agreement among taxonomically assigned sequences of a set [0.500]"},{"names":["--vote-mode"],"argument":"INT","description":"Mode of assigning weights to compute majority. 0: uniform, 1: minus log E-value, 2: score [1]"},{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--blacklist"],"argument":"STR","description":"Comma separated list of ignored taxa in LCA computation [12908:unclassified sequences,28384:other sequences]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--report-mode"],"argument":"INT","description":"Taxonomy report mode 0: Kraken 1: Krona [0]"},{"names":["--format-mode"],"argument":"INT","description":"Output format: 0: BLAST-TAB, 1: SAM, 2: BLAST-TAB + query/db length, 3: Pretty HTML [0]"},{"names":["--format-output"],"argument":"STR","description":"Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,qframe,tframe,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineage,qorfstart,qorfend,torfstart,torfend [query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits]"},{"names":["--first-seq-as-repr"],"argument":"BOOL","description":"Use the first sequence of the clustering result as representative sequence [0]"},{"names":["--target-column"],"argument":"INT","description":"Select a target column (default 1), 0 if no target id exists [1]"},{"names":["--full-header"],"argument":"BOOL","description":"Replace DB ID by its corresponding Full Header [0]"},{"names":["--idx-seq-src"],"argument":"INT","description":"0: auto, 1: split/translated sequences, 2: input sequences [0]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [1]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [0]"}]},{"name":"easy-rbh","description":"Find reciprocal best hit","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [5.700]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--format-mode"],"argument":"INT","description":"Output format: 0: BLAST-TAB, 1: SAM, 2: BLAST-TAB + query/db length, 3: Pretty HTML [0]"},{"names":["--format-output"],"argument":"STR","description":"Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,qframe,tframe,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineage,qorfstart,qorfend,torfstart,torfend [query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits]"},{"names":["--overlap"],"argument":"FLOAT","description":"Maximum overlap of covered regions [0.000]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [1]"},{"names":["--greedy-best-hits"],"argument":"BOOL","description":"Choose the best hits greedily to cover the query [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [1]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [0]"}]},{"name":"search","description":"Sensitive homology search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [5.700]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [2]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-01]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"linsearch","description":"Fast, less sensitive homology search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [2]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--pick-n-sim-kmer"],"argument":"INT","description":"Add N similar k-mers to search [1]"},{"names":["--result-direction"],"argument":"INT","description":"result is 0: query, 1: target centric [1]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"}]},{"name":"map","description":"Map nearly identical sequences","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [2.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.950]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [2]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.900]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [2]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [10]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [1]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"rbh","description":"Reciprocal best hit search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [0]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [10]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"linclust","description":"Fast, less sensitive clustering","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [2]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.900]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"}]},{"name":"cluster","description":"Slower, sensitive clustering","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [20]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--single-step-clustering"],"argument":"BOOL","description":"Switch from cascaded to simple clustering workflow [0]"},{"names":["--cluster-steps"],"argument":"INT","description":"Cascaded clustering steps from 1 to -s [3]"},{"names":["--cluster-reassign"],"argument":"BOOL","description":"Cascaded clustering can cluster sequence that do not fulfill the clustering criteria. Cluster reassignment corrects these errors [0]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"}]},{"name":"clusterupdate","description":"Update previous clustering with new sequences","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [3]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--single-step-clustering"],"argument":"BOOL","description":"Switch from cascaded to simple clustering workflow [0]"},{"names":["--cluster-steps"],"argument":"INT","description":"Cascaded clustering steps from 1 to -s [3]"},{"names":["--cluster-reassign"],"argument":"BOOL","description":"Cascaded clustering can cluster sequence that do not fulfill the clustering criteria. Cluster reassignment corrects these errors [0]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--use-seq-id"],"argument":"BOOL","description":"Sequence ID (Uniprot, GenBank, ...) is used for identifying matches between the old and the new DB [0]"},{"names":["--recover-deleted"],"argument":"BOOL","description":"Find and recover deleted sequences during updating of clustering [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"taxonomy","description":"Taxonomic classification","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [2.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [1]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E+00]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [5]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [30]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--orf-filter"],"argument":"INT","description":"Prefilter query ORFs with non-selective search Only used during nucleotide-vs-protein classification NOTE: Consider disabling when classifying short reads [1]"},{"names":["--orf-filter-e"],"argument":"DOUBLE","description":"E-value threshold used for query ORF prefiltering [1.000E+02]"},{"names":["--orf-filter-s"],"argument":"FLOAT","description":"Sensitivity used for query ORF prefiltering [2.000]"},{"names":["--lca-mode"],"argument":"INT","description":"LCA Mode 1: single search LCA , 2/3: approximate 2bLCA, 4: top hit [3]"},{"names":["--tax-output-mode"],"argument":"INT","description":"0: output LCA, 1: output alignment 2: output both [0]"},{"names":["--majority"],"argument":"FLOAT","description":"minimal fraction of agreement among taxonomically assigned sequences of a set [0.500]"},{"names":["--vote-mode"],"argument":"INT","description":"Mode of assigning weights to compute majority. 0: uniform, 1: minus log E-value, 2: score [1]"},{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--blacklist"],"argument":"STR","description":"Comma separated list of ignored taxa in LCA computation [12908:unclassified sequences,28384:other sequences]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"databases","description":"List and download databases","options":[{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"createdb","description":"Convert FASTA/Q file(s) to a sequence DB","options":[{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [1]"}]},{"name":"createindex","description":"Store precomputed index on disk to reduce search overhead","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [7.500]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [0]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--check-compatible"],"argument":"INT","description":"0: Always recreate index, 1: Check if recreating index is needed, 2: Fail if index is incompatible [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"createlinindex","description":"Create linsearch index","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [21]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--check-compatible"],"argument":"INT","description":"0: Always recreate index, 1: Check if recreating index is needed, 2: Fail if index is incompatible [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"convertmsa","description":"Convert Stockholm/PFAM MSA file to a MSA DB","options":[{"names":["--identifier-field"],"argument":"INT","description":"Field from STOCKHOLM comments for choosing the MSA identifier: 0: ID, 1: AC. If the respective comment does not exist, the name of the first sequence will become the identifier [1]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"tsv2db","description":"Convert a TSV file to any DB","options":[{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--output-dbtype"],"argument":"INT","description":"Set database type for resulting database: Amino acid sequences 0, Nucl. seq. 1, Profiles 2, Alignment result 5, Clustering result 6, Prefiltering result 7, Taxonomy result 8, Indexed database 9, cA3M MSAs 10, FASTA or A3M MSAs 11, Generic database 12, Omit dbtype file 13, Bi-directional prefiltering result 14, Offsetted headers 15 [12]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"tar2db","description":"Convert content of tar archives to any DB","options":[{"names":["--output-dbtype"],"argument":"INT","description":"Set database type for resulting database: Amino acid sequences 0, Nucl. seq. 1, Profiles 2, Alignment result 5, Clustering result 6, Prefiltering result 7, Taxonomy result 8, Indexed database 9, cA3M MSAs 10, FASTA or A3M MSAs 11, Generic database 12, Omit dbtype file 13, Bi-directional prefiltering result 14, Offsetted headers 15 [12]"},{"names":["--tar-include"],"argument":"STR","description":"Include file names based on this regex [.*]"},{"names":["--tar-exclude"],"argument":"STR","description":"Exclude file names based on this regex [^$]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"msa2profile","description":"Convert a MSA DB to a profile DB","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--match-mode"],"argument":"INT","description":"0: Columns that have a residue in the first sequence are kept, 1: columns that have a residue in --match-ratio of all sequences are kept [0]"},{"names":["--match-ratio"],"argument":"FLOAT","description":"Columns that have a residue in this ratio of all sequences are kept [0.500]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [0.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--msa-type"],"argument":"INT","description":"MSA Type: 0: cA3M, 1: A3M, 2: FASTA [2]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--skip-query"],"argument":"BOOL","description":"Skip the query sequence [0]"}]},{"name":"compress","description":"Compress DB entries","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"decompress","description":"Decompress DB entries","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"rmdb","description":"Remove a DB","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"mvdb","description":"Move a DB","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"cpdb","description":"Copy a DB","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"lndb","description":"Symlink a DB","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"unpackdb","description":"Unpack a DB into separate files","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"touchdb","description":"Preload DB into memory (page cache)","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"createsubdb","description":"Create a subset of a DB from list of DB keys","options":[{"names":["--subdb-mode"],"argument":"INT","description":"Subdb mode 0: copy data 1: soft link data and write index [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"concatdbs","description":"Concatenate two DBs, giving new IDs to entries from 2nd DB","options":[{"names":["--preserve-keys"],"argument":"BOOL","description":"The keys of the two DB should be distinct, and they will be preserved in the concatenation [0]"},{"names":["--take-larger-entry"],"argument":"BOOL","description":"Only keep the larger entry (dataSize >) in the concatenation, both databases need the same keys in the index [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [1]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"splitdb","description":"Split DB into subsets","options":[{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--split-aa"],"argument":"BOOL","description":"Try to find the best split boundaries by entry lengths [0]"}]},{"name":"mergedbs","description":"Merge entries from multiple DBs","options":[{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--prefixes"],"argument":"STR","description":"Comma separated list of prefixes for each entry []"},{"names":["--merge-stop-empty"],"argument":"BOOL","description":"Don't continue merging entries after an empty entry [0]"}]},{"name":"subtractdbs","description":"Remove all entries from first DB occurring in second DB by key","options":[{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"convertalis","description":"Convert alignment DB to BLAST-tab, SAM or custom format","options":[{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--format-mode"],"argument":"INT","description":"Output format: 0: BLAST-TAB, 1: SAM, 2: BLAST-TAB + query/db length, 3: Pretty HTML [0]"},{"names":["--format-output"],"argument":"STR","description":"Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"}]},{"name":"createtsv","description":"Convert result DB to tab-separated flat file","options":[{"names":["--first-seq-as-repr"],"argument":"BOOL","description":"Use the first sequence of the clustering result as representative sequence [0]"},{"names":["--target-column"],"argument":"INT","description":"Select a target column (default 1), 0 if no target id exists [1]"},{"names":["--full-header"],"argument":"BOOL","description":"Replace DB ID by its corresponding Full Header [0]"},{"names":["--idx-seq-src"],"argument":"INT","description":"0: auto, 1: split/translated sequences, 2: input sequences [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"}]},{"name":"convert2fasta","description":"Convert sequence DB to FASTA format","options":[{"names":["--use-header-file"],"argument":"BOOL","description":"use the sequence header DB instead of the body to map the entry keys [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"result2flat","description":"Create flat file by adding FASTA headers to DB entries","options":[{"names":["--use-fasta-header"],"argument":"BOOL","description":"Use the id parsed from the fasta header as the index key instead of using incrementing numeric identifiers [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"createseqfiledb","description":"Create a DB of unaligned FASTA entries","options":[{"names":["--min-sequences"],"argument":"INT","description":"Minimum number of sequences a cluster may contain [1]"},{"names":["--max-sequences"],"argument":"INT","description":"Maximum number of sequences a cluster may contain [2147483647]"},{"names":["--hh-format"],"argument":"BOOL","description":"Format entries to use with hhsuite (for singleton clusters) [0]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"taxonomyreport","description":"Create a taxonomy report in Kraken or Krona format","options":[{"names":["--report-mode"],"argument":"INT","description":"Taxonomy report mode 0: Kraken 1: Krona [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"extractorfs","description":"Six-frame extraction of open reading frames","options":[{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"extractframes","description":"Extract frames from a nucleotide sequence DB","options":[{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"orftocontig","description":"Write ORF locations in alignment format","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"reverseseq","description":"Reverse (without complement) sequences","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"translatenucs","description":"Translate nucleotides to proteins","options":[{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"}]},{"name":"translateaa","description":"Translate proteins to lexicographically lowest codons","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"splitsequence","description":"Split sequences by length","options":[{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [300]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [10000]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"masksequence","description":"Soft mask sequence DB using tantan","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"extractalignedregion","description":"Extract aligned sequence region from query","options":[{"names":["--extract-mode"],"argument":"INT","description":"Extract from 1: Query, 2: Target [2]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"swapresults","description":"Transpose prefilter/alignment DB","options":[{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"result2rbh","description":"Filter a merged result DB to retain only reciprocal best hits","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"result2msa","description":"Compute MSA DB from a result DB","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [0]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--msa-format-mode"],"argument":"INT","description":"Format MSA as: 0: binary cA3M DB 1: binary ca3m w. consensus DB 2: aligned FASTA DB 3: aligned FASTA w. header summary 4: STOCKHOLM flat file [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--summary-prefix"],"argument":"STR","description":"Set the cluster summary prefix [cl]"},{"names":["--skip-query"],"argument":"BOOL","description":"Skip the query sequence [0]"}]},{"name":"result2dnamsa","description":"Compute MSA DB with out insertions in the query for DNA sequences","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--skip-query"],"argument":"BOOL","description":"Skip the query sequence [0]"}]},{"name":"result2stats","description":"Compute statistics for each entry in a DB","options":[{"names":["--stat"],"argument":"STR","description":"One of: linecount, mean, doolittle, charges, seqlen, firstline []"},{"names":["--tsv"],"argument":"BOOL","description":"Return output in TSV format [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"filterresult","description":"Pairwise alignment result filter","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"offsetalignment","description":"Offset alignment by ORF start position","options":[{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"}]},{"name":"proteinaln2nucl","description":"Transform protein alignments to nucleotide alignments","options":[{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"result2repseq","description":"Get representative sequences from result DB","options":[{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"sortresult","description":"Sort a result DB in the same order as the prefilter or align module","options":[{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"summarizealis","description":"Summarize alignment result to one row (uniq. cov., cov., avg. seq. id.)","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"summarizeresult","description":"Extract annotations from alignment DB","options":[{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--overlap"],"argument":"FLOAT","description":"Maximum overlap of covered regions [0.000]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"createtaxdb","description":"Add taxonomic labels to sequence DB","options":[{"names":["--ncbi-tax-dump"],"argument":"STR","description":"NCBI tax dump directory. The tax dump can be downloaded here \"ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz\" []"},{"names":["--tax-mapping-file"],"argument":"STR","description":"File to map sequence identifier to taxonomical identifier []"},{"names":["--tax-mapping-mode"],"argument":"INT","description":"Map taxonomy based on sequence database 0: .lookup file 1: .source file [0]"},{"names":["--tax-db-mode"],"argument":"INT","description":"Create taxonomy database as: 0: .dmp flat files (human readable) 1: binary dump (faster readin) [1]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"createbintaxonomy","description":"Create binary taxonomy from NCBI input","options":[{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"addtaxonomy","description":"Add taxonomic labels to result DB","options":[{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--pick-id-from"],"argument":"INT","description":"Query 1, Target 2 [2]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"filtertaxdb","description":"Filter taxonomy result database","options":[{"names":["--taxon-list"],"argument":"STR","description":"Taxonomy ID, possibly multiple values separated by ',' []"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"filtertaxseqdb","description":"Filter taxonomy sequence database","options":[{"names":["--taxon-list"],"argument":"STR","description":"Taxonomy ID, possibly multiple values separated by ',' []"},{"names":["--subdb-mode"],"argument":"INT","description":"Subdb mode 0: copy data 1: soft link data and write index [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"aggregatetax","description":"Aggregate multiple taxon labels to a single label","options":[{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"aggregatetaxweights","description":"Aggregate multiple taxon labels to a single label","options":[{"names":["--majority"],"argument":"FLOAT","description":"minimal fraction of agreement among taxonomically assigned sequences of a set [0.500]"},{"names":["--vote-mode"],"argument":"INT","description":"Mode of assigning weights to compute majority. 0: uniform, 1: minus log E-value, 2: score [1]"},{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"lcaalign","description":"Efficient gapped alignment for lca computation","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"lca","description":"Compute the lowest common ancestor","options":[{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--blacklist"],"argument":"STR","description":"Comma separated list of ignored taxa in LCA computation [12908:unclassified sequences,28384:other sequences]"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"majoritylca","description":"Compute the lowest common ancestor using majority voting","options":[{"names":["--majority"],"argument":"FLOAT","description":"minimal fraction of agreement among taxonomically assigned sequences of a set [0.500]"},{"names":["--vote-mode"],"argument":"INT","description":"Mode of assigning weights to compute majority. 0: uniform, 1: minus log E-value, 2: score [1]"},{"names":["--lca-ranks"],"argument":"STR","description":"Add column with specified ranks (',' separated) []"},{"names":["--blacklist"],"argument":"STR","description":"Comma separated list of ignored taxa in LCA computation [12908:unclassified sequences,28384:other sequences]"},{"names":["--tax-lineage"],"argument":"INT","description":"0: don't show, 1: add all lineage names, 2: add all lineage taxids [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"multihitdb","description":"Create sequence DB for multi hit searches","options":[{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--stat"],"argument":"STR","description":"One of: linecount, mean, doolittle, charges, seqlen, firstline []"},{"names":["--tsv"],"argument":"BOOL","description":"Return output in TSV format [0]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [1]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"}]},{"name":"multihitsearch","description":"Search with a grouped set of sequences against another grouped set","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [5.700]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [2]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E+02]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [1]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--simple-best-hit"],"argument":"BOOL","description":"Update the p-value by a single best hit, or by best and second best hits [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"besthitperset","description":"For each set of sequences compute the best element and update p-value","options":[{"names":["--simple-best-hit"],"argument":"BOOL","description":"Update the p-value by a single best hit, or by best and second best hits [1]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"combinepvalperset","description":"For each set compute the combined p-value","options":[{"names":["--alpha"],"argument":"FLOAT","description":"Set alpha for combining p-values during aggregation [1.000]"},{"names":["--aggregation-mode"],"argument":"INT","description":"Combined P-values computed from 0: multi-hit, 1: minimum of all P-values, 2: product-of-P-values, 3: truncated product [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"mergeresultsbyset","description":"Merge results from multiple ORFs back to their respective contig","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"prefilter","description":"Double consecutive diagonal k-mer search","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"ungappedprefilter","description":"Optimal diagonal score search","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"kmermatcher","description":"Find bottom-m-hashed k-mer matches within sequence DB","options":[{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:13]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [0]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initialization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [0]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occurring multiple times (>=2) [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"kmersearch","description":"Find bottom-m-hashed k-mer matches between target and query DB","options":[{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.800]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [0]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--pick-n-sim-kmer"],"argument":"INT","description":"Add N similar k-mers to search [1]"},{"names":["--result-direction"],"argument":"INT","description":"result is 0: query, 1: target centric [1]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"align","description":"Optimal gapped local alignment","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"alignall","description":"Within-result all-vs-all gapped local alignment","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"transitivealign","description":"Transfer alignments via transitivity","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"rescorediagonal","description":"Compute sequence identity for diagonal","options":[{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"}]},{"name":"alignbykmer","description":"Heuristic gapped local k-mer based alignment","options":[{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"}]},{"name":"clust","description":"Cluster result by Set-Cover/Connected-Component/Greedy-Incremental","options":[{"names":["--cluster-mode"],"argument":"INT","description":"0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) [0]"},{"names":["--max-iterations"],"argument":"INT","description":"Maximum depth of breadth first search in connected component clustering [1000]"},{"names":["--similarity-type"],"argument":"INT","description":"Type of score used for clustering. 1: alignment score 2: sequence identity [2]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"clusthash","description":"Hash-based clustering of equal length sequences","options":[{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:3]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.990]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"mergeclusters","description":"Merge multiple cascaded clustering steps","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"result2profile","description":"Compute profile DB from a result DB","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [0.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"msa2result","description":"Convert a MSA DB to a profile DB","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--match-mode"],"argument":"INT","description":"0: Columns that have a residue in the first sequence are kept, 1: columns that have a residue in --match-ratio of all sequences are kept [0]"},{"names":["--match-ratio"],"argument":"FLOAT","description":"Columns that have a residue in this ratio of all sequences are kept [0.500]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [0.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--msa-type"],"argument":"INT","description":"MSA Type: 0: cA3M, 1: A3M, 2: FASTA [2]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--skip-query"],"argument":"BOOL","description":"Skip the query sequence [0]"}]},{"name":"profile2pssm","description":"Convert a profile DB to a tab-separated PSSM file","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--db-output"],"argument":"BOOL","description":"Return a result DB instead of a text file [0]"}]},{"name":"profile2consensus","description":"Extract consensus sequence DB from a profile DB","options":[{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"profile2repseq","description":"Extract representative sequence DB from a profile DB","options":[{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"convertprofiledb","description":"Convert a HH-suite HHM DB to a profile DB","options":[{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"enrich","description":"Boost diversity of search result","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--seed-sub-mat"],"argument":"TWIN","description":"Substitution matrix file for k-mer generation [nucl:nucleotide.out,aa:VTML80.out]"},{"names":["-s"],"argument":"FLOAT","description":"Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive [4.000]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [0]"},{"names":["--k-score"],"argument":"INT","description":"k-mer threshold for generating similar k-mer lists [2147483647]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [nucl:5,aa:21]"},{"names":["--max-seqs"],"argument":"INT","description":"Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) [300]"},{"names":["--split"],"argument":"INT","description":"Split input into N equally distributed chunks. 0: set the best split automatically [0]"},{"names":["--split-mode"],"argument":"INT","description":"0: split target db; 1: split query db; 2: auto, depending on main memory [2]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--diag-score"],"argument":"BOOL","description":"Use ungapped diagonal scoring during prefilter [1]"},{"names":["--exact-kmer-matching"],"argument":"INT","description":"Extract only exact k-mers for matching (range 0-1) [0]"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [1]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["--min-ungapped-score"],"argument":"INT","description":"Accept only matches with ungapped alignment score above threshold [15]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [1]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--local-tmp"],"argument":"STR","description":"Path where some of the temporary files will be created []"},{"names":["--disk-space-limit"],"argument":"BYTE","description":"Set max disk space to use for reverse profile searches. E.g. 800B, 5K, 10M, 1G. Default (0) to all available disk space in the temp folder [0]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--alignment-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment [0]"},{"names":["--alignment-output-mode"],"argument":"INT","description":"How to compute the alignment: 0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--alt-ali"],"argument":"INT","description":"Show up to this many alternative alignments [0]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--max-rejected"],"argument":"INT","description":"Maximum rejected alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--max-accept"],"argument":"INT","description":"Maximum accepted alignments before alignment calculation for a query is stopped [2147483647]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["--realign"],"argument":"BOOL","description":"Compute more conservative, shorter alignments (scores and E-values not changed) [0]"},{"names":["--realign-score-bias"],"argument":"FLOAT","description":"Additional bias when computing realignment [-0.200]"},{"names":["--realign-max-seqs"],"argument":"INT","description":"Maximum number of results to return in realignment [2147483647]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--zdrop"],"argument":"INT","description":"Maximal allowed difference between score values before alignment is truncated  (nucleotide alignment only) [40]"},{"names":["--exhaustive-search-filter"],"argument":"INT","description":"Filter result during search: 0: do not filter, 1: filter [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of iterative profile search iterations [3]"},{"names":["--exhaustive-search"],"argument":"BOOL","description":"For bigger profile DB, run iteratively the search by greedily swapping the search results [0]"},{"names":["--lca-search"],"argument":"BOOL","description":"Efficient search for LCA candidates [0]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fulfilling window quality criterion [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [30]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-separated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-separated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--add-orf-stop"],"argument":"BOOL","description":"Add stop codon '*' at complete start and end [0]"},{"names":["--sequence-overlap"],"argument":"INT","description":"Overlap between sequences [0]"},{"names":["--sequence-split-mode"],"argument":"INT","description":"Sequence split mode 0: copy data, 1: soft link data and write new index, [1]"},{"names":["--headers-split-mode"],"argument":"INT","description":"Header split mode: 0: split position, 1: original header [0]"},{"names":["--search-type"],"argument":"INT","description":"Search type 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment [0]"},{"names":["--start-sens"],"argument":"FLOAT","description":"Start sensitivity [4.000]"},{"names":["--sens-steps"],"argument":"INT","description":"Number of search steps performed from --start-sens to -s [1]"},{"names":["--expansion-mode"],"argument":"INT","description":"Update score, E-value, and sequence identity by 0: input alignment 1: rescoring the inferred backtrace [1]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--force-reuse"],"argument":"BOOL","description":"Reuse tmp filse in tmp/latest folder ignoring parameters and version changes [0]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--chain-alignments"],"argument":"INT","description":"Chain overlapping alignments [0]"},{"names":["--merge-query"],"argument":"INT","description":"Combine ORFs/split sequences to a single entry [1]"},{"names":["--strand"],"argument":"INT","description":"Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both [1]"}]},{"name":"result2pp","description":"Merge two profile DBs by shared hits","options":[{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"profile2cs","description":"Convert a profile DB into a column state sequence DB","options":[{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [1.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"convertca3m","description":"Convert a cA3M DB to a result DB","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"expandaln","description":"Expand an alignment result based on another","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"List matches above this sequence identity (for clustering) (range 0.0-1.0) [0.000]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [0.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--expansion-mode"],"argument":"INT","description":"Update score, E-value, and sequence identity by 0: input alignment 1: rescoring the inferred backtrace [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"expand2profile","description":"Expand an alignment result based on another and create a profile","options":[{"names":["--comp-bias-corr"],"argument":"INT","description":"Correct for locally biased amino acid composition (range 0-1) [1]"},{"names":["--gap-open"],"argument":"TWIN","description":"Gap open cost [nucl:5,aa:11]"},{"names":["--gap-extend"],"argument":"TWIN","description":"Gap extension cost [nucl:2,aa:1]"},{"names":["--score-bias"],"argument":"FLOAT","description":"Score bias when computing SW alignment (in bits) [0.000]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target 1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--e-profile"],"argument":"DOUBLE","description":"Include sequences matches with < E-value thr. into the profile (>=0.0) [1.000E-03]"},{"names":["--mask-profile"],"argument":"INT","description":"Mask query sequence of profile using tantan [0,1] [1]"},{"names":["--wg"],"argument":"BOOL","description":"Use global sequence weighting for profile calculation [0]"},{"names":["--filter-msa"],"argument":"INT","description":"Filter msa: 0: do not filter, 1: filter [1]"},{"names":["--max-seq-id"],"argument":"FLOAT","description":"Reduce redundancy of output MSA using max. pairwise sequence identity [0.0,1.0] [0.900]"},{"names":["--qid"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min.seq. identity with query sequences [0.0,1.0] [0.000]"},{"names":["--qsc"],"argument":"FLOAT","description":"Reduce diversity of output MSAs using min. score per aligned residue with query sequences [-50.0,100.0] [-20.000]"},{"names":["--cov"],"argument":"FLOAT","description":"Filter output MSAs using min. fraction of query residues covered by matched sequences [0.0,1.0] [0.000]"},{"names":["--diff"],"argument":"INT","description":"Filter MSAs by selecting most diverse set of sequences, keeping at least this many seqs in each MSA block of length 50 [1000]"},{"names":["--pca"],"argument":"FLOAT","description":"Pseudo count admixture strength [0.000]"},{"names":["--pcb"],"argument":"FLOAT","description":"Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) [1.500]"},{"names":["--expansion-mode"],"argument":"INT","description":"Update score, E-value, and sequence identity by 0: input alignment 1: rescoring the inferred backtrace [0]"},{"names":["--allow-deletion"],"argument":"BOOL","description":"Allow deletions in a MSA [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"view","description":"Print DB entries given in --id-list to stdout","options":[{"names":["--id-list"],"argument":"STR","description":"Entries to be printed separated by ',' []"},{"names":["--idx-entry-type"],"argument":"INT","description":"0: sequence, 1: src sequence, 2: header, 3: src header [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"apply","description":"Execute given program on each DB entry","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"filterdb","description":"DB filtering by given conditions","options":[{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--filter-expression"],"argument":"STR","description":"Specify a mathematical expression to filter lines []"},{"names":["--filter-column"],"argument":"INT","description":"column [1]"},{"names":["--column-to-take"],"argument":"INT","description":"column to take in join mode. If -1, the whole line is taken [-1]"},{"names":["--filter-regex"],"argument":"STR","description":"Regex to select column (example float: [0-9]*(.[0-9]+)? int:[1-9]{1}[0-9]) [^.*$]"},{"names":["--positive-filter"],"argument":"BOOL","description":"Used in conjunction with --filter-file. If true, out  = in \\intersect filter ; if false, out = in - filter [1]"},{"names":["--filter-file"],"argument":"STR","description":"Specify a file that contains the filtering elements []"},{"names":["--beats-first"],"argument":"BOOL","description":"Filter by comparing each entry to the first entry [0]"},{"names":["--mapping-file"],"argument":"STR","description":"Specify a file that translates the keys of a DB to new keys, TSV format []"},{"names":["--trim-to-one-column"],"argument":"BOOL","description":"Output only the column specified by --filter-column [0]"},{"names":["--extract-lines"],"argument":"INT","description":"Extract n lines of each entry [0]"},{"names":["--comparison-operator"],"argument":"STR","description":"Filter by comparing each entry row numerically by using the le) less-than-equal, ge) greater-than-equal or e) equal operator []"},{"names":["--comparison-value"],"argument":"DOUBLE","description":"Filter by comparing each entry to this value [0.000E+00]"},{"names":["--sort-entries"],"argument":"INT","description":"Sort column set by --filter-column, by 0: no sorting, 1: increasing, 2: decreasing, 3: random shuffle [0]"},{"names":["--join-db"],"argument":"STR","description":"Join another database entry with respect to the database identifier in the chosen column []"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"swapdb","description":"Transpose DB with integer values in first column","options":[{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"prefixid","description":"For each entry in a DB prepend the entry key to the entry itself","options":[{"names":["--prefix"],"argument":"STR","description":"Use this prefix for all entries []"},{"names":["--mapping-file"],"argument":"STR","description":"Specify a file that translates the keys of a DB to new keys, TSV format []"},{"names":["--tsv"],"argument":"BOOL","description":"Return output in TSV format [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"suffixid","description":"For each entry in a DB append the entry key to the entry itself","options":[{"names":["--prefix"],"argument":"STR","description":"Use this prefix for all entries []"},{"names":["--mapping-file"],"argument":"STR","description":"Specify a file that translates the keys of a DB to new keys, TSV format []"},{"names":["--tsv"],"argument":"BOOL","description":"Return output in TSV format [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"renamedbkeys","description":"Create a new DB with original keys renamed","options":[{"names":["--subdb-mode"],"argument":"INT","description":"Subdb mode 0: copy data 1: soft link data and write index [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"diffseqdbs","description":"Compute diff of two sequence DBs","options":[{"names":["--use-seq-id"],"argument":"BOOL","description":"Sequence ID (Uniprot, GenBank, ...) is used for identifying matches between the old and the new DB [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"summarizetabs","description":"Extract annotations from HHblits BLAST-tab-formatted results","options":[{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--overlap"],"argument":"FLOAT","description":"Maximum overlap of covered regions [0.000]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"gff2db","description":"Extract regions from a sequence database based on a GFF3 file","options":[{"names":["--gff-type"],"argument":"STR","description":"Type in the GFF file to filter by []"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"maskbygff","description":"Mask out sequence regions in a sequence DB by features selected from a GFF3 file","options":[{"names":["--gff-type"],"argument":"STR","description":"Type in the GFF file to filter by []"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"convertkb","description":"Convert UniProtKB data to a DB","options":[{"names":["--mapping-file"],"argument":"STR","description":"Specify a file that translates the keys of a DB to new keys, TSV format []"},{"names":["--kb-columns"],"argument":"STR","description":"list of indices of UniprotKB columns to be extracted [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"summarizeheaders","description":"Summarize FASTA headers of result DB","options":[{"names":["--header-type"],"argument":"INT","description":"Header Type: 1: Uniclust, 2: Metaclust [1]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--summary-prefix"],"argument":"STR","description":"Set the cluster summary prefix [cl]"}]},{"name":"nrtotaxmapping","description":"Create taxonomy mapping for NR database","options":[{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"extractdomains","description":"Extract highest scoring alignment regions for each sequence from BLAST-tab file","options":[{"names":["-e"],"argument":"DOUBLE","description":"List matches below this E-value (range 0.0-inf) [1.000E-03]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["--msa-type"],"argument":"INT","description":"MSA Type: 0: cA3M, 1: A3M, 2: FASTA [2]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"}]},{"name":"countkmer","description":"Count k-mers","options":[{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [5]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [4]"}]}]}
