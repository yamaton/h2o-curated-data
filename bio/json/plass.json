{"name":"plass","description":"Protein Level Assembler.","options":[],"subcommands":[{"name":"plass-assemble","description":"plass-assemble","options":[{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [13]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [14]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"FLOAT","description":"Extend sequences if the E-value is below [0.0, inf] [0.000]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"Overlap sequence identity threshold [0.0, 1.0] [0.900]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [60]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [nucl:0.200,aa:0.000]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initilization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [1]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occuring multiple times (>=2) [1]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of assembly iterations [1, inf] [12]"},{"names":["--rescore-mode"],"argument":"INT               Rescore diagonals with:","description":"0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fullfilling window quality criterion [3]"},{"names":["--min-length"],"argument":"INT","description":"Minimum codon number in open reading frames [45]"},{"names":["--max-length"],"argument":"INT","description":"Maximum codon number in open reading frames [32734]"},{"names":["--max-gaps"],"argument":"INT","description":"Maximum number of codons with gaps or unknown residues before an open reading frame is rejected [2147483647]"},{"names":["--contig-start-mode"],"argument":"INT","description":"Contig start can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--contig-end-mode"],"argument":"INT","description":"Contig end can be 0: incomplete, 1: complete, 2: both [2]"},{"names":["--orf-start-mode"],"argument":"INT","description":"Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) [1]"},{"names":["--forward-frames"],"argument":"STR","description":"Comma-seperated list of frames on the forward strand to be extracted [1,2,3]"},{"names":["--reverse-frames"],"argument":"STR","description":"Comma-seperated list of frames on the reverse strand to be extracted [1,2,3]"},{"names":["--translation-table"],"argument":"INT","description":"1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA"},{"names":["--translate"],"argument":"INT","description":"Translate ORF to amino acid [0]"},{"names":["--use-all-table-starts"],"argument":"BOOL","description":"Use all alteratives for a start codon in the genetic table, if false - only ATG (AUG) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--protein-filter-threshold"],"argument":"FLOAT","description":"filter proteins lower than threshold [0.0,1.0] [0.200]"},{"names":["--filter-proteins"],"argument":"INT","description":"filter proteins by a neural network [0,1] [1]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [12]"},{"names":["--compressed"],"argument":"INT","description":"Write compressed output [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--delete-tmp-inc"],"argument":"INT","description":"Delete temporary files incremental [0,1] [1]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--create-lookup"],"argument":"INT","description":"Create database lookup file (can be very large) [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [1]"}]},{"name":"plass-nuclassemble","description":"plass-nuclassemble","options":[{"names":["--add-self-matches"],"argument":"BOOL","description":"Artificially add entries of queries with themselves (for clustering) [0]"},{"names":["--alph-size"],"argument":"TWIN","description":"Alphabet size (range 2-21) [5]"},{"names":["--spaced-kmer-mode"],"argument":"INT","description":"0: use consecutive positions in k-mers; 1: use spaced k-mers [0]"},{"names":["--spaced-kmer-pattern"],"argument":"STR","description":"User-specified spaced k-mer pattern []"},{"names":["--mask"],"argument":"INT","description":"Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking [0]"},{"names":["--mask-lower-case"],"argument":"INT","description":"Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region [0]"},{"names":["-k"],"argument":"INT","description":"k-mer length (0: automatically set to optimum) [22]"},{"names":["--split-memory-limit"],"argument":"BYTE","description":"Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory [0]"},{"names":["--wrapped-scoring"],"argument":"BOOL","description":"Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start [0]"},{"names":["-e"],"argument":"FLOAT","description":"Extend sequences if the E-value is below (range 0.0-inf) [0.000]"},{"names":["-c"],"argument":"FLOAT","description":"List matches above this fraction of aligned (covered) residues (see --cov-mode) [0.000]"},{"names":["-a"],"argument":"BOOL","description":"Add backtrace string (convert to alignments with mmseqs convertalis module) [0]"},{"names":["--cov-mode"],"argument":"INT","description":"0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length [0]"},{"names":["--min-seq-id"],"argument":"FLOAT","description":"Overlap sequence identity threshold (range 0.0-1.0) [0.990]"},{"names":["--min-aln-len"],"argument":"INT","description":"Minimum alignment length (range 0-INT_MAX) [0]"},{"names":["--seq-id-mode"],"argument":"INT","description":"0: alignment length 1: shorter, 2: longer sequence [0]"},{"names":["--kmer-per-seq"],"argument":"INT","description":"k-mers per sequence [60]"},{"names":["--kmer-per-seq-scale"],"argument":"TWIN","description":"Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen [0.100]"},{"names":["--adjust-kmer-len"],"argument":"BOOL","description":"Adjust k-mer length based on specificity (only for nucleotides) [0]"},{"names":["--hash-shift"],"argument":"INT","description":"Shift k-mer hash initilization [67]"},{"names":["--include-only-extendable"],"argument":"BOOL","description":"Include only extendable [1]"},{"names":["--ignore-multi-kmer"],"argument":"BOOL","description":"Skip k-mers occuring multiple times (>=2) [1]"},{"names":["--num-iterations"],"argument":"INT","description":"Number of assembly iterations (range 1-inf) [12]"},{"names":["--rescore-mode"],"argument":"INT","description":"Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fullfilling window quality criterion [3]"},{"names":["--chop-cycle"],"argument":"BOOL","description":"Remove superfluous part of circular fragments (see --cycle-check) [1]"},{"names":["--cycle-check"],"argument":"BOOL","description":"Check for circular sequences (avoid infinite extension of circular or long repeated regions) [1]"},{"names":["--min-contig-len"],"argument":"INT","description":"Minimum length of assembled contig to output [1000]"},{"names":["--dbtype"],"argument":"INT","description":"Database type 0: auto, 1: amino acid 2: nucleotides [0]"},{"names":["--shuffle"],"argument":"BOOL","description":"Shuffle input database [1]"},{"names":["--createdb-mode"],"argument":"INT","description":"Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) [0]"},{"names":["--id-offset"],"argument":"INT","description":"Numeric ids in index file are offset by this value [0]"},{"names":["--sub-mat"],"argument":"TWIN","description":"Substitution matrix file [nucl:nucleotide.out,aa:blosum62.out]"},{"names":["--db-load-mode"],"argument":"INT","description":"Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch [0]"},{"names":["--threads"],"argument":"INT","description":"Number of CPU-cores used (all by default) [12]"},{"names":["--compressed"],"argument":"INT","description":"Use compressed database format for temporary files [0]"},{"names":["-v"],"argument":"INT","description":"Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info [3]"},{"names":["--max-seq-len"],"argument":"INT","description":"Maximum sequence length [65535]"},{"names":["--remove-tmp-files"],"argument":"BOOL","description":"Delete temporary files [0]"},{"names":["--delete-tmp-inc"],"argument":"INT","description":"Delete temporary files incremental [0,1] [1]"},{"names":["--mpi-runner"],"argument":"STR","description":"Use MPI on compute cluster with this MPI command (e.g. \"mpirun -np 42\") []"},{"names":["--filter-hits"],"argument":"BOOL","description":"Filter hits by seq.id. and coverage [0]"},{"names":["--sort-results"],"argument":"INT","description":"Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) [0]"},{"names":["--write-lookup"],"argument":"INT","description":"write .lookup file containing mapping from internal id, fasta id and file number [1]"}]}]}
