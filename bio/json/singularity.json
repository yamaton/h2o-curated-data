{
  "name": "singularity",
  "description": "singularity",
  "options": [
    {
      "names": [
        "-c",
        "--config"
      ],
      "argument": "string",
      "description": "specify a configuration file (for root or unprivileged installation only) (default \"/usr/local/etc/singularity/singularity.conf\")"
    },
    {
      "names": [
        "-d",
        "--debug"
      ],
      "argument": "",
      "description": "print debugging information (highest verbosity)"
    },
    {
      "names": [
        "-h",
        "--help"
      ],
      "argument": "",
      "description": "help for singularity"
    },
    {
      "names": [
        "--nocolor"
      ],
      "argument": "",
      "description": "print without color output (default False)"
    },
    {
      "names": [
        "-q",
        "--quiet"
      ],
      "argument": "",
      "description": "suppress normal output"
    },
    {
      "names": [
        "-s",
        "--silent"
      ],
      "argument": "",
      "description": "only print errors"
    },
    {
      "names": [
        "-v",
        "--verbose"
      ],
      "argument": "",
      "description": "print additional information"
    },
    {
      "names": [
        "--version"
      ],
      "argument": "",
      "description": "version for singularity"
    }
  ],
  "subcommands": [
    {
      "name": "build",
      "description": "Build a Singularity image",
      "options": [
        {
          "names": [
            "--arch"
          ],
          "argument": "string",
          "description": "architecture for remote build (default \"amd64\")"
        },
        {
          "names": [
            "-B",
            "--bind"
          ],
          "argument": "strings",
          "description": "a user-bind path specification. spec has the format src[:dest[:opts]],where src and dest are outside and inside paths. If dest is not given,it is set equal to src. Mount options ('opts') may be specified as 'ro'(read-only) or 'rw' (read/write, which is the default).Multiple bind paths can be given by a comma separated list. (not supported with remote build)"
        },
        {
          "names": [
            "--builder"
          ],
          "argument": "string",
          "description": "remote Build Service URL, setting this implies --remote"
        },
        {
          "names": [
            "-d",
            "--detached"
          ],
          "argument": "",
          "description": "submit build job and print build ID (no real-time logs and requires --remote)"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "do not use cache or create cache"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "-e",
            "--encrypt"
          ],
          "argument": "",
          "description": "build an image with an encrypted file system"
        },
        {
          "names": [
            "-f",
            "--fakeroot"
          ],
          "argument": "",
          "description": "build using user namespace to fake root user (requires a privileged installation)"
        },
        {
          "names": [
            "--fix-perms"
          ],
          "argument": "",
          "description": "ensure owner has rwX permissions on all container content for oci/docker sources"
        },
        {
          "names": [
            "-F",
            "--force"
          ],
          "argument": "",
          "description": "overwrite an image file if it exists"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for build"
        },
        {
          "names": [
            "--json"
          ],
          "argument": "",
          "description": "interpret build definition as JSON"
        },
        {
          "names": [
            "--library"
          ],
          "argument": "string",
          "description": "container Library URL"
        },
        {
          "names": [
            "--no-cleanup"
          ],
          "argument": "",
          "description": "do NOT clean up bundle after failed build, can be helpful for debugging"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        },
        {
          "names": [
            "-T",
            "--notest"
          ],
          "argument": "",
          "description": "build without running tests in %test section"
        },
        {
          "names": [
            "--nv"
          ],
          "argument": "",
          "description": "inject host Nvidia libraries during build for post and test sections (not supported with remote build)"
        },
        {
          "names": [
            "--passphrase"
          ],
          "argument": "",
          "description": "prompt for an encryption passphrase"
        },
        {
          "names": [
            "--pem-path"
          ],
          "argument": "string",
          "description": "enter an path to a PEM formated RSA key for an encrypted container"
        },
        {
          "names": [
            "-r",
            "--remote"
          ],
          "argument": "",
          "description": "build image remotely (does not require root)"
        },
        {
          "names": [
            "--rocm"
          ],
          "argument": "",
          "description": "inject host Rocm libraries during build for post and test sections (not supported with remote build)"
        },
        {
          "names": [
            "-s",
            "--sandbox"
          ],
          "argument": "",
          "description": "build image as sandbox format (chroot directory structure)"
        },
        {
          "names": [
            "--section"
          ],
          "argument": "strings",
          "description": "only run specific section(s) of deffile (setup, post, files, environment, test, labels, none) (default [all])"
        },
        {
          "names": [
            "-u",
            "--update"
          ],
          "argument": "",
          "description": "run definition over existing container (skips header)"
        }
      ]
    },
    {
      "name": "cache",
      "description": "Manage the local cache",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for cache"
        }
      ]
    },
    {
      "name": "capability",
      "description": "Manage Linux capabilities for users and groups",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for capability"
        }
      ]
    },
    {
      "name": "config",
      "description": "Manage various singularity configuration (root user only)",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for config"
        }
      ]
    },
    {
      "name": "delete",
      "description": "Deletes requested image from the library",
      "options": [
        {
          "names": [
            "-A",
            "--arch"
          ],
          "argument": "string",
          "description": "specify requested image arch (default \"amd64\")"
        },
        {
          "names": [
            "-F",
            "--force"
          ],
          "argument": "",
          "description": "delete image without confirmation"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for delete"
        },
        {
          "names": [
            "--library"
          ],
          "argument": "string",
          "description": "delete images from the provided library"
        }
      ]
    },
    {
      "name": "exec",
      "description": "Run a command within a container",
      "options": [
        {
          "names": [
            "--add-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to add"
        },
        {
          "names": [
            "--allow-setuid"
          ],
          "argument": "",
          "description": "allow setuid binaries in container (root only)"
        },
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "set an application to run inside a container"
        },
        {
          "names": [
            "--apply-cgroups"
          ],
          "argument": "string",
          "description": "apply cgroups from file for container processes (root only)"
        },
        {
          "names": [
            "-B",
            "--bind"
          ],
          "argument": "strings",
          "description": "a user-bind path specification. spec has the format src[:dest[:opts]], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('opts') may be specified as 'ro' (read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list."
        },
        {
          "names": [
            "-e",
            "--cleanenv"
          ],
          "argument": "",
          "description": "clean environment before running container"
        },
        {
          "names": [
            "-c",
            "--contain"
          ],
          "argument": "",
          "description": "use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host"
        },
        {
          "names": [
            "-C",
            "--containall"
          ],
          "argument": "",
          "description": "contain not only file systems, but also PID, IPC, and environment"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "dont use cache, and dont create cache"
        },
        {
          "names": [
            "--dns"
          ],
          "argument": "string",
          "description": "list of DNS server separated by commas to add in resolv.conf"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "--drop-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to drop"
        },
        {
          "names": [
            "--env"
          ],
          "argument": "strings",
          "description": "pass environment variable to contained process"
        },
        {
          "names": [
            "--env-file"
          ],
          "argument": "string",
          "description": "pass environment variables from file to contained process"
        },
        {
          "names": [
            "-f",
            "--fakeroot"
          ],
          "argument": "",
          "description": "run container in new user namespace as uid 0"
        },
        {
          "names": [
            "--fusemount"
          ],
          "argument": "strings",
          "description": "A FUSE filesystem mount specification of the form '<type>:<fuse command> <mountpoint>' - where <type> is 'container' or 'host', specifying where the mount will be performed ('container-daemon' or 'host-daemon' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. 'container:sshfs 10.0.0.1:/ /sshfs'. Implies --pid."
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for exec"
        },
        {
          "names": [
            "-H",
            "--home"
          ],
          "argument": "string",
          "description": "a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default \"/home/vierbein\")"
        },
        {
          "names": [
            "--hostname"
          ],
          "argument": "string",
          "description": "set container hostname"
        },
        {
          "names": [
            "-i",
            "--ipc"
          ],
          "argument": "",
          "description": "run container in a new IPC namespace"
        },
        {
          "names": [
            "--keep-privs"
          ],
          "argument": "",
          "description": "let root user keep privileges in container (root only)"
        },
        {
          "names": [
            "-n",
            "--net"
          ],
          "argument": "",
          "description": "run container in a new network namespace (sets up a bridge network interface by default)"
        },
        {
          "names": [
            "--network"
          ],
          "argument": "string",
          "description": "specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default \"bridge\")"
        },
        {
          "names": [
            "--network-args"
          ],
          "argument": "strings",
          "description": "specify network arguments to pass to CNI plugins"
        },
        {
          "names": [
            "--no-home"
          ],
          "argument": "",
          "description": "do NOT mount users home directory if /home is not the current working directory"
        },
        {
          "names": [
            "--no-init"
          ],
          "argument": "",
          "description": "do NOT start shim process with --pid"
        },
        {
          "names": [
            "--no-mount"
          ],
          "argument": "strings",
          "description": "disable one or more mount xxx options set in singularity.conf"
        },
        {
          "names": [
            "--no-privs"
          ],
          "argument": "",
          "description": "drop all privileges from root user in container)"
        },
        {
          "names": [
            "--no-umask"
          ],
          "argument": "",
          "description": "do not propagate umask to the container, set default 0022 umask"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        },
        {
          "names": [
            "--nonet"
          ],
          "argument": "",
          "description": "disable VM network handling"
        },
        {
          "names": [
            "--nv"
          ],
          "argument": "",
          "description": "enable experimental Nvidia support"
        },
        {
          "names": [
            "-o",
            "--overlay"
          ],
          "argument": "strings",
          "description": "use an overlayFS image for persistent data storage or as read-only layer of container"
        },
        {
          "names": [
            "--passphrase"
          ],
          "argument": "",
          "description": "prompt for an encryption passphrase"
        },
        {
          "names": [
            "--pem-path"
          ],
          "argument": "string",
          "description": "enter an path to a PEM formated RSA key for an encrypted container"
        },
        {
          "names": [
            "-p",
            "--pid"
          ],
          "argument": "",
          "description": "run container in a new PID namespace"
        },
        {
          "names": [
            "--pwd"
          ],
          "argument": "string",
          "description": "initial working directory for payload process inside the container"
        },
        {
          "names": [
            "--rocm"
          ],
          "argument": "",
          "description": "enable experimental Rocm support"
        },
        {
          "names": [
            "-S",
            "--scratch"
          ],
          "argument": "strings",
          "description": "include a scratch directory within the container that is linked to a temporary dir (use -W to force location)"
        },
        {
          "names": [
            "--security"
          ],
          "argument": "strings",
          "description": "enable security features (SELinux, Apparmor, Seccomp)"
        },
        {
          "names": [
            "-u",
            "--userns"
          ],
          "argument": "",
          "description": "run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images."
        },
        {
          "names": [
            "--uts"
          ],
          "argument": "",
          "description": "run container in a new UTS namespace"
        },
        {
          "names": [
            "--vm"
          ],
          "argument": "",
          "description": "enable VM support"
        },
        {
          "names": [
            "--vm-cpu"
          ],
          "argument": "string",
          "description": "number of CPU cores to allocate to Virtual Machine (implies --vm) (default \"1\")"
        },
        {
          "names": [
            "--vm-err"
          ],
          "argument": "",
          "description": "enable attaching stderr from VM"
        },
        {
          "names": [
            "--vm-ip"
          ],
          "argument": "string",
          "description": "IP Address to assign for container usage. Defaults to DHCP within bridge network. (default \"dhcp\")"
        },
        {
          "names": [
            "--vm-ram"
          ],
          "argument": "string",
          "description": "amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default \"1024\")"
        },
        {
          "names": [
            "-W",
            "--workdir"
          ],
          "argument": "string",
          "description": "working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)"
        },
        {
          "names": [
            "-w",
            "--writable"
          ],
          "argument": "",
          "description": "by default all Singularity containers are available as read only. This option makes the file system accessible as read/write."
        },
        {
          "names": [
            "--writable-tmpfs"
          ],
          "argument": "",
          "description": "makes the file system accessible as read-write with non persistent data (with overlay support only)"
        }
      ]
    },
    {
      "name": "help",
      "description": "Help about any command",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for help"
        }
      ]
    },
    {
      "name": "inspect",
      "description": "Show metadata for an image",
      "options": [
        {
          "names": [
            "--all"
          ],
          "argument": "",
          "description": "show all available data (imply --json option)"
        },
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "inspect a specific app"
        },
        {
          "names": [
            "-d",
            "--deffile"
          ],
          "argument": "",
          "description": "show the Singularity recipe file that was used to generate the image"
        },
        {
          "names": [
            "-e",
            "--environment"
          ],
          "argument": "",
          "description": "show the environment settings for the image"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for inspect"
        },
        {
          "names": [
            "-H",
            "--helpfile"
          ],
          "argument": "",
          "description": "inspect the runscript helpfile, if it exists"
        },
        {
          "names": [
            "-j",
            "--json"
          ],
          "argument": "",
          "description": "print structured json instead of sections"
        },
        {
          "names": [
            "-l",
            "--labels"
          ],
          "argument": "",
          "description": "show the labels for the image (default)"
        },
        {
          "names": [
            "--list-apps"
          ],
          "argument": "",
          "description": "list all apps in a container"
        },
        {
          "names": [
            "-r",
            "--runscript"
          ],
          "argument": "",
          "description": "show the runscript for the image"
        },
        {
          "names": [
            "-s",
            "--startscript"
          ],
          "argument": "",
          "description": "show the startscript for the image"
        },
        {
          "names": [
            "-t",
            "--test"
          ],
          "argument": "",
          "description": "show the test script for the image"
        }
      ]
    },
    {
      "name": "instance",
      "description": "Manage containers running as services",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for instance"
        }
      ]
    },
    {
      "name": "key",
      "description": "Manage OpenPGP keys",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for key"
        }
      ]
    },
    {
      "name": "oci",
      "description": "Manage OCI containers",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for oci"
        }
      ]
    },
    {
      "name": "overlay",
      "description": "Manage an EXT3 writable overlay image",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for overlay"
        }
      ]
    },
    {
      "name": "plugin",
      "description": "Manage Singularity plugins",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for plugin"
        }
      ]
    },
    {
      "name": "pull",
      "description": "Pull an image from a URI",
      "options": [
        {
          "names": [
            "--arch"
          ],
          "argument": "string",
          "description": "architecture to pull from library (default \"amd64\")"
        },
        {
          "names": [
            "--dir"
          ],
          "argument": "string",
          "description": "download images to the specific directory"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "dont use cached images/blobs and dont create them"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "-F",
            "--force"
          ],
          "argument": "",
          "description": "overwrite an image file if it exists"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for pull"
        },
        {
          "names": [
            "--library"
          ],
          "argument": "string",
          "description": "download images from the provided library"
        },
        {
          "names": [
            "--no-cleanup"
          ],
          "argument": "",
          "description": "do NOT clean up bundle after failed build, can be helpful for debugging"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        }
      ]
    },
    {
      "name": "push",
      "description": "Upload image to the provided URI",
      "options": [
        {
          "names": [
            "-U",
            "--allow-unsigned"
          ],
          "argument": "",
          "description": "do not require a signed container image"
        },
        {
          "names": [
            "-D",
            "--description"
          ],
          "argument": "string",
          "description": "description for container image (library:// only)"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for push"
        },
        {
          "names": [
            "--library"
          ],
          "argument": "string",
          "description": "the library to push to"
        }
      ]
    },
    {
      "name": "remote",
      "description": "Manage singularity remote endpoints, keyservers and OCI/Docker registry credentials",
      "options": [
        {
          "names": [
            "-c",
            "--config"
          ],
          "argument": "string",
          "description": "path to the file holding remote endpoint configurations (default \"/home/vierbein/.singularity/remote.yaml\")"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for remote"
        }
      ]
    },
    {
      "name": "run",
      "description": "Run the user-defined default command within a container",
      "options": [
        {
          "names": [
            "--add-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to add"
        },
        {
          "names": [
            "--allow-setuid"
          ],
          "argument": "",
          "description": "allow setuid binaries in container (root only)"
        },
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "set an application to run inside a container"
        },
        {
          "names": [
            "--apply-cgroups"
          ],
          "argument": "string",
          "description": "apply cgroups from file for container processes (root only)"
        },
        {
          "names": [
            "-B",
            "--bind"
          ],
          "argument": "strings",
          "description": "a user-bind path specification. spec has the format src[:dest[:opts]], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('opts') may be specified as 'ro' (read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list."
        },
        {
          "names": [
            "-e",
            "--cleanenv"
          ],
          "argument": "",
          "description": "clean environment before running container"
        },
        {
          "names": [
            "-c",
            "--contain"
          ],
          "argument": "",
          "description": "use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host"
        },
        {
          "names": [
            "-C",
            "--containall"
          ],
          "argument": "",
          "description": "contain not only file systems, but also PID, IPC, and environment"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "dont use cache, and dont create cache"
        },
        {
          "names": [
            "--dns"
          ],
          "argument": "string",
          "description": "list of DNS server separated by commas to add in resolv.conf"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "--drop-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to drop"
        },
        {
          "names": [
            "--env"
          ],
          "argument": "strings",
          "description": "pass environment variable to contained process"
        },
        {
          "names": [
            "--env-file"
          ],
          "argument": "string",
          "description": "pass environment variables from file to contained process"
        },
        {
          "names": [
            "-f",
            "--fakeroot"
          ],
          "argument": "",
          "description": "run container in new user namespace as uid 0"
        },
        {
          "names": [
            "--fusemount"
          ],
          "argument": "strings",
          "description": "A FUSE filesystem mount specification of the form '<type>:<fuse command> <mountpoint>' - where <type> is 'container' or 'host', specifying where the mount will be performed ('container-daemon' or 'host-daemon' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. 'container:sshfs 10.0.0.1:/ /sshfs'. Implies --pid."
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for run"
        },
        {
          "names": [
            "-H",
            "--home"
          ],
          "argument": "string",
          "description": "a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default \"/home/vierbein\")"
        },
        {
          "names": [
            "--hostname"
          ],
          "argument": "string",
          "description": "set container hostname"
        },
        {
          "names": [
            "-i",
            "--ipc"
          ],
          "argument": "",
          "description": "run container in a new IPC namespace"
        },
        {
          "names": [
            "--keep-privs"
          ],
          "argument": "",
          "description": "let root user keep privileges in container (root only)"
        },
        {
          "names": [
            "-n",
            "--net"
          ],
          "argument": "",
          "description": "run container in a new network namespace (sets up a bridge network interface by default)"
        },
        {
          "names": [
            "--network"
          ],
          "argument": "string",
          "description": "specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default \"bridge\")"
        },
        {
          "names": [
            "--network-args"
          ],
          "argument": "strings",
          "description": "specify network arguments to pass to CNI plugins"
        },
        {
          "names": [
            "--no-home"
          ],
          "argument": "",
          "description": "do NOT mount users home directory if /home is not the current working directory"
        },
        {
          "names": [
            "--no-init"
          ],
          "argument": "",
          "description": "do NOT start shim process with --pid"
        },
        {
          "names": [
            "--no-mount"
          ],
          "argument": "strings",
          "description": "disable one or more mount xxx options set in singularity.conf"
        },
        {
          "names": [
            "--no-privs"
          ],
          "argument": "",
          "description": "drop all privileges from root user in container)"
        },
        {
          "names": [
            "--no-umask"
          ],
          "argument": "",
          "description": "do not propagate umask to the container, set default 0022 umask"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        },
        {
          "names": [
            "--nonet"
          ],
          "argument": "",
          "description": "disable VM network handling"
        },
        {
          "names": [
            "--nv"
          ],
          "argument": "",
          "description": "enable experimental Nvidia support"
        },
        {
          "names": [
            "-o",
            "--overlay"
          ],
          "argument": "strings",
          "description": "use an overlayFS image for persistent data storage or as read-only layer of container"
        },
        {
          "names": [
            "--passphrase"
          ],
          "argument": "",
          "description": "prompt for an encryption passphrase"
        },
        {
          "names": [
            "--pem-path"
          ],
          "argument": "string",
          "description": "enter an path to a PEM formated RSA key for an encrypted container"
        },
        {
          "names": [
            "-p",
            "--pid"
          ],
          "argument": "",
          "description": "run container in a new PID namespace"
        },
        {
          "names": [
            "--pwd"
          ],
          "argument": "string",
          "description": "initial working directory for payload process inside the container"
        },
        {
          "names": [
            "--rocm"
          ],
          "argument": "",
          "description": "enable experimental Rocm support"
        },
        {
          "names": [
            "-S",
            "--scratch"
          ],
          "argument": "strings",
          "description": "include a scratch directory within the container that is linked to a temporary dir (use -W to force location)"
        },
        {
          "names": [
            "--security"
          ],
          "argument": "strings",
          "description": "enable security features (SELinux, Apparmor, Seccomp)"
        },
        {
          "names": [
            "-u",
            "--userns"
          ],
          "argument": "",
          "description": "run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images."
        },
        {
          "names": [
            "--uts"
          ],
          "argument": "",
          "description": "run container in a new UTS namespace"
        },
        {
          "names": [
            "--vm"
          ],
          "argument": "",
          "description": "enable VM support"
        },
        {
          "names": [
            "--vm-cpu"
          ],
          "argument": "string",
          "description": "number of CPU cores to allocate to Virtual Machine (implies --vm) (default \"1\")"
        },
        {
          "names": [
            "--vm-err"
          ],
          "argument": "",
          "description": "enable attaching stderr from VM"
        },
        {
          "names": [
            "--vm-ip"
          ],
          "argument": "string",
          "description": "IP Address to assign for container usage. Defaults to DHCP within bridge network. (default \"dhcp\")"
        },
        {
          "names": [
            "--vm-ram"
          ],
          "argument": "string",
          "description": "amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default \"1024\")"
        },
        {
          "names": [
            "-W",
            "--workdir"
          ],
          "argument": "string",
          "description": "working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)"
        },
        {
          "names": [
            "-w",
            "--writable"
          ],
          "argument": "",
          "description": "by default all Singularity containers are available as read only. This option makes the file system accessible as read/write."
        },
        {
          "names": [
            "--writable-tmpfs"
          ],
          "argument": "",
          "description": "makes the file system accessible as read-write with non persistent data (with overlay support only)"
        }
      ]
    },
    {
      "name": "run-help",
      "description": "Show the user-defined help for an image",
      "options": [
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "show the help for an app"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for run-help"
        }
      ]
    },
    {
      "name": "search",
      "description": "Search a Container Library for images",
      "options": [
        {
          "names": [
            "--arch"
          ],
          "argument": "string",
          "description": "architecture to search for (default \"amd64\")"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for search"
        },
        {
          "names": [
            "--library"
          ],
          "argument": "string",
          "description": "URI for library to search"
        },
        {
          "names": [
            "--signed"
          ],
          "argument": "",
          "description": "architecture to search for"
        }
      ]
    },
    {
      "name": "shell",
      "description": "Run a shell within a container",
      "options": [
        {
          "names": [
            "--add-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to add"
        },
        {
          "names": [
            "--allow-setuid"
          ],
          "argument": "",
          "description": "allow setuid binaries in container (root only)"
        },
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "set an application to run inside a container"
        },
        {
          "names": [
            "--apply-cgroups"
          ],
          "argument": "string",
          "description": "apply cgroups from file for container processes (root only)"
        },
        {
          "names": [
            "-B",
            "--bind"
          ],
          "argument": "strings",
          "description": "a user-bind path specification. spec has the format src[:dest[:opts]], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('opts') may be specified as 'ro' (read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list."
        },
        {
          "names": [
            "-e",
            "--cleanenv"
          ],
          "argument": "",
          "description": "clean environment before running container"
        },
        {
          "names": [
            "-c",
            "--contain"
          ],
          "argument": "",
          "description": "use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host"
        },
        {
          "names": [
            "-C",
            "--containall"
          ],
          "argument": "",
          "description": "contain not only file systems, but also PID, IPC, and environment"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "dont use cache, and dont create cache"
        },
        {
          "names": [
            "--dns"
          ],
          "argument": "string",
          "description": "list of DNS server separated by commas to add in resolv.conf"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "--drop-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to drop"
        },
        {
          "names": [
            "--env"
          ],
          "argument": "strings",
          "description": "pass environment variable to contained process"
        },
        {
          "names": [
            "--env-file"
          ],
          "argument": "string",
          "description": "pass environment variables from file to contained process"
        },
        {
          "names": [
            "-f",
            "--fakeroot"
          ],
          "argument": "",
          "description": "run container in new user namespace as uid 0"
        },
        {
          "names": [
            "--fusemount"
          ],
          "argument": "strings",
          "description": "A FUSE filesystem mount specification of the form '<type>:<fuse command> <mountpoint>' - where <type> is 'container' or 'host', specifying where the mount will be performed ('container-daemon' or 'host-daemon' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. 'container:sshfs 10.0.0.1:/ /sshfs'. Implies --pid."
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for shell"
        },
        {
          "names": [
            "-H",
            "--home"
          ],
          "argument": "string",
          "description": "a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default \"/home/vierbein\")"
        },
        {
          "names": [
            "--hostname"
          ],
          "argument": "string",
          "description": "set container hostname"
        },
        {
          "names": [
            "-i",
            "--ipc"
          ],
          "argument": "",
          "description": "run container in a new IPC namespace"
        },
        {
          "names": [
            "--keep-privs"
          ],
          "argument": "",
          "description": "let root user keep privileges in container (root only)"
        },
        {
          "names": [
            "-n",
            "--net"
          ],
          "argument": "",
          "description": "run container in a new network namespace (sets up a bridge network interface by default)"
        },
        {
          "names": [
            "--network"
          ],
          "argument": "string",
          "description": "specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default \"bridge\")"
        },
        {
          "names": [
            "--network-args"
          ],
          "argument": "strings",
          "description": "specify network arguments to pass to CNI plugins"
        },
        {
          "names": [
            "--no-home"
          ],
          "argument": "",
          "description": "do NOT mount users home directory if /home is not the current working directory"
        },
        {
          "names": [
            "--no-init"
          ],
          "argument": "",
          "description": "do NOT start shim process with --pid"
        },
        {
          "names": [
            "--no-mount"
          ],
          "argument": "strings",
          "description": "disable one or more mount xxx options set in singularity.conf"
        },
        {
          "names": [
            "--no-privs"
          ],
          "argument": "",
          "description": "drop all privileges from root user in container)"
        },
        {
          "names": [
            "--no-umask"
          ],
          "argument": "",
          "description": "do not propagate umask to the container, set default 0022 umask"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        },
        {
          "names": [
            "--nonet"
          ],
          "argument": "",
          "description": "disable VM network handling"
        },
        {
          "names": [
            "--nv"
          ],
          "argument": "",
          "description": "enable experimental Nvidia support"
        },
        {
          "names": [
            "-o",
            "--overlay"
          ],
          "argument": "strings",
          "description": "use an overlayFS image for persistent data storage or as read-only layer of container"
        },
        {
          "names": [
            "--passphrase"
          ],
          "argument": "",
          "description": "prompt for an encryption passphrase"
        },
        {
          "names": [
            "--pem-path"
          ],
          "argument": "string",
          "description": "enter an path to a PEM formated RSA key for an encrypted container"
        },
        {
          "names": [
            "-p",
            "--pid"
          ],
          "argument": "",
          "description": "run container in a new PID namespace"
        },
        {
          "names": [
            "--pwd"
          ],
          "argument": "string",
          "description": "initial working directory for payload process inside the container"
        },
        {
          "names": [
            "--rocm"
          ],
          "argument": "",
          "description": "enable experimental Rocm support"
        },
        {
          "names": [
            "-S",
            "--scratch"
          ],
          "argument": "strings",
          "description": "include a scratch directory within the container that is linked to a temporary dir (use -W to force location)"
        },
        {
          "names": [
            "--security"
          ],
          "argument": "strings",
          "description": "enable security features (SELinux, Apparmor, Seccomp)"
        },
        {
          "names": [
            "-s",
            "--shell"
          ],
          "argument": "string",
          "description": "path to program to use for interactive shell"
        },
        {
          "names": [
            "--syos"
          ],
          "argument": "",
          "description": "execute SyOS shell"
        },
        {
          "names": [
            "-u",
            "--userns"
          ],
          "argument": "",
          "description": "run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images."
        },
        {
          "names": [
            "--uts"
          ],
          "argument": "",
          "description": "run container in a new UTS namespace"
        },
        {
          "names": [
            "--vm"
          ],
          "argument": "",
          "description": "enable VM support"
        },
        {
          "names": [
            "--vm-cpu"
          ],
          "argument": "string",
          "description": "number of CPU cores to allocate to Virtual Machine (implies --vm) (default \"1\")"
        },
        {
          "names": [
            "--vm-err"
          ],
          "argument": "",
          "description": "enable attaching stderr from VM"
        },
        {
          "names": [
            "--vm-ip"
          ],
          "argument": "string",
          "description": "IP Address to assign for container usage. Defaults to DHCP within bridge network. (default \"dhcp\")"
        },
        {
          "names": [
            "--vm-ram"
          ],
          "argument": "string",
          "description": "amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default \"1024\")"
        },
        {
          "names": [
            "-W",
            "--workdir"
          ],
          "argument": "string",
          "description": "working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)"
        },
        {
          "names": [
            "-w",
            "--writable"
          ],
          "argument": "",
          "description": "by default all Singularity containers are available as read only. This option makes the file system accessible as read/write."
        },
        {
          "names": [
            "--writable-tmpfs"
          ],
          "argument": "",
          "description": "makes the file system accessible as read-write with non persistent data (with overlay support only)"
        }
      ]
    },
    {
      "name": "sif",
      "description": "siftool is a program for Singularity Image Format (SIF) file manipulation",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for sif"
        }
      ]
    },
    {
      "name": "sign",
      "description": "Attach digital signature(s) to an image",
      "options": [
        {
          "names": [
            "-g",
            "--group-id"
          ],
          "argument": "uint32",
          "description": "sign objects with the specified group ID"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for sign"
        },
        {
          "names": [
            "-k",
            "--keyidx"
          ],
          "argument": "int",
          "description": "private key to use (index from 'key list')"
        },
        {
          "names": [
            "-i",
            "--sif-id"
          ],
          "argument": "uint32",
          "description": "sign object with the specified ID"
        }
      ]
    },
    {
      "name": "test",
      "description": "Run the user-defined tests within a container",
      "options": [
        {
          "names": [
            "--add-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to add"
        },
        {
          "names": [
            "--allow-setuid"
          ],
          "argument": "",
          "description": "allow setuid binaries in container (root only)"
        },
        {
          "names": [
            "--app"
          ],
          "argument": "string",
          "description": "set an application to run inside a container"
        },
        {
          "names": [
            "--apply-cgroups"
          ],
          "argument": "string",
          "description": "apply cgroups from file for container processes (root only)"
        },
        {
          "names": [
            "-B",
            "--bind"
          ],
          "argument": "strings",
          "description": "a user-bind path specification. spec has the format src[:dest[:opts]], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('opts') may be specified as 'ro' (read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list."
        },
        {
          "names": [
            "-e",
            "--cleanenv"
          ],
          "argument": "",
          "description": "clean environment before running container"
        },
        {
          "names": [
            "-c",
            "--contain"
          ],
          "argument": "",
          "description": "use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host"
        },
        {
          "names": [
            "-C",
            "--containall"
          ],
          "argument": "",
          "description": "contain not only file systems, but also PID, IPC, and environment"
        },
        {
          "names": [
            "--disable-cache"
          ],
          "argument": "",
          "description": "dont use cache, and dont create cache"
        },
        {
          "names": [
            "--dns"
          ],
          "argument": "string",
          "description": "list of DNS server separated by commas to add in resolv.conf"
        },
        {
          "names": [
            "--docker-login"
          ],
          "argument": "",
          "description": "login to a Docker Repository interactively"
        },
        {
          "names": [
            "--drop-caps"
          ],
          "argument": "string",
          "description": "a comma separated capability list to drop"
        },
        {
          "names": [
            "--env"
          ],
          "argument": "strings",
          "description": "pass environment variable to contained process"
        },
        {
          "names": [
            "--env-file"
          ],
          "argument": "string",
          "description": "pass environment variables from file to contained process"
        },
        {
          "names": [
            "-f",
            "--fakeroot"
          ],
          "argument": "",
          "description": "run container in new user namespace as uid 0"
        },
        {
          "names": [
            "--fusemount"
          ],
          "argument": "strings",
          "description": "A FUSE filesystem mount specification of the form '<type>:<fuse command> <mountpoint>' - where <type> is 'container' or 'host', specifying where the mount will be performed ('container-daemon' or 'host-daemon' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. 'container:sshfs 10.0.0.1:/ /sshfs'. Implies --pid."
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for test"
        },
        {
          "names": [
            "-H",
            "--home"
          ],
          "argument": "string",
          "description": "a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default \"/home/vierbein\")"
        },
        {
          "names": [
            "--hostname"
          ],
          "argument": "string",
          "description": "set container hostname"
        },
        {
          "names": [
            "-i",
            "--ipc"
          ],
          "argument": "",
          "description": "run container in a new IPC namespace"
        },
        {
          "names": [
            "--keep-privs"
          ],
          "argument": "",
          "description": "let root user keep privileges in container (root only)"
        },
        {
          "names": [
            "-n",
            "--net"
          ],
          "argument": "",
          "description": "run container in a new network namespace (sets up a bridge network interface by default)"
        },
        {
          "names": [
            "--network"
          ],
          "argument": "string",
          "description": "specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default \"bridge\")"
        },
        {
          "names": [
            "--network-args"
          ],
          "argument": "strings",
          "description": "specify network arguments to pass to CNI plugins"
        },
        {
          "names": [
            "--no-home"
          ],
          "argument": "",
          "description": "do NOT mount users home directory if /home is not the current working directory"
        },
        {
          "names": [
            "--no-init"
          ],
          "argument": "",
          "description": "do NOT start shim process with --pid"
        },
        {
          "names": [
            "--no-mount"
          ],
          "argument": "strings",
          "description": "disable one or more mount xxx options set in singularity.conf"
        },
        {
          "names": [
            "--no-privs"
          ],
          "argument": "",
          "description": "drop all privileges from root user in container)"
        },
        {
          "names": [
            "--no-umask"
          ],
          "argument": "",
          "description": "do not propagate umask to the container, set default 0022 umask"
        },
        {
          "names": [
            "--nohttps"
          ],
          "argument": "",
          "description": "do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)"
        },
        {
          "names": [
            "--nonet"
          ],
          "argument": "",
          "description": "disable VM network handling"
        },
        {
          "names": [
            "--nv"
          ],
          "argument": "",
          "description": "enable experimental Nvidia support"
        },
        {
          "names": [
            "-o",
            "--overlay"
          ],
          "argument": "strings",
          "description": "use an overlayFS image for persistent data storage or as read-only layer of container"
        },
        {
          "names": [
            "--passphrase"
          ],
          "argument": "",
          "description": "prompt for an encryption passphrase"
        },
        {
          "names": [
            "--pem-path"
          ],
          "argument": "string",
          "description": "enter an path to a PEM formated RSA key for an encrypted container"
        },
        {
          "names": [
            "-p",
            "--pid"
          ],
          "argument": "",
          "description": "run container in a new PID namespace"
        },
        {
          "names": [
            "--pwd"
          ],
          "argument": "string",
          "description": "initial working directory for payload process inside the container"
        },
        {
          "names": [
            "--rocm"
          ],
          "argument": "",
          "description": "enable experimental Rocm support"
        },
        {
          "names": [
            "-S",
            "--scratch"
          ],
          "argument": "strings",
          "description": "include a scratch directory within the container that is linked to a temporary dir (use -W to force location)"
        },
        {
          "names": [
            "--security"
          ],
          "argument": "strings",
          "description": "enable security features (SELinux, Apparmor, Seccomp)"
        },
        {
          "names": [
            "-u",
            "--userns"
          ],
          "argument": "",
          "description": "run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images."
        },
        {
          "names": [
            "--uts"
          ],
          "argument": "",
          "description": "run container in a new UTS namespace"
        },
        {
          "names": [
            "--vm"
          ],
          "argument": "",
          "description": "enable VM support"
        },
        {
          "names": [
            "--vm-cpu"
          ],
          "argument": "string",
          "description": "number of CPU cores to allocate to Virtual Machine (implies --vm) (default \"1\")"
        },
        {
          "names": [
            "--vm-err"
          ],
          "argument": "",
          "description": "enable attaching stderr from VM"
        },
        {
          "names": [
            "--vm-ip"
          ],
          "argument": "string",
          "description": "IP Address to assign for container usage. Defaults to DHCP within bridge network. (default \"dhcp\")"
        },
        {
          "names": [
            "--vm-ram"
          ],
          "argument": "string",
          "description": "amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default \"1024\")"
        },
        {
          "names": [
            "-W",
            "--workdir"
          ],
          "argument": "string",
          "description": "working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)"
        },
        {
          "names": [
            "-w",
            "--writable"
          ],
          "argument": "",
          "description": "by default all Singularity containers are available as read only. This option makes the file system accessible as read/write."
        },
        {
          "names": [
            "--writable-tmpfs"
          ],
          "argument": "",
          "description": "makes the file system accessible as read-write with non persistent data (with overlay support only)"
        }
      ]
    },
    {
      "name": "verify",
      "description": "Verify cryptographic signatures attached to an image",
      "options": [
        {
          "names": [
            "-a",
            "--all"
          ],
          "argument": "",
          "description": "verify all objects"
        },
        {
          "names": [
            "-g",
            "--group-id"
          ],
          "argument": "uint32",
          "description": "verify objects with the specified group ID"
        },
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for verify"
        },
        {
          "names": [
            "-j",
            "--json"
          ],
          "argument": "",
          "description": "output json"
        },
        {
          "names": [
            "--legacy-insecure"
          ],
          "argument": "",
          "description": "enable verification of (insecure) legacy signatures"
        },
        {
          "names": [
            "-l",
            "--local"
          ],
          "argument": "",
          "description": "only verify with local key(s) in keyring"
        },
        {
          "names": [
            "-i",
            "--sif-id"
          ],
          "argument": "uint32",
          "description": "verify object with the specified ID"
        },
        {
          "names": [
            "-u",
            "--url"
          ],
          "argument": "string",
          "description": "specify a URL for a key server"
        }
      ]
    },
    {
      "name": "version",
      "description": "Show the version for Singularity",
      "options": [
        {
          "names": [
            "-h",
            "--help"
          ],
          "argument": "",
          "description": "help for version"
        }
      ]
    }
  ]
}
