{"name":"vg","description":"variation graph tool","usage":"vg <command> [options]","options":[],"subcommands":[{"name":"autoindex","description":"mapping tool-oriented index construction from interchange formats","usage":"vg autoindex [options]","options":[{"names":["-p","--prefix"],"argument":"PREFIX","description":"prefix to use for all output (default: index)"},{"names":["-w","--workflow"],"argument":"NAME","description":"workflow to produce indexes for, can be provided multiple times. options: map, mpmap, rpvg, giraffe (default: map)"},{"names":["-r","--ref-fasta"],"argument":"FILE","description":"FASTA file containing the reference sequence (may repeat)"},{"names":["-v","--vcf"],"argument":"FILE","description":"VCF file with sequence names matching -r (may repeat)"},{"names":["-i","--ins-fasta"],"argument":"FILE","description":"FASTA file with sequences of INS variants from -v"},{"names":["-g","--gfa"],"argument":"FILE","description":"GFA file to make a graph from"},{"names":["-x","--tx-gff"],"argument":"FILE","description":"GTF/GFF file with transcript annotations (may repeat)"},{"names":["-f","--gff-feature"],"argument":"STR","description":"GTF/GFF feature type (col. 3) to add to graph (default: exon)"},{"names":["-a","--gff-tx-tag"],"argument":"STR","description":"GTF/GFF tag (in col. 9) for transcript ID (default: transcript_id)"},{"names":["-T","--tmp-dir"],"argument":"DIR","description":"temporary directory to use for intermediate files"},{"names":["-M","--target-mem"],"argument":"MEM","description":"target max memory usage (not exact, formatted INT[kMG]) (default: 1/2 of available)"},{"names":["-t","--threads"],"argument":"NUM","description":"number of threads (default: all available)"},{"names":["-V","--verbosity"],"argument":"NUM","description":"log to stderr (0 = none, 1 = basic, 2 = debug; default 1)"},{"names":["-h","--help"],"argument":"","description":"print this help message to stderr and exit"}]},{"name":"construct","description":"graph construction","usage":"vg construct [options] >new.vg","options":[{"names":["-r","--reference"],"argument":"FILE","description":"input FASTA reference (may repeat)"},{"names":["-v","--vcf"],"argument":"FILE","description":"input VCF (may repeat)"},{"names":["-n","--rename"],"argument":"V=F","description":"match contig V in the VCFs to contig F in the FASTAs (may repeat)"},{"names":["-a","--alt-paths"],"argument":"","description":"save paths for alts of variants by variant ID"},{"names":["-R","--region"],"argument":"REGION","description":"specify a VCF contig name or 1-based inclusive region (may repeat, if on different contigs)"},{"names":["-C","--region-is-chrom"],"argument":"","description":"don't attempt to parse the regions (use when the reference sequence name could be inadvertently parsed as a region)"},{"names":["-z","--region-size"],"argument":"N","description":"variants per region to parallelize (default: 1024)"},{"names":["-t","--threads"],"argument":"N","description":"use N threads to construct graph (defaults to numCPUs)"},{"names":["-S","--handle-sv"],"argument":"","description":"include structural variants in construction of graph."},{"names":["-I","--insertions"],"argument":"FILE","description":"a FASTA file containing insertion sequences (referred to in VCF) to add to graph."},{"names":["-f","--flat-alts"],"argument":"N","description":"don't chop up alternate alleles from input VCF"},{"names":["-l","--parse-max"],"argument":"N","description":"don't chop up alternate alleles from input VCF longer than N (default: 100)"},{"names":["-i","--no-trim-indels"],"argument":"","description":"don't remove the 1bp reference base from alt alleles of indels."},{"names":["-M","--msa"],"argument":"FILE","description":"input multiple sequence alignment"},{"names":["-F","--msa-format"],"argument":"","description":"format of the MSA file (options: fasta, clustal; default fasta)"},{"names":["-d","--drop-msa-paths"],"argument":"","description":"don't add paths for the MSA sequences into the graph"},{"names":["-m","--node-max"],"argument":"N","description":"limit the maximum allowable node sequence size (default: 32) nodes greater than this threshold will be divided Note: nodes larger than ~1024 bp can't be GCSA2-indexed"},{"names":["-p","--progress"],"argument":"","description":"show progress"}]},{"name":"rna","description":"construct splicing graphs and pantranscriptomes","usage":"vg rna [options] graph.[vg|pg|hg|og] > splicing_graph.[vg|pg|hg|og]","options":[{"names":["-t","--threads"],"argument":"INT","description":"number of compute threads to use [1]"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-h","--help"],"argument":"","description":"print help message"},{"names":["-n","--transcripts"],"argument":"FILE","description":"transcript file(s) in gtf/gff format; may repeat"},{"names":["-m","--introns"],"argument":"FILE","description":"intron file(s) in bed format; may repeat"},{"names":["-y","--feature-type"],"argument":"NAME","description":"parse only this feature type in the gtf/gff (parses all if empty) [exon]"},{"names":["-s","--transcript-tag"],"argument":"NAME","description":"use this attribute tag in the gtf/gff file(s) as id [transcript_id]"},{"names":["-l","--haplotypes"],"argument":"FILE","description":"project transcripts onto haplotypes in GBWT index file"},{"names":["-j","--use-hap-ref"],"argument":"","description":"use haplotype paths in GBWT index as reference sequences (disables projection)"},{"names":["-e","--proj-embed-paths"],"argument":"","description":"project transcripts onto embedded haplotype paths"},{"names":["-c","--path-collapse"],"argument":"TYPE","description":"collapse identical transcript paths across no|haplotype|all paths [haplotype]"},{"names":["-k","--max-node-length"],"argument":"INT","description":"chop nodes longer than maximum node length (0 disables chopping) [0]"},{"names":["-d","--remove-non-gene"],"argument":"","description":"remove intergenic and intronic regions (deletes all paths in the graph)"},{"names":["-o","--do-not-sort"],"argument":"","description":"do not topological sort and compact the graph"},{"names":["-r","--add-ref-paths"],"argument":"","description":"add reference transcripts as embedded paths in the graph"},{"names":["-a","--add-hap-paths"],"argument":"","description":"add projected transcripts as embedded paths in the graph"},{"names":["-b","--write-gbwt"],"argument":"FILE","description":"write pantranscriptome transcript paths as GBWT index file"},{"names":["-f","--write-fasta"],"argument":"FILE","description":"write pantranscriptome transcript sequences as fasta file"},{"names":["-i","--write-info"],"argument":"FILE","description":"write pantranscriptome transcript info table as tsv file"},{"names":["-q","--out-exclude-ref"],"argument":"","description":"exclude reference transcripts from pantranscriptome output"},{"names":["-g","--gbwt-bidirectional"],"argument":"","description":"use bidirectional paths in GBWT index construction"}]},{"name":"index","description":"index graphs or alignments for random access or mapping","usage":"vg index [options] <graph1.vg> [graph2.vg ...]","options":[{"names":["-b","--temp-dir"],"argument":"DIR","description":"use DIR for temporary files"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-x","--xg-name"],"argument":"FILE","description":"use this file to store a succinct, queryable version of the graph(s), or read for GCSA or distance indexing"},{"names":["-L","--xg-alts"],"argument":"","description":"include alt paths in xg"},{"names":["-v","--vcf-phasing"],"argument":"FILE","description":"generate threads from the haplotypes in the VCF file FILE"},{"names":["-W","--ignore-missing"],"argument":"","description":"don't warn when variants in the VCF are missing from the graph; silently skip them"},{"names":["-T","--store-threads"],"argument":"","description":"generate threads from the embedded paths"},{"names":["-M","--store-gam"],"argument":"FILE","description":"generate threads from the alignments in gam FILE (many allowed)"},{"names":["-F","--store-gaf"],"argument":"FILE","description":"generate threads from the alignments in gaf FILE (many allowed)"},{"names":["-G","--gbwt-name"],"argument":"FILE","description":"store the threads as GBWT in FILE"},{"names":["-z","--actual-phasing"],"argument":"","description":"do not make unphased homozygous genotypes phased"},{"names":["-P","--force-phasing"],"argument":"","description":"replace unphased genotypes with randomly phased ones"},{"names":["-o","--discard-overlaps"],"argument":"","description":"skip overlapping alternate alleles if the overlap cannot be resolved"},{"names":["-B","--batch-size"],"argument":"N","description":"number of samples per batch (default 200)"},{"names":["-u","--buffer-size"],"argument":"N","description":"GBWT construction buffer size in millions of nodes (default 100)"},{"names":["-n","--id-interval"],"argument":"N","description":"store haplotype ids at one out of N positions (default 1024)"},{"names":["-R","--range"],"argument":"X..Y","description":"process samples X to Y (inclusive)"},{"names":["-r","--rename"],"argument":"V=P","description":"rename contig V in the VCFs to path P in the graph (may repeat)"},{"names":["--rename-variants"],"argument":"","description":"when renaming contigs, find variants in the graph based on the new name"},{"names":["-I","--region"],"argument":"C:S-E","description":"operate on only the given 1-based region of the given VCF contig (may repeat)"},{"names":["-E","--exclude"],"argument":"SAMPLE","description":"exclude any samples with the given name from haplotype indexing"},{"names":["-g","--gcsa-out"],"argument":"FILE","description":"output a GCSA2 index to the given file"},{"names":["-f","--mapping"],"argument":"FILE","description":"use this node mapping in GCSA2 construction"},{"names":["-k","--kmer-size"],"argument":"N","description":"index kmers of size N in the graph (default 16)"},{"names":["-X","--doubling-steps"],"argument":"N","description":"use this number of doubling steps for GCSA2 construction (default 4)"},{"names":["-Z","--size-limit"],"argument":"N","description":"limit temporary disk space usage to N gigabytes (default 2048)"},{"names":["-V","--verify-index"],"argument":"","description":"validate the GCSA2 index using the input kmers (important for testing)"},{"names":["--index-sorted-vg"],"argument":"","description":"input is ID-sorted .vg format graph chunks, store a VGI index of the sorted vg in INPUT.vg.vgi"},{"names":["-j"],"argument":"","description":"--dist-name FILE use this file to store a snarl-based distance index"},{"names":["--snarl-limit"],"argument":"N","description":"don't store snarl distances for snarls with more than N nodes (default 3000)"},{"names":["-w"],"argument":"","description":"--distance-limit N cap beyond which the minimum distance is no longer accurate (default inf)"}]},{"name":"giraffe","description":"fast haplotype-aware short read alignment","usage":"vg giraffe [options] [ref.fa [variants.vcf.gz]] > output.gam","options":[{"names":["-Z","--gbz-name"],"argument":"FILE","description":"use this GBZ file (GBWT index + GBWTGraph)"},{"names":["-m","--minimizer-name"],"argument":"FILE","description":"use this minimizer index"},{"names":["-d","--dist-name"],"argument":"FILE","description":"cluster using this distance index"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-G","--gam-in"],"argument":"FILE","description":"read and realign GAM-format reads from FILE"},{"names":["-f","--fastq-in"],"argument":"FILE","description":"read and align FASTQ-format reads from FILE (two are allowed, one for each mate)"},{"names":["-i","--interleaved"],"argument":"","description":"GAM/FASTQ input is interleaved pairs, for paired-end alignment"},{"names":["-x","--xg-name"],"argument":"FILE","description":"use this xg index or graph"},{"names":["-g","--graph-name"],"argument":"FILE","description":"use this GBWTGraph"},{"names":["-H","--gbwt-name"],"argument":"FILE","description":"use this GBWT index"},{"names":["-N","--sample"],"argument":"NAME","description":"add this sample name"},{"names":["-R","--read-group"],"argument":"NAME","description":"add this read group"},{"names":["-o","--output-format"],"argument":"NAME","description":"output the alignments in NAME format (gam / gaf / json / tsv / SAM / BAM / CRAM) [gam]"},{"names":["--ref-paths"],"argument":"FILE","description":"ordered list of paths in the graph, one per line or HTSlib .dict, for HTSLib @SQ headers"},{"names":["--named-coordinates"],"argument":"","description":"produce GAM outputs in named-segment (GFA) space"},{"names":["-P","--prune-low-cplx"],"argument":"","description":"prune short and low complexity anchors during linear format realignment"},{"names":["-n","--discard"],"argument":"","description":"discard all output alignments (for profiling)"},{"names":["--output-basename"],"argument":"NAME","description":"write output to a GAM file beginning with the given prefix for each setting combination"},{"names":["--report-name"],"argument":"NAME","description":"write a TSV of output file and mapping speed to the given file"},{"names":["--show-work"],"argument":"","description":"log how the mapper comes to its conclusions about mapping locations"},{"names":["-b","--parameter-preset"],"argument":"NAME","description":"set computational parameters (fast / default) [default]"},{"names":["-M","--max-multimaps"],"argument":"INT","description":"produce up to INT alignments for each read [1]"},{"names":["-c","--hit-cap"],"argument":"INT","description":"use all minimizers with at most INT hits [10]"},{"names":["-C","--hard-hit-cap"],"argument":"INT","description":"ignore all minimizers with more than INT hits [500]"},{"names":["-F","--score-fraction"],"argument":"FLOAT","description":"select minimizers between hit caps until score is FLOAT of total [0.9]"},{"names":["-U","--max-min"],"argument":"INT","description":"use at most INT minimizers [500]"},{"names":["--num-bp-per-min"],"argument":"INT","description":"use maximum of number minimizers calculated by READ_LENGTH / INT and --max-min [1000]"},{"names":["-D","--distance-limit"],"argument":"INT","description":"cluster using this distance limit [200]"},{"names":["-e","--max-extensions"],"argument":"INT","description":"extend up to INT clusters [800]"},{"names":["-a","--max-alignments"],"argument":"INT","description":"align up to INT extensions [8]"},{"names":["-s","--cluster-score"],"argument":"FLOAT","description":"only extend clusters if they are within INT of the best score [50]"},{"names":["-S","--pad-cluster-score"],"argument":"FLOAT","description":"also extend clusters within INT of above threshold to get a second-best cluster [20]"},{"names":["-u","--cluster-coverage"],"argument":"FLOAT","description":"only extend clusters if they are within FLOAT of the best read coverage [0.3]"},{"names":["-v","--extension-score"],"argument":"INT","description":"only align extensions if their score is within INT of the best score [1]"},{"names":["-w","--extension-set"],"argument":"FLOAT","description":"only align extension sets if their score is within INT of the best score [20]"},{"names":["-O","--no-dp"],"argument":"","description":"disable all gapped alignment"},{"names":["-r","--rescue-attempts"],"argument":"INT","description":"attempt up to INT rescues per read in a pair [15]"},{"names":["-L","--max-fragment-length"],"argument":"INT","description":"assume that fragment lengths should be smaller than INT when estimating the fragment length distribution [2000]"},{"names":["--exclude-overlapping-min"],"argument":"","description":"exclude overlapping minimizers"},{"names":["--paired-distance-limit"],"argument":"FLOAT","description":"cluster pairs of read using a distance limit FLOAT standard deviations greater than the mean [2]"},{"names":["--rescue-subgraph-size"],"argument":"FLOAT","description":"search for rescued alignments FLOAT standard deviations greater than the mean [4]"},{"names":["--rescue-seed-limit"],"argument":"INT","description":"attempt rescue with at most INT seeds [100]"},{"names":["--align-from-chains"],"argument":"","description":"chain up extensions to create alignments, instead of doing each separately"},{"names":["--chaining-cluster-distance"],"argument":"INT","description":"maximum distance to cluster over before chaining [80]"},{"names":["--max-lookback-bases"],"argument":"INT","description":"maximum distance to look back when chaining [80]"},{"names":["--min-lookback-items"],"argument":"INT","description":"minimum items to look back when chaining [1]"},{"names":["--max-chain-connection"],"argument":"INT","description":"maximum distance across which to connect seeds when aligning a chain [80]"},{"names":["--max-tail-length"],"argument":"INT","description":"maximum length of a tail to align before forcing softclipping when aligning a chain [100]"},{"names":["-A","--rescue-algorithm"],"argument":"NAME","description":"use algorithm NAME for rescue (none / dozeu / gssw) [dozeu]"},{"names":["--fragment-mean"],"argument":"FLOAT","description":"force the fragment length distribution to have this mean (requires --fragment-stdev)"},{"names":["--fragment-stdev"],"argument":"FLOAT","description":"force the fragment length distribution to have this standard deviation (requires --fragment-mean)"},{"names":["--track-provenance"],"argument":"","description":"track how internal intermediate alignment candidates were arrived at"},{"names":["--track-correctness"],"argument":"","description":"track if internal intermediate alignment candidates are correct (implies --track-provenance)"},{"names":["-B","--batch-size"],"argument":"INT","description":"number of reads or pairs per batch to distribute to threads [512]"},{"names":["-t","--threads"],"argument":"INT","description":"number of mapping threads to use"}]},{"name":"mpmap","description":"splice-aware multipath alignment of short reads","usage":"vg mpmap [options] -x graph.xg -g index.gcsa [-f reads1.fq [-f reads2.fq] | -G reads.gam] > aln.gamp","options":[{"names":["-x","--graph-name"],"argument":"FILE","description":"graph (required; XG format recommended but other formats are valid, see `vg convert`)"},{"names":["-g","--gcsa-name"],"argument":"FILE","description":"use this GCSA2/LCP index pair for MEMs (required; both FILE and FILE.lcp, see `vg index`)"},{"names":["-d","--dist-name"],"argument":"FILE","description":"use this snarl distance index for clustering (recommended, see `vg index`)"},{"names":["-s","--snarls"],"argument":"FILE","description":"align to alternate paths in these snarls (unnecessary if providing -d, see `vg snarls`)"},{"names":["-f","--fastq"],"argument":"FILE","description":"input FASTQ (possibly gzipped), can be given twice for paired ends (for stdin use -)"},{"names":["-i","--interleaved"],"argument":"","description":"input contains interleaved paired ends"},{"names":["-n","--nt-type"],"argument":"TYPE","description":"sequence type preset: 'DNA' for genomic data, 'RNA' for transcriptomic data [RNA]"},{"names":["-l","--read-length"],"argument":"TYPE","description":"read length preset: 'very-short', 'short', or 'long' (approx. <50bp, 50-500bp, and >500bp) [short]"},{"names":["-e","--error-rate"],"argument":"TYPE","description":"error rate preset: 'low' or 'high' (approx. PHRED >20 and <20) [low]"},{"names":["-F","--output-fmt"],"argument":"TYPE","description":"format to output alignments in: 'GAMP for' multipath alignments, 'GAM' or 'GAF' for single-path alignments, 'SAM', 'BAM', or 'CRAM' for linear reference alignments (may also require -S) [GAMP]"},{"names":["-S","--ref-paths"],"argument":"FILE","description":"paths in the graph either 1) one per line in a text file, or 2) in an HTSlib .dict, to treat as reference sequences for HTSlib formats (see -F) [all paths]"},{"names":["-N","--sample"],"argument":"NAME","description":"add this sample name to output"},{"names":["-R","--read-group"],"argument":"NAME","description":"add this read group to output"},{"names":["-p","--suppress-progress"],"argument":"","description":"do not report progress to stderr"},{"names":["-t","--threads"],"argument":"INT","description":"number of compute threads to use [all available]"},{"names":["-X","--not-spliced"],"argument":"","description":"do not form spliced alignments, even if aligning with --nt-type 'rna'"},{"names":["-M","--max-multimaps"],"argument":"INT","description":"report (up to) this many mappings per read [10 rna / 1 dna]"},{"names":["-a","--agglomerate-alns"],"argument":"","description":"combine separate multipath alignments into one (possibly disconnected) alignment"},{"names":["-r","--intron-distr"],"argument":"FILE","description":"intron length distribution (from scripts/intron_length_distribution.py)"},{"names":["-Q","--mq-max"],"argument":"INT","description":"cap mapping quality estimates at this much [60]"},{"names":["-b","--frag-sample"],"argument":"INT","description":"look for this many unambiguous mappings to estimate the fragment length distribution [1000]"},{"names":["-I","--frag-mean"],"argument":"FLOAT","description":"mean for a pre-determined fragment length distribution (also requires -D)"},{"names":["-D","--frag-stddev"],"argument":"FLOAT","description":"standard deviation for a pre-determined fragment length distribution (also requires -I)"},{"names":["-G","--gam-input"],"argument":"FILE","description":"input GAM (for stdin, use -)"},{"names":["-u","--map-attempts"],"argument":"INT","description":"perform (up to) this many mappings per read (0 for no limit) [24 paired / 64 unpaired]"},{"names":["-c","--hit-max"],"argument":"INT","description":"use at most this many hits for any match seeds (0 for no limit) [1024 DNA / 100 RNA]"},{"names":["-A","--no-qual-adjust"],"argument":"","description":"do not perform base quality adjusted alignments even when base qualities are available"},{"names":["-q","--match"],"argument":"INT","description":"use this match score [1]"},{"names":["-z","--mismatch"],"argument":"INT","description":"use this mismatch penalty [4 low error, 1 high error]"},{"names":["-o","--gap-open"],"argument":"INT","description":"use this gap open penalty [6 low error, 1 high error]"},{"names":["-y","--gap-extend"],"argument":"INT","description":"use this gap extension penalty [1]"},{"names":["-L","--full-l-bonus"],"argument":"INT","description":"add this score to alignments that align each end of the read [mismatch+1 short, 0 long]"},{"names":["-w","--score-matrix"],"argument":"FILE","description":"read a 4x4 integer substitution scoring matrix from a file (in the order ACGT)"},{"names":["-m","--remove-bonuses"],"argument":"","description":"remove full length alignment bonuses in reported scores"}]},{"name":"augment","description":"augment a graph from an alignment","usage":"vg augment [options] <graph.vg> [alignment.gam] > augmented_graph.vg","options":[{"names":["-i","--include-paths"],"argument":"","description":"merge the paths implied by alignments into the graph"},{"names":["-S","--keep-softclips"],"argument":"","description":"include softclips from input alignments (they are cut by default)"},{"names":["-B","--label-paths"],"argument":"","description":"don't augment with alignments, just use them for labeling the graph"},{"names":["-Z","--translation"],"argument":"FILE","description":"save translations from augmented back to base graph to FILE"},{"names":["-A","--alignment-out"],"argument":"FILE","description":"save augmented GAM reads to FILE"},{"names":["-F","--gaf"],"argument":"","description":"expect (and write) GAF instead of GAM"},{"names":["-s","--subgraph"],"argument":"","description":"graph is a subgraph of the one used to create GAM. ignore alignments with missing nodes"},{"names":["-m","--min-coverage"],"argument":"N","description":"minimum coverage of a breakpoint required for it to be added to the graph"},{"names":["-c","--expected-cov"],"argument":"N","description":"expected coverage. used only for memory tuning [default : 128]"},{"names":["-q","--min-baseq"],"argument":"N","description":"ignore edits whose sequence have average base quality < N"},{"names":["-Q","--min-mapq"],"argument":"N","description":"ignore alignments with mapping quality < N"},{"names":["-N","--max-n"],"argument":"F","description":"maximum fraction of N bases in an edit for it to be included [default : 0.25]"},{"names":["-E","--edges-only"],"argument":"","description":"only edges implied by reads, ignoring edits"},{"names":["-h","--help"],"argument":"","description":"print this help message"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-v","--verbose"],"argument":"","description":"print information and warnings about vcf generation"},{"names":["-t","--threads"],"argument":"N","description":"number of threads (only 1st pass with -m or -q option is multithreaded)"},{"names":["-l","--include-loci"],"argument":"FILE","description":"merge all alleles in loci into the graph"},{"names":["-L","--include-gt"],"argument":"FILE","description":"merge only the alleles in called genotypes into the graph"}]},{"name":"pack","description":"convert alignments to a compact coverage index","usage":"vg pack [options]","options":[{"names":["-x","--xg"],"argument":"FILE","description":"use this basis graph (any format accepted, does not have to be xg)"},{"names":["-o","--packs-out"],"argument":"FILE","description":"write compressed coverage packs to this output file"},{"names":["-i","--packs-in"],"argument":"FILE","description":"begin by summing coverage packs from each provided FILE"},{"names":["-g","--gam"],"argument":"FILE","description":"read alignments from this GAM file (could be '-' for stdin)"},{"names":["-a","--gaf"],"argument":"FILE","description":"read alignments from this GAF file (could be '-' for stdin)"},{"names":["-d","--as-table"],"argument":"","description":"write table on stdout representing packs"},{"names":["-D","--as-edge-table"],"argument":"","description":"write table on stdout representing edge coverage"},{"names":["-u","--as-qual-table"],"argument":"","description":"write table on stdout representing average node mapqs"},{"names":["-e","--with-edits"],"argument":"","description":"record and write edits rather than only recording graph-matching coverage"},{"names":["-b","--bin-size"],"argument":"N","description":"number of sequence bases per CSA bin [default: inf]"},{"names":["-n","--node"],"argument":"ID","description":"write table for only specified node(s)"},{"names":["-N","--node-list"],"argument":"FILE","description":"a white space or line delimited list of nodes to collect"},{"names":["-Q","--min-mapq"],"argument":"N","description":"ignore reads with MAPQ < N and positions with base quality < N [default: 0]"},{"names":["-c","--expected-cov"],"argument":"N","description":"expected coverage. used only for memory tuning [default : 128]"},{"names":["-s","--trim-ends"],"argument":"N","description":"ignore the first and last N bases of each read"},{"names":["-t","--threads"],"argument":"N","description":"use N threads (defaults to numCPUs)"}]},{"name":"call","description":"call or genotype VCF variants","usage":"vg call [options] <graph> > output.vcf","options":[{"names":["-k","--pack"],"argument":"FILE","description":"Supports created from vg pack for given input graph"},{"names":["-m","--min-support"],"argument":"M,N","description":"Minimum allele support (M) and minimum site support (N) for call [default = 2,4]"},{"names":["-e","--baseline-error"],"argument":"X,Y","description":"Baseline error rates for Poisson model for small (X) and large (Y) variants [default= 0.005,0.01]"},{"names":["-B","--bias-mode"],"argument":"","description":"Use old ratio-based genotyping algorithm as opposed to porbablistic model"},{"names":["-b","--het-bias"],"argument":"M,N","description":"Homozygous alt/ref allele must have >= M/N times more support than the next best allele [default = 6,6]"},{"names":["-G","--gaf"],"argument":"","description":"Output GAF genotypes instead of VCF"},{"names":["-T","--traversals"],"argument":"","description":"Output all candidate traversals in GAF without doing any genotyping"},{"names":["-M","--trav-padding"],"argument":"N","description":"Extend each flank of traversals (from -T) with reference path by N bases if possible"},{"names":["-v","--vcf"],"argument":"FILE","description":"VCF file to genotype (must have been used to construct input graph with -a)"},{"names":["-a","--genotype-snarls"],"argument":"","description":"Genotype every snarl, including reference calls (use to compare multiple samples)"},{"names":["-A","--all-snarls"],"argument":"","description":"Genotype all snarls, including nested child snarls (like deconstruct -a)"},{"names":["-c","--min-length"],"argument":"N","description":"Genotype only snarls with reference traversal length >= N"},{"names":["-C","--max-length"],"argument":"N","description":"Genotype only snarls with reference traversal length <= N"},{"names":["-f","--ref-fasta"],"argument":"FILE","description":"Reference fasta (required if VCF contains symbolic deletions or inversions)"},{"names":["-i","--ins-fasta"],"argument":"FILE","description":"Insertions fasta (required if VCF contains symbolic insertions)"},{"names":["-s","--sample"],"argument":"NAME","description":"Sample name [default=SAMPLE]"},{"names":["-r","--snarls"],"argument":"FILE","description":"Snarls (from vg snarls) to avoid recomputing."},{"names":["-g","--gbwt"],"argument":"FILE","description":"Only call genotypes that are present in given GBWT index."},{"names":["-z","--gbz"],"argument":"","description":"Only call genotypes that are present in GBZ index (applies only if input graph is GBZ)."},{"names":["-N","--translation"],"argument":"FILE","description":"Node ID translation (as created by vg gbwt --translation) to apply to snarl names in output"},{"names":["-p","--ref-path"],"argument":"NAME","description":"Reference path to call on (multipile allowed. defaults to all paths)"},{"names":["-o","--ref-offset"],"argument":"N","description":"Offset in reference path (multiple allowed, 1 per path)"},{"names":["-l","--ref-length"],"argument":"N","description":"Override length of reference in the contig field of output VCF"},{"names":["-d","--ploidy"],"argument":"N","description":"Ploidy of sample. Only 1 and 2 supported. (default: 2)"},{"names":["-n","--nested"],"argument":"","description":"Activate nested calling mode (experimental)"},{"names":["-I","--chains"],"argument":"","description":"Call chains instead of snarls (experimental)"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"},{"names":["-R","--ploidy-regex"],"argument":"RULES","description":"use the given comma-separated list of colon-delimited REGEX:PLOIDY rules to assign ploidies to contigs not visited by the selected samples, or to all contigs simulated from if no samples are used. Unmatched contigs get ploidy 2 (or that from -d)."}]},{"name":"help","description":"show all subcommands","usage":"vg <command> [options]","options":[]},{"name":"deconstruct","description":"create a VCF from variation in the graph","usage":"vg deconstruct [options] [-p|-P] <PATH> <GRAPH>","options":[{"names":["-p","--path"],"argument":"NAME","description":"A reference path to deconstruct against (multiple allowed)."},{"names":["-P","--path-prefix"],"argument":"NAME","description":"All paths (and/or GBWT threads) beginning with NAME used as reference (multiple allowed). Other non-ref paths not considered as samples. When using a GBWT, select only samples with given prefix."},{"names":["-H","--path-sep"],"argument":"SEP","description":"Obtain alt paths from the set of paths, assuming a path name hierarchy (e.g. SEP='#' and sample#phase#contig)"},{"names":["-r","--snarls"],"argument":"FILE","description":"Snarls file (from vg snarls) to avoid recomputing."},{"names":["-g","--gbwt"],"argument":"FILE","description":"only consider alt traversals that correspond to GBWT threads FILE (not needed for GBZ graph input)."},{"names":["-T","--translation"],"argument":"FILE","description":"Node ID translation (as created by vg gbwt --translation) to apply to snarl names in output"},{"names":["-e","--path-traversals"],"argument":"","description":"Only consider traversals that correspond to paths in the graph."},{"names":["-a","--all-snarls"],"argument":"","description":"Process all snarls, including nested snarls (by default only top-level snarls reported)."},{"names":["-d","--ploidy"],"argument":"N","description":"Expected ploidy. If more traversals found, they will be flagged as conflicts (default: 2)"},{"names":["-c","--context-jaccard"],"argument":"N","description":"Set context mapping size used to disambiguate alleles at sites with multiple reference traversals (default: 10000)."},{"names":["-u","--untangle-travs"],"argument":"","description":"Use context mapping to determine the reference-relative positions of each step in allele traversals (AP INFO field)."},{"names":["-K","--keep-conflicted"],"argument":"","description":"Retain conflicted genotypes in output."},{"names":["-S","--strict-conflicts"],"argument":"","description":"Drop genotypes when we have more than one haplotype for any given phase (set by default when using GBWT input)."},{"names":["-t","--threads"],"argument":"N","description":"Use N threads"},{"names":["-v","--verbose"],"argument":"","description":"Print some status messages"}]},{"name":"gbwt","description":"build and manipulate GBWTs","usage":"vg gbwt [options] [args]","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"read the graph from FILE"},{"names":["-o","--output"],"argument":"FILE","description":"write output GBWT to FILE"},{"names":["-d","--temp-dir"],"argument":"DIR","description":"use directory DIR for temporary files"},{"names":["-p","--progress"],"argument":"","description":"show progress and statistics"},{"names":["--buffer-size"],"argument":"N","description":"GBWT construction buffer size in millions of nodes (default 100)"},{"names":["--id-interval"],"argument":"N","description":"store path ids at one out of N positions (default 1024)"},{"names":["--num-jobs"],"argument":"N","description":"use at most N parallel build jobs (for -v and -G; default 6)"},{"names":["--num-threads"],"argument":"N","description":"use N parallel search threads (for -b and -r; default 12)"},{"names":["-v","--vcf-input"],"argument":"","description":"index the haplotypes in the VCF files specified in input args in parallel (inputs must be over different contigs; requires -x, implies -f) (does not store graph contigs in the GBWT)"},{"names":["--preset"],"argument":"X","description":"use preset X (available: 1000gp)"},{"names":["--inputs-as-jobs"],"argument":"","description":"create one build job for each input instead of using first-fit heuristic"},{"names":["--parse-only"],"argument":"","description":"store the VCF parses without building GBWTs (use -o for the file name prefix; skips subsequent steps)"},{"names":["--ignore-missing"],"argument":"","description":"do not warn when variants are missing from the graph"},{"names":["--actual-phasing"],"argument":"","description":"do not interpret unphased homozygous genotypes as phased"},{"names":["--force-phasing"],"argument":"","description":"replace unphased genotypes with randomly phased ones"},{"names":["--discard-overlaps"],"argument":"","description":"skip overlapping alternate alleles if the overlap cannot be resolved instead of creating a phase break"},{"names":["--batch-size"],"argument":"N","description":"index the haplotypes in batches of N samples (default 200)"},{"names":["--sample-range"],"argument":"X-Y","description":"index samples X to Y (inclusive, 0-based)"},{"names":["--rename"],"argument":"V=P","description":"VCF contig V matches path P in the graph (may repeat)"},{"names":["--vcf-variants"],"argument":"","description":"variants in the graph use VCF contig names instead of path names"},{"names":["--vcf-region"],"argument":"C:X-Y","description":"restrict VCF contig C to coordinates X to Y (inclusive, 1-based; may repeat)"},{"names":["--exclude-sample"],"argument":"X","description":"do not index the sample with name X (faster than -R; may repeat)"},{"names":["-G","--gfa-input"],"argument":"","description":"index the walks or paths in the GFA file (one input arg)"},{"names":["--max-node"],"argument":"N","description":"chop long segments into nodes of at most N bp (default 1024, use 0 to disable)"},{"names":["--path-regex"],"argument":"X","description":"parse metadata as haplotypes from path names using regex X instead of vg-parser-compatible rules"},{"names":["--path-fields"],"argument":"X","description":"parse metadata as haplotypes, mapping regex submatches to these fields instead of using vg-parser-compatible rules"},{"names":["--translation"],"argument":"FILE","description":"write the segment to node translation table to FILE"},{"names":["-Z","--gbz-input"],"argument":"","description":"extract GBWT and GBWTGraph from GBZ input (one input arg)"},{"names":["-E","--index-paths"],"argument":"","description":"index the embedded non-alt paths in the graph (requires -x, no input args)"},{"names":["-A","--alignment-input"],"argument":"","description":"index the alignments in the GAF files specified in input args (requires -x)"},{"names":["--gam-format"],"argument":"","description":"the input files are in GAM format instead of GAF format"},{"names":["-m","--merge"],"argument":"","description":"use the insertion algorithm"},{"names":["-f","--fast"],"argument":"","description":"fast merging algorithm (node ids must not overlap)"},{"names":["-b","--parallel"],"argument":"","description":"use the parallel algorithm"},{"names":["--chunk-size"],"argument":"N","description":"search in chunks of N sequences (default 1)"},{"names":["--pos-buffer"],"argument":"N","description":"use N MiB position buffers for each search thread (default 64)"},{"names":["--thread-buffer"],"argument":"N","description":"use N MiB thread buffers for each search thread (default 256)"},{"names":["--merge-buffers"],"argument":"N","description":"merge 2^N thread buffers into one file per merge job (default 6)"},{"names":["--merge-jobs"],"argument":"N","description":"run N parallel merge jobs (default 4)"},{"names":["-R","--remove-sample"],"argument":"X","description":"remove the sample with name X from the index (may repeat)"},{"names":["--set-tag"],"argument":"K=V","description":"set a GBWT tag (may repeat)"},{"names":["-a","--augment-gbwt"],"argument":"","description":"add a path cover of missing components (one input GBWT)"},{"names":["-l","--local-haplotypes"],"argument":"","description":"sample local haplotypes (one input GBWT)"},{"names":["-P","--path-cover"],"argument":"","description":"build a greedy path cover (no input GBWTs)"},{"names":["-n","--num-paths"],"argument":"N","description":"find N paths per component (default 64 for -l, 16 otherwise)"},{"names":["-k","--context-length"],"argument":"N","description":"use N-node contexts (default 4)"},{"names":["--pass-paths"],"argument":"","description":"include named graph paths in local haplotype or greedy path cover GBWT"},{"names":["-g","--graph-name"],"argument":"FILE","description":"build GBWTGraph and store it in FILE"},{"names":["--gbz-format"],"argument":"","description":"serialize both GBWT and GBWTGraph in GBZ format (makes -o unnecessary)"},{"names":["-r","--r-index"],"argument":"FILE","description":"build an r-index and store it in FILE"},{"names":["-M","--metadata"],"argument":"","description":"print basic metadata"},{"names":["-C","--contigs"],"argument":"","description":"print the number of contigs"},{"names":["-H","--haplotypes"],"argument":"","description":"print the number of haplotypes"},{"names":["-S","--samples"],"argument":"","description":"print the number of samples"},{"names":["-L","--list-names"],"argument":"","description":"list contig/sample names (use with -C or -S)"},{"names":["-T","--thread-names"],"argument":"","description":"list thread names"},{"names":["--tags"],"argument":"","description":"list GBWT tags"},{"names":["-c","--count-threads"],"argument":"","description":"print the number of threads"},{"names":["-e","--extract"],"argument":"FILE","description":"extract threads in SDSL format to FILE"}]},{"name":"ids","description":"manipulate node ids","usage":"vg ids [options] <graph1.vg> [graph2.vg ...] >new.vg","options":[{"names":["-c","--compact"],"argument":"","description":"minimize the space of integers used by the ids"},{"names":["-i","--increment"],"argument":"N","description":"increase ids by N"},{"names":["-d","--decrement"],"argument":"N","description":"decrease ids by N"},{"names":["-j","--join"],"argument":"","description":"make a joint id space for all the graphs that are supplied by iterating through the supplied graphs and incrementing their ids to be non-conflicting (modifies original files)"},{"names":["-m","--mapping"],"argument":"FILE","description":"create an empty node mapping for vg prune"},{"names":["-s","--sort"],"argument":"","description":"assign new node IDs in (generalized) topological sort order"}]},{"name":"minimizer","description":"build a minimizer index or a syncmer index","usage":"vg minimizer [options] graph","options":[{"names":["-o","--output-name"],"argument":"X","description":"store the index to file X"},{"names":["-k","--kmer-length"],"argument":"N","description":"length of the kmers in the index (default 29, max 31)"},{"names":["-w","--window-length"],"argument":"N","description":"choose the minimizer from a window of N kmers (default 11)"},{"names":["-c","--closed-syncmers"],"argument":"","description":"index closed syncmers instead of minimizers"},{"names":["-s","--smer-length"],"argument":"N","description":"use smers of length N in closed syncmers (default 18)"},{"names":["-d","--distance-index"],"argument":"X","description":"annotate the hits with positions in this distance index"},{"names":["-l","--load-index"],"argument":"X","description":"load the index from file X and insert the new kmers into it (overrides minimizer options)"},{"names":["-g","--gbwt-name"],"argument":"X","description":"use the GBWT index in file X (required with a non-GBZ graph)"},{"names":["-p","--progress"],"argument":"","description":"show progress information"},{"names":["-t","--threads"],"argument":"N","description":"use N threads for index construction (default 12) (using more than 16 threads rarely helps)"}]},{"name":"mod","description":"filter, transform, and edit the graph","usage":"vg mod [options] <graph.vg> >[mod.vg]","options":[{"names":["-P","--label-paths"],"argument":"","description":"don't edit with -i alignments, just use them for labeling the graph"},{"names":["-c","--compact-ids"],"argument":"","description":"should we sort and compact the id space? (default false)"},{"names":["-b","--break-cycles"],"argument":"","description":"use an approximate topological sort to break cycles in the graph"},{"names":["-n","--normalize"],"argument":"","description":"normalize the graph so that edges are always non-redundant (nodes have unique starting and ending bases relative to neighbors, and edges that do not introduce new paths are removed and neighboring nodes are merged)"},{"names":["-U","--until-normal"],"argument":"N","description":"iterate normalization until convergence, or at most N times"},{"names":["-z","--nomerge-pre"],"argument":"STR","description":"do not let normalize (-n, -U) zip up any pair of nodes that both belong to path with prefix STR"},{"names":["-E","--unreverse-edges"],"argument":"","description":"flip doubly-reversing edges so that they are represented on the forward strand of the graph"},{"names":["-s","--simplify"],"argument":"","description":"remove redundancy from the graph that will not change its path space"},{"names":["-d","--dagify-step"],"argument":"N","description":"copy strongly connected components of the graph N times, forwarding edges from old to new copies to convert the graph into a DAG"},{"names":["-w","--dagify-to"],"argument":"N","description":"copy strongly connected components of the graph forwarding edges from old to new copies to convert the graph into a DAG until the shortest path through each SCC is N bases long"},{"names":["-L","--dagify-len-max"],"argument":"N","description":"stop a dagification step if the unrolling component has this much sequence"},{"names":["-f","--unfold"],"argument":"N","description":"represent inversions accessible up to N from the forward component of the graph"},{"names":["-O","--orient-forward"],"argument":"","description":"orient the nodes in the graph forward"},{"names":["-N","--remove-non-path"],"argument":"","description":"keep only nodes and edges which are part of paths"},{"names":["-A","--remove-path"],"argument":"","description":"keep only nodes and edges which are not part of any path"},{"names":["-k","--keep-path"],"argument":"NAME","description":"keep only nodes and edges in the path"},{"names":["-R","--remove-null"],"argument":"","description":"removes nodes that have no sequence, forwarding their edges"},{"names":["-g","--subgraph"],"argument":"ID","description":"gets the subgraph rooted at node ID, multiple allowed"},{"names":["-x","--context"],"argument":"N","description":"steps the subgraph out by N steps (default: 1)"},{"names":["-p","--prune-complex"],"argument":"","description":"remove nodes that are reached by paths of --length which cross more than --edge-max edges"},{"names":["-S","--prune-subgraphs"],"argument":"","description":"remove subgraphs which are shorter than --length"},{"names":["-l","--length"],"argument":"N","description":"for pruning complex regions and short subgraphs"},{"names":["-X","--chop"],"argument":"N","description":"chop nodes in the graph so they are not more than N bp long"},{"names":["-u","--unchop"],"argument":"","description":"where two nodes are only connected to each other and by one edge replace the pair with a single node that is the concatenation of their labels"},{"names":["-e","--edge-max"],"argument":"N","description":"only consider paths which make edge choices at <= this many points"},{"names":["-M","--max-degree"],"argument":"N","description":"unlink nodes that have edge degree greater than N"},{"names":["-m","--markers"],"argument":"","description":"join all head and tails nodes to marker nodes ('###' starts and '$$$' ends) of --length, for debugging"},{"names":["-y","--destroy-node"],"argument":"ID","description":"remove node with given id"},{"names":["-a","--cactus"],"argument":"","description":"convert to cactus graph representation"},{"names":["-v","--sample-vcf"],"argument":"FILE","description":"for a graph with allele paths, compute the sample graph from the given VCF"},{"names":["-G","--sample-graph"],"argument":"FILE","description":"subset an augmented graph to a sample graph using a Locus file"},{"names":["-t","--threads"],"argument":"N","description":"for tasks that can be done in parallel, use this many threads"}]},{"name":"prune","description":"prune the graph for GCSA2 indexing","usage":"vg prune [options] <graph.vg> >[output.vg]","options":[{"names":["-k","--kmer-length"],"argument":"N","description":"kmer length used for pruning defaults: 24 with -P; 24 with -r; 24 with -u"},{"names":["-e","--edge-max"],"argument":"N","description":"remove the edges on kmers making > N edge choices defaults: 3 with -P; 3 with -r; 3 with -u"},{"names":["-s","--subgraph-min"],"argument":"N","description":"remove subgraphs of < N bases defaults: 33 with -P; 33 with -r; 33 with -u"},{"names":["-M","--max-degree"],"argument":"N","description":"if N > 0, remove nodes with degree > N before pruning defaults: 0 with -P; 0 with -r; 0 with -u"},{"names":["-P","--prune"],"argument":"","description":"simply prune the graph (default)"},{"names":["-r","--restore-paths"],"argument":"","description":"restore the edges on non-alt paths"},{"names":["-u","--unfold-paths"],"argument":"","description":"unfold non-alt paths and GBWT threads"},{"names":["-v","--verify-paths"],"argument":"","description":"verify that the paths exist after pruning (potentially very slow)"},{"names":["-g","--gbwt-name"],"argument":"FILE","description":"unfold the threads from this GBWT index"},{"names":["-m","--mapping"],"argument":"FILE","description":"store the node mapping for duplicates in this file (required with -u)"},{"names":["-a","--append-mapping"],"argument":"","description":"append to the existing node mapping"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-t","--threads"],"argument":"N","description":"use N threads (default: 12)"},{"names":["-d","--dry-run"],"argument":"","description":"determine the validity of the combination of options"}]},{"name":"sim","description":"simulate reads from a graph","usage":"vg sim [options]","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use the graph in FILE (required)"},{"names":["-n","--num-reads"],"argument":"N","description":"simulate N reads or read pairs"},{"names":["-l","--read-length"],"argument":"N","description":"simulate reads of length N"},{"names":["-r","--progress"],"argument":"","description":"show progress information"},{"names":["-a","--align-out"],"argument":"","description":"write alignments in GAM-format"},{"names":["-J","--json-out"],"argument":"","description":"write alignments in json"},{"names":["--multi-position"],"argument":"","description":"annotate alignments with multiple reference positions"},{"names":["-F","--fastq"],"argument":"FILE","description":"match the error profile of NGS reads in FILE, repeat for paired reads (ignores -l,-f)"},{"names":["-I","--interleaved"],"argument":"","description":"reads in FASTQ (-F) are interleaved read pairs"},{"names":["-s","--random-seed"],"argument":"N","description":"use this specific seed for the PRNG"},{"names":["-e","--sub-rate"],"argument":"FLOAT","description":"base substitution rate (default 0.0)"},{"names":["-i","--indel-rate"],"argument":"FLOAT","description":"indel rate (default 0.0)"},{"names":["-d","--indel-err-prop"],"argument":"FLOAT","description":"proportion of trained errors from -F that are indels (default 0.0)"},{"names":["-S","--scale-err"],"argument":"FLOAT","description":"scale trained error probabilities from -F by this much (default 1.0)"},{"names":["-f","--forward-only"],"argument":"","description":"don't simulate from the reverse strand"},{"names":["-p","--frag-len"],"argument":"N","description":"make paired end reads with given fragment length N"},{"names":["-v","--frag-std-dev"],"argument":"FLOAT","description":"use this standard deviation for fragment length estimation"},{"names":["-N","--allow-Ns"],"argument":"","description":"allow reads to be sampled from the graph with Ns in them"},{"names":["--max-tries"],"argument":"N","description":"attempt sampling operations up to N times before giving up [100]"},{"names":["-t","--threads"],"argument":"","description":"number of compute threads (only when using FASTQ with -F) [1]"},{"names":["-P","--path"],"argument":"PATH","description":"simulate from this path (may repeat; cannot also give -T)"},{"names":["-A","--any-path"],"argument":"","description":"simulate from any path (overrides -P)"},{"names":["-m","--sample-name"],"argument":"NAME","description":"simulate from this sample (may repeat; requires -g)"},{"names":["-R","--ploidy-regex"],"argument":"RULES","description":"use the given comma-separated list of colon-delimited REGEX:PLOIDY rules to assign ploidies to contigs not visited by the selected samples, or to all contigs simulated from if no samples are used. Unmatched contigs get ploidy 2."},{"names":["-g","--gbwt-name"],"argument":"FILE","description":"use samples from this GBWT index"},{"names":["-T","--tx-expr-file"],"argument":"FILE","description":"simulate from an expression profile formatted as RSEM output (cannot also give -P)"},{"names":["-H","--haplo-tx-file"],"argument":"FILE","description":"transcript origin info table from vg rna -i (required for -T on haplotype transcripts)"},{"names":["-u","--unsheared"],"argument":"","description":"sample from unsheared fragments"},{"names":["-E","--path-pos-file"],"argument":"FILE","description":"output a TSV with sampled position on path of each read (requires -F)"}]},{"name":"snarls","description":"compute snarls and their traversals","usage":"vg snarls [options] graph > snarls.pb\nBy default, a list of protobuf Snarls is written","options":[{"names":["-A","--algorithm"],"argument":"NAME","description":"compute snarls using 'cactus' or 'integrated' algorithms (default: integrated)"},{"names":["-p","--pathnames"],"argument":"","description":"output variant paths as SnarlTraversals to STDOUT"},{"names":["-r","--traversals"],"argument":"FILE","description":"output SnarlTraversals for ultrabubbles."},{"names":["-e","--path-traversals"],"argument":"","description":"only consider traversals that correspond to paths in the graph. (-m ignored)"},{"names":["-l","--leaf-only"],"argument":"","description":"restrict traversals to leaf ultrabubbles."},{"names":["-o","--top-level"],"argument":"","description":"restrict traversals to top level ultrabubbles"},{"names":["-a","--any-snarl-type"],"argument":"","description":"compute traversals for any snarl type (not limiting to ultrabubbles)"},{"names":["-m","--max-nodes"],"argument":"N","description":"only compute traversals for snarls with <= N nodes (with degree > 1) [10]"},{"names":["-n","--named-coordinates"],"argument":"","description":"produce snarl and traversal outputs in named-segment (GFA) space"},{"names":["-T","--include-trivial"],"argument":"","description":"report snarls that consist of a single edge"},{"names":["-s","--sort-snarls"],"argument":"","description":"return snarls in sorted order by node ID (for topologically ordered graphs)"},{"names":["-v","--vcf"],"argument":"FILE","description":"use vcf-based instead of exhaustive traversal finder with -r"},{"names":["-f","--fasta"],"argument":"FILE","description":"reference in FASTA format (required for SVs by -v)"},{"names":["-i","--ins-fasta"],"argument":"FILE","description":"insertion sequences in FASTA format (required for SVs by -v)"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use [all available]"}]},{"name":"stats","description":"metrics describing graph and alignment properties","usage":"vg stats [options] [<graph file>]","options":[{"names":["-z","--size"],"argument":"","description":"size of graph"},{"names":["-N","--node-count"],"argument":"","description":"number of nodes in graph"},{"names":["-E","--edge-count"],"argument":"","description":"number of edges in graph"},{"names":["-l","--length"],"argument":"","description":"length of sequences in graph"},{"names":["-L","--self-loops"],"argument":"","description":"number of self-loops"},{"names":["-s","--subgraphs"],"argument":"","description":"describe subgraphs of graph"},{"names":["-H","--heads"],"argument":"","description":"list the head nodes of the graph"},{"names":["-T","--tails"],"argument":"","description":"list the tail nodes of the graph"},{"names":["-e","--nondeterm"],"argument":"","description":"list the nondeterministic edge sets"},{"names":["-c","--components"],"argument":"","description":"print the strongly connected components of the graph"},{"names":["-A","--is-acyclic"],"argument":"","description":"print if the graph is acyclic or not"},{"names":["-n","--node"],"argument":"ID","description":"consider node with the given id"},{"names":["-d","--to-head"],"argument":"","description":"show distance to head for each provided node"},{"names":["-t","--to-tail"],"argument":"","description":"show distance to head for each provided node"},{"names":["-a","--alignments"],"argument":"FILE","description":"compute stats for reads aligned to the graph"},{"names":["-r","--node-id-range"],"argument":"","description":"X:Y where X and Y are the smallest and largest node id in the graph, respectively"},{"names":["-o","--overlap"],"argument":"PATH","description":"for each overlapping path mapping in the graph write a table:"},{"names":["-O","--overlap-all"],"argument":"","description":"print overlap table for the cartesian product of paths"},{"names":["-R","--snarls"],"argument":"","description":"print statistics for each snarl"},{"names":["-F","--format"],"argument":"","description":"graph format from {VG-Protobuf, PackedGraph, HashGraph, XG}. Can't detect Protobuf if graph read from stdin"},{"names":["-D","--degree-dist"],"argument":"","description":"print degree distribution of the graph."},{"names":["-v","--verbose"],"argument":"","description":"output longer reports"}]},{"name":"view","description":"format conversions for graphs and alignments","usage":"vg view [options] [ <graph.vg> | <graph.json> | <aln.gam> | <read1.fq> [<read2.fq>] ]","options":[{"names":["-g","--gfa"],"argument":"","description":"output GFA format (default)"},{"names":["-F","--gfa-in"],"argument":"","description":"input GFA format, reducing overlaps if they occur"},{"names":["-v","--vg"],"argument":"","description":"output VG format"},{"names":["-V","--vg-in"],"argument":"","description":"input VG format only"},{"names":["-j","--json"],"argument":"","description":"output JSON format"},{"names":["-J","--json-in"],"argument":"","description":"input JSON format"},{"names":["-c","--json-stream"],"argument":"","description":"streaming conversion of a VG format graph in line delimited JSON format (this cannot be loaded directly via -J)"},{"names":["-G","--gam"],"argument":"","description":"output GAM format (vg alignment format: Graph Alignment/Map)"},{"names":["-Z","--translation-in"],"argument":"","description":"input is a graph translation description"},{"names":["-t","--turtle"],"argument":"","description":"output RDF/turtle format (can not be loaded by VG)"},{"names":["-T","--turtle-in"],"argument":"","description":"input turtle format."},{"names":["-r","--rdf_base_uri"],"argument":"","description":"set base uri for the RDF output"},{"names":["-a","--align-in"],"argument":"","description":"input GAM format"},{"names":["-A","--aln-graph"],"argument":"GAM","description":"add alignments from GAM to the graph"},{"names":["-q","--locus-in"],"argument":"","description":"input stream is Locus format"},{"names":["-z","--locus-out"],"argument":"","description":"output stream Locus format"},{"names":["-Q","--loci"],"argument":"FILE","description":"input is Locus format for use by dot output"},{"names":["-d","--dot"],"argument":"","description":"output dot format"},{"names":["-S","--simple-dot"],"argument":"","description":"simplify the dot output; remove node labels, simplify alignments"},{"names":["-u","--noseq-dot"],"argument":"","description":"shows size information instead of sequence in the dot output"},{"names":["-e","--ascii-labels"],"argument":"","description":"use labels for paths or superbubbles with char/colors rather than emoji"},{"names":["-Y","--ultra-label"],"argument":"","description":"label nodes with emoji/colors that correspond to ultrabubbles"},{"names":["-m","--skip-missing"],"argument":"","description":"skip mappings to nodes not in the graph when drawing alignments"},{"names":["-C","--color"],"argument":"","description":"color nodes that are not in the reference path (DOT OUTPUT ONLY)"},{"names":["-p","--show-paths"],"argument":"","description":"show paths in dot output"},{"names":["-w","--walk-paths"],"argument":"","description":"add labeled edges to represent paths in dot output"},{"names":["-n","--annotate-paths"],"argument":"","description":"add labels to normal edges to represent paths in dot output"},{"names":["-M","--show-mappings"],"argument":"","description":"with -p print the mappings in each path in JSON"},{"names":["-I","--invert-ports"],"argument":"","description":"invert the edge ports in dot so that ne->nw is reversed"},{"names":["-s","--random-seed"],"argument":"N","description":"use this seed when assigning path symbols in dot output"},{"names":["-b","--bam"],"argument":"","description":"input BAM or other htslib-parseable alignments"},{"names":["-f","--fastq-in"],"argument":"","description":"input fastq (output defaults to GAM). Takes two positional file arguments if paired"},{"names":["-X","--fastq-out"],"argument":"","description":"output fastq (input defaults to GAM)"},{"names":["-i","--interleaved"],"argument":"","description":"fastq is interleaved paired-ended"},{"names":["-L","--pileup"],"argument":"","description":"output VG Pileup format"},{"names":["-l","--pileup-in"],"argument":"","description":"input VG Pileup format"},{"names":["-B","--distance-in"],"argument":"","description":"input distance index"},{"names":["-R","--snarl-in"],"argument":"","description":"input VG Snarl format"},{"names":["-E","--snarl-traversal-in"],"argument":"","description":"input VG SnarlTraversal format"},{"names":["-K","--multipath-in"],"argument":"","description":"input VG MultipathAlignment format (GAMP)"},{"names":["-k","--multipath"],"argument":"","description":"output VG MultipathAlignment format (GAMP)"},{"names":["-D","--expect-duplicates"],"argument":"","description":"don't warn if encountering the same node or edge multiple times"},{"names":["-x","--extract-tag"],"argument":"TAG","description":"extract and concatenate messages with the given tag"},{"names":["--verbose"],"argument":"","description":"explain the file being read with --extract-tag"},{"names":["--threads"],"argument":"N","description":"for parallel operations use this many threads [1]"}]},{"name":"align","description":"local alignment","usage":"vg align [options] <graph.vg> >alignments.gam","options":[{"names":["-s","--sequence"],"argument":"STR","description":"align a string to the graph in graph.vg using partial order alignment"},{"names":["-Q","--seq-name"],"argument":"STR","description":"name the sequence using this value"},{"names":["-j","--json"],"argument":"","description":"output alignments in JSON format (default GAM)"},{"names":["-m","--match"],"argument":"N","description":"use this match score (default: 1)"},{"names":["-M","--mismatch"],"argument":"N","description":"use this mismatch penalty (default: 4)"},{"names":["--score-matrix"],"argument":"FILE","description":"read a 5x5 integer substitution scoring matrix from a file"},{"names":["-g","--gap-open"],"argument":"N","description":"use this gap open penalty (default: 6)"},{"names":["-e","--gap-extend"],"argument":"N","description":"use this gap extension penalty (default: 1)"},{"names":["-T","--full-l-bonus"],"argument":"N","description":"provide this bonus for alignments that are full length (default: 5)"},{"names":["-b","--banded-global"],"argument":"","description":"use the banded global alignment algorithm"},{"names":["-p","--pinned"],"argument":"","description":"pin the (local) alignment traceback to the optimal edge of the graph"},{"names":["-L","--pin-left"],"argument":"","description":"pin the first rather than last bases of the graph and sequence"},{"names":["-r","--reference"],"argument":"STR","description":"don't use an input graph--- run SSW alignment between -s and -r"},{"names":["-D","--debug"],"argument":"","description":"print out score matrices and other debugging info"}]},{"name":"annotate","description":"annotate alignments with graphs and graphs with alignments","usage":"vg annotate [options] >output.{gam,vg,tsv}","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"xg index or graph to annotate (required)"},{"names":["-b","--bed-name"],"argument":"FILE","description":"a BED file to convert to GAM. May repeat."},{"names":["-f","--gff-name"],"argument":"FILE","description":"a GFF3 file to convert to GAM. May repeat."},{"names":["-g","--ggff"],"argument":"","description":"output at GGFF subgraph annotation file instead of GAM (requires -s)"},{"names":["-s","--snarls"],"argument":"FILE","description":"file containing snarls to expand GFF intervals into"},{"names":["-a","--gam"],"argument":"FILE","description":"file of Alignments to annotate (required)"},{"names":["-x","--xg-name"],"argument":"FILE","description":"xg index of the graph against which the Alignments are aligned (required)"},{"names":["-p","--positions"],"argument":"","description":"annotate alignments with reference positions"},{"names":["-m","--multi-position"],"argument":"","description":"annotate alignments with multiple reference positions"},{"names":["-l","--search-limit"],"argument":"N","description":"when annotating with positions, search this far for paths (default: read length)"},{"names":["-b","--bed-name"],"argument":"FILE","description":"annotate alignments with overlapping region names from this BED. May repeat."},{"names":["-n","--novelty"],"argument":"","description":"output TSV table with header describing how much of each Alignment is novel"},{"names":["-t","--threads"],"argument":"","description":"use the specified number of threads"}]},{"name":"chunk","description":"split graph or alignment into chunks","usage":"vg chunk [options] > [chunk.vg]","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use this graph or xg index to chunk subgraphs"},{"names":["-G","--gbwt-name"],"argument":"FILE","description":"use this GBWT haplotype index for haplotype extraction (for -T)"},{"names":["-a","--gam-name"],"argument":"FILE","description":"chunk this gam file instead of the graph (multiple allowed)"},{"names":["-g","--gam-and-graph"],"argument":"","description":"when used in combination with -a, both gam and graph will be chunked"},{"names":["-p","--path"],"argument":"TARGET","description":"write the chunk in the specified (0-based inclusive, multiple allowed) path range TARGET=path[:pos1[-pos2]] to standard output"},{"names":["-P","--path-list"],"argument":"FILE","description":"write chunks for all path regions in (line - separated file). format for each as in -p (all paths chunked unless otherwise specified)"},{"names":["-e","--input-bed"],"argument":"FILE","description":"write chunks for all (0-based end-exclusive) bed regions"},{"names":["-S","--snarls"],"argument":"FILE","description":"write given path-range(s) and all snarls fully contained in them, as alternative to -c"},{"names":["-r","--node-range"],"argument":"N:M","description":"write the chunk for the specified node range to standard output"},{"names":["-R","--node-ranges"],"argument":"FILE","description":"write the chunk for each node range in (newline or whitespace separated) file"},{"names":["-n","--n-chunks"],"argument":"N","description":"generate this many id-range chunks, which are determined using the xg index"},{"names":["-m","--gam-split-size"],"argument":"N","description":"split gam (specified with -a, sort/index not required) up into chunks with at most N reads each"},{"names":["-C","--components"],"argument":"","description":"create a chunk for each connected component. if a targets given with (-p, -P, -r, -R), limit to components containing them"},{"names":["-M","--path-components"],"argument":"","description":"create a chunk for each path in the graph's connected component"},{"names":["-s","--chunk-size"],"argument":"N","description":"create chunks spanning N bases (or nodes with -r/-R) for all input regions."},{"names":["-o","--overlap"],"argument":"N","description":"overlap between chunks when using -s [0]"},{"names":["-E","--output-bed"],"argument":"FILE","description":"write all created chunks to a bed file"},{"names":["-b","--prefix"],"argument":"BASENAME","description":"write output chunk files with the given base name. Files for chunk i will be named: <BASENAME>-<i>-<name>-<start>-<length>.<ext> [./chunk]"},{"names":["-c","--context-steps"],"argument":"N","description":"expand the context of the chunk this many node steps [1]"},{"names":["-l","--context-length"],"argument":"N","description":"expand the context of the chunk by this many bp [0]"},{"names":["-T","--trace"],"argument":"","description":"trace haplotype threads in chunks (and only expand forward from input coordinates). Produces a .annotate.txt file with haplotype frequencies for each chunk."},{"names":["--no-embedded-haplotypes"],"argument":"","description":"Don't load haplotypes from the graph. It is possible to -T without any haplotypes available."},{"names":["-f","--fully-contained"],"argument":"","description":"only return GAM alignments that are fully contained within chunk"},{"names":["-O","--output-fmt"],"argument":"","description":"Specify output format (vg, pg, hg, gfa). [vg]"},{"names":["-t","--threads"],"argument":"N","description":"for tasks that can be done in parallel, use this many threads [1]"},{"names":["-h","--help"],"argument":"","description":""}]},{"name":"circularize","description":"circularize a path within a graph","usage":"vg circularize [options] <graph.vg> > [circularized.vg]","options":[{"names":["-p"],"argument":"","description":"--path <PATHNAME> circularize the path by connecting its head/tail node."},{"names":["-P","--pathfile"],"argument":"<PATHSFILE>","description":"circularize all paths in the provided file."},{"names":["-P","--pathfile"],"argument":"<PATHSFILE>","description":"circularize all paths in the provided file.   -a, --head <node_id> circularize a head and tail node (must provide a tail)."},{"names":["-a","--head"],"argument":"","description":"<node_id> circularize a head and tail node (must provide a tail)."},{"names":["-z","--tail"],"argument":"","description":"<tail_id> circularize a head and tail node (must provide a head)."},{"names":["-d"],"argument":"","description":"--describe list all the paths in the graph."}]},{"name":"clip","description":"remove BED regions (other other nodes from their snarls) from a graph","usage":"vg [options] <graph>","options":[{"names":["-b","--bed"],"argument":"FILE","description":"BED regions corresponding to path intervals of the graph to target"},{"names":["-r","--snarls"],"argument":"FILE","description":"Snarls from vg snarls (recomputed if not given unless -d and -P used)."},{"names":["-d","--depth"],"argument":"N","description":"Clip out nodes and edges with path depth below N"},{"names":["-n","--max-nodes"],"argument":"N","description":"Only clip out snarls with > N nodes"},{"names":["-e","--max-edges"],"argument":"N","description":"Only clip out snarls with > N edges"},{"names":["-N"],"argument":"","description":"--max-nodes-shallow N Only clip out snarls with > N nodes not including nested snarls"},{"names":["-E"],"argument":"","description":"--max-edges-shallow N Only clip out snarls with > N edges not including nested snarls"},{"names":["-a","--max-avg-degree"],"argument":"N","description":"Only clip out snarls with average degree > N"},{"names":["-l","--max-reflen-prop"],"argument":"F","description":"Ignore snarls whose reference traversal spans more than F (0<=F<=1) of the whole reference path"},{"names":["-L","--max-reflen"],"argument":"N","description":"Ignore snarls whose reference traversal spans more than N bp"},{"names":["-c","--context"],"argument":"N","description":"Search up to at most N steps from reference paths for candidate deletion edges [1]"},{"names":["-P","--path-prefix"],"argument":"STRING","description":"Do not clip out alleles on paths beginning with given prefix (such references must be specified either with -P or -b). Multiple allowed"},{"names":["-m","--min-fragment-len"],"argument":"N","description":"Don't write novel path fragment if it is less than N bp long"},{"names":["-B","--output-bed"],"argument":"","description":"Write BED-style file of affected intervals instead of clipped graph. Columns 4-9 are: snarl node-count edge-count shallow-node-count shallow-edge-count avg-degree"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use [default: all available]"},{"names":["-v","--verbose"],"argument":"","description":"Print some logging messages"}]},{"name":"combine","description":"merge multiple graph files together","usage":"vg combine [options] <graph1.vg> [graph2.vg ...] >merged.vg","options":[{"names":["-c","--cat-proto"],"argument":"","description":"Merge graphs by converting each to Protobuf (if not already) and catting the results. Node IDs not modified [DEPRECATED]"},{"names":["-p","--connect-paths"],"argument":"","description":"Add edges necessary to connect paths with the same name present in different graphs."}]},{"name":"convert","description":"convert graphs between handle-graph compliant formats as well as GFA","usage":"vg convert [options] <input-graph>","options":[{"names":["-g","--gfa-in"],"argument":"","description":"input in GFA format"},{"names":["-r","--in-rgfa-rank"],"argument":"N","description":"import rgfa tags with rank <= N as paths [default=0]"},{"names":["-b","--gbwt-in"],"argument":"FILE","description":"input graph is a GBWTGraph using the GBWT in FILE"},{"names":["--ref-sample"],"argument":"STR","description":"change haplotypes for this sample to reference paths (may repeat)"},{"names":["-T","--gfa-trans"],"argument":"FILE","description":"write gfa id conversions to FILE"},{"names":["-v","--vg-out"],"argument":"","description":"output in VG format"},{"names":["-a","--hash-out"],"argument":"","description":"output in HashGraph format [default]"},{"names":["-p","--packed-out"],"argument":"","description":"output in PackedGraph format"},{"names":["-x","--xg-out"],"argument":"","description":"output in XG format"},{"names":["-f","--gfa-out"],"argument":"","description":"output in GFA format"},{"names":["-H","--drop-haplotypes"],"argument":"","description":"do not include haplotype paths in the output (useful with GBWTGraph / GBZ inputs)"},{"names":["-P","--rgfa-path"],"argument":"STR","description":"write given path as rGFA tags instead of lines (multiple allowed, only rank-0 supported)"},{"names":["-Q","--rgfa-prefix"],"argument":"STR","description":"write paths with given prefix as rGFA tags instead of lines (multiple allowed, only rank-0 supported)"},{"names":["-B","--rgfa-pline"],"argument":"","description":"paths written as rGFA tags also written as lines"},{"names":["-W","--no-wline"],"argument":"","description":"write all paths as GFA P-lines instead of W-lines. Allows handling multiple phase blocks and subranges used together."},{"names":["--gbwtgraph-algorithm"],"argument":"","description":"Always use the GBWTGraph library GFA algorithm. Not compatible with other GBWT output options or non-GBWT graphs."},{"names":["--vg-algorithm"],"argument":"","description":"Always use the VG GFA algorithm. Works with all options and graph types, but can't preserve original GFA coordinates."},{"names":["-G","--gam-to-gaf"],"argument":"FILE","description":"convert GAM FILE to GAF"},{"names":["-F","--gaf-to-gam"],"argument":"FILE","description":"convert GAF FILE to GAM"},{"names":["-t","--threads"],"argument":"N","description":"use N threads (defaults to numCPUs)"}]},{"name":"depth","description":"estimate sequencing depth","usage":"vg depth [options] <graph>","options":[{"names":["-k","--pack"],"argument":"FILE","description":"supports created from vg pack for given input graph"},{"names":["-d","--count-dels"],"argument":"","description":"count deletion edges within the bin as covering reference positions"},{"names":["-g","--gam"],"argument":"FILE","description":"read alignments from this GAM file (could be '-' for stdin)"},{"names":["-a","--gaf"],"argument":"FILE","description":"read alignments from this GAF file (could be '-' for stdin)"},{"names":["-n","--max-nodes"],"argument":"N","description":"maximum nodes to consider [1000000]"},{"names":["-s","--random-seed"],"argument":"N","description":"random seed for sampling nodes to consider"},{"names":["-Q","--min-mapq"],"argument":"N","description":"ignore alignments with mapping quality < N [0]"},{"names":["-c","--count-cycles"],"argument":"","description":"count each time a path steps on a position (by default paths are only counted once)"},{"names":["-p","--ref-path"],"argument":"NAME","description":"reference path to call on (multipile allowed. defaults to all paths)"},{"names":["-P","--paths-by"],"argument":"STR","description":"select the paths with the given name prefix"},{"names":["-b","--bin-size"],"argument":"N","description":"bin size (in bases) [1] (2 extra columns printed when N>1: bin-end-pos and stddev)"},{"names":["-m","--min-coverage"],"argument":"N","description":"ignore nodes with less than N coverage depth [1]"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use [all available]"}]},{"name":"dotplot","description":"generate the dotplot matrix from the embedded paths in an xg index","usage":"vg dotplot [options]","options":[{"names":["-x","--xg"],"argument":"FILE","description":"use the graph or the XG index FILE"}]},{"name":"gamcompare","description":"compare alignment positions","usage":"vg gamcompare aln.gam truth.gam >output.gam","options":[{"names":["-d","--distance-index"],"argument":"FILE","description":"use distances from this distance index instead of path position annotations"},{"names":["-r","--range"],"argument":"N","description":"distance within which to consider reads correct"},{"names":["-T","--tsv"],"argument":"","description":"output TSV (correct, mq, aligner, read) compatible with plot-qq.R instead of GAM"},{"names":["-a","--aligner"],"argument":"","description":"aligner name for TSV output [\"vg\"]"},{"names":["-s","--score-alignment"],"argument":"","description":"get a correctness score of the alignment (higher is better)"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"}]},{"name":"gampcompare","description":"compare multipath alignment positions","usage":"vg gampcompare [options] alngraph.xg aln.gamp truth.gam > output.tsv","options":[{"names":["-G","--gam"],"argument":"","description":"alignments are in GAM format rather than GAMP"},{"names":["-r","--range"],"argument":"N","description":"distance within which to consider reads correct [100]"},{"names":["-a","--aligner"],"argument":"STR","description":"aligner name for TSV output [\"vg\"]"},{"names":["-d","--distance"],"argument":"","description":"report minimum distance along a path rather than correctness"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use [1]"}]},{"name":"gamsort","description":"Sort a GAM file or index a sorted GAM file.","usage":"gamsort [Options] gamfile","options":[{"names":["-i","--index"],"argument":"FILE","description":"produce an index of the sorted GAM file"},{"names":["-d","--dumb-sort"],"argument":"","description":"use naive sorting algorithm (no tmp files, faster for small GAMs)"},{"names":["-p","--progress"],"argument":"","description":"Show progress."},{"names":["-t","--threads"],"argument":"","description":"Use the specified number of threads."}]},{"name":"genotype","description":"Genotype (or type) graphs, GAMS, and VCFs.","usage":"vg genotype [options] <graph.vg> alignments.gam > <calls.vcf>","options":[{"names":["-j","--json"],"argument":"","description":"output in JSON"},{"names":["-v","--vcf"],"argument":"","description":"output in VCF"},{"names":["-V","--recall-vcf"],"argument":"VCF","description":"recall variants in a specific VCF file."},{"names":["-F","--fasta","-I","--insertions","-r","--ref"],"argument":"FASTA","description":"use the given path name as the reference path"},{"names":["-c","--contig"],"argument":"NAME","description":"use the given name as the VCF contig name"},{"names":["-s","--sample"],"argument":"NAME","description":"name the sample in the VCF with the given name"},{"names":["-o","--offset"],"argument":"INT","description":"offset variant positions by this amount"},{"names":["-l","--length"],"argument":"INT","description":"override total sequence length"},{"names":["-a","--augmented"],"argument":"FILE","description":"dump augmented graph to FILE"},{"names":["-Q","--ignore_mapq"],"argument":"","description":"do not use mapping qualities"},{"names":["-A","--no_indel_realign"],"argument":"","description":"disable indel realignment"},{"names":["-d","--het_prior_denom"],"argument":"","description":"denominator for prior probability of heterozygousness"},{"names":["-P","--min_per_strand"],"argument":"","description":"min unique reads per strand for a called allele to accept a call"},{"names":["-E","--no_embed"],"argument":"","description":"don't embed gam edits into graph"},{"names":["-T","--traversal"],"argument":"","description":"traversal finder to use {reads, exhaustive, representative, adaptive} (adaptive)"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"}]},{"name":"inject","description":"lift over alignments for the graph","usage":"vg inject [options] input.[bam|sam|cram] >output.gam","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use this graph or xg index (required)"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"}]},{"name":"paths","description":"traverse paths in the graph","usage":"vg paths [options]","options":[{"names":["-x","--xg"],"argument":"FILE","description":"use the paths and haplotypes in this graph FILE. Supports GBZ haplotypes. (Also accepts -v, --vg)"},{"names":["-g","--gbwt"],"argument":"FILE","description":"use the threads in the GBWT index in FILE (graph also required for most output options; -g takes priority over -x)"},{"names":["-V","--extract-vg"],"argument":"","description":"output a path-only graph covering the selected paths"},{"names":["-d","--drop-paths"],"argument":"","description":"output a graph with the selected paths removed"},{"names":["-r","--retain-paths"],"argument":"","description":"output a graph with only the selected paths retained"},{"names":["-X","--extract-gam"],"argument":"","description":"print (as GAM alignments) the stored paths in the graph"},{"names":["-A","--extract-gaf"],"argument":"","description":"print (as GAF alignments) the stored paths in the graph"},{"names":["-L","--list"],"argument":"","description":"print (as a list of names, one per line) the path (or thread) names"},{"names":["-E","--lengths"],"argument":"","description":"print a list of path names (as with -L) but paired with their lengths"},{"names":["-M","--metadata"],"argument":"","description":"print a table of path names and their metadata"},{"names":["-C","--cyclicity"],"argument":"","description":"print a list of path names (as with -L) but paired with flag denoting the cyclicity"},{"names":["-F","--extract-fasta"],"argument":"","description":"print the paths in FASTA format"},{"names":["-c","--coverage"],"argument":"","description":"print the coverage stats for selected paths (not including cylces)"},{"names":["-p","--paths-file"],"argument":"FILE","description":"select the paths named in a file (one per line)"},{"names":["-Q","--paths-by"],"argument":"STR","description":"select the paths with the given name prefix"},{"names":["-S","--sample"],"argument":"STR","description":"select the haplotypes or reference paths for this sample"},{"names":["-a","--variant-paths"],"argument":"","description":"select the variant paths added by 'vg construct -a'"},{"names":["-G","--generic-paths"],"argument":"","description":"select the generic, non-reference, non-haplotype paths"}]},{"name":"simplify","description":"graph simplification","usage":"vg simplify [options] old.vg >new.vg","options":[{"names":["-a","--algorithm"],"argument":"NAME","description":"simplify using the given algorithm (small, rare; default: small)"},{"names":["-t","--threads"],"argument":"N","description":"use N threads to construct graph (defaults to numCPUs)"},{"names":["-p","--progress"],"argument":"","description":"show progress"},{"names":["-b","--bed-in"],"argument":"","description":"read in the given BED file in the cordinates of the original paths"},{"names":["-B","--bed-out"],"argument":"","description":"output transformed features in the coordinates of the new paths"},{"names":["-m","--min-size"],"argument":"N","description":"remove leaf sites with fewer than N bases involved (default: 10)"},{"names":["-v","--vcf"],"argument":"FILE","description":"use the given VCF file to determine variant frequency (required)"},{"names":["-f","--min-freq"],"argument":"FLOAT","description":"remove variants with total alt frequency under FLOAT (default: 0)"},{"names":["-c","--min-count"],"argument":"N","description":"remove variants with total alt occurrence count under N (default: 0)"}]},{"name":"surject","description":"map alignments onto specific paths","usage":"vg surject [options] <aln.gam> >[proj.cram]","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use this graph or xg index (required)"},{"names":["-t","--threads"],"argument":"N","description":"number of threads to use"},{"names":["-p","--into-path"],"argument":"NAME","description":"surject into this path or its subpaths (many allowed, default: reference, then non-alt generic)"},{"names":["-F","--into-paths"],"argument":"FILE","description":"surject into path names listed in HTSlib sequence dictionary or path list FILE"},{"names":["-i","--interleaved"],"argument":"","description":"GAM is interleaved paired-ended, so when outputting HTS formats, pair reads"},{"names":["-M","--multimap"],"argument":"","description":"include secondary alignments to all overlapping paths instead of just primary"},{"names":["-G","--gaf-input"],"argument":"","description":"input file is GAF instead of GAM"},{"names":["-m","--gamp-input"],"argument":"","description":"input file is GAMP instead of GAM"},{"names":["-c","--cram-output"],"argument":"","description":"write CRAM to stdout"},{"names":["-b","--bam-output"],"argument":"","description":"write BAM to stdout"},{"names":["-s","--sam-output"],"argument":"","description":"write SAM to stdout"},{"names":["-l","--subpath-local"],"argument":"","description":"let the multipath mapping surjection produce local (rather than global) alignments"},{"names":["-P","--prune-low-cplx"],"argument":"","description":"prune short and low complexity anchors during realignment"},{"names":["-S","--spliced"],"argument":"","description":"interpret long deletions against paths as spliced alignments"},{"names":["-A","--qual-adj"],"argument":"","description":"adjust scoring for base qualities, if they are available"},{"names":["-N","--sample"],"argument":"NAME","description":"set this sample name for all reads"},{"names":["-R","--read-group"],"argument":"NAME","description":"set this read group for all reads"},{"names":["-f","--max-frag-len"],"argument":"N","description":"reads with fragment lengths greater than N will not be marked properly paired in SAM/BAM/CRAM"},{"names":["-L","--list-all-paths"],"argument":"","description":"annotate SAM records with a list of all attempted re-alignments to paths in SS tag"},{"names":["-C","--compression"],"argument":"N","description":"level for compression [0-9]"}]},{"name":"trace","description":"trace haplotypes","usage":"vg trace [options]","options":[{"names":["-x","--index"],"argument":"FILE","description":"use this xg index or graph"},{"names":["-G","--gbwt-name"],"argument":"FILE","description":"use this GBWT haplotype index instead of any in the graph"},{"names":["-n","--start-node"],"argument":"INT","description":"start at this node"},{"names":["-d","--extend-distance"],"argument":"INT","description":"extend search this many nodes [default=50]"}]},{"name":"vectorize","description":"transform alignments to simple ML-compatible vectors","usage":"vg vectorize [options] -x <index.xg> <alignments.gam>","options":[{"names":["-x","--xg"],"argument":"FILE","description":"An xg index or graph of interest"},{"names":["-g","--gcsa"],"argument":"FILE","description":"A gcsa2 index to use if generating MEM sketches"},{"names":["-l","--aln-label"],"argument":"LABEL","description":"Rename every alignment to LABEL when outputting alignment name."},{"names":["-f","--format"],"argument":"","description":"Tab-delimit output so it can be used in R."},{"names":["-A","--annotate"],"argument":"","description":"Create a header with each node/edge's name and a column with alignment names."},{"names":["-a","--a-hot"],"argument":"","description":"Instead of a 1-hot, output a vector of {0|1|2} for covered, reference, or alt."},{"names":["-w","--wabbit"],"argument":"","description":"Output a format that's friendly to vowpal wabbit"},{"names":["-M","--wabbit-mapping"],"argument":"<FILE>","description":"output the mappings used for vowpal wabbit classes (default: print to stderr)"},{"names":["-M","--wabbit-mapping"],"argument":"<FILE>","description":"output the mappings used for vowpal wabbit classes (default   print to stderr)"},{"names":["-m","--mem-sketch"],"argument":"","description":"Generate a MEM sketch of a given read based on the GCSA"},{"names":["-i","--identity-hot"],"argument":"","description":"Output a score vector based on percent identity and coverage"}]},{"name":"viz","description":"render visualizations of indexed graphs and read sets","usage":"vg viz [options]","options":[{"names":["-x","--xg"],"argument":"FILE","description":"use this basis graph"},{"names":["-i","--pack-in"],"argument":"FILE","description":"use this compressed coverage format (multiple allowed)"},{"names":["-n","--name"],"argument":"NAME","description":"apply name to the previous .pack (multiple allowed)"},{"names":["-o","--out"],"argument":"FILE","description":"write to file (could be .png or .svg)"},{"names":["-X","--width"],"argument":"N","description":"write an image N pixels wide (default 1024)"},{"names":["-Y","--height"],"argument":"N","description":"write an image N pixels high (default 1024)"},{"names":["-C","--show-cnv"],"argument":"","description":"visualize CNVs in paths on new rows (default uses text)"},{"names":["-P","--hide-paths"],"argument":"","description":"hide reference paths in the graph"},{"names":["-D","--hide-dna"],"argument":"","description":"suppress the visualization of DNA sequences"}]},{"name":"benchmark","description":"run and report on performance benchmarks","usage":"vg benchmark [options] >report.tsv","options":[{"names":["-p","--progress"],"argument":"","description":"show progress"}]},{"name":"chain","description":"run a serialized chaining problem","usage":"vg chain [options] input.json","options":[{"names":["-p","--progress"],"argument":"","description":"show progress"}]},{"name":"cluster","description":"find and cluster mapping seeds","usage":"vg cluster [options] input.gam > output.gam","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use this xg index or graph (required)"},{"names":["-g","--gcsa-name"],"argument":"FILE","description":"use this GCSA2/LCP index pair (both FILE and FILE.lcp)"},{"names":["-m","--minimizer-name"],"argument":"FILE","description":"use this minimizer index"},{"names":["-d","--dist-name"],"argument":"FILE","description":"cluster using this distance index (required)"},{"names":["-c","--hit-cap"],"argument":"INT","description":"ignore minimizers with more than this many locations [10]"},{"names":["-t","--threads"],"argument":"INT","description":"number of compute threads to use"}]},{"name":"find","description":"use an index to find nodes, edges, kmers, paths, or positions","usage":"vg find [options] >sub.vg","options":[{"names":["-x","--xg-name"],"argument":"FILE","description":"use this xg index or graph (instead of rocksdb db)"},{"names":["-n","--node"],"argument":"ID","description":"find node(s), return 1-hop context as graph"},{"names":["-N","--node-list"],"argument":"FILE","description":"a white space or line delimited list of nodes to collect"},{"names":["-e","--edges-end"],"argument":"ID","description":"return edges on end of node with ID"},{"names":["-s","--edges-start"],"argument":"ID","description":"return edges on start of node with ID"},{"names":["-c","--context"],"argument":"STEPS","description":"expand the context of the subgraph this many steps"},{"names":["-L","--use-length"],"argument":"","description":"treat STEPS in -c or M in -r as a length in bases"},{"names":["-P","--position-in"],"argument":"PATH","description":"find the position of the node (specified by -n) in the given path"},{"names":["-I","--list-paths"],"argument":"","description":"write out the path names in the index"},{"names":["-r","--node-range"],"argument":"N:M","description":"get nodes from N to M"},{"names":["-G","--gam"],"argument":"GAM","description":"accumulate the graph touched by the alignments in the GAM"},{"names":["--connecting-start"],"argument":"POS","description":"find the graph connecting from POS (node ID, + or -, node offset) to --connecting-end"},{"names":["--connecting-end"],"argument":"POS","description":"find the graph connecting to POS (node ID, + or -, node offset) from --connecting-start"},{"names":["--connecting-range"],"argument":"INT","description":"traverse up to INT bases when going from --connecting-start to --connecting-end (default: 100)"},{"names":["-p","--path"],"argument":"TARGET","description":"find the node(s) in the specified path range(s) TARGET=path[:pos1[-pos2]]"},{"names":["-R","--path-bed"],"argument":"FILE","description":"read our targets from the given BED FILE"},{"names":["-E","--path-dag"],"argument":"","description":"with -p or -R, gets any node in the partial order from pos1 to pos2, assumes id sorted DAG"},{"names":["-W","--save-to"],"argument":"PREFIX","description":"instead of writing target subgraphs to stdout, write one per given target to a separate file named PREFIX[path]:[start]-[end].vg"},{"names":["-K","--subgraph-k"],"argument":"K","description":"instead of graphs, write kmers from the subgraphs"},{"names":["-H","--gbwt"],"argument":"FILE","description":"when enumerating kmers from subgraphs, determine their frequencies in this GBWT haplotype index"},{"names":["-l","--sorted-gam"],"argument":"FILE","description":"use this sorted, indexed GAM file"},{"names":["-o","--alns-on"],"argument":"N:M","description":"write alignments which align to any of the nodes between N and M (inclusive)"},{"names":["-A","--to-graph"],"argument":"VG","description":"get alignments to the provided subgraph"},{"names":["-g","--gcsa"],"argument":"FILE","description":"use this GCSA2 index of the sequence space of the graph (required for sequence queries)"},{"names":["-S","--sequence"],"argument":"STR","description":"search for sequence STR using"},{"names":["-M","--mems"],"argument":"STR","description":"describe the super-maximal exact matches of the STR (gcsa2) in JSON"},{"names":["-B","--reseed-length"],"argument":"N","description":"find non-super-maximal MEMs inside SMEMs of length at least N"},{"names":["-f","--fast-reseed"],"argument":"","description":"use fast SMEM reseeding algorithm"},{"names":["-Y","--max-mem"],"argument":"N","description":"the maximum length of the MEM (default: GCSA2 order)"},{"names":["-Z","--min-mem"],"argument":"N","description":"the minimum length of the MEM (default: 1)"},{"names":["-D","--distance"],"argument":"","description":"return distance on path between pair of nodes (-n). if -P not used, best path chosen heurstically"},{"names":["-Q","--paths-named"],"argument":"S","description":"return all paths whose names are prefixed with S (multiple allowed)"}]},{"name":"mcmc","description":"Finds haplotypes based on reads using MCMC methods","usage":"vg mcmc [options] multipath_alns.mgam graph.vg sites.snarls > graph_with_paths.vg","options":[{"names":["-i","--iteration-number"],"argument":"INT","description":"tells us the number of iterations to run mcmc_genotyper with"},{"names":["-r","--seed"],"argument":"INT","description":"the seed we will use for the random number generator"},{"names":["-s","--sample"],"argument":"NAME","description":"sample name [default=SAMPLE]"},{"names":["-p","--ref-path"],"argument":"NAME","description":"reference path to call on (multipile allowed. defaults to all paths)"},{"names":["-o","--ref-offset"],"argument":"N","description":"offset in reference path (multiple allowed, 1 per path)"},{"names":["-l","--ref-length"],"argument":"N","description":"override length of reference in the contig field of output VCF"},{"names":["-v","--vcf-out"],"argument":"FILE","description":"write VCF output to this file"},{"names":["-b","--burn-in"],"argument":"INT","description":"number of iterations to run original sample proposal only"},{"names":["-g","--gamma-freq"],"argument":"INT","description":"the frequency (every n iterations) for which to re-make the gamma set (starts after burn-in)"}]},{"name":"test","description":"run unit tests","usage":"vg test [<test name|pattern|tags> ... ] options","options":[{"names":["-?","-h","--help"],"argument":"","description":"display usage information"},{"names":["-l","--list-tests"],"argument":"","description":"list all/matching test cases"},{"names":["-t","--list-tags"],"argument":"","description":"list all/matching tags"},{"names":["-s","--success"],"argument":"","description":"include successful tests in output"},{"names":["-b","--break"],"argument":"","description":"break into debugger on failure"},{"names":["-e","--nothrow"],"argument":"","description":"skip exception tests"},{"names":["-i","--invisibles"],"argument":"","description":"show invisibles (tabs, newlines)"},{"names":["-o","--out"],"argument":"<filename>","description":"output filename"},{"names":["-r","--reporter"],"argument":"<name>","description":"reporter to use (defaults to console)"},{"names":["-n","--name"],"argument":"<name>","description":"suite name"},{"names":["-a","--abort"],"argument":"","description":"abort at first failure"},{"names":["-x","--abortx"],"argument":"<no. failures>","description":"abort after x failures"},{"names":["-w","--warn"],"argument":"<warning name>","description":"enable warnings"},{"names":["-d","--durations"],"argument":"<yes|no>","description":"show test durations"},{"names":["-D","--min-duration"],"argument":"<seconds>","description":"show test durations for tests taking at least the given number of seconds"},{"names":["-f","--input-file"],"argument":"<filename>","description":"load test names to run from a file"},{"names":["-#","--filenames-as-tags"],"argument":"","description":"adds a tag for the filename"},{"names":["-c","--section"],"argument":"<section name>","description":"specify section to run"},{"names":["-v","--verbosity"],"argument":"<quiet|normal|high>","description":"set output verbosity"},{"names":["--list-test-names-only"],"argument":"","description":"list all/matching test cases names only"},{"names":["--list-reporters"],"argument":"","description":"list all reporters"},{"names":["--order"],"argument":"<decl|lex|rand>","description":"test case order (defaults to decl)"},{"names":["--rng-seed"],"argument":"<'time'|number>","description":"set a specific seed for random numbers"},{"names":["--use-colour"],"argument":"<yes|no>","description":"should output be colourised"},{"names":["--libidentify"],"argument":"","description":"report name and version according to libidentify standard"},{"names":["--wait-for-keypress"],"argument":"<never|start|exit","description":"waits for a keypress before"},{"names":["--benchmark-samples"],"argument":"<samples>","description":"number of samples to collect (default: 100)"},{"names":["--benchmark-resamples"],"argument":"<resamples>","description":"number of resamples for the bootstrap (default: 100000)"},{"names":["--benchmark-confidence-interval"],"argument":"","description":"confidence interval for the"},{"names":["--benchmark-no-analysis"],"argument":"","description":"perform only measurements; do not perform any analysis"},{"names":["--benchmark-warmup-time"],"argument":"","description":"amount of time in milliseconds"}]},{"name":"validate","description":"validate the semantics of a graph or gam","usage":"vg validate [options] [graph]","options":[{"names":["-o","--orphans"],"argument":"","description":"verify that all nodes have edges"},{"names":["-a","--gam"],"argument":"FILE","description":"verify that edits in the alignment fit on nodes in the graph"}]},{"name":"version","description":"version information","usage":"vg version","options":[{"names":["-s","--slug"],"argument":"","description":"print only the one-line, whitespace-free version string"},{"names":["-h","--help"],"argument":"","description":"print this help"}]}],"version":"vg version v1.45.0 \"Alpicella\""}
