name: SnpSift
description: SnpSift
usage: java -jar SnpSift.jar [command] params...
options:
  - names:
      - -d
    argument: ""
    description: ': Debug.'
  - names:
      - -download
    argument: ""
    description: ': Download database, if not available locally. Default: true.'
  - names:
      - -noDownload
    argument: ""
    description: ': Do not download a database, if not available locally.'
  - names:
      - -noLog
    argument: ""
    description: ': Do not report usage statistics to server.'
  - names:
      - -h
    argument: ""
    description: ': Help.'
  - names:
      - -v
    argument: ""
    description: ': Verbose.'
subcommands:
  - name: alleleMat
    description: Create an allele matrix output.
    options: []
  - name: annotate
    description: Annotate 'ID' from a database (e.g. dbSnp). Assumes entries are sorted.
    usage: java -jar SnpSift.jar Annotate [options] database.vcf file.vcf > newFile.vcf
    options:
      - names:
          - -dbsnp
        argument: ""
        description: ': Use DbSnp database.'
      - names:
          - -clinvar
        argument: ""
        description: ': Use ClinVar database.'
      - names:
          - -a
        argument: ""
        description: ': Annotate fields, even if the database has an empty value (annotates using ''.'' for empty).'
      - names:
          - -exists
        argument: <tag>
        description: ': Annotate whether the variant exists or not in the database (using ''tag'' as an INFO field FLAG).'
      - names:
          - -id
        argument: ""
        description: ': Only annotate ID field. Default: true'
      - names:
          - -info
        argument: <list>
        description: ': Annotate using a list of info fields (list is a comma separated list of fields). Default: ALL.'
      - names:
          - -name
        argument: str
        description: ': Prepend ''str'' to all annotated INFO fields. Default: ''''.'
      - names:
          - -maxBlockSize
        argument: <int>
        description: ': Use ''max block size'' when creating index (''-sorted'' command line option). Default: 16384'
      - names:
          - -noAlt
        argument: ""
        description: ': Do not use REF and ALT fields when comparing database.vcf entries to file.vcf entries. Default: false'
      - names:
          - -noId
        argument: ""
        description: ': Do not annotate ID field. Default: false'
      - names:
          - -noInfo
        argument: ""
        description: ': Do not annotate INFO fields. Default: false'
      - names:
          - -sorted
        argument: ""
        description: ': VCF database is sorted and uncompressed. Default: false'
      - names:
          - -tabix
        argument: ""
        description: ': VCF database is tabix-indexed. Default: false'
      - names:
          - -c
          - -config
        argument: <file>
        description: ': Specify config file'
      - names:
          - -d
        argument: ""
        description: ': Debug.'
      - names:
          - -db
        argument: <file>
        description: ': Database file name (for commands that require databases).'
      - names:
          - -download
        argument: ""
        description: ': Download database, if not available locally. Default: true.'
      - names:
          - -noDownload
        argument: ""
        description: ': Do not download a database, if not available locally.'
      - names:
          - -noLog
        argument: ""
        description: ': Do not report usage statistics to server.'
      - names:
          - -h
        argument: ""
        description: ': Help.'
      - names:
          - -v
        argument: ""
        description: ': Verbose.'
  - name: caseControl
    description: Compare how many variants are in 'case' and in 'control' groups; calculate p-values.
    usage: java -jar SnpSift.jar caseControl [-v] [-name nameString] { -tfam file.tfam | <CaseControlString> } file.vcf
    options:
      - names:
          - -chi2
        argument: ""
        description: ': Use ChiSquare approximarion instead of Fisher exact test.'
      - names:
          - -name
        argument: nameStr
        description: ': A name to be added after to ''Cases'' or ''Controls'' tags'
      - names:
          - -tfam
        argument: file.tfam
        description: ': A TFAM file having case/control informations (phenotype colmun)'
  - name: ccs
    description: Case control summary. Case and control summaries by region, allele frequency and variant's functional effect.
    usage: java -jar SnpSift.jar ccs [-v] [-q] file.tfam file.bed file.vcf
    options:
      - names:
          - -q
        argument: ""
        description: ': Be quiet'
      - names:
          - -v
        argument: ""
        description: ': Be verbose'
  - name: concordance
    description: Concordance metrics between two VCF files.
    usage: java -jar SnpSift.jar Concordance [options] reference.vcf sequencing.vcf
    options:
      - names:
          - -s
        argument: <file>
        description: ': Only use sample IDs in file (format: one sample ID per line).'
  - name: covMat
    description: Create an covariance matrix output (allele matrix as input).
    usage: java -jar SnpSift.jar covMat allele.matrix.txt > cov.matrix.txt
    options: []
  - name: dbnsfp
    description: Annotate with multiple entries from dbNSFP.
    usage: java -jar SnpSift.jar DbNsfp [options] file.vcf > newFile.vcf
    options:
      - names:
          - -a
        argument: ""
        description: ': Annotate fields, even if the database has an empty value (annotates using ''.'' for empty).'
      - names:
          - -collapse
        argument: ""
        description: ': Collapse repeated values from dbNSFP. Default: false'
      - names:
          - -db
        argument: <file>
        description: ': Path to dbNSFP database file (bgzip + tabix).'
      - names:
          - -g
        argument: <name>
        description: ': Genome version.'
      - names:
          - -noCollapse
        argument: ""
        description: ': Switch off ''collapsing'' repeated values from dbNSFP. Default: true'
      - names:
          - -m
        argument: ""
        description: ': Annotate fields even if there are no database matching entries (annotates using ''.'').'
      - names:
          - -n
        argument: ""
        description: ': Invert ''fields to add'' selection (i.e. use all fields except the ones specified in option ''-f'').'
      - names:
          - -f
        argument: ""
        description: ': A comma separated list of fields to add.'
      - names:
          - -c
          - -config
        argument: <file>
        description: ': Specify config file'
      - names:
          - -d
        argument: ""
        description: ': Debug.'
      - names:
          - -db
        argument: <file>
        description: ': Database file name (for commands that require databases).'
      - names:
          - -download
        argument: ""
        description: ': Download database, if not available locally. Default: true.'
      - names:
          - -g
        argument: <name>
        description: ': Genome version (for commands that require databases).'
      - names:
          - -noDownload
        argument: ""
        description: ': Do not download a database, if not available locally.'
      - names:
          - -noLog
        argument: ""
        description: ': Do not report usage statistics to server.'
      - names:
          - -h
        argument: ""
        description: ': Help.'
      - names:
          - -v
        argument: ""
        description: ': Verbose.'
  - name: extractFields
    description: Extract fields from VCF file into tab separated format.
    usage: java -jar SnpSift.jar extractFields [options] file.vcf fieldName1 fieldName2 ... fieldNameN > tabFile.txt
    options:
      - names:
          - -s
        argument: ""
        description: ': Same field separator. Default: '' '''
      - names:
          - -e
        argument: ""
        description: ': Empty field. Default: '''''
  - name: filter
    description: Filter using arbitrary expressions
    usage: java -jar SnpSift.jar filter [options] 'expression' [input.vcf]
    options:
      - names:
          - -a
          - --addFilter
        argument: <str>
        description: ': Add a string to FILTER VCF field if ''expression'' is true. Default: '''' (none)'
      - names:
          - -e
          - --exprFile
        argument: <file>
        description: ': Read expression from a file'
      - names:
          - -f
          - --file
        argument: <input.vcf>
        description: 'VCF input file. Default: STDIN'
      - names:
          - -i
          - --filterId
        argument: <str>
        description: ': ID for this filter (##FILTER tag in header and FILTER VCF field). Default: ''SnpSift'''
      - names:
          - -n
          - --inverse
        argument: ""
        description: ': Inverse. Show lines that do not match filter expression'
      - names:
          - -p
          - --pass
        argument: ""
        description: ': Use ''PASS'' field instead of filtering out VCF entries'
      - names:
          - -r
          - --rmFilter
        argument: <str>
        description: ': Remove a string from FILTER VCF field if ''expression'' is true (and ''str'' is in the field). Default: '''' (none)'
      - names:
          - -s
          - --set
        argument: <file>
        description: ': Create a SET using ''file'''
      - names:
          - --errMissing
        argument: ""
        description: ': Error is a field is missing. Default: false'
      - names:
          - --format
        argument: <format>
        description: ': SnpEff format version: {2, 3}. Default: Auto'
      - names:
          - --galaxy
        argument: ""
        description: ': Used from Galaxy (expressions have been sanitized).'
  - name: geneSets
    description: 'Annotate using MSigDb gene sets (MSigDb includes: GO, KEGG, Reactome, BioCarta, etc.)'
    usage: java -jar SnpSift.jar miSigDb.gmt file.vcf > file.geneSets.vcf
    options: []
  - name: gt
    description: Add Genotype to INFO fields and remove genotype fields when possible.
    usage: java -jar SnpSift.jar gt [options] [file.vcf] > file.gt.vcf
    options:
      - names:
          - -u
        argument: ""
        description: ': Uncompress (restore genotype fields).'
  - name: gtfilter
    description: Filter genotype using arbitrary expressions.
    usage: java -jar SnpSift.jar filter [options] 'expression' [input.vcf]
    options:
      - names:
          - -e
        argument: ""
        description: '| --exprFile <file>   : Read expression from a file'
      - names:
          - -f
        argument: ""
        description: '| --file <input.vcf>   : VCF input file. Default: STDIN'
      - names:
          - -gn
          - --field
        argument: <name>
        description: ': Field name to replace if filter is true. Default: ''GT'''
      - names:
          - -gv
          - --value
        argument: <value>
        description: ': Field value to replace if filter is true. Default: ''.'''
      - names:
          - -n
        argument: ""
        description: '| --inverse   : Inverse. Show lines that do not match filter expression'
      - names:
          - -s
        argument: ""
        description: '| --set <file>   : Create a SET using ''file'''
      - names:
          - --errMissing
        argument: ""
        description: ': Error is a field is missing. Default: false'
      - names:
          - --format
        argument: <format>
        description: ': SnpEff format version: {2, 3}. Default: Auto'
  - name: gwasCat
    description: Annotate using GWAS catalog
    usage: java -jar SnpSift.jar gwasCat [-db path/to/gwascat.txt] [file.vcf] > newFile.vcf.
    options:
      - names:
          - -c
          - -config
        argument: <file>
        description: ': Specify config file'
      - names:
          - -d
        argument: ""
        description: ': Debug.'
      - names:
          - -db
        argument: <file>
        description: ': Database file name (for commands that require databases).'
      - names:
          - -download
        argument: ""
        description: ': Download database, if not available locally. Default: true.'
      - names:
          - -g
        argument: <name>
        description: ': Genome version (for commands that require databases).'
      - names:
          - -noDownload
        argument: ""
        description: ': Do not download a database, if not available locally.'
      - names:
          - -noLog
        argument: ""
        description: ': Do not report usage statistics to server.'
      - names:
          - -h
        argument: ""
        description: ': Help.'
      - names:
          - -v
        argument: ""
        description: ': Verbose.'
  - name: hwe
    description: Calculate Hardy-Weimberg parameters and perform a godness of fit test.
    usage: |-
      java -jar SnpSift.jar hwe [-v] [-q] [file.vcf]
       -q       : Be quite
       -v       : Be verbose
    options:
      - names:
          - -q
        argument: ""
        description: ': Be quite'
      - names:
          - -v
        argument: ""
        description: ': Be verbose'
  - name: intersect
    description: Intersect intervals (genomic regions).
    usage: java -jar SnpSift.jar [options] file_1.bed file_2.bed ... file_N.bed
    options:
      - names:
          - -minOverlap
        argument: <num>
        description: ': Minimum number of bases that two intervals have to overlap. Default : 0'
      - names:
          - -cluster
        argument: <num>
        description: ': An interval has to intersect at least ''num'' intervals (from other files) to be considered. Default: 0'
      - names:
          - -intersect
        argument: ""
        description: ': Report the intersection of all intervals. Default: false'
      - names:
          - -union
        argument: ""
        description: ': Report the union of all intervals. Default: true'
      - names:
          - -not
        argument: <file>
        description: ': Only report if it does NOT intersect with any interval in this file (i.e. filter out if intersects)'
  - name: intervals
    description: Keep variants that intersect with intervals.
    usage: java -jar SnpSift.jar intervals [-x] file_1.bed file_2.bed ... file_N.bed
    options:
      - names:
          - -i
        argument: <file>
        description: VCF file. Default STDIN
      - names:
          - -x
        argument: ""
        description: ':   Exclude VCF entries in intervals'
  - name: intIdx
    description: 'Keep variants that intersect with intervals. Index-based method: Used for large VCF file and a few intervals to retrieve'
    usage: java -jar SnpSift.jar intidx [-if N] [-i] file.vcf ( file.bed | chr:start1-end1 chr:start2-end2 ... chr:startN-endN )
    options:
      - names:
          - -if
        argument: <N>
        description: ': Input offset. Default 0 (i.e. zero-based coordinates).'
      - names:
          - -i
        argument: ""
        description: ': Genomic intervals in command line.'
  - name: join
    description: Join files by genomic region.
    usage: java -jar SnpSift.jar join [options] file1 file2
    options:
      - names:
          - -if1
        argument: <num>
        description: ': Offset for file1 (e.g. 1 if coordinates are one-based. Default: 1'
      - names:
          - -if2
        argument: <num>
        description: ': Offset for file2 (e.g. 2 if coordinates are one-based. Default: 1'
      - names:
          - -cols1
        argument: <colDef>
        description: ': Column definition for file 1. Format: chrCol,startCol,endCol (e.g. ''1,2,3''). Shortcuts ''bed'' or ''vcf'' are allowed. Default: ''vcf'''
      - names:
          - -cols2
        argument: <colDef>
        description: ': Column definition for file 2. Format: chrCol,startCol,endCol (e.g. ''1,2,3''). Shortcuts ''bed'' or ''vcf'' are allowed. Default: ''vcf'''
      - names:
          - -all
        argument: ""
        description: ': For each interval, show all intersecting. Default: show only one (largest intersection)'
      - names:
          - -closest
        argument: ""
        description: ': Show closest intervals in file2 if none intersect. Default: off'
      - names:
          - -empty
        argument: ""
        description: ': Show intervals in file1 even if they do not intersect with any other interval. Default: off'
  - name: op
    description: Annotate using an operator.
    usage: kew maxPopFreq [options] [files]
    options:
      - names:
          - -fields
        argument: <filedNames>
        description: ': Input VCF field names (comma separated list).'
      - names:
          - -op
        argument: <operator>
        description: ': Operator to be applied to the fields'
      - names:
          - -outfield
        argument: <filedName>
        description: ': Ouptut field name.'
  - name: phastCons
    description: Annotate using conservation scores (phastCons).
    usage: java -jar SnpSift.jar [options] path/to/phastCons/dir inputFile
    options:
      - names:
          - -bed
        argument: ""
        description: ': Input is a BED file.'
      - names:
          - -extract
        argument: <num>
        description: ': Extract sub intervals of at least ''num'' bases, having a conservarion score of at least ''minScore''. Only when input is a BED file.'
      - names:
          - -minScore
        argument: <num>
        description: 'Only annotate is score is greater to ''num''. Default: 0.0'
  - name: private
    description: Annotate if a variant is private to a family or group.
    usage: java -jar SnpSift.jar private file.tfam file.vcf
    options: []
  - name: rmRefGen
    description: Remove reference genotypes.
    usage: cat file.vcf | java -jar SnpSift.jar rmRefGen [file.vcf] > file_noref.vcf
    options: []
  - name: rmInfo
    description: Remove INFO fields.
    usage: java -jar SnpSift.jar rmInfo [options] file.vcf infoField_1 infoField_2 ... infoField_N > file_out.vcf
    options: []
  - name: sort
    description: Sort VCF file/s (if multiple input VCFs, merge and sort).
    usage: java -jar SnpSift.jar sort file.vcf [file_2.vcf ... file_N.vcf]
    options: []
  - name: split
    description: Split VCF by chromosome.
    usage: java -jar SnpSift.jar splitChr [-j] [-l <num>] file.vcf [file_2.vcf ... file_N.vcf]
    options:
      - names:
          - -j
        argument: ""
        description: ': Join all files in command line (output = STDOUT).'
      - names:
          - -l
        argument: <num>
        description: ': Split by ''num'' lines.'
  - name: tstv
    description: Calculate transiton to transversion ratio.
    usage: java -jar SnpSift.jar tstv file1.vcf
    options: []
  - name: varType
    description: Annotate variant type (SNP,MNP,INS,DEL or MIXED).
    usage: java -jar SnpSift.jar varType file.vcf > newFile.vcf.
    options: []
  - name: vcfCheck
    description: Check that VCF file is well formed.
    usage: java -jar SnpSift.jar vcfCheck file_1.vcf [file_2.vcf ... file_N.vcf]
    options: []
  - name: vcf2tped
    description: Convert VCF to TPED.
    usage: java -jar SnpSift.jar vcf2tped [options] file.tfam file.vcf outputName
    options:
      - names:
          - -f
        argument: ""
        description: ': Force. Overwrite new files if they exist. Default: false'
      - names:
          - -num
        argument: ""
        description: ': Use only numbers {1, 2, 3, 4} instead of bases {A, C, G, T}. Default: false'
      - names:
          - -onlySnp
        argument: ""
        description: ': Use only SNPs when converting VCF to TPED. Default: false'
      - names:
          - -onlyBiAllelic
        argument: ""
        description: 'Use only bi-allelic variants. Default: false'
      - names:
          - -useMissing
        argument: ""
        description: ': Use entries with missing genotypes (otherwise they are filtered out). Default: true'
      - names:
          - -useMissingRef
        argument: ""
        description: 'Use entries with missing genotypes marking them as ''reference'' instead of ''missing''. Default: false'
version: 'SnpSift version 5.1d (build 2022-04-19 15:50), by Pablo Cingolani'