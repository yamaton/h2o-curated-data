name: csvsql
description: csvsql
options:
  - names:
      - -h
      - --help
    argument: ""
    description: show this help message and exit
  - names:
      - -d
      - --delimiter
    argument: DELIMITER
    description: Delimiting character of the input CSV file.
  - names:
      - -t
      - --tabs
    argument: ""
    description: Specify that the input CSV file is delimited with tabs. Overrides "-d".
  - names:
      - -q
      - --quotechar
    argument: QUOTECHAR
    description: Character used to quote strings in the input CSV file.
  - names:
      - -u
      - --quoting
    argument: '{0,1,2,3}'
    description: Quoting style used in the input CSV file. 0 = Quote Minimal, 1 = Quote All, 2 = Quote Non-numeric, 3 = Quote None.
  - names:
      - -b
      - --no-doublequote
    argument: ""
    description: Whether or not double quotes are doubled in the input CSV file.
  - names:
      - -p
      - --escapechar
    argument: ESCAPECHAR
    description: Character used to escape the delimiter if --quoting 3 ("Quote None") is specified and to escape the QUOTECHAR if --no-doublequote is specified.
  - names:
      - -z
      - --maxfieldsize
    argument: FIELD_SIZE_LIMIT
    description: Maximum length of a single field in the input CSV file.
  - names:
      - -e
      - --encoding
    argument: ENCODING
    description: Specify the encoding of the input CSV file.
  - names:
      - -L
      - --locale
    argument: LOCALE
    description: Specify the locale (en_US) of any formatted numbers.
  - names:
      - -S
      - --skipinitialspace
    argument: ""
    description: Ignore whitespace immediately following the delimiter.
  - names:
      - --blanks
    argument: ""
    description: Do not convert "", "na", "n/a", "none", "null", "." to NULL.
  - names:
      - --date-format
    argument: DATE_FORMAT
    description: Specify a strptime date format string like "%m/%d/%Y".
  - names:
      - --datetime-format
    argument: DATETIME_FORMAT
    description: Specify a strptime datetime format string like "%m/%d/%Y %I:%M %p".
  - names:
      - -H
      - --no-header-row
    argument: ""
    description: Specify that the input CSV file has no header row. Will create default headers (a,b,c,...).
  - names:
      - -K
      - --skip-lines
    argument: SKIP_LINES
    description: Specify the number of initial lines to skip before the header row (e.g. comments, copyright notices, empty rows).
  - names:
      - -v
      - --verbose
    argument: ""
    description: Print detailed tracebacks when errors occur.
  - names:
      - -l
      - --linenumbers
    argument: ""
    description: Insert a column of line numbers at the front of the output. Useful when piping to grep or as a simple primary key.
  - names:
      - --zero
    argument: ""
    description: When interpreting or displaying column numbers, use zero-based numbering instead of the default 1-based numbering.
  - names:
      - -V
      - --version
    argument: ""
    description: Display version information and exit.
  - names:
      - -i
      - --dialect
    argument: '{firebird,mssql,mysql,oracle,postgresql,sqlite,sybase}'
    description: Dialect of SQL to generate. Cannot be used with --db.
  - names:
      - --db
    argument: CONNECTION_STRING
    description: If present, a SQLAlchemy connection string to use to directly execute generated SQL on a database.
  - names:
      - --query
    argument: QUERY
    description: Execute one or more SQL queries delimited by ";" and output the result of the last query as CSV. QUERY may be a filename.
  - names:
      - --insert
    argument: ""
    description: Insert the data into the table. Requires --db.
  - names:
      - --prefix
    argument: PREFIX
    description: Add an expression following the INSERT keyword, like OR IGNORE or OR REPLACE.
  - names:
      - --before-insert
    argument: BEFORE_INSERT
    description: Execute SQL before the INSERT command. Requires --insert.
  - names:
      - --after-insert
    argument: AFTER_INSERT
    description: Execute SQL after the INSERT command. Requires --insert.
  - names:
      - --tables
    argument: TABLE_NAMES
    description: A comma-separated list of names of tables to be created. By default, the tables will be named after the filenames without extensions or "stdin".
  - names:
      - --no-constraints
    argument: ""
    description: Generate a schema without length limits or null checks. Useful when sampling big tables.
  - names:
      - --unique-constraint
    argument: UNIQUE_CONSTRAINT
    description: A column-separated list of names of columns to include in a UNIQUE constraint.
  - names:
      - --no-create
    argument: ""
    description: Skip creating the table. Requires --insert.
  - names:
      - --create-if-not-exists
    argument: ""
    description: Create the table if it does not exist, otherwise keep going. Requires --insert.
  - names:
      - --overwrite
    argument: ""
    description: Drop the table if it already exists. Requires --insert. Cannot be used with --no-create.
  - names:
      - --db-schema
    argument: DB_SCHEMA
    description: Optional name of database schema to create table(s) in.
  - names:
      - -y
      - --snifflimit
    argument: SNIFF_LIMIT
    description: Limit CSV dialect sniffing to the specified number of bytes. Specify "0" to disable sniffing entirely, or "-1" to sniff the entire file.
  - names:
      - -I
      - --no-inference
    argument: ""
    description: Disable type inference when parsing the input.
  - names:
      - --chunk-size
    argument: CHUNK_SIZE
    description: Chunk size for batch insert into the table. Requires --insert.
version: csvsql 1.0.7
tldr: |
  > Generate SQL statements for a CSV file or execute those statements directly on a database.
  > Included in csvkit.
  > More information: <https://csvkit.readthedocs.io/en/latest/scripts/csvsql.html>.

  - Generate a `CREATE TABLE` SQL statement for a CSV file:

  `csvsql {{path/to/data.csv}}`

  - Import a CSV file into an SQL database:

  `csvsql --insert --db "{{mysql://user:password@host/database}}" {{data.csv}}`

  - Run an SQL query on a CSV file:

  `csvsql --query "{{select * from 'data'}}" {{data.csv}}`
