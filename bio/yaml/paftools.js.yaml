name: paftools.js
description: paftools.js
options:
  - names:
      - --use_strict
    argument: ""
    description: enforce strict mode
  - names:
      - --es5_readonly
    argument: ""
    description: activate correct semantics for inheriting readonliness
  - names:
      - --es52_globals
    argument: ""
    description: activate new semantics for global var declarations
  - names:
      - --harmony_typeof
    argument: ""
    description: enable harmony semantics for typeof
  - names:
      - --harmony_scoping
    argument: ""
    description: enable harmony block scoping
  - names:
      - --harmony_modules
    argument: ""
    description: enable harmony modules (implies block scoping)
  - names:
      - --harmony_proxies
    argument: ""
    description: enable harmony proxies
  - names:
      - --harmony_collections
    argument: ""
    description: enable harmony collections (sets, maps, and weak maps)
  - names:
      - --harmony_observation
    argument: ""
    description: enable harmony object observation (implies harmony collections
  - names:
      - --harmony
    argument: ""
    description: enable all harmony features (except typeof)
  - names:
      - --packed_arrays
    argument: ""
    description: optimizes arrays that have no holes
  - names:
      - --smi_only_arrays
    argument: ""
    description: tracks arrays with only smi values
  - names:
      - --clever_optimizations
    argument: ""
    description: Optimize object size, Array shift, DOM strings and string +
  - names:
      - --unbox_double_arrays
    argument: ""
    description: automatically unbox arrays of doubles
  - names:
      - --string_slices
    argument: ""
    description: use string slices
  - names:
      - --crankshaft
    argument: ""
    description: use crankshaft
  - names:
      - --hydrogen_filter
    argument: <string>
    description: optimization filter
  - names:
      - --use_range
    argument: ""
    description: use hydrogen range analysis
  - names:
      - --eliminate_dead_phis
    argument: ""
    description: eliminate dead phis
  - names:
      - --use_gvn
    argument: ""
    description: use hydrogen global value numbering
  - names:
      - --use_canonicalizing
    argument: ""
    description: use hydrogen instruction canonicalizing
  - names:
      - --use_inlining
    argument: ""
    description: use function inlining
  - names:
      - --max_inlined_source_size
    argument: <int>
    description: 'maximum source size in bytes considered for a single inlining (default: 600)'
  - names:
      - --max_inlined_nodes
    argument: <int>
    description: 'maximum number of AST nodes considered for a single inlining (default: 196)'
  - names:
      - --max_inlined_nodes_cumulative
    argument: <int>
    description: 'maximum cumulative number of AST nodes considered for inlining (default: 196)'
  - names:
      - --loop_invariant_code_motion
    argument: ""
    description: loop invariant code motion
  - names:
      - --fast_math
    argument: ""
    description: faster (but maybe less accurate) math functions
  - names:
      - --collect_megamorphic_maps_from_stub_cache
    argument: ""
    description: crankshaft harvests type feedback from stub cache
  - names:
      - --hydrogen_stats
    argument: ""
    description: print statistics for hydrogen
  - names:
      - --trace_hydrogen
    argument: ""
    description: trace generated hydrogen to file
  - names:
      - --trace_phase
    argument: <string>
    description: 'trace generated IR for specified phases (default: Z)'
  - names:
      - --trace_inlining
    argument: ""
    description: trace inlining decisions
  - names:
      - --trace_alloc
    argument: ""
    description: trace register allocator
  - names:
      - --trace_all_uses
    argument: ""
    description: trace all use positions
  - names:
      - --trace_range
    argument: ""
    description: trace range analysis
  - names:
      - --trace_gvn
    argument: ""
    description: trace global value numbering
  - names:
      - --trace_representation
    argument: ""
    description: trace representation types
  - names:
      - --stress_pointer_maps
    argument: ""
    description: pointer map for every instruction
  - names:
      - --stress_environments
    argument: ""
    description: environment for every instruction
  - names:
      - --deopt_every_n_times
    argument: <int>
    description: 'deoptimize every n times a deopt point is passed (default: 0)'
  - names:
      - --trap_on_deopt
    argument: ""
    description: put a break point before deoptimizing
  - names:
      - --deoptimize_uncommon_cases
    argument: ""
    description: deoptimize uncommon cases
  - names:
      - --polymorphic_inlining
    argument: ""
    description: polymorphic inlining
  - names:
      - --use_osr
    argument: ""
    description: use on-stack replacement
  - names:
      - --array_bounds_checks_elimination
    argument: ""
    description: perform array bounds checks elimination
  - names:
      - --array_index_dehoisting
    argument: ""
    description: perform array index dehoisting
  - names:
      - --dead_code_elimination
    argument: ""
    description: use dead code elimination
  - names:
      - --trace_dead_code_elimination
    argument: ""
    description: trace dead code elimination
  - names:
      - --track_allocation_sites
    argument: ""
    description: Use allocation site info to reduce transitions
  - names:
      - --trace_osr
    argument: ""
    description: trace on-stack replacement
  - names:
      - --stress_runs
    argument: <int>
    description: 'number of stress runs (default: 0)'
  - names:
      - --optimize_closures
    argument: ""
    description: optimize closures
  - names:
      - --lookup_sample_by_shared
    argument: ""
    description: when picking a function to optimize, watch for shared function info, not JSFunction itself
  - names:
      - --cache_optimized_code
    argument: ""
    description: cache optimized code for closures
  - names:
      - --inline_construct
    argument: ""
    description: inline constructor calls
  - names:
      - --inline_arguments
    argument: ""
    description: inline functions with arguments object
  - names:
      - --inline_accessors
    argument: ""
    description: inline JavaScript accessors
  - names:
      - --loop_weight
    argument: <int>
    description: 'loop weight for representation inference (default: 1)'
  - names:
      - --optimize_for_in
    argument: ""
    description: optimize functions containing for-in loops
  - names:
      - --opt_safe_uint32_operations
    argument: ""
    description: allow uint32 values on optimize frames if they are used only in safe operations
  - names:
      - --parallel_recompilation
    argument: ""
    description: optimizing hot functions asynchronously on a separate thread
  - names:
      - --trace_parallel_recompilation
    argument: ""
    description: track parallel recompilation
  - names:
      - --parallel_recompilation_queue_length
    argument: <int>
    description: 'the length of the parallel compilation queue (default: 2)'
  - names:
      - --manual_parallel_recompilation
    argument: ""
    description: disable automatic optimization
  - names:
      - --experimental_profiler
    argument: ""
    description: enable all profiler experiments
  - names:
      - --watch_ic_patching
    argument: ""
    description: profiler considers IC stability
  - names:
      - --frame_count
    argument: <int>
    description: 'number of stack frames inspected by the profiler (default: 1)'
  - names:
      - --self_optimization
    argument: ""
    description: primitive functions trigger their own optimization
  - names:
      - --direct_self_opt
    argument: ""
    description: call recompile stub directly when self-optimizing
  - names:
      - --retry_self_opt
    argument: ""
    description: re-try self-optimization if it failed
  - names:
      - --interrupt_at_exit
    argument: ""
    description: insert an interrupt check at function exit
  - names:
      - --weighted_back_edges
    argument: ""
    description: weight back edges by jump distance for interrupt triggering
  - names:
      - --interrupt_budget
    argument: <int>
    description: 'execution budget before interrupt is triggered (default: 5888)'
  - names:
      - --type_info_threshold
    argument: <int>
    description: 'percentage of ICs that must have type info to allow optimization (default: 15)'
  - names:
      - --self_opt_count
    argument: <int>
    description: 'call count before self-optimization (default: 130)'
  - names:
      - --trace_opt_verbose
    argument: ""
    description: extra verbose compilation tracing
  - names:
      - --debug_code
    argument: ""
    description: generate extra code (assertions) for debugging
  - names:
      - --code_comments
    argument: ""
    description: emit comments in code disassembly
  - names:
      - --enable_sse2
    argument: ""
    description: enable use of SSE2 instructions if available
  - names:
      - --enable_sse3
    argument: ""
    description: enable use of SSE3 instructions if available
  - names:
      - --enable_sse4_1
    argument: ""
    description: enable use of SSE4.1 instructions if available
  - names:
      - --enable_cmov
    argument: ""
    description: enable use of CMOV instruction if available
  - names:
      - --enable_rdtsc
    argument: ""
    description: enable use of RDTSC instruction if available
  - names:
      - --enable_sahf
    argument: ""
    description: enable use of SAHF instruction if available (X64 only)
  - names:
      - --enable_vfp3
    argument: ""
    description: enable use of VFP3 instructions if available - this implies enabling ARMv7 and VFP2 instructions (ARM only)
  - names:
      - --enable_vfp2
    argument: ""
    description: enable use of VFP2 instructions if available
  - names:
      - --enable_armv7
    argument: ""
    description: enable use of ARMv7 instructions if available (ARM only)
  - names:
      - --enable_sudiv
    argument: ""
    description: enable use of SDIV and UDIV instructions if available (ARM only)
  - names:
      - --enable_movw_movt
    argument: ""
    description: enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only)
  - names:
      - --enable_unaligned_accesses
    argument: ""
    description: enable unaligned accesses for ARMv7 (ARM only)
  - names:
      - --enable_fpu
    argument: ""
    description: enable use of MIPS FPU instructions if available (MIPS only)
  - names:
      - --enable_vldr_imm
    argument: ""
    description: enable use of constant pools for double immediate (ARM only)
  - names:
      - --expose_natives_as
    argument: <string>
    description: expose natives in global object
  - names:
      - --expose_debug_as
    argument: <string>
    description: expose debug in global object
  - names:
      - --expose_gc
    argument: ""
    description: expose gc extension
  - names:
      - --expose_externalize_string
    argument: ""
    description: expose externalize string extension
  - names:
      - --stack_trace_limit
    argument: <int>
    description: 'number of stack frames to capture (default: 10)'
  - names:
      - --builtins_in_stack_traces
    argument: ""
    description: show built-in functions in stack traces
  - names:
      - --disable_native_files
    argument: ""
    description: disable builtin natives files
  - names:
      - --inline_new
    argument: ""
    description: use fast inline allocation
  - names:
      - --stack_trace_on_abort
    argument: ""
    description: print a stack trace if an assertion failure occurs
  - names:
      - --trace
    argument: ""
    description: trace function calls
  - names:
      - --mask_constants_with_cookie
    argument: ""
    description: use random jit cookie to mask large constants
  - names:
      - --lazy
    argument: ""
    description: use lazy compilation
  - names:
      - --trace_opt
    argument: ""
    description: trace lazy optimization
  - names:
      - --trace_opt_stats
    argument: ""
    description: trace lazy optimization statistics
  - names:
      - --opt
    argument: ""
    description: use adaptive optimizations
  - names:
      - --always_opt
    argument: ""
    description: always try to optimize functions
  - names:
      - --prepare_always_opt
    argument: ""
    description: prepare for turning on always opt
  - names:
      - --trace_deopt
    argument: ""
    description: trace deoptimization
  - names:
      - --min_preparse_length
    argument: <int>
    description: 'minimum length for automatic enable preparsing (default: 1024)'
  - names:
      - --always_full_compiler
    argument: ""
    description: try to use the dedicated run-once backend for all code
  - names:
      - --max_opt_count
    argument: <int>
    description: 'maximum number of optimization attempts before giving up. (default: 10)'
  - names:
      - --compilation_cache
    argument: ""
    description: enable compilation cache
  - names:
      - --cache_prototype_transitions
    argument: ""
    description: cache prototype transitions
  - names:
      - --trace_debug_json
    argument: ""
    description: trace debugging JSON request/response
  - names:
      - --debugger_auto_break
    argument: ""
    description: automatically set the debug break flag when debugger commands are in the queue
  - names:
      - --enable_liveedit
    argument: ""
    description: enable liveedit experimental feature
  - names:
      - --break_on_abort
    argument: ""
    description: always cause a debug break before aborting
  - names:
      - --stack_size
    argument: <int>
    description: 'default size of stack region v8 is allowed to use (in kBytes) (default: 984)'
  - names:
      - --max_stack_trace_source_length
    argument: <int>
    description: 'maximum length of function source code printed in a stack trace. (default: 300)'
  - names:
      - --always_inline_smi_code
    argument: ""
    description: always inline smi code in non-opt code
  - names:
      - --max_new_space_size
    argument: <int>
    description: 'max size of the new generation (in kBytes) (default: 0)'
  - names:
      - --max_old_space_size
    argument: <int>
    description: 'max size of the old generation (in Mbytes) (default: 0)'
  - names:
      - --max_executable_size
    argument: <int>
    description: 'max size of executable memory (in Mbytes) (default: 0)'
  - names:
      - --gc_global
    argument: ""
    description: always perform global GCs
  - names:
      - --gc_interval
    argument: <int>
    description: 'garbage collect after <n> allocations (default: -1)'
  - names:
      - --trace_gc
    argument: ""
    description: print one trace line following each garbage collection
  - names:
      - --trace_gc_nvp
    argument: ""
    description: print one detailed trace line in name=value format after each garbage collection
  - names:
      - --trace_gc_ignore_scavenger
    argument: ""
    description: do not print trace line after scavenger collection
  - names:
      - --print_cumulative_gc_stat
    argument: ""
    description: print cumulative GC statistics in name=value format on exit
  - names:
      - --trace_gc_verbose
    argument: ""
    description: print more details following each garbage collection
  - names:
      - --trace_fragmentation
    argument: ""
    description: report fragmentation for old pointer and data pages
  - names:
      - --trace_external_memory
    argument: ""
    description: print amount of external allocated memory after each time it is adjusted.
  - names:
      - --collect_maps
    argument: ""
    description: garbage collect maps from which no objects can be reached
  - names:
      - --flush_code
    argument: ""
    description: flush code that we expect not to use again (during full gc)
  - names:
      - --flush_code_incrementally
    argument: ""
    description: flush code that we expect not to use again (incrementally)
  - names:
      - --age_code
    argument: ""
    description: track un-executed functions to age code and flush only old code
  - names:
      - --incremental_marking
    argument: ""
    description: use incremental marking
  - names:
      - --incremental_marking_steps
    argument: ""
    description: do incremental marking steps
  - names:
      - --trace_incremental_marking
    argument: ""
    description: trace progress of the incremental marking
  - names:
      - --track_gc_object_stats
    argument: ""
    description: track object counts and memory usage
  - names:
      - --use_idle_notification
    argument: ""
    description: Use idle notification to reduce memory footprint.
  - names:
      - --use_ic
    argument: ""
    description: use inline caching
  - names:
      - --native_code_counters
    argument: ""
    description: generate extra code for manipulating stats counters
  - names:
      - --always_compact
    argument: ""
    description: Perform compaction on every full GC
  - names:
      - --lazy_sweeping
    argument: ""
    description: Use lazy sweeping for old pointer and data spaces
  - names:
      - --never_compact
    argument: ""
    description: Never perform compaction on full GC - testing only
  - names:
      - --compact_code_space
    argument: ""
    description: Compact code space on full non-incremental collections
  - names:
      - --incremental_code_compaction
    argument: ""
    description: Compact code space on full incremental collections
  - names:
      - --cleanup_code_caches_at_gc
    argument: ""
    description: Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.
  - names:
      - --use_marking_progress_bar
    argument: ""
    description: Use a progress bar to scan large objects in increments when incremental marking is active.
  - names:
      - --random_seed
    argument: <int>
    description: 'Default seed for initializing random generator (0, the default, means to use system random). (default: 0)'
  - names:
      - --use_verbose_printer
    argument: ""
    description: allows verbose printing
  - names:
      - --allow_natives_syntax
    argument: ""
    description: allow natives syntax
  - names:
      - --trace_parse
    argument: ""
    description: trace parsing and preparsing
  - names:
      - --trace_sim
    argument: ""
    description: Trace simulator execution
  - names:
      - --check_icache
    argument: ""
    description: Check icache flushes in ARM and MIPS simulator
  - names:
      - --stop_sim_at
    argument: ""
    description: 'Simulator stop after x number of instructions (default: 0)'
  - names:
      - --sim_stack_alignment
    argument: <int>
    description: Stack alingment in bytes in simulator (4 or 8, 8 is default)
  - names:
      - --trace_exception
    argument: ""
    description: print stack trace when throwing exceptions
  - names:
      - --preallocate_message_memory
    argument: ""
    description: preallocate some memory to build stack traces.
  - names:
      - --randomize_hashes
    argument: ""
    description: randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed)
  - names:
      - --hash_seed
    argument: <int>
    description: 'Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed) (default: 0)'
  - names:
      - --preemption
    argument: ""
    description: activate a 100ms timer that switches between V8 threads
  - names:
      - --regexp_optimization
    argument: ""
    description: generate optimized regexp code
  - names:
      - --testing_bool_flag
    argument: ""
    description: testing_bool_flag
  - names:
      - --testing_int_flag
    argument: <int>
    description: 'testing_int_flag (default: 13)'
  - names:
      - --testing_float_flag
    argument: <float>
    description: 'float-flag (default: 2.500000)'
  - names:
      - --testing_string_flag
    argument: <string>
    description: 'string-flag (default: Hello, world!)'
  - names:
      - --testing_prng_seed
    argument: <int>
    description: 'Seed used for threading test randomness (default: 42)'
  - names:
      - --testing_serialization_file
    argument: <file>
    description: 'file in which to serialize heap (default: /tmp/serdes)'
  - names:
      - --extra_code
    argument: <file>
    description: A filename with extra code to be included in the snapshot (mksnapshot only)
  - names:
      - --help
    argument: ""
    description: Print usage message, including flags, on console
  - names:
      - --dump_counters
    argument: ""
    description: Dump counters on exit
  - names:
      - --debugger
    argument: ""
    description: Enable JavaScript debugger
  - names:
      - --remote_debugger
    argument: ""
    description: Connect JavaScript debugger to the debugger agent in another process
  - names:
      - --debugger_agent
    argument: ""
    description: Enable debugger agent
  - names:
      - --debugger_port
    argument: <int>
    description: 'Port to use for remote debugging (default: 5858)'
  - names:
      - --map_counters
    argument: <file>
    description: Map counters to a file
  - names:
      - --js_arguments
    argument: <arguments>
    description: Pass all remaining arguments to the script. Alias for "--".
  - names:
      - --debug_compile_events
    argument: ""
    description: Enable debugger compile events
  - names:
      - --debug_script_collected_events
    argument: ""
    description: Enable debugger script collected events
  - names:
      - --gdbjit
    argument: ""
    description: enable GDBJIT interface (disables compacting GC)
  - names:
      - --gdbjit_full
    argument: ""
    description: enable GDBJIT interface for all code objects
  - names:
      - --gdbjit_dump
    argument: ""
    description: dump elf objects with debug info to disk
  - names:
      - --gdbjit_dump_filter
    argument: <file>
    description: dump only objects containing this substring
  - names:
      - --force_marking_deque_overflows
    argument: ""
    description: force overflows of marking deque by reducing it's size to 64 words
  - names:
      - --stress_compaction
    argument: ""
    description: stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows)
  - names:
      - --log
    argument: ""
    description: Minimal logging (no API, code, GC, suspect, or handles samples).
  - names:
      - --log_all
    argument: ""
    description: Log all events to the log file.
  - names:
      - --log_runtime
    argument: ""
    description: Activate runtime system %Log call.
  - names:
      - --log_api
    argument: ""
    description: Log API events to the log file.
  - names:
      - --log_code
    argument: ""
    description: Log code events to the log file without profiling.
  - names:
      - --log_gc
    argument: ""
    description: Log heap samples on garbage collection for the hp2ps tool.
  - names:
      - --log_handles
    argument: ""
    description: Log global handle events.
  - names:
      - --log_snapshot_positions
    argument: ""
    description: log positions of (de)serialized objects in the snapshot.
  - names:
      - --log_suspect
    argument: ""
    description: Log suspect operations.
  - names:
      - --prof
    argument: ""
    description: Log statistical profiling information (implies --log-code).
  - names:
      - --prof_auto
    argument: ""
    description: Used with --prof, starts profiling automatically
  - names:
      - --prof_lazy
    argument: ""
    description: Used with --prof, only does sampling and logging when profiler is active (implies --noprof_auto).
  - names:
      - --prof_browser_mode
    argument: ""
    description: Used with --prof, turns on browser-compatible mode for profiling.
  - names:
      - --log_regexp
    argument: ""
    description: Log regular expression execution.
  - names:
      - --logfile
    argument: <file>
    description: 'Specify the name of the log file. (default: v8.log)'
  - names:
      - --ll_prof
    argument: ""
    description: Enable low-level linux profiler.
  - names:
      - --gc_fake_mmap
    argument: <file>
    description: 'Specify the name of the file for fake gc mmap used in ll_prof (default: /tmp/__v8_gc__)'
  - names:
      - --log_internal_timer_events
    argument: ""
    description: Time internal events.
  - names:
      - --log_timer_events
    argument: ""
    description: Time events including external callbacks.
version: 2.24-r1122
