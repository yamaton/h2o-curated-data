name: planemo
description: planemo
usage: planemo [OPTIONS] COMMAND [ARGS]...
options:
  - names:
      - --version
    argument: ""
    description: Show the version and exit.
  - names:
      - -v
      - --verbose
    argument: ""
    description: Enables verbose mode.
  - names:
      - --config
    argument: TEXT
    description: Planemo configuration YAML file.
  - names:
      - --directory
    argument: TEXT
    description: Workspace for planemo.
  - names:
      - --help
    argument: ""
    description: Show this message and exit.
subcommands:
  - name: autoupdate
    description: Auto-update tool requirements by checking...
    usage: planemo autoupdate [OPTIONS] TOOL_PATH
    options:
      - names:
          - --dry-run
        argument: ""
        description: Perform a dry run autoupdate without modifying the XML files.
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for subdirectories.
      - names:
          - --test
        argument: ""
        description: Test updated XML files.
      - names:
          - --skiplist
        argument: TEXT
        description: Skiplist file, containing a list of tools or workflows for which autoupdate should be skipped.
      - names:
          - --skip_requirements
        argument: TEXT
        description: Comma-separated list of requirements which should be not be updated. Default is python,r-base,perl.
      - names:
          - --update_test_data
        argument: ""
        description: Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)
      - names:
          - --paste_test_data_paths
          - --no_paste_test_data_paths
        argument: ""
        description: By default Planemo will use or not use Galaxy's path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.
      - names:
          - --test_output
        argument: PATH
        description: Output test report (HTML - for humans) defaults to tool_test_output.html.
      - names:
          - --test_output_text
        argument: PATH
        description: Output test report (Basic text - for display in CI)
      - names:
          - --test_output_markdown
        argument: PATH
        description: Output test report (Markdown style - for humans & computers)
      - names:
          - --test_output_xunit
        argument: PATH
        description: Output test report (xunit style - for CI systems
      - names:
          - --test_output_junit
        argument: PATH
        description: Output test report (jUnit style - for CI systems
      - names:
          - --test_output_allure
        argument: DIRECTORY
        description: Output test allure2 framework resutls
      - names:
          - --test_output_json
        argument: PATH
        description: Output test report (planemo json) defaults to tool_test_output.json.
      - names:
          - --job_output_files
        argument: DIRECTORY
        description: Write job outputs to specified directory.
      - names:
          - --summary
        argument: '[none|minimal|compact]'
        description: Summary style printed to planemo's standard output (see output reports for more complete summary). Set to 'none' to disable completely.
      - names:
          - --test_timeout
        argument: INTEGER
        description: Maximum runtime of a single test in seconds.
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --report_level
          - --report_xunit
        argument: '[all|warn|error]'
        description: Output an XUnit report, useful for CI testing
      - names:
          - --fail_level
          - --galaxy_url
        argument: '[warn|error]'
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: ci_find_repos
    description: Find all shed repositories in one or more...
    usage: planemo ci_find_repos [OPTIONS] PROJECT
    options:
      - names:
          - --exclude
        argument: PATH
        description: Paths to exclude.
      - names:
          - --exclude_from
        argument: FILE
        description: File of paths to exclude.
      - names:
          - --changed_in_commit_range
        argument: TEXT
        description: Exclude paths unchanged in git commit range.
      - names:
          - --chunk_count
        argument: INTEGER
        description: Split output into chunks of this many item and print --chunk such group.
      - names:
          - --chunk
        argument: INTEGER
        description: When output is split into --chunk_count groups, output the group 0-indexedby this option.
      - names:
          - --output
        argument: TEXT
        description: File to output to, or - for standard output.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: ci_find_tools
    description: Find all tools in one or more directories.
    usage: planemo ci_find_tools [OPTIONS] PROJECT
    options:
      - names:
          - --exclude
        argument: PATH
        description: Paths to exclude.
      - names:
          - --exclude_from
        argument: FILE
        description: File of paths to exclude.
      - names:
          - --changed_in_commit_range
        argument: TEXT
        description: Exclude paths unchanged in git commit range.
      - names:
          - --chunk_count
        argument: INTEGER
        description: Split output into chunks of this many item and print --chunk such group.
      - names:
          - --chunk
        argument: INTEGER
        description: When output is split into --chunk_count groups, output the group 0-indexedby this option.
      - names:
          - --output
        argument: TEXT
        description: File to output to, or - for standard output.
      - names:
          - --group_tools
        argument: ""
        description: Group tools of the same repository on a single line.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: ci_setup
    description: Launch Galaxy instance, then terminate...
    usage: planemo ci_setup [OPTIONS]
    options:
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: clone
    description: Short-cut to quickly clone, fork, and...
    usage: planemo clone [OPTIONS] TARGET PROJECT
    options:
      - names:
          - --fork
          - --skip_fork
        argument: ""
        description: --branch TEXT Create a named branch on result.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: conda_build
    description: Perform conda build with Planemo's conda.
    usage: planemo conda_build [OPTIONS] RECIPE_DIR
    options:
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: conda_env
    description: Activate a conda environment for tool.
    usage: planemo conda_env [OPTIONS] TOOL_PATH
    options:
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: conda_init
    description: Download and install conda.
    usage: planemo conda_init [OPTIONS]
    options:
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: conda_install
    description: Install conda packages for tool requirements.
    usage: planemo conda_install [OPTIONS] TARGET
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for subdirectories.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --global
        argument: ""
        description: Install Conda dependencies globally instead of in requirement specific environments packaged for tools. If the Conda bin directory is on your PATH, tools may still use binaries but this is more designed for interactive testing and debugging.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: conda_search
    description: Perform conda search with Planemo's conda.
    usage: planemo conda_search [OPTIONS] TERM
    options:
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: config_init
    description: Initialise global configuration for Planemo.
    usage: planemo config_init [OPTIONS] PROJECT
    options:
      - names:
          - --template
        argument: TEXT
        description: --help Show this message and exit.
  - name: container_register
    description: Register multi-requirement containers as...
    usage: planemo container_register [OPTIONS] TOOL_PATH
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for subdirectories.
      - names:
          - --mulled_namespace
        argument: TEXT
        description: Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --output_directory
        argument: DIRECTORY
        description: Container registration directory (defaults to ~/.planemo/multi-package-containers.
      - names:
          - -m
          - --message
        argument: TEXT
        description: Commit and pull request message template for registration interactions.
      - names:
          - --pull_request
          - --no_pull_request
        argument: ""
        description: Fork and create a pull request against BioContainers/multi-package-containers for these changes.
      - names:
          - --force_push
          - --no_force_push
        argument: ""
        description: Force push branch for pull request in case it already exists.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: create_alias
    description: Add an alias for a path or a workflow or...
    usage: planemo create_alias [OPTIONS] OBJ
    options:
      - names:
          - --alias
        argument: TEXT
        description: Name of an alias.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command. [required]
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: create_gist
    description: Upload file to GitHub as a sharable gist.
    usage: planemo create_gist [OPTIONS] FILE_PATH
    options:
      - names:
          - --link_type
        argument: ""
        description: Link type to generate for the file.
      - names:
          - --link_type
        argument: raw|html
        description: Link type to generate for the file.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: database_create
    description: Create a *development* database.
    usage: planemo database_create [OPTIONS] IDENTIFIER
    options:
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: database_delete
    description: Delete a *development* database.
    usage: planemo database_delete [OPTIONS] IDENTIFIER
    options:
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: database_list
    description: List databases in configured database source.
    usage: planemo database_list [OPTIONS]
    options:
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: delete_alias
    description: List aliases for a path or a workflow or...
    usage: planemo delete_alias [OPTIONS]
    options:
      - names:
          - --alias
        argument: TEXT
        description: Name of an alias. [required]
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command. [required]
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: docker_build
    description: Build (and optionally cache) Docker images.
    usage: planemo docker_build [OPTIONS] TOOL_PATH
    options:
      - names:
          - --dockerfile
          - --docker_image_cache
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: docker_shell
    description: Launch shell in Docker container for a tool.
    usage: planemo docker_shell [OPTIONS] TOOL_PATH
    options:
      - names:
          - --from_tag
        argument: ""
        description: Treat the tool's Docker container identifier as a locally cached tag.
      - names:
          - --shell
        argument: TEXT
        description: Shell to launch in container (defaults to /bin/bash).
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: dockstore_init
    description: Initialize a .dockstore.yml configuration...
    usage: planemo dockstore_init [OPTIONS] PROJECT
    options:
      - names:
          - --publish
          - --no_publish
        argument: ""
        description: Set publish attribute to true in .dockstore.yml file
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: docs
    description: Open Planemo documentation in web browser.
    usage: planemo docs [OPTIONS]
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: lint
    description: Check for common errors and best practices.
    usage: planemo lint [OPTIONS] TOOL_PATH
    options:
      - names:
          - --report_level
          - --report_xunit
        argument: '[all|warn|error]'
        description: Output an XUnit report, useful for CI testing
      - names:
          - --fail_level
          - -s
          - --skip
        argument: '[warn|error]'
        description: Comma-separated list of lint tests to skip (e.g. passing --skip 'citations,xml_order' would skip linting of citations and bestpractice XML ordering.
      - names:
          - --xsd
          - --no_xsd
        argument: ""
        description: Include tool XSD validation in linting process.
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for subdirectories.
      - names:
          - --urls
        argument: ""
        description: Check validity of URLs in XML files
      - names:
          - --doi
        argument: ""
        description: Check validity of DOIs in XML files
      - names:
          - --conda_requirements
        argument: ""
        description: Check tool requirements for availability in best practice Conda channels.
      - names:
          - --biocontainer
          - --biocontainers
        argument: ""
        description: Check best practice BioContainer namespaces for a container definition applicable for this tool.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: list_alias
    description: List aliases for a path or a workflow or...
    usage: planemo list_alias [OPTIONS]
    options:
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command. [required]
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: list_invocations
    description: Get a list of invocations for a particular...
    usage: planemo list_invocations [OPTIONS] WORKFLOW_IDENTIFIER
    options:
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command. [required]
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: list_repos
    description: Find all shed repositories in one or more...
    usage: planemo list_repos [OPTIONS] PROJECT
    options:
      - names:
          - --exclude
        argument: PATH
        description: Paths to exclude.
      - names:
          - --exclude_from
        argument: FILE
        description: File of paths to exclude.
      - names:
          - --changed_in_commit_range
        argument: TEXT
        description: Exclude paths unchanged in git commit range.
      - names:
          - --chunk_count
        argument: INTEGER
        description: Split output into chunks of this many item and print --chunk such group.
      - names:
          - --chunk
        argument: INTEGER
        description: When output is split into --chunk_count groups, output the group 0-indexedby this option.
      - names:
          - --output
        argument: TEXT
        description: File to output to, or - for standard output.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: merge_test_reports
    description: Merge tool_test_output.json files from...
    usage: planemo merge_test_reports [OPTIONS] INPUT_PATHS FILE_PATH
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: mull
    description: Build containers for specified tools.
    usage: planemo mull [OPTIONS] TOOL_PATH
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for subdirectories.
      - names:
          - --mulled_conda_version
        argument: TEXT
        description: Install a specific version of Conda before running the command, by default the version that comes with the continuumio miniconda3 image will be used under Linux and under Mac OS X Conda will be upgraded to to work around a bug in 4.2.
      - names:
          - --mulled_namespace
        argument: TEXT
        description: Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.
      - names:
          - --mulled_command
        argument: TEXT
        description: Mulled action to perform for targets - this defaults to 'build-and-test'.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: mulled_init
    description: Download and install involucro for mull...
    usage: planemo mulled_init [OPTIONS]
    options:
      - names:
          - --mulled_conda_version
        argument: TEXT
        description: Install a specific version of Conda before running the command, by default the version that comes with the continuumio miniconda3 image will be used under Linux and under Mac OS X Conda will be upgraded to to work around a bug in 4.2.
      - names:
          - --mulled_namespace
        argument: TEXT
        description: Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.
      - names:
          - --mulled_command
        argument: TEXT
        description: Mulled action to perform for targets - this defaults to 'build-and-test'.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: normalize
    description: Generate normalized tool XML from input.
    usage: planemo normalize [OPTIONS] TOOL_PATH
    options:
      - names:
          - --expand_macros
        argument: ""
        description: Expand macros while normalizing tool XML - useful to see how macros are evaluated.
      - names:
          - --skip_reorder
        argument: ""
        description: Planemo will reorder top-level tool blocks according to tool development best practices as part of this command, this flag will disable that behavior.
      - names:
          - --skip_reindent
        argument: ""
        description: Planemo will reindent the XML according to tool development best practices as part of this command, this flag will disable that behavior.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: open
    description: Open latest Planemo test results in a web...
    usage: planemo open [OPTIONS] PATH
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: profile_create
    description: Create a profile.
    usage: planemo profile_create [OPTIONS] PROFILE_NAME
    options:
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --galaxy_url
        argument: TEXT
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --galaxy_admin_key
        argument: TEXT
        description: Admin key to use with external Galaxy engine.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: profile_delete
    description: Delete a profile.
    usage: planemo profile_delete [OPTIONS] PROFILE_NAME
    options:
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: profile_list
    description: List configured profile names.
    usage: planemo profile_list [OPTIONS]
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: project_init
    description: (Experimental) Initialize a new tool project.
    usage: planemo project_init [OPTIONS] PROJECT
    options:
      - names:
          - --template
        argument: TEXT
        description: --help Show this message and exit.
  - name: pull_request
    description: Short-cut to quickly create a pull request...
    usage: planemo pull_request [OPTIONS] PROJECT
    options:
      - names:
          - -m
          - --message
        argument: TEXT
        description: Message describing the pull request to create.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: rerun
    description: Planemo command for rerunning and remapping...
    usage: planemo rerun [OPTIONS] RERUNNABLE_IDS
    options:
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --galaxy_url
        argument: TEXT
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --invocation
        argument: ""
        description: Rerun failed jobs associated by one or more invocation IDs.
      - names:
          - --history
        argument: ""
        description: Rerun failed jobs associated by one or more history IDs.
      - names:
          - --job
        argument: ""
        description: Rerun failed jobs specified by one or more job IDs.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: run
    description: Planemo command for running tools and jobs.
    usage: planemo run [OPTIONS] RUNNABLE_PATH_OR_ID JOB_PATH
    options:
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --cwl
        argument: ""
        description: Configure Galaxy for use with CWL tool. (this option is experimental and will be replaced when and if CWL support is merged into Galaxy).
      - names:
          - --cwl_galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with (must be branch of Galaxy with CWL support, this option is experimental and will be replaced with --galaxy_root when and if CWL support is merged into Galaxy.
      - names:
          - --tags
        argument: TEXT
        description: Comma-separated list of tags to add to the created history.
      - names:
          - --output_directory
          - --outdir
        argument: DIRECTORY
        description: Where to store outputs of a 'run' task.
      - names:
          - --output_json
        argument: FILE
        description: Where to store JSON dictionary describing outputs of a 'run' task.
      - names:
          - --download_outputs
          - --no_download_outputs
        argument: ""
        description: After tool or workflow runs are complete, download the output files to the location specified by --output_directory.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|cwltool|toil|external_galaxy]'
        description: Select an engine to run or test artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container or the CWL reference implementation 'cwltool' and 'toil' be selected.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --no-container
          - --no_container
        argument: ""
        description: If cwltool engine is used, disable Docker container usage.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --install_tool_dependencies
          - --no_install_tool_dependencies
        argument: ""
        description: Turn on installation of tool dependencies using classic toolshed packages.
      - names:
          - --install_resolver_dependencies
          - --no_install_resolver_dependencies
        argument: ""
        description: Skip installing tool dependencies through resolver (e.g. conda).
      - names:
          - --install_repository_dependencie
        argument: ""
        description: s / --no_install_repository_dependencies Skip installing the repository dependencies.
      - names:
          - --galaxy_url
        argument: TEXT
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_admin_key
        argument: TEXT
        description: Admin key to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --history_name
        argument: TEXT
        description: Name to give a Galaxy history, if one is created.
      - names:
          - --no_wait
        argument: ""
        description: After invoking a job or workflow, do not wait for completion.
      - names:
          - --update_test_data
        argument: ""
        description: Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)
      - names:
          - --paste_test_data_paths
          - --no_paste_test_data_paths
        argument: ""
        description: By default Planemo will use or not use Galaxy's path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.
      - names:
          - --test_output
        argument: PATH
        description: Output test report (HTML - for humans) defaults to tool_test_output.html.
      - names:
          - --test_output_text
        argument: PATH
        description: Output test report (Basic text - for display in CI)
      - names:
          - --test_output_markdown
        argument: PATH
        description: Output test report (Markdown style - for humans & computers)
      - names:
          - --test_output_xunit
        argument: PATH
        description: Output test report (xunit style - for CI systems
      - names:
          - --test_output_junit
        argument: PATH
        description: Output test report (jUnit style - for CI systems
      - names:
          - --test_output_allure
        argument: DIRECTORY
        description: Output test allure2 framework resutls
      - names:
          - --test_output_json
        argument: PATH
        description: Output test report (planemo json) defaults to tool_test_output.json.
      - names:
          - --job_output_files
        argument: DIRECTORY
        description: Write job outputs to specified directory.
      - names:
          - --summary
        argument: '[none|minimal|compact]'
        description: Summary style printed to planemo's standard output (see output reports for more complete summary). Set to 'none' to disable completely.
      - names:
          - --test_timeout
        argument: INTEGER
        description: Maximum runtime of a single test in seconds.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: serve
    description: Launch Galaxy instance with specified tools.
    usage: planemo serve [OPTIONS] TOOL_PATH
    options:
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --cwl
        argument: ""
        description: Configure Galaxy for use with CWL tool. (this option is experimental and will be replaced when and if CWL support is merged into Galaxy).
      - names:
          - --cwl_galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with (must be branch of Galaxy with CWL support, this option is experimental and will be replaced with --galaxy_root when and if CWL support is merged into Galaxy.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: share_test
    description: Publish JSON test results as sharable Gist.
    usage: planemo share_test [OPTIONS] FILE_PATH
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_build
    description: Create a Galaxy tool tarball.
    usage: planemo shed_build [OPTIONS] TOOL_PATH
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_create
    description: Create a repository in a Galaxy Tool Shed.
    usage: planemo shed_create [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - -m
          - --message
        argument: TEXT
        description: Commit message for tool shed upload.
      - names:
          - --skip_upload
        argument: ""
        description: Skip upload contents as part of operation, only update metadata.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_diff
    description: diff between local repository and Tool Shed.
    usage: planemo shed_diff [OPTIONS] PROJECT
    options:
      - names:
          - --shed_target_source
        argument: testtoolshed
        description: 'This command will return an exit code of:'
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - -o
          - --output
        argument: PATH
        description: Send diff output to specified file.
      - names:
          - --shed_target_source
        argument: TEXT
        description: Source Tool Shed to diff against (will ignore local project info specified). To compare the main Tool Shed against the test, set this to testtoolshed.
      - names:
          - --raw
        argument: ""
        description: Do not attempt smart diff of XML to filter out attributes populated by the Tool Shed.
      - names:
          - --report_xunit
        argument: PATH
        description: Output an XUnit report, useful for CI testing
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_download
    description: Download tool from Tool Shed into directory.
    usage: planemo shed_download [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - --destination
        argument: PATH
        description: Destination pattern of tarball(s) to download - if this doesn't end in 'gz' it will be treated as a directory to extract tool contents into (defaults to shed_download.tar.gz). If multiple repositories are discovered in a .shed.yml file these will be created as shed_download_<name>.tar.gz by default for instance, simpler repositories will just be downloaded to the specified file.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_init
    description: Bootstrap new Tool Shed .shed.yml file.
    usage: planemo shed_init [OPTIONS] PROJECT
    options:
      - names:
          - --from_workflow
        argument: PATH
        description: Attempt to generate repository dependencies from specified workflow.
      - names:
          - --description
        argument: TEXT
        description: Specify repository description for .shed.yml.
      - names:
          - --long_description
        argument: TEXT
        description: Specify repository long_description for .shed.yml.
      - names:
          - --remote_repository_url
        argument: TEXT
        description: Specify repository remote_repository_url for .shed.yml.
      - names:
          - --homepage_url
        argument: TEXT
        description: Specify repository homepage_url for .shed.yml.
      - names:
          - --category
        argument: '[Assembly|ChIP-seq|Climate Analysis|Combinatorial Selections|Computational chemistry|Constructive Solid Geometry|Convert Formats|Data Export|Data Managers|Data Source|Ecology|Entomology|Epigenetics|Fasta Manipulation|Fastq Manipulation|Flow Cytometry Analysis|Genome annotation|Genome editing|Genome-Wide Association Study|Genomic Interval Operations|GIS|Graphics|Imaging|InteractiveTools|Machine Learning|Metabolomics|Metagenomics|Micro-array Analysis|Molecular Dynamics|Nanopore|Next Gen Mappers|NLP|Ontology Manipulation|Phylogenetics|Proteomics|RNA|SAM|Sequence Analysis|Statistics|Structural Materials Analysis|Synthetic Biology|Systems Biology|Text Manipulation|Tool Dependency Packages|Tool Generators|Transcriptomics|Variant Analysis|Visualization|Web Services]'
        description: Specify repository category for .shed.yml (may specify multiple).
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - -f
          - --force
        argument: ""
        description: Overwrite existing files if present.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_lint
    description: Check Tool Shed repository for common issues.
    usage: planemo shed_lint [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --report_level
          - --fail_level
          - --tools
        argument: '[all|warn|error]'
        description: Lint tools discovered in the process of linting repositories.
      - names:
          - --xsd
          - --no_xsd
        argument: ""
        description: Include tool XSD validation in linting process.
      - names:
          - --ensure_metadata
        argument: ""
        description: Ensure .shed.yml files contain enough metadata for each repository to allow automated creation and/or updates.
      - names:
          - --urls
        argument: ""
        description: Check validity of URLs in XML files
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_serve
    description: Launch Galaxy with Tool Shed dependencies.
    usage: planemo shed_serve [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --skip_dependencies
        argument: ""
        description: Do not install shed dependencies as part of repository installation.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_test
    description: Run tests of published shed artifacts.
    usage: planemo shed_test [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --update_test_data
        argument: ""
        description: Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)
      - names:
          - --paste_test_data_paths
          - --no_paste_test_data_paths
        argument: ""
        description: By default Planemo will use or not use Galaxy's path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.
      - names:
          - --test_output
        argument: PATH
        description: Output test report (HTML - for humans) defaults to tool_test_output.html.
      - names:
          - --test_output_text
        argument: PATH
        description: Output test report (Basic text - for display in CI)
      - names:
          - --test_output_markdown
        argument: PATH
        description: Output test report (Markdown style - for humans & computers)
      - names:
          - --test_output_xunit
        argument: PATH
        description: Output test report (xunit style - for CI systems
      - names:
          - --test_output_junit
        argument: PATH
        description: Output test report (jUnit style - for CI systems
      - names:
          - --test_output_allure
        argument: DIRECTORY
        description: Output test allure2 framework resutls
      - names:
          - --test_output_json
        argument: PATH
        description: Output test report (planemo json) defaults to tool_test_output.json.
      - names:
          - --job_output_files
        argument: DIRECTORY
        description: Write job outputs to specified directory.
      - names:
          - --summary
        argument: '[none|minimal|compact]'
        description: Summary style printed to planemo's standard output (see output reports for more complete summary). Set to 'none' to disable completely.
      - names:
          - --test_timeout
        argument: INTEGER
        description: Maximum runtime of a single test in seconds.
      - names:
          - --skip_dependencies
        argument: ""
        description: Do not install shed dependencies as part of repository installation.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_update
    description: Update Tool Shed repository.
    usage: planemo shed_update [OPTIONS] PROJECT
    options:
      - names:
          - --report_xunit
        argument: PATH
        description: Output an XUnit report, useful for CI testing
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - -m
          - --message
        argument: TEXT
        description: Commit message for tool shed upload.
      - names:
          - --force_repository_creation
        argument: ""
        description: If a repository cannot be found for the specified user/repo name pair, then automatically create the repository in the toolshed.
      - names:
          - --check_diff
        argument: ""
        description: Skip uploading if the shed_diff detects there would be no 'difference' (only attributes populated by the shed would be updated.)
      - names:
          - --skip_upload
        argument: ""
        description: Skip upload contents as part of operation, only update metadata.
      - names:
          - --skip_metadata
        argument: ""
        description: Skip metadata update as part of operation, only upload new contents.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: shed_upload
    description: Low-level command to upload tarballs.
    usage: planemo shed_upload [OPTIONS] PROJECT
    options:
      - names:
          - -r
          - --recursive
        argument: ""
        description: Recursively perform command for nested repository directories.
      - names:
          - --fail_fast
        argument: ""
        description: If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.
      - names:
          - --owner
        argument: TEXT
        description: Tool Shed repository owner (username).
      - names:
          - --name
        argument: TEXT
        description: Tool Shed repository name (defaults to the inferred tool directory name).
      - names:
          - --shed_email
        argument: TEXT
        description: E-mail for Tool Shed auth (required unless shed_key is specified).
      - names:
          - --shed_key
        argument: TEXT
        description: API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.
      - names:
          - --shed_key_from_env
        argument: TEXT
        description: Environment variable to read API key for Tool Shed access from.
      - names:
          - --shed_password
        argument: TEXT
        description: Password for Tool Shed auth (required unless shed_key is specified).
      - names:
          - -t
          - --shed_target
        argument: TEXT
        description: Tool Shed to target (this can be 'toolshed', 'testtoolshed', 'local' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.
      - names:
          - -m
          - --message
        argument: TEXT
        description: Commit message for tool shed upload.
      - names:
          - --force_repository_creation
        argument: ""
        description: If a repository cannot be found for the specified user/repo name pair, then automatically create the repository in the toolshed.
      - names:
          - --check_diff
        argument: ""
        description: Skip uploading if the shed_diff detects there would be no 'difference' (only attributes populated by the shed would be updated.)
      - names:
          - --tar_only
        argument: ""
        description: Produce tar file for upload but do not publish to a tool shed.
      - names:
          - --tar
        argument: FILE
        description: Specify a pre-existing tar file instead of automatically building one as part of this command.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: syntax
    description: Open tool config syntax page in web browser.
    usage: planemo syntax [OPTIONS]
    options:
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: test
    description: Run specified tool or workflow tests within...
    usage: planemo test [OPTIONS] TOOL_PATH
    options:
      - names:
          - --failed
        argument: ""
        description: Re-run only failed tests. This command will read tool_test_output.json to determine which tests failed so this file must have been produced with the same set of tool ids previously.
      - names:
          - --polling_backoff
        argument: INTEGER
        description: Poll resources with an increasing interval between requests. Useful when testing against remote and/or production instances to limit generated traffic.
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --update_test_data
        argument: ""
        description: Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)
      - names:
          - --paste_test_data_paths
          - --no_paste_test_data_paths
        argument: ""
        description: By default Planemo will use or not use Galaxy's path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.
      - names:
          - --test_output
        argument: PATH
        description: Output test report (HTML - for humans) defaults to tool_test_output.html.
      - names:
          - --test_output_text
        argument: PATH
        description: Output test report (Basic text - for display in CI)
      - names:
          - --test_output_markdown
        argument: PATH
        description: Output test report (Markdown style - for humans & computers)
      - names:
          - --test_output_xunit
        argument: PATH
        description: Output test report (xunit style - for CI systems
      - names:
          - --test_output_junit
        argument: PATH
        description: Output test report (jUnit style - for CI systems
      - names:
          - --test_output_allure
        argument: DIRECTORY
        description: Output test allure2 framework resutls
      - names:
          - --test_output_json
        argument: PATH
        description: Output test report (planemo json) defaults to tool_test_output.json.
      - names:
          - --job_output_files
        argument: DIRECTORY
        description: Write job outputs to specified directory.
      - names:
          - --summary
        argument: '[none|minimal|compact]'
        description: Summary style printed to planemo's standard output (see output reports for more complete summary). Set to 'none' to disable completely.
      - names:
          - --test_timeout
        argument: INTEGER
        description: Maximum runtime of a single test in seconds.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|cwltool|toil|external_galaxy]'
        description: Select an engine to run or test artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container or the CWL reference implementation 'cwltool' and 'toil' be selected.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --no-container
          - --no_container
        argument: ""
        description: If cwltool engine is used, disable Docker container usage.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --install_tool_dependencies
          - --no_install_tool_dependencies
        argument: ""
        description: Turn on installation of tool dependencies using classic toolshed packages.
      - names:
          - --install_resolver_dependencies
          - --no_install_resolver_dependencies
        argument: ""
        description: Skip installing tool dependencies through resolver (e.g. conda).
      - names:
          - --install_repository_dependencie
        argument: ""
        description: s / --no_install_repository_dependencies Skip installing the repository dependencies.
      - names:
          - --galaxy_url
        argument: TEXT
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_admin_key
        argument: TEXT
        description: Admin key to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --history_name
        argument: TEXT
        description: Name to give a Galaxy history, if one is created.
      - names:
          - --no_wait
        argument: ""
        description: After invoking a job or workflow, do not wait for completion.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: test_reports
    description: Generate human readable tool test reports.
    usage: planemo test_reports [OPTIONS] FILE_PATH
    options:
      - names:
          - --test_output
        argument: PATH
        description: Output test report (HTML - for humans) defaults to tool_test_output.html.
      - names:
          - --test_output_text
        argument: PATH
        description: Output test report (Basic text - for display in CI)
      - names:
          - --test_output_markdown
        argument: PATH
        description: Output test report (Markdown style - for humans & computers)
      - names:
          - --test_output_xunit
        argument: PATH
        description: Output test report (xunit style - for CI systems
      - names:
          - --test_output_junit
        argument: PATH
        description: Output test report (jUnit style - for CI systems
      - names:
          - --test_output_allure
        argument: DIRECTORY
        description: Output test allure2 framework resutls
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: tool_init
    description: Generate tool outline from given arguments.
    usage: planemo tool_init [OPTIONS]
    options:
      - names:
          - -i
          - --id
        argument: TEXT
        description: Short identifier for new tool (no whitespace)
      - names:
          - -f
          - --force
        argument: ""
        description: Overwrite existing tool if present.
      - names:
          - -t
          - --tool
        argument: FILE
        description: Output path for new tool (default is <id>.xml)
      - names:
          - -n
          - --name
        argument: TEXT
        description: Name for new tool (user facing)
      - names:
          - --version
        argument: TEXT
        description: Tool XML version.
      - names:
          - -d
          - --description
        argument: TEXT
        description: Short description for new tool (user facing)
      - names:
          - -c
          - --command
        argument: TEXT
        description: Command potentially including cheetah variables ()(e.g. 'seqtk seq -A $input > $output')
      - names:
          - --example_command
        argument: TEXT
        description: Example to command with paths to build Cheetah template from (e.g. 'seqtk seq -A 2.fastq > 2.fasta'). Option cannot be used with --command, should be used --example_input and --example_output.
      - names:
          - --example_input
        argument: TEXT
        description: For use with --example_command, replace input file (e.g. 2.fastq with a data input parameter).
      - names:
          - --example_output
        argument: TEXT
        description: For use with --example_command, replace input file (e.g. 2.fastq with a tool output).
      - names:
          - --named_output
        argument: TEXT
        description: Create a named output for use with command block for example specify --named_output=output1.bam and then use '-o $output1' in your command block.
      - names:
          - --input
        argument: TEXT
        description: An input description (e.g. input.fasta)
      - names:
          - --output
        argument: TEXT
        description: An output location (e.g. output.bam), the Galaxy datatype is inferred from the extension.
      - names:
          - --help_text
        argument: TEXT
        description: Help text (reStructuredText)
      - names:
          - --help_from_command
        argument: TEXT
        description: Auto populate help from supplied command.
      - names:
          - --doi
        argument: TEXT
        description: Supply a DOI (http://www.doi.org/) easing citation of the tool for Galxy users (e.g. 10.1101/014043).
      - names:
          - --cite_url
        argument: TEXT
        description: Supply a URL for citation.
      - names:
          - --test_case
        argument: ""
        description: For use with --example_commmand, generate a tool test case from the supplied example.
      - names:
          - --macros
        argument: ""
        description: Generate a macros.xml for reuse across many tools.
      - names:
          - --version_command
        argument: TEXT
        description: Command to print version (e.g. 'seqtk --version')
      - names:
          - --requirement
        argument: TEXT
        description: Add a tool requirement package (e.g. 'seqtk' or 'seqtk@1.68').
      - names:
          - --container
        argument: TEXT
        description: Add a Docker image identifier for this tool.
      - names:
          - --cwl
        argument: ""
        description: Build a CWL tool instead of a Galaxy tool.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: training_fill_data_library
    description: Build training template from workflow.
    usage: planemo training_fill_data_library [OPTIONS] TOOL_PATH
    options:
      - names:
          - --topic_name
        argument: TEXT
        description: Name (directory name) of the topic to create or in which a tutorial should be created or updates [required]
      - names:
          - --tutorial_name
        argument: TEXT
        description: Name (directory name) of the tutorial to modify [required]
      - names:
          - --zenodo_link
        argument: TEXT
        description: Zenodo URL with the input data
      - names:
          - --datatypes
        argument: PATH
        description: YAML file with the correspondance between Zenodo extension and Galaxy datatypes
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: training_generate_from_wf
    description: Create tutorial skeleton from workflow.
    usage: planemo training_generate_from_wf [OPTIONS] TOOL_PATH
    options:
      - names:
          - --topic_name
        argument: TEXT
        description: Name (directory name) of the topic to create or in which a tutorial should be created or updates [required]
      - names:
          - --tutorial_name
        argument: TEXT
        description: Name (directory name) of the tutorial to modify [required]
      - names:
          - --workflow
        argument: PATH
        description: Workflow of the tutorial (locally)
      - names:
          - --galaxy_url
        argument: TEXT
        description: URL of a Galaxy instance with the workflow
      - names:
          - --galaxy_api_key
        argument: TEXT
        description: API key on the Galaxy instance with the workflow
      - names:
          - --workflow_id
        argument: TEXT
        description: ID of the workflow on the Galaxy instance
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: training_init
    description: Build training template from workflow.
    usage: planemo training_init [OPTIONS] TOOL_PATH
    options:
      - names:
          - --topic_name
        argument: TEXT
        description: Name (directory name) of the topic to create or in which a tutorial should be created or updates [required]
      - names:
          - --topic_title
        argument: TEXT
        description: Title of the topic to create
      - names:
          - --topic_summary
        argument: TEXT
        description: Summary of the topic
      - names:
          - --topic_target
        argument: '[use|admin-dev|instructors]'
        description: Target audience for the topic
      - names:
          - --tutorial_name
        argument: TEXT
        description: Name (directory name) of the tutorial to create or to modify
      - names:
          - --tutorial_title
        argument: TEXT
        description: Title of the tutorial
      - names:
          - --hands_on
        argument: ""
        description: Add hands-on for the new tutorial
      - names:
          - --slides
        argument: ""
        description: Add slides for the new tutorial
      - names:
          - --workflow
        argument: PATH
        description: Workflow of the tutorial (locally)
      - names:
          - --galaxy_url
        argument: TEXT
        description: URL of a Galaxy instance with the workflow
      - names:
          - --galaxy_api_key
        argument: TEXT
        description: API key on the Galaxy instance with the workflow
      - names:
          - --workflow_id
        argument: TEXT
        description: ID of the workflow on the Galaxy instance
      - names:
          - --zenodo_link
        argument: TEXT
        description: Zenodo URL with the input data
      - names:
          - --datatypes
        argument: PATH
        description: YAML file with the correspondance between Zenodo extension and Galaxy datatypes
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: upload_data
    description: Planemo command for uploading data to an...
    usage: planemo upload_data [OPTIONS] RUNNABLE_PATH_OR_ID JOB_PATH NEW_JOB_PATH
    options:
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --tags
        argument: TEXT
        description: Comma-separated list of tags to add to the created history.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_convert
    description: Convert Format 2 workflows to native Galaxy...
    usage: planemo workflow_convert [OPTIONS] WORKFLOW_PATH_OR_ID
    options:
      - names:
          - -f
          - --force
        argument: ""
        description: Overwrite existing files if present.
      - names:
          - -o
          - --output
          - --galaxy_root
        argument: FILE
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_edit
    description: Open a synchronized Galaxy workflow editor.
    usage: planemo workflow_edit [OPTIONS] WORKFLOW_PATH_OR_ID
    options:
      - names:
          - --galaxy_root
        argument: DIRECTORY
        description: Root of development galaxy directory to execute command with.
      - names:
          - --galaxy_python_version
        argument: '[3|3.7|3.8|3.9]'
        description: Python version to start Galaxy under
      - names:
          - --extra_tools
        argument: PATH
        description: Extra tool sources to include in Galaxy's tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.
      - names:
          - --install_galaxy
        argument: ""
        description: Download and configure a disposable copy of Galaxy from github.
      - names:
          - --galaxy_branch
        argument: TEXT
        description: Branch of Galaxy to target (defaults to master) if a Galaxy root isn't specified.
      - names:
          - --galaxy_source
        argument: TEXT
        description: Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn't specified.
      - names:
          - --skip_venv
        argument: ""
        description: Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.
      - names:
          - --no_cache_galaxy
        argument: ""
        description: Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.
      - names:
          - --no_cleanup
        argument: ""
        description: Do not cleanup temp files created for and by Galaxy.
      - names:
          - --galaxy_email
        argument: TEXT
        description: E-mail address to use when launching singleuser Galaxy server.
      - names:
          - --docker
          - --no_docker
        argument: ""
        description: Run Galaxy tools in Docker if enabled.
      - names:
          - --docker_cmd
        argument: TEXT
        description: Command used to launch docker (defaults to docker).
      - names:
          - --docker_sudo
          - --no_docker_sudo
        argument: ""
        description: Flag to use sudo when running docker.
      - names:
          - --docker_host
        argument: TEXT
        description: Docker host to target when executing docker commands (defaults to localhost).
      - names:
          - --docker_sudo_cmd
        argument: TEXT
        description: sudo command to use when --docker_sudo is enabled (defaults to sudo).
      - names:
          - --mulled_containers
          - --biocontainers
        argument: ""
        description: Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.
      - names:
          - --galaxy_startup_timeout
        argument: INTEGER RANGE
        description: Wait for galaxy to start before assuming Galaxy did not start. [x>=1]
      - names:
          - --job_config_file
        argument: FILE
        description: Job configuration file for Galaxy to target.
      - names:
          - --tool_dependency_dir
        argument: DIRECTORY
        description: Tool dependency dir for Galaxy to target.
      - names:
          - --tool_data_path
        argument: DIRECTORY
        description: Directory where data used by tools is located. Required if tests are run in docker and should make use of external reference data.
      - names:
          - --port
        argument: INTEGER
        description: Port to serve Galaxy on (default is 9090).
      - names:
          - --host
        argument: TEXT
        description: Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.
      - names:
          - --engine
        argument: '[galaxy|docker_galaxy|external_galaxy]'
        description: Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.
      - names:
          - --non_strict_cwl
        argument: ""
        description: Disable strict validation of CWL.
      - names:
          - --docker_galaxy_image
        argument: TEXT
        description: Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.
      - names:
          - --docker_extra_volume
        argument: PATH
        description: Extra path to mount if --engine docker.
      - names:
          - --test_data
        argument: DIRECTORY
        description: test-data directory to for specified tool(s).
      - names:
          - --tool_data_table
        argument: PATH
        description: tool_data_table_conf.xml file to for specified tool(s).
      - names:
          - --dependency_resolvers_config_file
        argument: FILE
        description: Dependency resolver configuration for Galaxy to target.
      - names:
          - --brew_dependency_resolution
        argument: ""
        description: Configure Galaxy to use plain brew dependency resolution.
      - names:
          - --shed_dependency_resolution
        argument: ""
        description: Configure Galaxy to use brewed Tool Shed dependency resolution.
      - names:
          - --no_dependency_resolution
        argument: ""
        description: Configure Galaxy with no dependency resolvers.
      - names:
          - --conda_prefix
        argument: DIRECTORY
        description: Conda prefix to use for conda dependency commands.
      - names:
          - --conda_exec
        argument: FILE
        description: Location of conda executable.
      - names:
          - --conda_channels
          - --conda_ensure_channels
        argument: TEXT
        description: Ensure conda is configured with specified comma separated list of channels.
      - names:
          - --conda_use_local
        argument: ""
        description: Use locally built packages while building Conda environments.
      - names:
          - --conda_dependency_resolution
        argument: ""
        description: Configure Galaxy to use only conda for dependency resolution.
      - names:
          - --conda_auto_install
          - --no_conda_auto_install
        argument: ""
        description: Conda dependency resolution for Galaxy will attempt to install requested but missing packages.
      - names:
          - --conda_auto_init
          - --no_conda_auto_init
        argument: ""
        description: Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.
      - names:
          - --simultaneous_uploads
          - --no_simultaneous_uploads
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.
      - names:
          - --check_uploads_ok
          - --no_check_uploads_ok
        argument: ""
        description: When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an 'ok' state before beginning tool or workflow execution.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --postgres
        argument: ""
        description: Use postgres database type.
      - names:
          - --database_type
        argument: '[postgres|postgres_docker|sqlite|auto]'
        description: Type of database to use for profile - 'auto', 'sqlite', 'postgres', and 'postgres_docker' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.
      - names:
          - --postgres_psql_path
        argument: TEXT
        description: Name or or path to postgres client binary (psql).
      - names:
          - --postgres_database_user
        argument: TEXT
        description: Postgres username for managed development databases.
      - names:
          - --postgres_database_host
        argument: TEXT
        description: Postgres host name for managed development databases.
      - names:
          - --postgres_database_port
        argument: TEXT
        description: Postgres port for managed development databases.
      - names:
          - --file_path
        argument: DIRECTORY
        description: Location for files created by Galaxy (e.g. database/files).
      - names:
          - --database_connection
        argument: TEXT
        description: Database connection string to use for Galaxy.
      - names:
          - --shed_tool_conf
        argument: TEXT
        description: Location of shed tools conf file for Galaxy.
      - names:
          - --shed_tool_path
        argument: TEXT
        description: Location of shed tools directory for Galaxy.
      - names:
          - --galaxy_single_user
          - --no_galaxy_single_user
        argument: ""
        description: By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.
      - names:
          - --daemon
        argument: ""
        description: Serve Galaxy process as a daemon.
      - names:
          - --pid_file
        argument: FILE
        description: Location of pid file is executed with --daemon.
      - names:
          - --ignore_dependency_problems
        argument: ""
        description: When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.
      - names:
          - --skip_client_build
        argument: ""
        description: Do not build Galaxy client when serving Galaxy.
      - names:
          - --shed_install
          - --no_shed_install
        argument: ""
        description: By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_job_init
    description: Initialize a Galaxy workflow job...
    usage: planemo workflow_job_init [OPTIONS] WORKFLOW_PATH_OR_ID
    options:
      - names:
          - -f
          - --force
        argument: ""
        description: Overwrite existing files if present.
      - names:
          - -o
          - --output
          - --galaxy_url
        argument: FILE
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --from_invocation
          - --from_uri
        argument: ""
        description: Build a workflow test or job description from an invocation ID run on an external Galaxy.A Galaxy URL and API key must also be specified. This allows test data to be downloadedand inputs and parameters defined automatically. Alternatively, the default is to build thedescriptions from a provided workflow URI.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_lint
    description: Check workflows for syntax errors and best...
    usage: planemo workflow_lint [OPTIONS] TARGET
    options:
      - names:
          - --report_level
          - --report_xunit
        argument: '[all|warn|error]'
        description: Output an XUnit report, useful for CI testing
      - names:
          - --fail_level
          - -s
          - --skip
        argument: '[warn|error]'
        description: Comma-separated list of lint tests to skip (e.g. passing --skip 'citations,xml_order' would skip linting of citations and bestpractice XML ordering.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_test_init
    description: Initialize a Galaxy workflow test...
    usage: planemo workflow_test_init [OPTIONS] WORKFLOW_PATH_OR_ID
    options:
      - names:
          - -f
          - --force
        argument: ""
        description: Overwrite existing files if present.
      - names:
          - -o
          - --output
          - --split_test
          - --no_split_test
        argument: FILE
        description: Write workflow job and test definitions to separate files.
      - names:
          - --galaxy_url
        argument: TEXT
        description: Remote Galaxy URL to use with external Galaxy engine.
      - names:
          - --galaxy_user_key
        argument: TEXT
        description: User key to use with external Galaxy engine.
      - names:
          - --from_invocation
          - --from_uri
        argument: ""
        description: Build a workflow test or job description from an invocation ID run on an external Galaxy.A Galaxy URL and API key must also be specified. This allows test data to be downloadedand inputs and parameters defined automatically. Alternatively, the default is to build thedescriptions from a provided workflow URI.
      - names:
          - --profile
        argument: TEXT
        description: Name of profile (created with the profile_create command) to use with this command.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
  - name: workflow_upload
    description: Upload workflows to github organization.
    usage: planemo workflow_upload [OPTIONS] TARGET
    options:
      - names:
          - --namespace
        argument: TEXT
        description: Organization or username under which to create or update workflow repository. Must be a valid github username or organization
      - names:
          - --github_branch
        argument: TEXT
        description: GitHub branch to use for the action. Default is main.
      - names:
          - --dry_run
        argument: ""
        description: Don't execute action, show preview of action.
      - names:
          - --help
        argument: ""
        description: Show this message and exit.
version: planemo, version 0.75.2
