name: svim-asm
description: SVIM-asm (pronounced SWIM-assem) is a structural variant caller for genome-genome alignments.
usage: svim-asm [-h] [--version] {haploid,diploid} ...
options:
  - names:
      - -h
      - --help
    argument: ""
    description: show this help message and exit
  - names:
      - --version
      - -v
    argument: ""
    description: show program's version number and exit
subcommands:
  - name: haploid
    description: Detect SVs from the alignment of an haploid query assembly to a reference assembly
    usage: svim-asm haploid [-h] [--verbose] [--min_mapq MIN_MAPQ] [--min_sv_size MIN_SV_SIZE] [--max_sv_size MAX_SV_SIZE] [--query_gap_tolerance QUERY_GAP_TOLERANCE] [--query_overlap_tolerance QUERY_OVERLAP_TOLERANCE] [--reference_gap_tolerance REFERENCE_GAP_TOLERANCE] [--reference_overlap_tolerance REFERENCE_OVERLAP_TOLERANCE] [--sample SAMPLE] [--types TYPES] [--symbolic_alleles] [--tandem_duplications_as_insertions] [--interspersed_duplications_as_insertions] [--query_names] working_dir bam_file genome
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: show this help message and exit
      - names:
          - --verbose
        argument: ""
        description: 'Enable more verbose logging (default: False)'
      - names:
          - --min_mapq
        argument: MIN_MAPQ
        description: 'Minimum mapping quality of alignments to consider (default: 20). Alignments with a lower mapping quality are ignored.'
      - names:
          - --min_sv_size
        argument: MIN_SV_SIZE
        description: 'Minimum SV size to detect (default: 40). SVIM can potentially detect events of any size but is limited by the signal-to-noise ratio in the input alignments. That means that more accurate assemblies and alignments enable the detection of smaller events.'
      - names:
          - --max_sv_size
        argument: MAX_SV_SIZE
        description: 'Maximum SV size to detect (default: 100000). This parameter is used to distinguish long deletions (and inversions) from translocations which cannot be distinguished from the alignment alone. Split read segments mapping far apart on the reference could either indicate a very long deletion (inversion) or a translocation breakpoint. SVIM calls a translocation breakpoint if the mapping distance is larger than this parameter and a deletion (or inversion) if it is smaller or equal.'
      - names:
          - --query_gap_tolerance
        argument: QUERY_GAP_TOLERANCE
        description: 'Maximum tolerated gap between adjacent alignment segments on the query (default: 50). Example: Deletions are detected from two subsequent segments of a split query sequence that are mapped far apart from each other on the reference. The query gap tolerance determines the maximum tolerated length of the query gap between both segments. If there is an unaligned query segment larger than this value between the two segments, no deletion is called.'
      - names:
          - --query_overlap_tolerance
        argument: QUERY_OVERLAP_TOLERANCE
        description: 'Maximum tolerated overlap between adjacent alignment segments on the query (default: 50). Example: Deletions are detected from two subsequent segments of a split query sequence that are mapped far apart from each other on the reference. The query overlap tolerance determines the maximum tolerated length of an overlap between both segments in the query. If the overlap between the two segments in the query is larger than this value, no deletion is called.'
      - names:
          - --reference_gap_tolerance
        argument: REFERENCE_GAP_TOLERANCE
        description: 'Maximum tolerated gap between adjacent alignment segments on the reference (default: 50). Example: Insertions are detected from two segments of a split query sequence that are mapped right next to each other on the reference but with unaligned sequence between them on the query. The reference gap tolerance determines the maximum tolerated length of the reference gap between both segments. If there is a reference gap larger than this value between the two segments, no insertion is called.'
      - names:
          - --reference_overlap_tolerance
        argument: REFERENCE_OVERLAP_TOLERANCE
        description: 'Maximum tolerated overlap between adjacent alignment segments on the reference (default: 50). Example: Insertions are detected from two segments of a split query sequence that are mapped right next to each other on the reference but with unaligned sequence between them on the query. The reference overlap tolerance determines the maximum tolerated length of an overlap between both segments on the reference. If there is a reference gap larger than this value between the two segments, no insertion is called.'
      - names:
          - --sample
        argument: SAMPLE
        description: 'Sample ID to include in output vcf file (default: Sample)'
      - names:
          - --types
        argument: TYPES
        description: 'SV types to include in output VCF (default: DEL,INS,INV,DUP:TANDEM,DUP:INT,BND). Give a comma-separated list of SV types. The possible SV types are: DEL (deletions), INS (novel insertions), INV (inversions), DUP:TANDEM (tandem duplications), DUP:INT (interspersed duplications), BND (breakends).'
      - names:
          - --symbolic_alleles
        argument: ""
        description: 'Use symbolic alleles, such as <DEL> or <INV> in the VCF output (default: False). By default, deletions, insertions, and inversions are represented by their nucleotide sequence in the output VCF.'
      - names:
          - --tandem_duplications_as_insertions
        argument: ""
        description: 'Represent tandem duplications as insertions in output VCF (default: False). By default, tandem duplications are represented by the SVTYPE=DUP:TANDEM and the genomic source is given by the POS and END tags. When enabling this option, duplications are instead represented by the SVTYPE=INS and POS and END both give the insertion point of the duplication.'
      - names:
          - --interspersed_duplications_as_insertions
        argument: ""
        description: 'Represent interspersed duplications as insertions in output VCF (default: False). By default, interspersed duplications are represented by the SVTYPE=DUP:INT and the genomic source is given by the POS and END tags. When enabling this option, duplications are instead represented by the SVTYPE=INS and POS and END both give the insertion point of the duplication.'
      - names:
          - --query_names
        argument: ""
        description: 'Output names of supporting query sequences in INFO tag of VCF (default: False). If enabled, the INFO/READS tag contains the list of names of the supporting query sequences.'
  - name: diploid
    description: Detect SVs from the alignment of a diploid query assembly to a reference assembly
    usage: svim-asm diploid [-h] [--verbose] [--min_mapq MIN_MAPQ] [--min_sv_size MIN_SV_SIZE] [--max_sv_size MAX_SV_SIZE] [--query_gap_tolerance QUERY_GAP_TOLERANCE] [--query_overlap_tolerance QUERY_OVERLAP_TOLERANCE] [--reference_gap_tolerance REFERENCE_GAP_TOLERANCE] [--reference_overlap_tolerance REFERENCE_OVERLAP_TOLERANCE] [--partition_max_distance PARTITION_MAX_DISTANCE] [--max_edit_distance MAX_EDIT_DISTANCE] [--sample SAMPLE] [--types TYPES] [--symbolic_alleles] [--tandem_duplications_as_insertions] [--interspersed_duplications_as_insertions] [--query_names] working_dir bam_file1 bam_file2 genome
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: show this help message and exit
      - names:
          - --verbose
        argument: ""
        description: 'Enable more verbose logging (default: False)'
      - names:
          - --min_mapq
        argument: MIN_MAPQ
        description: 'Minimum mapping quality of alignments to consider (default: 20). Alignments with a lower mapping quality are ignored.'
      - names:
          - --min_sv_size
        argument: MIN_SV_SIZE
        description: 'Minimum SV size to detect (default: 40). SVIM can potentially detect events of any size but is limited by the signal-to-noise ratio in the input alignments. That means that more accurate assemblies and alignments enable the detection of smaller events.'
      - names:
          - --max_sv_size
        argument: MAX_SV_SIZE
        description: 'Maximum SV size to detect (default: 100000). This parameter is used to distinguish long deletions (and inversions) from translocations which cannot be distinguished from the alignment alone. Split read segments mapping far apart on the reference could either indicate a very long deletion (inversion) or a translocation breakpoint. SVIM calls a translocation breakpoint if the mapping distance is larger than this parameter and a deletion (or inversion) if it is smaller or equal.'
      - names:
          - --query_gap_tolerance
        argument: QUERY_GAP_TOLERANCE
        description: 'Maximum tolerated gap between adjacent alignment segments on the query (default: 50). Example: Deletions are detected from two subsequent segments of a split query sequence that are mapped far apart from each other on the reference. The query gap tolerance determines the maximum tolerated length of the query gap between both segments. If there is an unaligned query segment larger than this value between the two segments, no deletion is called.'
      - names:
          - --query_overlap_tolerance
        argument: QUERY_OVERLAP_TOLERANCE
        description: 'Maximum tolerated overlap between adjacent alignment segments on the query (default: 50). Example: Deletions are detected from two subsequent segments of a split query sequence that are mapped far apart from each other on the reference. The query overlap tolerance determines the maximum tolerated length of an overlap between both segments in the query. If the overlap between the two segments in the query is larger than this value, no deletion is called.'
      - names:
          - --reference_gap_tolerance
        argument: REFERENCE_GAP_TOLERANCE
        description: 'Maximum tolerated gap between adjacent alignment segments on the reference (default: 50). Example: Insertions are detected from two segments of a split query sequence that are mapped right next to each other on the reference but with unaligned sequence between them on the query. The reference gap tolerance determines the maximum tolerated length of the reference gap between both segments. If there is a reference gap larger than this value between the two segments, no insertion is called.'
      - names:
          - --reference_overlap_tolerance
        argument: REFERENCE_OVERLAP_TOLERANCE
        description: 'Maximum tolerated overlap between adjacent alignment segments on the reference (default: 50). Example: Insertions are detected from two segments of a split query sequence that are mapped right next to each other on the reference but with unaligned sequence between them on the query. The reference overlap tolerance determines the maximum tolerated length of an overlap between both segments on the reference. If there is a reference gap larger than this value between the two segments, no insertion is called.'
      - names:
          - --partition_max_distance
        argument: PARTITION_MAX_DISTANCE
        description: 'Maximum distance in bp between SVs in a partition (default: 1000). Before pairing, the SV signatures are divided into coarse partitions. This parameter determines the maximum distance between two subsequent signatures in the same partition. If the distance between two subsequent signatures is larger than this parameter, they are distributed into separate partitions.'
      - names:
          - --max_edit_distance
        argument: MAX_EDIT_DISTANCE
        description: 'Maximum edit distance between both alleles to be paired up into a homozygous call (default: 200).'
      - names:
          - --sample
        argument: SAMPLE
        description: 'Sample ID to include in output vcf file (default: Sample)'
      - names:
          - --types
        argument: TYPES
        description: 'SV types to include in output VCF (default: DEL,INS,INV,DUP:TANDEM,DUP:INT,BND). Give a comma-separated list of SV types. The possible SV types are: DEL (deletions), INS (novel insertions), INV (inversions), DUP:TANDEM (tandem duplications), DUP:INT (interspersed duplications), BND (breakends).'
      - names:
          - --symbolic_alleles
        argument: ""
        description: 'Use symbolic alleles, such as <DEL> or <INV> in the VCF output (default: False). By default, deletions, insertions, and inversions are represented by their nucleotide sequence in the output VCF.'
      - names:
          - --tandem_duplications_as_insertions
        argument: ""
        description: 'Represent tandem duplications as insertions in output VCF (default: False). By default, tandem duplications are represented by the SVTYPE=DUP:TANDEM and the genomic source is given by the POS and END tags. When enabling this option, duplications are instead represented by the SVTYPE=INS and POS and END both give the insertion point of the duplication.'
      - names:
          - --interspersed_duplications_as_insertions
        argument: ""
        description: 'Represent interspersed duplications as insertions in output VCF (default: False). By default, interspersed duplications are represented by the SVTYPE=DUP:INT and the genomic source is given by the POS and END tags. When enabling this option, duplications are instead represented by the SVTYPE=INS and POS and END both give the insertion point of the duplication.'
      - names:
          - --query_names
        argument: ""
        description: 'Output names of supporting query sequences in INFO tag of VCF (default: False). If enabled, the INFO/READS tag contains the list of names of the supporting query sequences.'
version: svim-asm 1.0.3
