#compdef _bamtools bamtools

# Generated with h2o 0.1.18

    function _bamtools_convert {
        _arguments \
            '-in[the input BAM file(s) \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-format[the output file format - see README for recognized formats]' \
            '-region[genomic region. Index file is recommended for better performance, and is used automatically if it exists. See '\''bamtools help index'\'' for more details on creating one]' \
            '-fasta[FASTA reference file]:file:_files' \
            '-mapqual[print the mapping qualities]' \
            '-noheader[omit the SAM header from output]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_count {
        _arguments \
            '-in[the input BAM file(s) \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-region[genomic region. Index file is recommended for better performance, and is used automatically if it exists. See '\''bamtools help index'\'' for more details on creating one]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_coverage {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-out[the output file \[stdout\]]:file:_files' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_filter {
        _arguments \
            '-in[the input BAM file(s) \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-region[only read data from this genomic region (see documentation for more details)]' \
            '-script[the filter script file (see documentation for more details)]:file:_files' \
            '-forceCompression[if results are sent to stdout (like when piping to another tool), default behavior is to leave output uncompressed. Use this flag to override and force compression]' \
            '-alignmentFlag[keep reads with this *exact* alignment flag (for more detailed queries, see below)]' \
            '-insertSize[keep reads with insert size that matches pattern]' \
            '-length[keep reads with length that matches pattern]' \
            '-mapQuality[keep reads with map quality that matches pattern]' \
            '-name[keep reads with name that matches pattern]' \
            '-queryBases[keep reads with motif that matches pattern]' \
            '-tag[keep reads with this key=>value pair]' \
            '-isDuplicate[keep only alignments that are marked as duplicate? \[true\]]' \
            '-isFailedQC[keep only alignments that failed QC? \[true\]]' \
            '-isFirstMate[keep only alignments marked as first mate? \[true\]]' \
            '-isMapped[keep only alignments that were mapped? \[true\]]' \
            '-isMateMapped[keep only alignments with mates that mapped \[true\]]' \
            '-isMateReverseStrand[keep only alignments with mate on reverese strand? \[true\]]' \
            '-isPaired[keep only alignments that were sequenced as paired? \[true\]]' \
            '-isPrimaryAlignment[keep only alignments marked as primary? \[true\]]' \
            '-isProperPair[keep only alignments that passed PE resolution? \[true\]]' \
            '-isReverseStrand[keep only alignments on reverse strand? \[true\]]' \
            '-isSecondMate[keep only alignments marked as second mate? \[true\]]' \
            '-isSingleton[keep only singletons \[true\]]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_header {
        _arguments \
            '-in[the input BAM file(s) \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one]:file:_files' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_index {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-bti[create (non-standard) BamTools]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_merge {
        _arguments \
            '-in[the input BAM file(s)]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-out[the output BAM file]:file:_files' \
            '-forceCompression[if results are sent to stdout (like when piping to another tool), default behavior is to leave output uncompressed. Use this flag to override and force compression]' \
            '-region[genomic region. See README for more details]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_random {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-region[only pull random alignments from within this genomic region. Index file is recommended for better performance, and is used automatically if it exists. See '\''bamtools help index'\'' for more details on creating one]' \
            '-forceCompression[if results are sent to stdout (like when piping to another tool), default behavior is to leave output uncompressed. Use this flag to override and force compression]' \
            '-n[number of alignments to grab. Note - no duplicate checking is performed \[10000\]]' \
            '-seed[random number generator seed (for repeatable results). Current time is used if no seed value is provided.]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_resolve {
        _arguments \
            '-in[the input BAM file(s) \[stdin\]]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-stats[input/output stats file, depending on selected mode (see below). This file is human-readable, storing fragment length data generated per read group, as well as the options used to configure the -makeStats mode]:file:_files' \
            '-forceCompression[if results are sent to stdout (like when piping to another tool), default behavior is to leave output uncompressed.Use this flag to override and force compression. This feature is disabled in -makeStats mode.]' \
            '-makeStats[generates a fragment-length stats file from the input BAM. Data is written to file specified using the -stats option. MarkPairs Mode Settings are DISABLED.]' \
            '-markPairs[generates an output BAM with alignments marked with proper-pair status. Stats data is read from file specified using the -stats option. MakeStats Mode Settings are DISABLED]' \
            '-twoPass[combines the -makeStats & -markPairs modes into a single command. However, due to the two-pass nature of paired-end resolution, piping BAM data via stdin is DISABLED. You must supply an explicit input BAM file. Output BAM may be piped to stdout, however, if desired. All MakeStats & MarkPairs Mode Settings are available. The intermediate stats file is not necessary, but if the -stats options is used, then one will be generated. You may find this useful for documentation purposes.]' \
            '-minMQ[minimum map quality. Used in -makeStats mode as a heuristic for determining a mate'\''s uniqueness. Used in -markPairs mode as a filter for marking candidate proper pairs.]' \
            '-ci[confidence interval. Set min/max fragment lengths such that we capture this fraction of pairs]' \
            '-umt[unused model threshold. The resolve tool considers 8 possible orientation models for pairs. The top 2 are selected for later use when actually marking alignments. This value determines the cutoff for marking a read group as ambiguous. Meaning that if the ratio of the number of alignments from bottom 6 models to the top 2 is greater than this threshold, then the read group is flagged as ambiguous. By default, NO alignments from ambiguous read groups will be marked as proper pairs. You may override this behavior with the -force option in -markPairs mode]' \
            '-force[forces all read groups to be marked according to their top 2 '\''orientation models'\''. When generating stats, the 2 (out of 8 possible) models with the most observations are chosen as the top models for each read group. If the remaining 6 models account for more than some threshold (\[default=10%\], see -umt), then the read group is marked as ambiguous. The default behavior is that for an ambiguous read group, NONE of its alignments are marked as proper-pairs. By setting this option, a read group'\''s ambiguity flag will be ignored, and all of its alignments will be compared to the top 2 models.]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_revert {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-forceCompression[if results are sent to stdout (like when piping to another tool), default behavior is to leave output uncompressed. Use this flag to override and force compression]' \
            '-keepDuplicate[keep duplicates marked]' \
            '-keepQualities[keep base qualities (do not replace with OQ contents)]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_sort {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-out[the output BAM file \[stdout\]]:file:_files' \
            '-byname[sort by alignment name]' \
            '-n[max number of alignments per tempfile \[500000\]]' \
            '-mem[max memory to use \[1024\]]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_split {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-refPrefix[custom prefix for splitting by references. Currently files end with REF_<refName>.bam. This option allows you to replace "REF_" with a prefix of your choosing.]' \
            '-tagPrefix[custom prefix for splitting by tags. Current files end with TAG_<tagname>_<tagvalue>.bam. This option allows you to replace "TAG_" with a prefix of your choosing.]' \
            '-stub[prefix stub for output BAM files (default behavior is to use input filename, without .bam extension, as stub). If input is stdin and no stub provided, a timestamp is generated as the stub.]:file:_files' \
            '-tagListDelim[delimiter used to separate values in the filenames generated from splitting on list-type tags \[--\]]' \
            '-mapped[split mapped/unmapped alignments]' \
            '-paired[split single-end/paired-end alignments]' \
            '-reference[split alignments by reference]' \
            '-tag[splits alignments based on all values of TAG encountered (i.e. -tag RG creates a BAM file for each read group in original BAM file)]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }

    function _bamtools_stats {
        _arguments \
            '-in[the input BAM file \[stdin\]]:file:_files' \
            '-list[the input BAM file list, one line per file]:file:_files' \
            '-insert[summarize insert size data]' \
            '(--help -h)'{--help,-h}'[shows this help text]' \
            "*: :_files"

    }


function _bamtools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'convert:Converts between BAM and a number of other formats'
            'count:Prints number of alignments in BAM file(s)'
            'coverage:Prints coverage statistics from the input BAM file'
            'filter:Filters BAM file(s) by user-specified criteria'
            'header:Prints BAM header information'
            'index:Generates index for BAM file'
            'merge:Merge multiple BAM files into single file'
            'random:Select random alignments from existing BAM file(s), intended more as a testing tool.'
            'resolve:Resolves paired-end reads (marking the IsProperPair flag as needed)'
            'revert:Removes duplicate marks and restores original base qualities'
            'sort:Sorts the BAM file according to some criteria'
            'split:Splits a BAM file on user-specified property, creating a new BAM output file for each value found'
            'stats:Prints some basic statistics from input BAM file(s)'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (convert)
            _bamtools_convert
            ;;

        (count)
            _bamtools_count
            ;;

        (coverage)
            _bamtools_coverage
            ;;

        (filter)
            _bamtools_filter
            ;;

        (header)
            _bamtools_header
            ;;

        (index)
            _bamtools_index
            ;;

        (merge)
            _bamtools_merge
            ;;

        (random)
            _bamtools_random
            ;;

        (resolve)
            _bamtools_resolve
            ;;

        (revert)
            _bamtools_revert
            ;;

        (sort)
            _bamtools_sort
            ;;

        (split)
            _bamtools_split
            ;;

        (stats)
            _bamtools_stats
            ;;

        esac
        ;;
     esac

}

