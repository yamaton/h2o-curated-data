#compdef _bcftools bcftools

# Generated with h2o 0.1.18

    function _bcftools_index {
        _arguments \
            '(-c --csi)'{-c,--csi}'[generate CSI-format index for VCF/BCF files \[default\]]' \
            '(-f --force)'{-f,--force}'[overwrite index if it already exists]' \
            '(-m --min-shift)'{-m,--min-shift}'[set minimal interval size for CSI indices to 2^INT \[14\]]' \
            '(-o --output)'{-o,--output}'[optional output index file name]' \
            '(-t --tbi)'{-t,--tbi}'[generate TBI-format index for VCF files]' \
            '--threads[use multithreading with INT worker threads \[0\]]' \
            '(-n --nrecords)'{-n,--nrecords}'[print number of records based on existing index file]' \
            '(-s --stats)'{-s,--stats}'[print per contig stats based on existing index file]' \
            "*: :_files"

    }

    function _bcftools_annotate {
        _arguments \
            '(-a --annotations)'{-a,--annotations}'[VCF file or tabix-indexed file with annotations: CHR\tPOS\[\tVALUE\]+]:file:_files' \
            '--collapse[matching records by <snps|indels|both|all|some|none>, see man page for details \[some\]]' \
            '(-c --columns)'{-c,--columns}'[list of columns in the annotation file, e.g. CHROM,POS,REF,ALT,-,INFO/TAG. See man page for details]' \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true (see man page for details)]' \
            '--force[continue despite parsing error (at your own risk!)]' \
            '(-h --header-lines)'{-h,--header-lines}'[lines which should be appended to the VCF header]:file:_files' \
            '(-I --set-id)'{-I,--set-id}'[set ID column, see man page for details]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true (see man page for details)]' \
            '(-k --keep-sites)'{-k,--keep-sites}'[leave -i/-e sites unchanged instead of discarding them]' \
            '(-l --merge-logic)'{-l,--merge-logic}'[merge logic for multiple overlapping regions (see man page for details), EXPERIMENTAL]' \
            '(-m --mark-sites)'{-m,--mark-sites}'[add INFO/tag flag to sites which are ("+") or are not ("-") listed in the -a file]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '--rename-chrs[rename sequences according to map file: from\tto]:file:_files' \
            '(-s --samples)'{-s,--samples}'[comma separated list of samples to annotate (or exclude with "^" prefix)]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to annotate (or exclude with "^" prefix)]:file:_files' \
            '--single-overlaps[keep memory low by avoiding complexities arising from handling multiple overlapping intervals]' \
            '(-x --remove)'{-x,--remove}'[list of annotations (e.g. ID,INFO/DP,FORMAT/DP,FILTER) to remove (or keep with "^" prefix). See man page for details]' \
            '--threads[number of extra output compression threads \[0\]]' \
            "*: :_files"

    }

    function _bcftools_concat {
        _arguments \
            '(-a --allow-overlaps)'{-a,--allow-overlaps}'[First coordinate of the next file can precede last record of the current file.]' \
            '(-c --compact-PS)'{-c,--compact-PS}'[Do not output PS tag at each site, only at the start of a new phase set block.]' \
            '(-d --rm-dups)'{-d,--rm-dups}'[Output duplicate records present in multiple files only once: <snps|indels|both|all|none>]' \
            '(-D --remove-duplicates)'{-D,--remove-duplicates}'[Alias for -d none]' \
            '(-f --file-list)'{-f,--file-list}'[Read the list of files from a file.]:file:_files' \
            '(-l --ligate)'{-l,--ligate}'[Ligate phased VCFs by matching phase at overlapping haplotypes]' \
            '--no-version[Do not append version and command line to the header]' \
            '(-n --naive)'{-n,--naive}'[Concatenate files without recompression, a header check compatibility is performed]' \
            '--naive-force[Same as --naive, but header compatibility is not checked. Dangerous, use with caution.]' \
            '(-o --output)'{-o,--output}'[Write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-q --min-PQ)'{-q,--min-PQ}'[Break phase set if phasing quality is lower than <int> \[30\]]' \
            '(-r --regions)'{-r,--regions}'[Restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[Restrict to regions listed in a file]:file:_files' \
            '--threads[Use multithreading with <int> worker threads \[0\]]' \
            '(-v --verbose)'{-v,--verbose}'[Set verbosity level \[1\]]' \
            "*: :_files"

    }

    function _bcftools_convert {
        _arguments \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of samples to include]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to include]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[output file name \[stdout\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-G --gensample2vcf)'{-G,--gensample2vcf}'[<prefix>|<gen-file>,<sample-file>]' \
            '(-g --gensample)'{-g,--gensample}'[<prefix>|<gen-file>,<sample-file>]' \
            '--tag[tag to take values for .gen file: GT,PL,GL,GP \[GT\]]' \
            '--chrom[output chromosome in first column instead of CHROM:POS_REF_ALT]' \
            '--keep-duplicates[keep duplicate positions]' \
            '--sex[output sex column in the sample-file, input format is: Sample\t\[MF\]]:file:_files' \
            '--vcf-ids[output VCF IDs in second column instead of CHROM:POS_REF_ALT]' \
            '--gvcf2vcf[expand gVCF reference blocks]' \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[reference sequence in fasta format]:file:_files' \
            '--hapsample2vcf[<prefix>|<hap-file>,<sample-file>]' \
            '--hapsample[<prefix>|<hap-file>,<sample-file>]' \
            '--haploid2diploid[convert haploid genotypes to diploid homozygotes]' \
            '--vcf-ids[output VCF IDs instead of CHROM:POS_REF_ALT]' \
            '(-H --haplegendsample2vcf)'{-H,--haplegendsample2vcf}'[<prefix>|<hap-file>,<legend-file>,<sample-file>]' \
            '(-h --haplegendsample)'{-h,--haplegendsample}'[<prefix>|<hap-file>,<legend-file>,<sample-file>]' \
            '(--tsv2vcf -c --columns)'{--tsv2vcf,-c,--columns}'[columns of the input tsv file \[ID,CHROM,POS,AA\]]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of sample names]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of sample names]:file:_files' \
            "*: :_files"

    }

    function _bcftools_isec {
        _arguments \
            '(-c --collapse)'{-c,--collapse}'[treat as identical records with <snps|indels|both|all|some|none>, see man page for details \[none\]]' \
            '(-C --complement)'{-C,--complement}'[output positions present only in the first file but missing in the others]' \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true]' \
            '(-f --apply-filters)'{-f,--apply-filters}'[require at least one of the listed FILTER strings (e.g. "PASS,.")]' \
            '(-i --include)'{-i,--include}'[include only sites for which the expression is true]' \
            '--no-version[do not append version and command line to the header,-n, --nfiles \[+-=~\]<int>   output positions present in this many (=), this many or more (+), this many or fewer (-), the exact (~) files]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-p --prefix)'{-p,--prefix}'[if given, subset each of the input files accordingly, see also -w]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-w --write)'{-w,--write}'[list of files to write with -p given as 1-based indexes. By default, all files are written]' \
            "*: :_files"

    }

    function _bcftools_merge {
        _arguments \
            '--force-samples[resolve duplicate sample names]' \
            '--print-header[print only the merged header and exit]' \
            '--use-header[use the provided header]:file:_files' \
            '(-0 --missing-to-ref)'{-0,--missing-to-ref}'[assume genotypes at missing sites are 0/0]' \
            '(-f --apply-filters)'{-f,--apply-filters}'[require at least one of the listed FILTER strings (e.g. "PASS,.")]' \
            '(-F --filter-logic)'{-F,--filter-logic}'[remove filters if some input is PASS ("x"), or apply all filters ("+") \[+\]]' \
            '(-g --gvcf)'{-g,--gvcf}'[merge gVCF blocks, INFO/END tag is expected. Implies -i QS:sum,MinDP:min,I16:sum,IDV:max,IMF:max]' \
            '(-i --info-rules)'{-i,--info-rules}'[rules for merging INFO fields (method is one of sum,avg,min,max,join) or "-" to turn off the default \[DP:sum,DP4:sum\]]' \
            '(-l --file-list)'{-l,--file-list}'[read file names from the file]:file:_files' \
            '(-L --local-alleles)'{-L,--local-alleles}'[EXPERIMENTAL: if more than <int> ALT alleles are encountered, drop FMT/PL and output LAA+LPL instead; 0=unlimited \[0\]]' \
            '(-m --merge)'{-m,--merge}'[allow multiallelic records for <snps|indels|both|all|none|id>, see man page for details \[both\]]' \
            '--no-index[merge unindexed files, the same chromosomal order is required and -r/-R are not allowed]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'['\''b'\'' compressed BCF; '\''u'\'' uncompressed BCF; '\''z'\'' compressed VCF; '\''v'\'' uncompressed VCF \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            "*: :_files"

    }

    function _bcftools_norm {
        _arguments \
            '(-c --check-ref)'{-c,--check-ref}'[check REF alleles and exit (e), warn (w), exclude (x), or set (s) bad sites \[e\]]' \
            '(-D --remove-duplicates)'{-D,--remove-duplicates}'[remove duplicate lines of the same type.]' \
            '(-d --rm-dup)'{-d,--rm-dup}'[remove duplicate snps|indels|both|all|exact]' \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[reference sequence]:file:_files' \
            '--force[try to proceed even if malformed tags are encountered. Experimental, use at your own risk]' \
            '--keep-sum[keep vector sum constant when splitting multiallelics (see github issue #360)]' \
            '(-m --multiallelics)'{-m,--multiallelics}'[split multiallelics (-) or join biallelics (+), type: snps|indels|both|any \[both\]]' \
            '--no-version[do not append version and command line to the header]' \
            '(-N --do-not-normalize)'{-N,--do-not-normalize}'[do not normalize indels (with -m or -c s)]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'['\''b'\'' compressed BCF; '\''u'\'' uncompressed BCF; '\''z'\'' compressed VCF; '\''v'\'' uncompressed VCF \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --strict-filter)'{-s,--strict-filter}'[when merging (-m+), merged site is PASS only if all sites being merged PASS]' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-w --site-win)'{-w,--site-win}'[buffer for sorting lines which changed position during realignment \[1000\]]' \
            "*: :_files"

    }

    function _bcftools_plugin {
        _arguments \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'['\''b'\'' compressed BCF; '\''u'\'' uncompressed BCF; '\''z'\'' compressed VCF; '\''v'\'' uncompressed VCF \[v\]]' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-h --help)'{-h,--help}'[list plugin'\''s options]' \
            '(-l --list-plugins)'{-l,--list-plugins}'[list available plugins. See BCFTOOLS_PLUGINS environment variable and man page for details]' \
            '(-v --verbose)'{-v,--verbose}'[print verbose information, -vv increases verbosity]' \
            '(-V --version)'{-V,--version}'[print version string and exit]' \
            "*: :_files"

    }

    function _bcftools_query {
        _arguments \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true (see man page for details)]' \
            '(-f --format)'{-f,--format}'[see man page for details]' \
            '(-H --print-header)'{-H,--print-header}'[print header]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true (see man page for details)]' \
            '(-l --list-samples)'{-l,--list-samples}'[print the list of samples and exit]' \
            '(-o --output)'{-o,--output}'[output file name \[stdout\]]:file:_files' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of samples to include]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to include]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '(-u --allow-undef-tags)'{-u,--allow-undef-tags}'[print "." for undefined tags]' \
            '(-v --vcf-list)'{-v,--vcf-list}'[process multiple VCFs listed in the file]:file:_files' \
            "*: :_files"

    }

    function _bcftools_reheader {
        _arguments \
            '(-f --fai)'{-f,--fai}'[update sequences and their lengths from the .fai file]:file:_files' \
            '(-h --header)'{-h,--header}'[new header]:file:_files' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-s --samples)'{-s,--samples}'[new sample names]:file:_files' \
            '--threads[use multithreading with <int> worker threads (BCF only) \[0\]]' \
            "*: :_files"

    }

    function _bcftools_sort {
        _arguments \
            '(-m --max-mem)'{-m,--max-mem}'[maximum memory to use \[768M\]]' \
            '(-o --output)'{-o,--output}'[output file name \[stdout\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-T --temp-dir)'{-T,--temp-dir}'[temporary files \[/tmp/bcftools-sort.XXXXXX\]]' \
            "*: :_files"

    }

    function _bcftools_view {
        _arguments \
            '(-G --drop-genotypes)'{-G,--drop-genotypes}'[drop individual genotype information (after subsetting if -s option set)]' \
            '(-l --compression-level)'{-l,--compression-level}'[compression level: 0 uncompressed, 1 best speed, 9 best compression \[-1\]]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[output file name \[stdout\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps. Exclude regions with "^" prefix]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps. Exclude regions with "^" prefix]:file:_files' \
            '(-a --trim-alt-alleles)'{-a,--trim-alt-alleles}'[trim ALT alleles not seen in the genotype fields (or their subset with -s/-S)]' \
            '(-I --no-update)'{-I,--no-update}'[do not (re)calculate INFO fields for the subset (currently INFO/AC and INFO/AN)]' \
            '(-s --samples)'{-s,--samples}'[comma separated list of samples to include (or exclude with "^" prefix)]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to include (or exclude with "^" prefix)]:file:_files' \
            '--force-samples[only warn about unknown subset samples]' \
            '(-f --apply-filters)'{-f,--apply-filters}'[require at least one of the listed FILTER strings (e.g. "PASS,.")]' \
            '(-g --genotype)'{-g,--genotype}'[require one or more hom/het/missing genotype or, if prefixed with "^", exclude sites with hom/het/missing genotypes]' \
            "*: :_files"

    }

    function _bcftools_call {
        _arguments \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[output type: '\''b'\'' compressed BCF; '\''u'\'' uncompressed BCF; '\''z'\'' compressed VCF; '\''v'\'' uncompressed VCF \[v\]]' \
            '--ploidy[predefined ploidy, '\''list'\'' to print available settings, append '\''?'\'' for details]' \
            '--ploidy-file[space/tab-delimited list of CHROM,FROM,TO,SEX,PLOIDY]:file:_files' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of samples to include \[all samples\]]' \
            '(-S --samples-file)'{-S,--samples-file}'[PED file or a file with an optional column with sex (see man page for details) \[all samples\]]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-A --keep-alts)'{-A,--keep-alts}'[keep all possible alternate alleles at variant sites]' \
            '(-f --format-fields)'{-f,--format-fields}'[output format fields: GQ,GP (lowercase allowed) \[\]]' \
            '(-F --prior-freqs)'{-F,--prior-freqs}'[use prior allele frequencies]' \
            '(-G --group-samples)'{-G,--group-samples}'[group samples by population (file with "sample\tgroup") or "-" for single-sample calling]:file:_files' \
            '(-g --gvcf)'{-g,--gvcf}'[group non-variant sites into gVCF blocks by minimum per-sample DP]' \
            '(-i --insert-missed)'{-i,--insert-missed}'[output also sites missed by mpileup but present in -T]' \
            '(-M --keep-masked-ref)'{-M,--keep-masked-ref}'[keep sites with masked reference allele (REF=N)]' \
            '(-V --skip-variants)'{-V,--skip-variants}'[skip indels/snps]' \
            '(-v --variants-only)'{-v,--variants-only}'[output variant sites only]' \
            '(-c --consensus-caller)'{-c,--consensus-caller}'[the original calling method (conflicts with -m)]' \
            '(-C --constrain)'{-C,--constrain}'[one of: alleles, trio (see manual)]' \
            '(-m --multiallelic-caller)'{-m,--multiallelic-caller}'[alternative model for multiallelic and rare-variant calling (conflicts with -c)]' \
            '(-n --novel-rate)'{-n,--novel-rate}'[likelihood of novel mutation for constrained trio calling, see man page for details \[1e-8,1e-9,1e-9\]]' \
            '(-p --pval-threshold)'{-p,--pval-threshold}'[variant if P(ref|D)<FLOAT with -c \[0.5\]]' \
            '(-P --prior)'{-P,--prior}'[mutation rate (use bigger for greater sensitivity), use with -m \[1.1e-3\]]' \
            "*: :_files"

    }

    function _bcftools_consensus {
        _arguments \
            '--sample[option will apply genotype]' \
            '--sample[option will apply genotype   (or haplotype) calls from FORMAT/GT. The program ignores allelic depth]' \
            '(-c --chain)'{-c,--chain}'[write a chain file for liftover]:file:_files' \
            '(-a --absent)'{-a,--absent}'[replace positions absent from VCF with <char>]' \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true (see man page for details)]' \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[reference sequence in fasta format]:file:_files' \
            '(-H --haplotype)'{-H,--haplotype}'[choose which allele to use from the FORMAT/GT field, note the codes are case-insensitive:]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true (see man page for details)]' \
            '(-I --iupac-codes)'{-I,--iupac-codes}'[output variants in the form of IUPAC ambiguity codes]' \
            '(-m --mask)'{-m,--mask}'[replace regions with N]:file:_files' \
            '(-M --missing)'{-M,--missing}'[output <char> instead of skipping a missing genotype "./."]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-p --prefix)'{-p,--prefix}'[prefix to add to output sequence names]' \
            '(-s --sample)'{-s,--sample}'[apply variants of the given sample]' \
            "*: :_files"

    }

    function _bcftools_cnv {
        _arguments \
            '(-c --control-sample)'{-c,--control-sample}'[optional control sample name to highlight differences]' \
            '(-f --AF-file)'{-f,--AF-file}'[read allele frequencies from file (CHR\tPOS\tREF,ALT\tAF)]:file:_files' \
            '(-o --output-dir -p --plot-threshold)'{-o,--output-dir,-p,--plot-threshold}'[plot aberrant chromosomes with quality at least '\''float'\'']:file:_files' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --query-sample)'{-s,--query-sample}'[query samply name]' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '(-a --aberrant)'{-a,--aberrant}'[fraction of aberrant cells in query and control \[1.0,1.0\]]' \
            '(-b --BAF-weight)'{-b,--BAF-weight}'[relative contribution from BAF \[1\]]' \
            '(-d --BAF-dev)'{-d,--BAF-dev}'[expected BAF deviation in query and control \[0.04,0.04\]]' \
            '(-e --err-prob)'{-e,--err-prob}'[uniform error probability \[1e-4\]]' \
            '(-k --LRR-dev)'{-k,--LRR-dev}'[expected LRR deviation \[0.2,0.2\]]' \
            '(-l --LRR-weight)'{-l,--LRR-weight}'[relative contribution from LRR \[0.2\]]' \
            '(-L --LRR-smooth-win)'{-L,--LRR-smooth-win}'[window of LRR moving average smoothing \[10\]]' \
            '(-O --optimize)'{-O,--optimize}'[estimate fraction of aberrant cells down to <float> \[1.0\]]' \
            '(-P --same-prob)'{-P,--same-prob}'[prior probability of -s/-c being the same \[0.5\]]' \
            '(-x --xy-prob)'{-x,--xy-prob}'[P(x|y) transition probability \[1e-9\]]' \
            "*: :_files"

    }

    function _bcftools_csq {
        _arguments \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[reference file in fasta format]:file:_files' \
            '(-g --gff-annot)'{-g,--gff-annot}'[gff3 annotation file]:file:_files' \
            '(-b --brief-predictions)'{-b,--brief-predictions}'[annotate with abbreviated protein-changing predictions]' \
            '(-c --custom-tag)'{-c,--custom-tag}'[use this tag instead of the default BCSQ]' \
            '(-l --local-csq)'{-l,--local-csq}'[localized predictions, consider only one VCF record at a time]' \
            '(-n --ncsq)'{-n,--ncsq}'[maximum number of consequences to consider per site \[16\]]' \
            '(-p --phase)'{-p,--phase}'[how to handle unphased heterozygous genotypes: \[r\]]' \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true]' \
            '--force[run even if some sanity checks fail]' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF v: uncompressed VCF, t: plain tab-delimited text output \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[samples to include or "-" to apply all variants and ignore samples]' \
            '(-S --samples-file)'{-S,--samples-file}'[samples to include]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-v --verbose)'{-v,--verbose}'[verbosity level 0-2 \[1\]]' \
            "*: :_files"

    }

    function _bcftools_filter {
        _arguments \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true (see man page for details)]' \
            '(-g --SnpGap)'{-g,--SnpGap}'[filter SNPs within <int> base pairs of an indel (the default) or any combination of indel,mnp,bnd,other,overlap]' \
            '(-G --IndelGap)'{-G,--IndelGap}'[filter clusters of indels separated by <int> or fewer base pairs allowing only one to pass]' \
            '(-i --include)'{-i,--include}'[include only sites for which the expression is true (see man page for details]' \
            '(-m --mode)'{-m,--mode}'["+": do not replace but add to existing FILTER; "x": reset filters at sites which pass]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[b: compressed BCF, u: uncompressed BCF, z: compressed VCF, v: uncompressed VCF \[v\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --soft-filter)'{-s,--soft-filter}'[annotate FILTER column with <string> or unique filter name ("Filter%d") made up by the program ("+")]' \
            '(-S --set-GTs)'{-S,--set-GTs}'[set genotypes of failed samples to missing (.) or ref (0)]' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            "*: :_files"

    }

    function _bcftools_gtcheck {
        _arguments \
            '--distinctive-sites[Find sites that can distinguish between at least NUM sample pairs.]' \
            '--dry-run[Stop after first record to estimate required time]' \
            '(-e --error-probability)'{-e,--error-probability}'[Phred-scaled probability of genotyping error, 0 for faster but less accurate results \[40\]]' \
            '(-g --genotypes)'{-g,--genotypes}'[Genotypes to compare against]' \
            '(-H --homs-only)'{-H,--homs-only}'[Homozygous genotypes only, useful with low coverage data (requires -g)]' \
            '--n-matches[Print only top INT matches for each sample, 0 for unlimited. Use negative value]' \
            '--no-HWE-prob[Disable calculation of HWE probability]' \
            '(-p --pairs)'{-p,--pairs}'[Comma-separated sample pairs to compare (qry,gt\[,qry,gt..\] with -g or qry,qry\[,qry,qry..\] w/o)]' \
            '(-P --pairs-file)'{-P,--pairs-file}'[File with tab-delimited sample pairs to compare (qry,gt with -g or qry,qry w/o)]' \
            '(-r --regions)'{-r,--regions}'[Restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[Restrict to regions listed in a file]' \
            '(-s --samples)'{-s,--samples}'[List of query or -g samples (by default all samples are compared)]' \
            '(-S --samples-file)'{-S,--samples-file}'[File with the query or -g samples to compare]' \
            '(-t --targets)'{-t,--targets}'[Similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[Similar to -R but streams rather than index-jumps]' \
            '(-u --use)'{-u,--use}'[Which tag to use in the query file (TAG1) and the -g file (TAG2) \[PL,GT\]]' \
            "*: :_files"

    }

    function _bcftools_mpileup {
        _arguments \
            '(-6 --illumina1.3+)'{-6,--illumina1.3+}'[quality is in the Illumina-1.3+ encoding]' \
            '(-A --count-orphans)'{-A,--count-orphans}'[do not discard anomalous read pairs]' \
            '(-b --bam-list)'{-b,--bam-list}'[list of input BAM filenames, one per line]' \
            '(-B --no-BAQ)'{-B,--no-BAQ}'[disable BAQ (per-Base Alignment Quality)]' \
            '(-C --adjust-MQ)'{-C,--adjust-MQ}'[adjust mapping quality; recommended:50, disable:0 \[0\]]' \
            '(-d --max-depth)'{-d,--max-depth}'[max raw per-file depth; avoids excessive memory usage \[250\]]' \
            '(-E --redo-BAQ)'{-E,--redo-BAQ}'[recalculate BAQ on the fly, ignore existing BQs]' \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[faidx indexed reference sequence file]' \
            '--no-reference[do not require fasta reference file]' \
            '(-G --read-groups)'{-G,--read-groups}'[select or exclude read groups listed in the file]' \
            '(-q --min-MQ)'{-q,--min-MQ}'[skip alignments with mapQ smaller than INT \[0\]]' \
            '(-Q --min-BQ)'{-Q,--min-BQ}'[skip bases with baseQ/BAQ smaller than INT \[13\]]' \
            '(-r --regions)'{-r,--regions}'[comma separated list of regions in which pileup is generated]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]' \
            '--ignore-RG[ignore RG tags (one BAM = one sample)]' \
            '(-s --samples)'{-s,--samples}'[comma separated list of samples to include]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to include]' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]' \
            '(-x --ignore-overlaps)'{-x,--ignore-overlaps}'[disable read-pair overlap detection]' \
            '(--rf --incl-flags)'{--rf,--incl-flags}'[required flags: skip reads with mask bits unset \[\]]' \
            '(--ff --excl-flags)'{--ff,--excl-flags}'[filter flags: skip reads with mask bits set]' \
            '(-a --annotate)'{-a,--annotate}'[optional tags to output; '\''?'\'' to list \[\]]' \
            '(-g --gvcf)'{-g,--gvcf}'[group non-variant sites into gVCF blocks according to minimum per-sample DP]' \
            '--no-version[do not append version and command line to the header]' \
            '(-o --output)'{-o,--output}'[write output to FILE \[standard output\]]' \
            '(-O --output-type)'{-O,--output-type}'['\''b'\'' compressed BCF; '\''u'\'' uncompressed BCF; '\''z'\'' compressed VCF; '\''v'\'' uncompressed VCF \[v\]]' \
            '--threads[use multithreading with INT worker threads \[0\]]' \
            '(-e --ext-prob)'{-e,--ext-prob}'[Phred-scaled gap extension seq error probability \[20\]]' \
            '(-F --gap-frac)'{-F,--gap-frac}'[minimum fraction of gapped reads \[0.002\]]' \
            '(-h --tandem-qual)'{-h,--tandem-qual}'[coefficient for homopolymer errors \[100\]]' \
            '(-I --skip-indels)'{-I,--skip-indels}'[do not perform indel calling]' \
            '(-L --max-idepth)'{-L,--max-idepth}'[maximum per-file depth for INDEL calling \[250\]]' \
            '(-m --min-ireads)'{-m,--min-ireads}'[minimum number gapped reads for indel candidates \[1\]]' \
            '(-o --open-prob)'{-o,--open-prob}'[Phred-scaled gap open seq error probability \[40\]]' \
            '(-p --per-sample-mF)'{-p,--per-sample-mF}'[apply -m and -F per-sample for increased sensitivity]' \
            '(-P --platforms)'{-P,--platforms}'[comma separated list of platforms for indels \[all\]]' \
            "*: :_files"

    }

    function _bcftools_polysomy {
        _arguments \
            '(-o --output-dir -r --regions)'{-o,--output-dir,-r,--regions}'[restrict to comma-separated list of regions]:file:_files' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --sample)'{-s,--sample}'[sample to analyze]' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '(-b --peak-size)'{-b,--peak-size}'[minimum peak size (0-1, larger is stricter) \[0.1\]]' \
            '(-c --cn-penalty)'{-c,--cn-penalty}'[penalty for increasing CN (0-1, larger is stricter) \[0.7\]]' \
            '(-f --fit-th)'{-f,--fit-th}'[goodness of fit threshold (>0, smaller is stricter) \[3.3\]]' \
            '(-i --include-aa)'{-i,--include-aa}'[include the AA peak in CN2 and CN3 evaluation]' \
            '(-m --min-fraction)'{-m,--min-fraction}'[minimum distinguishable fraction of aberrant cells \[0.1\]]' \
            '(-p --peak-symmetry)'{-p,--peak-symmetry}'[peak symmetry threshold (0-1, larger is stricter) \[0.5\]]' \
            "*: :_files"

    }

    function _bcftools_roh {
        _arguments \
            '--AF-dflt[if AF is not known, use this allele frequency \[skip\]]' \
            '--AF-tag[use TAG for allele frequency]' \
            '--AF-file[read allele frequencies from file (CHR\tPOS\tREF,ALT\tAF)]:file:_files' \
            '(-b --buffer-size)'{-b,--buffer-size}'[buffer size and the number of overlapping sites, 0 for unlimited \[0\]]' \
            '(-e --estimate-AF)'{-e,--estimate-AF}'[estimate AF from FORMAT/TAG (GT or PL) of all samples ("-") or samples listed]:file:_files' \
            '--exclude[exclude sites for which the expression is true]' \
            '(-G --GTs-only)'{-G,--GTs-only}'[use GTs and ignore PLs, instead using <float> for PL of the two least likely genotypes.]' \
            '--include[select sites for which the expression is true]' \
            '(-i --ignore-homref)'{-i,--ignore-homref}'[skip hom-ref genotypes (0/0)]' \
            '--include-noalt[include sites with no ALT allele (ignored by default)]' \
            '(-I --skip-indels)'{-I,--skip-indels}'[skip indels as their genotypes are enriched for errors]' \
            '(-m --genetic-map)'{-m,--genetic-map}'[genetic map in IMPUTE2 format, single file or mask, where string "{CHROM}"]:file:_files' \
            '(-M --rec-rate)'{-M,--rec-rate}'[constant recombination rate per bp]' \
            '(-o --output)'{-o,--output}'[write output to a file \[standard output\]]:file:_files' \
            '(-O --output-type)'{-O,--output-type}'[output s:per-site, r:regions, z:compressed \[sr\]]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of samples to analyze \[all samples\]]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to analyze \[all samples\]]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-a --hw-to-az)'{-a,--hw-to-az}'[P(AZ|HW) transition probability from HW (Hardy-Weinberg) to AZ (autozygous) state \[6.7e-8\]]' \
            '(-H --az-to-hw)'{-H,--az-to-hw}'[P(HW|AZ) transition probability from AZ to HW state \[5e-9\]]' \
            '(-V --viterbi-training)'{-V,--viterbi-training}'[estimate HMM parameters, <float> is the convergence threshold, e.g. 1e-10 (experimental)]' \
            "*: :_files"

    }

    function _bcftools_stats {
        _arguments \
            '--af-bins[allele frequency bins, a list (0.1,0.5,1) or a file (0.1\n0.5\n1)]' \
            '--af-tag[allele frequency tag to use, by default estimated from AN,AC or GT]' \
            '(-1 --1st-allele-only)'{-1,--1st-allele-only}'[include only 1st allele at multiallelic sites]' \
            '(-c --collapse)'{-c,--collapse}'[treat as identical records with <snps|indels|both|all|some|none>, see man page for details \[none\]]' \
            '(-d --depth)'{-d,--depth}'[depth distribution: min,max,bin size \[0,500,1\]]' \
            '(-e --exclude)'{-e,--exclude}'[exclude sites for which the expression is true (see man page for details)]' \
            '(-E --exons)'{-E,--exons}'[tab-delimited file with exons for indel frameshifts (chr,from,to; 1-based, inclusive, bgzip compressed)]:file:_files' \
            '(-f --apply-filters)'{-f,--apply-filters}'[require at least one of the listed FILTER strings (e.g. "PASS,.")]' \
            '(-F --fasta-ref)'{-F,--fasta-ref}'[faidx indexed reference sequence file to determine INDEL context]:file:_files' \
            '(-i --include)'{-i,--include}'[select sites for which the expression is true (see man page for details)]' \
            '(-I --split-by-ID)'{-I,--split-by-ID}'[collect stats for sites with ID separately (known vs novel)]' \
            '(-r --regions)'{-r,--regions}'[restrict to comma-separated list of regions]' \
            '(-R --regions-file)'{-R,--regions-file}'[restrict to regions listed in a file]:file:_files' \
            '(-s --samples)'{-s,--samples}'[list of samples for sample stats, "-" to include all samples]' \
            '(-S --samples-file)'{-S,--samples-file}'[file of samples to include]:file:_files' \
            '(-t --targets)'{-t,--targets}'[similar to -r but streams rather than index-jumps]' \
            '(-T --targets-file)'{-T,--targets-file}'[similar to -R but streams rather than index-jumps]:file:_files' \
            '(-u --user-tstv)'{-u,--user-tstv}'[collect Ts/Tv stats for any tag using the given binning \[0:1:100\]]' \
            '--threads[use multithreading with <int> worker threads \[0\]]' \
            '(-v --verbose)'{-v,--verbose}'[produce verbose per-site and per-sample output]' \
            "*: :_files"

    }


function _bcftools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'index:index VCF/BCF files'
            'annotate:annotate and edit VCF/BCF files'
            'concat:concatenate VCF/BCF files from the same set of samples'
            'convert:convert VCF/BCF files to different formats and back'
            'isec:intersections of VCF/BCF files'
            'merge:merge VCF/BCF files files from non-overlapping sample sets'
            'norm:left-align and normalize indels'
            'plugin:user-defined plugins'
            'query:transform VCF/BCF into user-defined formats'
            'reheader:modify VCF/BCF header, change sample names'
            'sort:sort VCF/BCF file'
            'view:VCF/BCF conversion, view, subset and filter VCF/BCF files'
            'call:SNP/indel calling'
            'consensus:create consensus sequence by applying VCF variants'
            'cnv:HMM CNV calling'
            'csq:call variation consequences'
            'filter:filter VCF/BCF files using fixed thresholds'
            'gtcheck:check sample concordance, detect sample swaps and contamination'
            'mpileup:multi-way pileup producing genotype likelihoods'
            'polysomy:detect number of chromosomal copies'
            'roh:identify runs of autozygosity (HMM)'
            'stats:produce VCF/BCF stats'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (index)
            _bcftools_index
            ;;

        (annotate)
            _bcftools_annotate
            ;;

        (concat)
            _bcftools_concat
            ;;

        (convert)
            _bcftools_convert
            ;;

        (isec)
            _bcftools_isec
            ;;

        (merge)
            _bcftools_merge
            ;;

        (norm)
            _bcftools_norm
            ;;

        (plugin)
            _bcftools_plugin
            ;;

        (query)
            _bcftools_query
            ;;

        (reheader)
            _bcftools_reheader
            ;;

        (sort)
            _bcftools_sort
            ;;

        (view)
            _bcftools_view
            ;;

        (call)
            _bcftools_call
            ;;

        (consensus)
            _bcftools_consensus
            ;;

        (cnv)
            _bcftools_cnv
            ;;

        (csq)
            _bcftools_csq
            ;;

        (filter)
            _bcftools_filter
            ;;

        (gtcheck)
            _bcftools_gtcheck
            ;;

        (mpileup)
            _bcftools_mpileup
            ;;

        (polysomy)
            _bcftools_polysomy
            ;;

        (roh)
            _bcftools_roh
            ;;

        (stats)
            _bcftools_stats
            ;;

        esac
        ;;
     esac

}

