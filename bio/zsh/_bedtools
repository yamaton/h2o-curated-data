#compdef _bedtools bedtools

# Generated with h2o 0.1.18

    function _bedtools_intersect {
        _arguments \
            '-wa[Write the original entry in A for each overlap.]' \
            '-wb[Write the original entry in B for each overlap.]' \
            '-loj[Perform a "left outer join". That is, for each feature in A]' \
            '-wo[Write the original A and B entries plus the number of base]' \
            '-wao[Write the original A and B entries plus the number of base]' \
            '-u[Write the original A entry _once_ if _any_ overlaps found in B.]' \
            '-c[For each entry in A, report the number of overlaps with B.]' \
            '-C[For each entry in A, separately report the number of]' \
            '-v[Only report those entries in A that have _no overlaps_ with B.]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-sorted[Use the "chromsweep" algorithm for sorted (-k1,1 -k2,2n) input.]' \
            '-names[When using multiple databases, provide an alias for each that]' \
            '-filenames[When using multiple databases, show each complete filename]' \
            '-sortout[When using multiple databases, sort the output DB hits]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_window {
        _arguments \
            '-abam[The A input file is in BAM format. Output will be BAM as well. Replaces -a.]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            '-bed[When using BAM input (-abam), write output as BED. The default]' \
            '-w[Base pairs added upstream and downstream of each entry]' \
            '-l[Base pairs added upstream (left of) of each entry]' \
            '-r[Base pairs added downstream (right of) of each entry]' \
            '-sw[Define -l and -r based on strand. For example if used, -l 500]' \
            '-sm[Only report hits in B that overlap A on the _same_ strand.]' \
            '-Sm[Only report hits in B that overlap A on the _opposite_ strand.]' \
            '-u[Write the original A entry _once_ if _any_ overlaps found in B.]' \
            '-c[For each entry in A, report the number of overlaps with B.]' \
            '-v[Only report those entries in A that have _no overlaps_ with B.]' \
            '-header[Print the header from the A file prior to results.]' \
            "*: :_files"

    }

    function _bedtools_closest {
        _arguments \
            '-d[In addition to the closest feature in B,]' \
            '-D[Like -d, report the closest feature in B, and its distance to A]' \
            '-io[Ignore features in B that overlap A. That is, we want close,]' \
            '-iu[Ignore features in B that are upstream of features in A.]' \
            '-id[Ignore features in B that are downstream of features in A.]' \
            '-fu[Choose first from features in B that are upstream of features in A.]' \
            '-fd[Choose first from features in B that are downstream of features in A.]' \
            '-t[How ties for closest feature are handled. This occurs when two]' \
            '-mdb[How multiple databases are resolved.]' \
            '-k[Report the k closest hits. Default is 1. If tieMode = "all",]' \
            '-N[Require that the query and the closest hit have different names.]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-names[When using multiple databases, provide an alias for each that]' \
            '-filenames[When using multiple databases, show each complete filename]' \
            '-sortout[When using multiple databases, sort the output DB hits]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_coverage {
        _arguments \
            '-hist[Report a histogram of coverage for each feature in A]' \
            '-d[Report the depth at each position in each A feature.]' \
            '-counts[Only report the count of overlaps, don'\''t compute fraction, etc.]' \
            '-mean[Report the mean depth of all positions in each A feature.]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-sorted[Use the "chromsweep" algorithm for sorted (-k1,1 -k2,2n) input.]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_map {
        _arguments \
            '-c[Specify columns from the B file to map onto intervals in A.]' \
            '-o[Specify the operation that should be applied to -c.]' \
            '-delim[Specify a custom delimiter for the collapse operations.]' \
            '-prec[Sets the decimal precision for output (Default: 5)]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_genomecov {
        _arguments \
            '-ibam[The input file is in BAM format.]' \
            '-d[Report the depth at each genome position (with one-based coordinates).]' \
            '-dz[Report the depth at each genome position (with zero-based coordinates).]' \
            '-bg[Report depth in BedGraph format. For details, see:]' \
            '-bga[Report depth in BedGraph format, as above (-bg).]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-ignoreD[Ignore local deletions (CIGAR "D" operations) in BAM entries]' \
            '-strand[Calculate coverage of intervals from a specific strand.]' \
            '-pc[Calculate coverage of pair-end fragments.]' \
            '-fs[Force to use provided fragment size instead of read length]' \
            '-du[Change strand af the mate read (so both reads from the same strand) useful for strand specific]' \
            '-5[Calculate coverage of 5" positions (instead of entire interval).]' \
            '-3[Calculate coverage of 3" positions (instead of entire interval).]' \
            '-max[Combine all positions with a depth >= max into]' \
            '-scale[Scale the coverage by a constant factor.]' \
            '-trackline[Adds a UCSC/Genome-Browser track line definition in the first line of the output.]' \
            '-trackopts[Writes additional track line definition parameters in the first line.]' \
            '-trackopts[Note the use of single-quotes if you have spaces in your parameters.]' \
            "*: :_files"

    }

    function _bedtools_merge {
        _arguments \
            '-s[Force strandedness. That is, only merge features]' \
            '-S[Force merge for one specific strand only.]' \
            '-d[Maximum distance between features allowed for features]' \
            '-c[Specify columns from the B file to map onto intervals in A.]' \
            '-o[Specify the operation that should be applied to -c.]' \
            '-delim[Specify a custom delimiter for the collapse operations.]' \
            '-prec[Sets the decimal precision for output (Default: 5)]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_cluster {
        _arguments \
            '-s[Force strandedness. That is, only merge features]' \
            '-d[Maximum distance between features allowed for features]' \
            "*: :_files"

    }

    function _bedtools_complement {
        _arguments \
            '-L[Limit output to solely the chromosomes with records in the input file.]' \
            "*: :_files"

    }

    function _bedtools_shift {
        _arguments \
            '-s[Shift the BED/GFF/VCF entry -s base pairs.]' \
            '-p[Shift features on the + strand by -p base pairs.]' \
            '-m[Shift features on the - strand by -m base pairs.]' \
            '-pct[Define -s, -m and -p as a fraction of the feature'\''s length.]' \
            '-header[Print the header from the input file prior to results.]' \
            "*: :_files"

    }

    function _bedtools_subtract {
        _arguments \
            '-A[Remove entire feature if any overlap. That is, by default,]' \
            '-N[Same as -A except when used with -f, the amount is the sum]' \
            '-wb[Write the original entry in B for each overlap.]' \
            '-wo[Write the original A and B entries plus the number of base]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-sorted[Use the "chromsweep" algorithm for sorted (-k1,1 -k2,2n) input.]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_slop {
        _arguments \
            '-b[Increase the BED/GFF/VCF entry -b base pairs in each direction.]' \
            '-l[The number of base pairs to subtract from the start coordinate.]' \
            '-r[The number of base pairs to add to the end coordinate.]' \
            '-s[Define -l and -r based on strand.]' \
            '-pct[Define -l and -r as a fraction of the feature'\''s length.]' \
            '-header[Print the header from the input file prior to results.]' \
            "*: :_files"

    }

    function _bedtools_flank {
        _arguments \
            '-b[Create flanking interval(s) using -b base pairs in each direction.]' \
            '-l[The number of base pairs that a flank should start from]' \
            '-r[The number of base pairs that a flank should end from]' \
            '-s[Define -l and -r based on strand.]' \
            '-pct[Define -l and -r as a fraction of the feature'\''s length.]' \
            '-header[Print the header from the input file prior to results.]' \
            "*: :_files"

    }

    function _bedtools_sort {
        _arguments \
            '-sizeA[Sort by feature size in ascending order.]' \
            '-sizeD[Sort by feature size in descending order.]' \
            '-chrThenSizeA[Sort by chrom (asc), then feature size (asc).]' \
            '-chrThenSizeD[Sort by chrom (asc), then feature size (desc).]' \
            '-chrThenScoreA[Sort by chrom (asc), then score (asc).]' \
            '-chrThenScoreD[Sort by chrom (asc), then score (desc).]' \
            '-g[Sort according to the chromosomes declared in "genome.txt"]' \
            '-faidx[Sort according to the chromosomes declared in "names.txt"]' \
            '-header[Print the header from the A file prior to results.]' \
            "*: :_files"

    }

    function _bedtools_random {
        _arguments \
            '-l[The length of the intervals to generate.]' \
            '-n[The number of intervals to generate.]' \
            '-seed[Supply an integer seed for the shuffling.]' \
            "*: :_files"

    }

    function _bedtools_shuffle {
        _arguments \
            '-excl[A BED/GFF/VCF file of coordinates in which features in -i]' \
            '-incl[Instead of randomly placing features in a genome, the -incl]' \
            '-chrom[Keep features in -i on the same chromosome.]' \
            '-seed[Supply an integer seed for the shuffling.]' \
            '-f[Maximum overlap (as a fraction of the -i feature) with an -excl]' \
            '-chromFirst[Instead of choosing a position randomly among the entire]' \
            '-bedpe[Indicate that the A file is in BEDPE format.]' \
            '-maxTries[Max. number of attempts to find a home for a shuffled interval]' \
            '-noOverlapping[Don'\''t allow shuffled intervals to overlap.]' \
            '-allowBeyondChromEnd[Allow shuffled intervals to be relocated to a position]' \
            "*: :_files"

    }

    function _bedtools_sample {
        _arguments \
            '-n[The number of records to generate.]' \
            '-seed[Supply an integer seed for the shuffling.]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            '-s[Require same strandedness. That is, only give records]' \
            '-header[Print the header from the input file prior to results.]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_spacing {
        _arguments \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_annotate {
        _arguments \
            '-names[A list of names (one / file) to describe each file in -i.]' \
            '-counts[Report the count of features in each file that overlap -i.]' \
            '-both[Report the counts followed by the % coverage.]' \
            '-s[Require same strandedness. That is, only counts overlaps]' \
            '-S[Require different strandedness. That is, only count overlaps]' \
            "*: :_files"

    }

    function _bedtools_multiinter {
        _arguments \
            "*: :_files"

    }

    function _bedtools_unionbedg {
        _arguments \
            "*: :_files"

    }

    function _bedtools_pairtobed {
        _arguments \
            '-abam[The A input file is in BAM format. Output will be BAM as well. Replaces -a.]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            '-bedpe[When using BAM input (-abam), write output as BEDPE. The default]' \
            '-ed[Use BAM total edit distance (NM tag) for BEDPE score.]' \
            '-f[Minimum overlap required as fraction of A (e.g. 0.05).]' \
            '-s[Require same strandedness when finding overlaps.]' \
            '-S[Require different strandedness when finding overlaps.]' \
            '-type[Approach to reporting overlaps between BEDPE and BED.]' \
            "*: :_files"

    }

    function _bedtools_pairtopair {
        _arguments \
            '-f[Minimum overlap required as fraction of A (e.g. 0.05).]' \
            '-type[Approach to reporting overlaps between A and B.]' \
            '-slop[The amount of slop (in b.p.). to be added to each footprint of A.]' \
            '-ss[Add slop based to each BEDPE footprint based on strand.]' \
            '-is[Ignore strands when searching for overlaps.]' \
            '-rdn[Require the hits to have different names (i.e. avoid self-hits).]' \
            "*: :_files"

    }

    function _bedtools_bamtobed {
        _arguments \
            '-bedpe[Write BEDPE format.]' \
            '-mate1[When writing BEDPE (-bedpe) format,]' \
            '-bed12[Write "blocked" BED format (aka "BED12"). Forces -split.]' \
            '-split[Report "split" BAM alignments as separate BED entries.]' \
            '-splitD[Split alignments based on N and D CIGAR operators.]' \
            '-ed[Use BAM edit distance (NM tag) for BED score.]' \
            '-tag[Use other NUMERIC BAM alignment tag for BED score.]' \
            '-color[An R,G,B string for the color used with BED12 format.]' \
            '-cigar[Add the CIGAR string to the BED entry as a 7th column.]' \
            "*: :_files"

    }

    function _bedtools_bedtobam {
        _arguments \
            '-mapq[Set the mappinq quality for the BAM records.]' \
            '-bed12[The BED file is in BED12 format. The BAM CIGAR]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            "*: :_files"

    }

    function _bedtools_bamtofastq {
        _arguments \
            '-fq2[FASTQ for second end. Used if BAM contains paired-end data.]' \
            '-tags[Create FASTQ based on the mate info]' \
            "*: :_files"

    }

    function _bedtools_bedpetobam {
        _arguments \
            '-mapq[Set the mappinq quality for the BAM records.]' \
            '-ubam[Write uncompressed BAM output. Default writes compressed BAM.]' \
            "*: :_files"

    }

    function _bedtools_bed12tobed6 {
        _arguments \
            '-n[Force the score to be the (1-based) block number from the BED12.]' \
            "*: :_files"

    }

    function _bedtools_getfasta {
        _arguments \
            '-fi[Input FASTA file]' \
            '-fo[Output file (opt., default is STDOUT]' \
            '-bed[BED/GFF/VCF file of ranges to extract from -fi]' \
            '-name[Use the name field and coordinates for the FASTA header]' \
            '-name+[(deprecated) Use the name field and coordinates for the FASTA header]' \
            '-nameOnly[Use the name field for the FASTA header]' \
            '-split[Given BED12 fmt., extract and concatenate the sequences]' \
            '-tab[Write output in TAB delimited format.]' \
            '-bedOut[Report extract sequences in a tab-delimited BED format instead of in FASTA format.]' \
            '-s[Force strandedness. If the feature occupies the antisense,]' \
            '-fullHeader[Use full fasta header.]' \
            '-rna[The FASTA is RNA not DNA. Reverse complementation handled accordingly.]' \
            "*: :_files"

    }

    function _bedtools_maskfasta {
        _arguments \
            '-fi[Input FASTA file]' \
            '-bed[BED/GFF/VCF file of ranges to mask in -fi]' \
            '-fo[Output FASTA file]' \
            '-soft[Enforce "soft" masking.]' \
            '-mc[Replace masking character.]' \
            '-fullHeader[Use full fasta header.]' \
            "*: :_files"

    }

    function _bedtools_nuc {
        _arguments \
            '-fi[Input FASTA file]' \
            '-bed[BED/GFF/VCF file of ranges to extract from -fi]' \
            '-s[Profile the sequence according to strand.]' \
            '-seq[Print the extracted sequence]' \
            '-pattern[Report the number of times a user-defined sequence]' \
            '-C[Ignore case when matching -pattern. By defaulty, case matters.]' \
            '-fullHeader[Use full fasta header.]' \
            "*: :_files"

    }

    function _bedtools_multicov {
        _arguments \
            '-bams[The bam files.]' \
            '-bed[The bed file.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of each -bed record.]' \
            '-r[Require that the fraction overlap be reciprocal for each -bed and B.]' \
            '-q[Minimum mapping quality allowed. Default is 0.]' \
            '-D[Include duplicate reads. Default counts non-duplicates only]' \
            '-F[Include failed-QC reads. Default counts pass-QC reads only]' \
            '-p[Only count proper pairs. Default counts all alignments with]' \
            "*: :_files"

    }

    function _bedtools_tag {
        _arguments \
            '-s[Require overlaps on the same strand. That is, only tag alignments that have the same]' \
            '-S[Require overlaps on the opposite strand. That is, only tag alignments that have the opposite]' \
            '-f[Minimum overlap required as a fraction of the alignment.]' \
            '-tag[Dictate what the tag should be. Default is YB.]' \
            '-names[Use the name field from the annotation files to populate tags.]' \
            '-scores[Use the score field from the annotation files to populate tags.]' \
            '-intervals[Use the full interval (including name, score, and strand) to populate tags.]' \
            "*: :_files"

    }

    function _bedtools_jaccard {
        _arguments \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_reldist {
        _arguments \
            '-detail[Report the relativedistance for each interval in A]' \
            "*: :_files"

    }

    function _bedtools_fisher {
        _arguments \
            '-m[Merge overlapping intervals before]' \
            '-s[Require same strandedness. That is, only report hits in B]' \
            '-S[Require different strandedness. That is, only report hits in B]' \
            '-f[Minimum overlap required as a fraction of A.]' \
            '-F[Minimum overlap required as a fraction of B.]' \
            '-r[Require that the fraction overlap be reciprocal for A AND B.]' \
            '-e[Require that the minimum fraction be satisfied for A OR B.]' \
            '-split[Treat "split" BAM or BED12 entries as distinct BED intervals.]' \
            '-g[Provide a genome file to enforce consistent chromosome sort order]' \
            '-nonamecheck[For sorted data, don'\''t throw an error if the file has different naming conventions]' \
            '-bed[If using BAM input, write output as BED.]' \
            '-header[Print the header from the A file prior to results.]' \
            '-nobuf[Disable buffered output. Using this option will cause each line]' \
            '-iobuf[Specify amount of memory to use for input buffer.]' \
            "*: :_files"

    }

    function _bedtools_overlap {
        _arguments \
            '-i[Input file. Use "stdin" for pipes.]' \
            '-cols[Specify the columns (1-based) for the starts and ends of the]' \
            "*: :_files"

    }

    function _bedtools_igv {
        _arguments \
            '-path[The full path to which the IGV snapshots should be written.]' \
            '-sess[The full path to an existing IGV session file to be]' \
            '-sort[The type of BAM sorting you would like to apply to each image.]' \
            '-clps[Collapse the aligned reads prior to taking a snapshot.]' \
            '-name[Use the "name" field (column 4) for each image'\''s filename.]' \
            '-slop[Number of flanking base pairs on the left & right of the image.]' \
            '-img[The type of image to be created.]' \
            "*: :_files"

    }

    function _bedtools_links {
        _arguments \
            '-base[The browser basename. Default: http://genome.ucsc.edu]' \
            '-org[The organism. Default: human]' \
            '-db[The build. Default: hg18]' \
            '-base[-org mouse]' \
            "*: :_files"

    }

    function _bedtools_makewindows {
        _arguments \
            '-g[Genome file size (see notes below).]' \
            '-b[BED file (with chrom,start,end fields).]' \
            '-w[Divide each input interval (either a chromosome or a BED interval)]' \
            '-s[Step size: i.e., how many base pairs to step before]' \
            '-n[Divide each input interval (either a chromosome or a BED interval)]' \
            '-reverse[Reverse numbering of windows in the output, i.e. report]' \
            '-i[The default output is 3 columns: chrom, start, end .]' \
            "*: :_files"

    }

    function _bedtools_groupby {
        _arguments \
            '-i[Input file. Assumes "stdin" if omitted.]' \
            '(-g -grp)'{-g,-grp}'[Specify the columns (1-based) for the grouping.]' \
            '(-c -opCols)'{-c,-opCols}'[Specify the column (1-based) that should be summarized.]' \
            '(-o -ops)'{-o,-ops}'[Specify the operation that should be applied to opCol.]' \
            '-full[Print all columns from input file. The first line in the group is used.]' \
            '-inheader[Input file has a header line - the first line will be ignored.]' \
            '-outheader[Print header line in the output, detailing the column names.]' \
            '-header[same as '\''-inheader -outheader'\'']' \
            '-ignorecase[Group values regardless of upper/lower case.]' \
            '-prec[Sets the decimal precision for output (Default: 5)]' \
            '-delim[Specify a custom delimiter for the collapse operations.]' \
            "*: :_files"

    }

    function _bedtools_expand {
        _arguments \
            '-i[Input file. Assumes "stdin" if omitted.]' \
            '-c[Specify the column (1-based) that should be summarized.]' \
            "*: :_files"

    }

    function _bedtools_split {
        _arguments \
            '(-i --input)'{-i,--input}'[BED input file (req'\''d).]:file:_files' \
            '(-n --number)'{-n,--number}'[Number of files to create (req'\''d).]' \
            '(-p --prefix)'{-p,--prefix}'[Output BED file prefix.]' \
            '(-a --algorithm)'{-a,--algorithm}'[Algorithm used to split data.]' \
            '(-a --algorithm)'{-a,--algorithm}'[Algorithm used to split data.   * size (default): uses a heuristic algorithm to group the items]' \
            '(-h --help)'{-h,--help}'[Print help (this screen).]' \
            '(-v --version)'{-v,--version}'[Print version.]' \
            "*: :_files"

    }

    function _bedtools_summary {
        _arguments \
            "*: :_files"

    }


function _bedtools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'intersect:Find overlapping intervals in various ways.'
            'window:Find overlapping intervals within a window around an interval.'
            'closest:Find the closest, potentially non-overlapping interval.'
            'coverage:Compute the coverage over defined intervals.'
            'map:Apply a function to a column for each overlapping interval.'
            'genomecov:Compute the coverage over an entire genome.'
            'merge:Combine overlapping/nearby intervals into a single interval.'
            'cluster:Cluster (but don'\''t merge) overlapping/nearby intervals.'
            'complement:Extract intervals _not_ represented by an interval file.'
            'shift:Adjust the position of intervals.'
            'subtract:Remove intervals based on overlaps b/w two files.'
            'slop:Adjust the size of intervals.'
            'flank:Create new intervals from the flanks of existing intervals.'
            'sort:Order the intervals in a file.'
            'random:Generate random intervals in a genome.'
            'shuffle:Randomly redistribute intervals in a genome.'
            'sample:Sample random records from file using reservoir sampling.'
            'spacing:Report the gap lengths between intervals in a file.'
            'annotate:Annotate coverage of features from multiple files.'
            'multiinter:Identifies common intervals among multiple interval files.'
            'unionbedg:Combines coverage intervals from multiple BEDGRAPH files.'
            'pairtobed:Find pairs that overlap intervals in various ways.'
            'pairtopair:Find pairs that overlap other pairs in various ways.'
            'bamtobed:Convert BAM alignments to BED (& other) formats.'
            'bedtobam:Convert intervals to BAM records.'
            'bamtofastq:Convert BAM records to FASTQ records.'
            'bedpetobam:Convert BEDPE intervals to BAM records.'
            'bed12tobed6:Breaks BED12 intervals into discrete BED6 intervals.'
            'getfasta:Use intervals to extract sequences from a FASTA file.'
            'maskfasta:Use intervals to mask sequences from a FASTA file.'
            'nuc:Profile the nucleotide content of intervals in a FASTA file.'
            'multicov:Counts coverage from multiple BAMs at specific intervals.'
            'tag:Tag BAM alignments based on overlaps with interval files.'
            'jaccard:Calculate the Jaccard statistic b/w two sets of intervals.'
            'reldist:Calculate the distribution of relative distances b/w two files.'
            'fisher:Calculate Fisher statistic b/w two feature files.'
            'overlap:Computes the amount of overlap from two intervals.'
            'igv:Create an IGV snapshot batch script.'
            'links:Create a HTML page of links to UCSC locations.'
            'makewindows:Make interval "windows" across a genome.'
            'groupby:Group by common cols. & summarize oth. cols. (~ SQL "groupBy")'
            'expand:Replicate lines based on lists of values in columns.'
            'split:Split a file into multiple files with equal records or base pairs.'
            'summary:Statistical summary of intervals in a file.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cram-ref[Reference used by a CRAM input]' \
        '--help[Print this help menu.]' \
        '--version[What version of bedtools are you using?.]' \
        '--contact[Feature requests, bugs, mailing lists, etc.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (intersect)
            _bedtools_intersect
            ;;

        (window)
            _bedtools_window
            ;;

        (closest)
            _bedtools_closest
            ;;

        (coverage)
            _bedtools_coverage
            ;;

        (map)
            _bedtools_map
            ;;

        (genomecov)
            _bedtools_genomecov
            ;;

        (merge)
            _bedtools_merge
            ;;

        (cluster)
            _bedtools_cluster
            ;;

        (complement)
            _bedtools_complement
            ;;

        (shift)
            _bedtools_shift
            ;;

        (subtract)
            _bedtools_subtract
            ;;

        (slop)
            _bedtools_slop
            ;;

        (flank)
            _bedtools_flank
            ;;

        (sort)
            _bedtools_sort
            ;;

        (random)
            _bedtools_random
            ;;

        (shuffle)
            _bedtools_shuffle
            ;;

        (sample)
            _bedtools_sample
            ;;

        (spacing)
            _bedtools_spacing
            ;;

        (annotate)
            _bedtools_annotate
            ;;

        (multiinter)
            _bedtools_multiinter
            ;;

        (unionbedg)
            _bedtools_unionbedg
            ;;

        (pairtobed)
            _bedtools_pairtobed
            ;;

        (pairtopair)
            _bedtools_pairtopair
            ;;

        (bamtobed)
            _bedtools_bamtobed
            ;;

        (bedtobam)
            _bedtools_bedtobam
            ;;

        (bamtofastq)
            _bedtools_bamtofastq
            ;;

        (bedpetobam)
            _bedtools_bedpetobam
            ;;

        (bed12tobed6)
            _bedtools_bed12tobed6
            ;;

        (getfasta)
            _bedtools_getfasta
            ;;

        (maskfasta)
            _bedtools_maskfasta
            ;;

        (nuc)
            _bedtools_nuc
            ;;

        (multicov)
            _bedtools_multicov
            ;;

        (tag)
            _bedtools_tag
            ;;

        (jaccard)
            _bedtools_jaccard
            ;;

        (reldist)
            _bedtools_reldist
            ;;

        (fisher)
            _bedtools_fisher
            ;;

        (overlap)
            _bedtools_overlap
            ;;

        (igv)
            _bedtools_igv
            ;;

        (links)
            _bedtools_links
            ;;

        (makewindows)
            _bedtools_makewindows
            ;;

        (groupby)
            _bedtools_groupby
            ;;

        (expand)
            _bedtools_expand
            ;;

        (split)
            _bedtools_split
            ;;

        (summary)
            _bedtools_summary
            ;;

        esac
        ;;
     esac

}

