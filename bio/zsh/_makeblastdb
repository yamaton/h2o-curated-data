#compdef _makeblastdb makeblastdb

# Generated with h2o 0.1.18


function _makeblastdb {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-dbtype[Molecule type of target db]' \
        '-h[Print USAGE and DESCRIPTION;  ignore all other parameters]' \
        '-help[Print USAGE, DESCRIPTION and ARGUMENTS; ignore all other parameters]' \
        '-version[Print version number;  ignore other arguments]' \
        '-in[Input file/database name (Default = `-'\'')]' \
        '-input_type[Type of the data specified in input_file (Default = `fasta'\'')]' \
        '-title[Title for BLAST database (Default = input file name provided to -in argument)]' \
        '-parse_seqids[Option to parse seqid for FASTA input if set, for all other input types seqids are parsed automatically]' \
        '-hash_index[Create index of sequence hash values.]' \
        '-mask_data[Comma-separated list of input files containing masking data as produced by NCBI masking applications (e.g. dustmasker, segmasker, windowmasker)]' \
        '-mask_id[Comma-separated list of strings to uniquely identify the masking algorithm (* Requires:  mask_data * Incompatible with:  gi_mask)]' \
        '-mask_desc[Comma-separated list of free form strings to describe the masking algorithm (* Requires:  mask_id)]' \
        '-gi_mask[Create GI indexed masking data. (* Requires:  parse_seqids, * Incompatible with:  mask_id)]' \
        '-gi_mask_name[Comma-separated list of masking data output files. * Requires: mask_data, gi_mask]' \
        '-out[Name of BLAST database to be created  Default = input file name provided to -in argumentRequired if multiple file(s)/database(s) are provided as input]' \
        '-blastdb_version[Version of BLAST database to be created (Default = `5'\'')]' \
        '-max_file_sz[Maximum file size for BLAST database files (Default = `1GB'\'')]' \
        '-logfile[File to which the program log should be redirected]' \
        '-taxid[Taxonomy ID to assign to all sequences (Incompatible with: taxid_map)]' \
        '-taxid_map[Text file mapping sequence IDs to taxonomy IDs.]' \
        '1: :_commands' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

