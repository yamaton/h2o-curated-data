#compdef _nanopolish nanopolish

# Generated with h2o 0.1.18

    function _nanopolish_call-methylation {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-r --reads)'{-r,--reads}'[the ONT reads are in fasta/fastq FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the genome we are calling methylation for is in fasta FILE]' \
            '(-q --methylation)'{-q,--methylation}'[the type of methylation (cpg,gpc,dam,dcm)]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '--watch[watch the sequencing run directory DIR and call methylation as data is generated]' \
            '--watch-write-bam[in watch mode, write the alignments for each fastq]' \
            '(-c --watch-process-total)'{-c,--watch-process-total}'[in watch mode, there are TOTAL calling processes running against this directory]' \
            '(-i --watch-process-index)'{-i,--watch-process-index}'[in watch mode, the index of this process is IDX   the previous two options allow you to run multiple independent methylation calling processes against a single directory. Each process will only call files when X mod TOTAL == IDX, where X is the suffix of the fast5 file.]' \
            '--progress[print out a progress message]' \
            '(-K --batchsize)'{-K,--batchsize}'[the batch size (default: 512)]' \
            "*: :_files"

    }

    function _nanopolish_eventalign {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '--sam[write output in SAM format]' \
            '(-w --window)'{-w,--window}'[compute the consensus for window STR (format: ctg:start_id-end_id)]' \
            '(-r --reads)'{-r,--reads}'[the 2D ONT reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the genome we are computing a consensus for is in FILE]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '(-q --min-mapping-quality)'{-q,--min-mapping-quality}'[only use reads with mapping quality at least NUM (default: 0)]' \
            '--scale-events[scale events to the model, rather than vice-versa]' \
            '--progress[print out a progress message]' \
            '(-n --print-read-names)'{-n,--print-read-names}'[print read names instead of indexes]' \
            '--summary[summarize the alignment of each read/strand in FILE]' \
            '--samples[write the raw samples for the event to the tsv output]' \
            '--signal-index[write the raw signal start and end index values for the event to the tsv output]' \
            '--models-fofn[read alternative k-mer models from FILE]' \
            "*: :_files"

    }

    function _nanopolish_extract {
        _arguments \
            '--help[display this help and exit]' \
            '--version[display version]' \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '(-r --recurse)'{-r,--recurse}'[recurse into subdirectories]' \
            '(-q --fastq)'{-q,--fastq}'[extract fastq (default: fasta)]' \
            '(-t --type)'{-t,--type}'[read type: template, complement, 2d, 2d-or-template, any]' \
            '(-b --basecaller)'{-b,--basecaller}'[consider only data produced by basecaller NAME,]' \
            '(-o --output)'{-o,--output}'[write output to FILE]' \
            "*: :_files"

    }

    function _nanopolish_getmodel {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            "*: :_files"

    }

    function _nanopolish_index {
        _arguments \
            '--help[display this help and exit]' \
            '--version[display version]' \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '(-d --directory)'{-d,--directory}'[path to the directory containing the raw ONT signal files. This option can be given multiple times.]' \
            '(-s --sequencing-summary)'{-s,--sequencing-summary}'[the sequencing summary file from albacore, providing this option will make indexing much faster]' \
            '(-f --summary-fofn)'{-f,--summary-fofn}'[file containing the paths to the sequencing summary files (one per line)]' \
            "*: :_files"

    }

    function _nanopolish_methyltrain {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-m --models-fofn)'{-m,--models-fofn}'[read the models to be trained from the FOFN]' \
            '--train-kmers[train methylated, unmethylated or all kmers]' \
            '(-c --calibrate)'{-c,--calibrate}'[recalibrate aligned reads to model before training]' \
            '--no-update-models[do not write out trained models]' \
            '--output-scores[optionally output read scores during training]' \
            '(-r --reads)'{-r,--reads}'[the ONT reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the reference genome is in FILE]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '--filter-policy[filter reads for \[R7\] or \[R9\] project]' \
            '(-s --out-suffix)'{-s,--out-suffix}'[name output files like <strand>.out_suffix]' \
            '--out-fofn[write the names of the output models into FILE]' \
            '--rounds[number of training rounds to perform]' \
            '--max-reads[stop after processing NUM reads in each round]' \
            '--progress[print out a progress message]' \
            '--stdv[enable stdv modelling]' \
            '--max-events[use NUM events for training (default: 1000)]' \
            "*: :_files"

    }

    function _nanopolish_phase-reads {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-r --reads)'{-r,--reads}'[the ONT reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the reference genome is in FILE]' \
            '(-w --window)'{-w,--window}'[only phase reads in the window STR (format: ctg:start-end)]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '--progress[print out a progress message]' \
            "*: :_files"

    }

    function _nanopolish_polya {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-w --window)'{-w,--window}'[only compute the poly-A lengths for reads in window STR (format: ctg:start_id-end_id)]' \
            '(-r --reads)'{-r,--reads}'[the 1D ONT direct RNA reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the reference genome assembly for the reads is in FILE]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            "*: :_files"

    }

    function _nanopolish_scorereads {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-m --models-fofn)'{-m,--models-fofn}'[optionally use these models rather than models in fast5]' \
            '(-c --calibrate)'{-c,--calibrate}'[recalibrate aligned reads to model before scoring]' \
            '(-z --zero-drift)'{-z,--zero-drift}'[if recalibrating, keep drift at 0]' \
            '(-i --individual-reads)'{-i,--individual-reads}'[optional comma-delimited list of readnames to score]' \
            '(-r --reads)'{-r,--reads}'[the ONT reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the genome assembly are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the genome we are computing a consensus for is in FILE]' \
            '(-w --window)'{-w,--window}'[score reads in the window STR (format: ctg:start-end)]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '--train-transitions[train new transition parameters from the input reads]' \
            "*: :_files"

    }

    function _nanopolish_variants {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '--snps[only call SNPs]' \
            '--consensus[run in consensus calling mode]' \
            '--fix-homopolymers[run the experimental homopolymer caller]' \
            '--faster[minimize compute time while slightly reducing consensus accuracy]' \
            '(-w --window)'{-w,--window}'[find variants in window STR (format: <chromsome_name>:<start>-<end>)]' \
            '(-r --reads)'{-r,--reads}'[the ONT reads are in fasta FILE]' \
            '(-b --bam)'{-b,--bam}'[the reads aligned to the reference genome are in bam FILE]' \
            '(-e --event-bam)'{-e,--event-bam}'[the events aligned to the reference genome are in bam FILE]' \
            '(-g --genome)'{-g,--genome}'[the reference genome is in FILE]' \
            '(-p --ploidy)'{-p,--ploidy}'[the ploidy level of the sequenced genome]' \
            '(-q --methylation-aware)'{-q,--methylation-aware}'[turn on methylation aware polishing and test motifs given in STR (example: -q dcm,dam)]' \
            '--genotype[call genotypes for the variants in the vcf FILE]' \
            '(-o --outfile)'{-o,--outfile}'[write result to FILE \[default: stdout\]]' \
            '(-t --threads)'{-t,--threads}'[use NUM threads (default: 1)]' \
            '(-m --min-candidate-frequency)'{-m,--min-candidate-frequency}'[extract candidate variants from the aligned reads when the variant frequency is at least F (default 0.2)]' \
            '(-i --indel-bias)'{-i,--indel-bias}'[bias HMM transition parameters to favor insertions (F<1) or deletions (F>1).   this value is automatically set depending on --consensus, but can be manually set if spurious indels are called]' \
            '(-d --min-candidate-depth)'{-d,--min-candidate-depth}'[extract candidate variants from the aligned reads when the depth is at least D (default: 20)]' \
            '(-x --max-haplotypes)'{-x,--max-haplotypes}'[consider at most N haplotype combinations (default: 1000)]' \
            '--min-flanking-sequence[distance from alignment end to calculate variants (default: 30)]' \
            '--max-rounds[perform N rounds of consensus sequence improvement (default: 50)]' \
            '(-c --candidates)'{-c,--candidates}'[read variant candidates from VCF, rather than discovering them from aligned reads]' \
            '--read-group[only use alignments with read group tag RG]' \
            '--calculate-all-support[when making a call, also calculate the support of the 3 other possible bases]' \
            '--models-fofn[read alternative k-mer models from FILE]' \
            "*: :_files"

    }

    function _nanopolish_vcf2fasta {
        _arguments \
            '(-v --verbose)'{-v,--verbose}'[display verbose output]' \
            '--version[display version]' \
            '--help[display this help and exit]' \
            '(-g --genome)'{-g,--genome}'[the input genome is in FILE]' \
            '(-f --fofn)'{-f,--fofn}'[read the list of VCF files to use from FILE]' \
            '--skip-checks[skip the sanity checks]' \
            "*: :_files"

    }


function _nanopolish {
    local line state

    function _commands {
        local -a commands
        commands=(
            'call-methylation:Classify nucleotides as methylated or not.'
            'eventalign:Align nanopore events to reference k-mers'
            'extract:Extract reads in fasta format'
            'getmodel:Write the pore models for the given read to stdout'
            'index:Build an index mapping from basecalled reads to the signals measured by the sequencer'
            'methyltrain:Train a methylation model'
            'phase-reads:Output a BAM file where each record shows the combination of alleles from variants.vcf that each read supports.'
            'polya:Estimate the length of the poly-A tail on direct RNA reads'
            'scorereads:Score reads against an alignment, model'
            'variants:Find SNPs using a signal-level HMM'
            'vcf2fasta:Write a new genome sequence by introducing variants from the input files'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (call-methylation)
            _nanopolish_call-methylation
            ;;

        (eventalign)
            _nanopolish_eventalign
            ;;

        (extract)
            _nanopolish_extract
            ;;

        (getmodel)
            _nanopolish_getmodel
            ;;

        (index)
            _nanopolish_index
            ;;

        (methyltrain)
            _nanopolish_methyltrain
            ;;

        (phase-reads)
            _nanopolish_phase-reads
            ;;

        (polya)
            _nanopolish_polya
            ;;

        (scorereads)
            _nanopolish_scorereads
            ;;

        (variants)
            _nanopolish_variants
            ;;

        (vcf2fasta)
            _nanopolish_vcf2fasta
            ;;

        esac
        ;;
     esac

}

