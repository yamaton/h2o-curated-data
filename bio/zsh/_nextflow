#compdef _nextflow nextflow

# Generated with h2o 0.1.18

    function _nextflow_clean {
        _arguments \
            '-after[Clean up runs executed after the specified one]' \
            '-before[Clean up runs executed before the specified one]' \
            '-but[Clean up all runs except the specified one]' \
            '(-n -dry-run)'{-n,-dry-run}'[Print names of file to be removed without deleting them Default: false]' \
            '(-f -force)'{-f,-force}'[Force clean command Default: false]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '(-k -keep-logs)'{-k,-keep-logs}'[Removes only temporary files but retains execution log entries and metadata Default: false]' \
            '(-q -quiet)'{-q,-quiet}'[Do not print names of files removed Default: false]' \
            "*: :_files"

    }

    function _nextflow_clone {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-hub[Service hub where the project is hosted]' \
            '-r[Revision to clone - It can be a git branch, tag or revision number]' \
            '-user[Private repository user name]' \
            "*: :_files"

    }

    function _nextflow_config {
        _arguments \
            '-flat[Print config using flat notation Default: false]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-profile[Choose a configuration profile]' \
            '-properties[Prints config using Java properties notation Default: false]' \
            '(-a -show-profiles)'{-a,-show-profiles}'[Show all configuration profiles Default: false]' \
            '-sort[Sort config attributes Default: false]' \
            "*: :_files"

    }

    function _nextflow_console {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            "*: :_files"

    }

    function _nextflow_drop {
        _arguments \
            '-f[Delete the repository without taking care of local changes Default: false]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            "*: :_files"

    }

    function _nextflow_help {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            "*: :_files"

    }

    function _nextflow_info {
        _arguments \
            '(-u -check-updates)'{-u,-check-updates}'[Check for remote updates Default: false]' \
            '-d[Show detailed information Default: false]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-o[Output format, either: text (default), json, yaml]' \
            "*: :_files"

    }

    function _nextflow_kuberun {
        _arguments \
            '-E[Exports all current system environment Default: false]' \
            '-ansi-log[Enable/disable ANSI console logging]' \
            '-bucket-dir[Remote bucket where intermediate result files are stored]' \
            '-cache[Enable/disable processes caching]' \
            '-dsl2[Execute the workflow using DSL2 syntax Default: false]' \
            '-dump-channels[Dump channels for debugging purpose]' \
            '-dump-hashes[Dump task hash keys for debugging purpose Default: false]' \
            '-e.[Add the specified variable to execution environment Syntax: -e.key=value Default: {}]' \
            '-entry[Entry workflow name to be executed]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-hub[Service hub where the project is hosted]' \
            '-latest[Pull latest changes before run Default: false]' \
            '-lib[Library extension path]' \
            '-main-script[The script file to be executed when launching a project directory or repository]' \
            '-name[Assign a mnemonic name to the a pipeline run]' \
            '(-n -namespace)'{-n,-namespace}'[Specify the K8s namespace to use]' \
            '-offline[Do not check for remote project updates Default: false]' \
            '-params-file[Load script parameters from a JSON/YAML file]' \
            '-plugins[Specify the plugins to be applied for this run e.g. nf-amazon,nf-tower]' \
            '-pod-image[Specify the container image for the Nextflow pod]' \
            '-process.[Set process options Syntax: -process.key=value Default: {}]' \
            '-profile[Choose a configuration profile]' \
            '(-qs -queue-size)'{-qs,-queue-size}'[Max number of processes that can be executed in parallel by each executor]' \
            '-resume[Execute the script using the cached results, useful to continue executions that was stopped by an error]' \
            '(-r -revision)'{-r,-revision}'[Revision of the project to run (either a git branch, tag or commit SHA number)]' \
            '(-stub-run -stub)'{-stub-run,-stub}'[Execute the workflow replacing process scripts with command stubs Default: false]' \
            '-test[Test a script function with the name specified]' \
            '-user[Private repository user name]' \
            '(-v -volume-mount)'{-v,-volume-mount}'[Volume claim mounts eg. my-pvc:/mnt/path]' \
            '-with-charliecloud[Enable process execution in a Charliecloud container runtime]' \
            '-with-conda[Use the specified Conda environment package or file (must end with .yml|.yaml suffix)]' \
            '-with-dag[Create pipeline DAG file]' \
            '-with-docker[Enable process execution in a Docker container]' \
            '(-N -with-notification)'{-N,-with-notification}'[Send a notification email on workflow completion to the specified recipients]' \
            '-with-podman[Enable process execution in a Podman container]' \
            '-with-report[Create processes execution html report]' \
            '-with-singularity[Enable process execution in a Singularity container]' \
            '-with-timeline[Create processes execution timeline file]' \
            '-with-tower[Monitor workflow execution with Seqera Tower service]' \
            '-with-trace[Create processes execution tracing file]' \
            '-with-weblog[Send workflow status messages via HTTP to target URL]' \
            '-without-docker[Disable process execution with Docker Default: false]' \
            '-without-podman[Disable process execution in a Podman container]' \
            '(-w -work-dir)'{-w,-work-dir}'[Directory where intermediate result files are stored]' \
            "*: :_files"

    }

    function _nextflow_list {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            "*: :_files"

    }

    function _nextflow_log {
        _arguments \
            '-after[Show log entries for runs executed after the specified one]' \
            '-before[Show log entries for runs executed before the specified one]' \
            '-but[Show log entries of all runs except the specified one]' \
            '(-f -fields)'{-f,-fields}'[Comma separated list of fields to include in the printed log -- Use the `-l` option to show the list of available fields]' \
            '(-F -filter)'{-F,-filter}'[Filter log entries by a custom expression e.g. process =~ /foo.*/ && status == '\''COMPLETED'\'']' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '(-l -list-fields)'{-l,-list-fields}'[Show all available fields Default: false]' \
            '(-q -quiet)'{-q,-quiet}'[Show only run names Default: false]' \
            '-s[Character used to separate column values Default:]' \
            '(-t -template)'{-t,-template}'[Text template used to each record in the log]' \
            "*: :_files"

    }

    function _nextflow_pull {
        _arguments \
            '-all[Update all downloaded projects Default: false]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-hub[Service hub where the project is hosted]' \
            '(-r -revision)'{-r,-revision}'[Revision of the project to run (either a git branch, tag or commit SHA number)]' \
            '-user[Private repository user name]' \
            "*: :_files"

    }

    function _nextflow_run {
        _arguments \
            '-E[Exports all current system environment Default: false]' \
            '-ansi-log[Enable/disable ANSI console logging]' \
            '-bucket-dir[Remote bucket where intermediate result files are stored]' \
            '-cache[Enable/disable processes caching]' \
            '-dsl2[Execute the workflow using DSL2 syntax Default: false]' \
            '-dump-channels[Dump channels for debugging purpose]' \
            '-dump-hashes[Dump task hash keys for debugging purpose Default: false]' \
            '-e.[Add the specified variable to execution environment Syntax: -e.key=value Default: {}]' \
            '-entry[Entry workflow name to be executed]' \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-hub[Service hub where the project is hosted]' \
            '-latest[Pull latest changes before run Default: false]' \
            '-lib[Library extension path]' \
            '-main-script[The script file to be executed when launching a project directory or repository]' \
            '-name[Assign a mnemonic name to the a pipeline run]' \
            '-offline[Do not check for remote project updates Default: false]' \
            '-params-file[Load script parameters from a JSON/YAML file]' \
            '-plugins[Specify the plugins to be applied for this run e.g. nf-amazon,nf-tower]' \
            '-process.[Set process options Syntax: -process.key=value Default: {}]' \
            '-profile[Choose a configuration profile]' \
            '(-qs -queue-size)'{-qs,-queue-size}'[Max number of processes that can be executed in parallel by each executor]' \
            '-resume[Execute the script using the cached results, useful to continue executions that was stopped by an error]' \
            '(-r -revision)'{-r,-revision}'[Revision of the project to run (either a git branch, tag or commit SHA number)]' \
            '(-stub-run -stub)'{-stub-run,-stub}'[Execute the workflow replacing process scripts with command stubs Default: false]' \
            '-test[Test a script function with the name specified]' \
            '-user[Private repository user name]' \
            '-with-charliecloud[Enable process execution in a Charliecloud container runtime]' \
            '-with-conda[Use the specified Conda environment package or file (must end with .yml|.yaml suffix)]' \
            '-with-dag[Create pipeline DAG file]' \
            '-with-docker[Enable process execution in a Docker container]' \
            '(-N -with-notification)'{-N,-with-notification}'[Send a notification email on workflow completion to the specified recipients]' \
            '-with-podman[Enable process execution in a Podman container]' \
            '-with-report[Create processes execution html report]' \
            '-with-singularity[Enable process execution in a Singularity container]' \
            '-with-timeline[Create processes execution timeline file]' \
            '-with-tower[Monitor workflow execution with Seqera Tower service]' \
            '-with-trace[Create processes execution tracing file]' \
            '-with-weblog[Send workflow status messages via HTTP to target URL]' \
            '-without-docker[Disable process execution with Docker Default: false]' \
            '-without-podman[Disable process execution in a Podman container]' \
            '(-w -work-dir)'{-w,-work-dir}'[Directory where intermediate result files are stored]' \
            "*: :_files"

    }

    function _nextflow_self-update {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            "*: :_files"

    }

    function _nextflow_view {
        _arguments \
            '(-h -help)'{-h,-help}'[Print the command usage Default: false]' \
            '-l[List repository content Default: false]' \
            '-q[Hide header line Default: false]' \
            "*: :_files"

    }


function _nextflow {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clean:Clean up project cache and work directories'
            'clone:Clone a project into a folder'
            'config:Print a project configuration'
            'console:Launch Nextflow interactive console'
            'drop:Delete the local copy of a project'
            'help:Print the usage help for a command'
            'info:Print project and system runtime information'
            'kuberun:Execute a workflow in a Kubernetes cluster (experimental)'
            'list:List all downloaded projects'
            'log:Print executions log and runtime info'
            'pull:Download or update a project'
            'run:Execute a pipeline project'
            'self-update:Update nextflow runtime to the latest available version'
            'view:View project script file(s)'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-C[Use the specified configuration file(s) overriding any defaults]' \
        '-D[Set JVM properties]' \
        '-bg[Execute nextflow in background]' \
        '(-c -config)'{-c,-config}'[Add the specified file to configuration set]' \
        '(-d -dockerize)'{-d,-dockerize}'[Launch nextflow via Docker (experimental)]' \
        '-h[Print this help]' \
        '-log[Set nextflow log file path]' \
        '(-q -quiet)'{-q,-quiet}'[Do not print information messages]' \
        '-syslog[Send logs to syslog server (eg. localhost:514)]' \
        '(-v -version)'{-v,-version}'[Print the program version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clean)
            _nextflow_clean
            ;;

        (clone)
            _nextflow_clone
            ;;

        (config)
            _nextflow_config
            ;;

        (console)
            _nextflow_console
            ;;

        (drop)
            _nextflow_drop
            ;;

        (help)
            _nextflow_help
            ;;

        (info)
            _nextflow_info
            ;;

        (kuberun)
            _nextflow_kuberun
            ;;

        (list)
            _nextflow_list
            ;;

        (log)
            _nextflow_log
            ;;

        (pull)
            _nextflow_pull
            ;;

        (run)
            _nextflow_run
            ;;

        (self-update)
            _nextflow_self-update
            ;;

        (view)
            _nextflow_view
            ;;

        esac
        ;;
     esac

}

