#compdef _plass plass

# Generated with h2o 0.1.18

    function _plass_plass-assemble {
        _arguments \
            '--add-self-matches[Artificially add entries of queries with themselves (for clustering) \[0\]]' \
            '--alph-size[Alphabet size (range 2-21) \[13\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[0\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[0\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[14\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--wrapped-scoring[Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start \[0\]]' \
            '-e[Extend sequences if the E-value is below \[0.0, inf\] \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--min-seq-id[Overlap sequence identity threshold \[0.0, 1.0\] \[0.900\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--kmer-per-seq[k-mers per sequence \[60\]]' \
            '--kmer-per-seq-scale[Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen \[nucl:0.200,aa:0.000\]]' \
            '--adjust-kmer-len[Adjust k-mer length based on specificity (only for nucleotides) \[0\]]' \
            '--hash-shift[Shift k-mer hash initilization \[67\]]' \
            '--include-only-extendable[Include only extendable \[1\]]' \
            '--ignore-multi-kmer[Skip k-mers occuring multiple times (>=2) \[1\]]' \
            '--num-iterations[Number of assembly iterations \[1, inf\] \[12\]]' \
            '--rescore-mode[0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fullfilling window quality criterion \[3\]]' \
            '--min-length[Minimum codon number in open reading frames \[45\]]' \
            '--max-length[Maximum codon number in open reading frames \[32734\]]' \
            '--max-gaps[Maximum number of codons with gaps or unknown residues before an open reading frame is rejected \[2147483647\]]' \
            '--contig-start-mode[Contig start can be 0: incomplete, 1: complete, 2: both \[2\]]' \
            '--contig-end-mode[Contig end can be 0: incomplete, 1: complete, 2: both \[2\]]' \
            '--orf-start-mode[Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) \[1\]]' \
            '--forward-frames[Comma-seperated list of frames on the forward strand to be extracted \[1,2,3\]]' \
            '--reverse-frames[Comma-seperated list of frames on the reverse strand to be extracted \[1,2,3\]]' \
            '--translation-table[1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA]' \
            '--translate[Translate ORF to amino acid \[0\]]' \
            '--use-all-table-starts[Use all alteratives for a start codon in the genetic table, if false - only ATG (AUG) \[0\]]' \
            '--id-offset[Numeric ids in index file are offset by this value \[0\]]' \
            '--protein-filter-threshold[filter proteins lower than threshold \[0.0,1.0\] \[0.200\]]' \
            '--filter-proteins[filter proteins by a neural network \[0,1\] \[1\]]' \
            '--dbtype[Database type 0: auto, 1: amino acid 2: nucleotides \[0\]]' \
            '--shuffle[Shuffle input database \[1\]]' \
            '--createdb-mode[Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) \[0\]]' \
            '--sub-mat[Substitution matrix file \[nucl:nucleotide.out,aa:blosum62.out\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[12\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--delete-tmp-inc[Delete temporary files incremental \[0,1\] \[1\]]' \
            '--remove-tmp-files[Delete temporary files \[0\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--filter-hits[Filter hits by seq.id. and coverage \[0\]]' \
            '--sort-results[Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) \[0\]]' \
            '--create-lookup[Create database lookup file (can be very large) \[0\]]' \
            '--write-lookup[write .lookup file containing mapping from internal id, fasta id and file number \[1\]]' \
            "*: :_files"

    }

    function _plass_plass-nuclassemble {
        _arguments \
            '--add-self-matches[Artificially add entries of queries with themselves (for clustering) \[0\]]' \
            '--alph-size[Alphabet size (range 2-21) \[5\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[0\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[0\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[22\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--wrapped-scoring[Double the (nucleotide) query sequence during the scoring process to allow wrapped diagonal scoring around end and start \[0\]]' \
            '-e[Extend sequences if the E-value is below (range 0.0-inf) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--min-seq-id[Overlap sequence identity threshold (range 0.0-1.0) \[0.990\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--kmer-per-seq[k-mers per sequence \[60\]]' \
            '--kmer-per-seq-scale[Scale k-mer per sequence based on sequence length as kmer-per-seq val + scale x seqlen \[0.100\]]' \
            '--adjust-kmer-len[Adjust k-mer length based on specificity (only for nucleotides) \[0\]]' \
            '--hash-shift[Shift k-mer hash initilization \[67\]]' \
            '--include-only-extendable[Include only extendable \[1\]]' \
            '--ignore-multi-kmer[Skip k-mers occuring multiple times (>=2) \[1\]]' \
            '--num-iterations[Number of assembly iterations (range 1-inf) \[12\]]' \
            '--rescore-mode[Rescore diagonals with: 0: Hamming distance 1: local alignment (score only) 2: local alignment 3: global alignment 4: longest alignment fullfilling window quality criterion \[3\]]' \
            '--chop-cycle[Remove superfluous part of circular fragments (see --cycle-check) \[1\]]' \
            '--cycle-check[Check for circular sequences (avoid infinite extension of circular or long repeated regions) \[1\]]' \
            '--min-contig-len[Minimum length of assembled contig to output \[1000\]]' \
            '--dbtype[Database type 0: auto, 1: amino acid 2: nucleotides \[0\]]' \
            '--shuffle[Shuffle input database \[1\]]' \
            '--createdb-mode[Createdb mode 0: copy data, 1: soft link data and write new index (works only with single line fasta/q) \[0\]]' \
            '--id-offset[Numeric ids in index file are offset by this value \[0\]]' \
            '--sub-mat[Substitution matrix file \[nucl:nucleotide.out,aa:blosum62.out\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[12\]]' \
            '--compressed[Use compressed database format for temporary files \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--remove-tmp-files[Delete temporary files \[0\]]' \
            '--delete-tmp-inc[Delete temporary files incremental \[0,1\] \[1\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--filter-hits[Filter hits by seq.id. and coverage \[0\]]' \
            '--sort-results[Sort results: 0: no sorting, 1: sort by E-value (Alignment) or seq.id. (Hamming) \[0\]]' \
            '--write-lookup[write .lookup file containing mapping from internal id, fasta id and file number \[1\]]' \
            "*: :_files"

    }


function _plass {
    local line state

    function _commands {
        local -a commands
        commands=(
            'plass-assemble:plass-assemble'
            'plass-nuclassemble:plass-nuclassemble'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (plass-assemble)
            _plass_plass-assemble
            ;;

        (plass-nuclassemble)
            _plass_plass-nuclassemble
            ;;

        esac
        ;;
     esac

}

