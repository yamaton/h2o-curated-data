#compdef _salmon salmon

# Generated with h2o 0.1.18

    function _salmon_alevin {
        _arguments \
            '(-l --libType)'{-l,--libType}'[Format string describing the library type]' \
            '(-i --index)'{-i,--index}'[salmon index]' \
            '(-r --unmatedReads)'{-r,--unmatedReads}'[List of files containing unmated reads of (e.g. single-end reads)]' \
            '(-1 --mates1)'{-1,--mates1}'[File containing the #1 mates]' \
            '(-2 --mates2)'{-2,--mates2}'[File containing the #2 mates]' \
            '(-v --version)'{-v,--version}'[print version string]' \
            '(-h --help)'{-h,--help}'[produce help message]' \
            '(-o --output)'{-o,--output}'[Output quantification directory.]' \
            '(-j --rad)'{-j,--rad}'[just selectively align the data and write the results to a RAD file.  Do not perform the rest of the quantification procedure.]' \
            '--sketch[perform sketching rather than selective alignment and write the results to a RAD file. Requires the `--rad` flag. Do not perform the rest of the quantification procedure.]' \
            '(-p --threads)'{-p,--threads}'[The number of threads to use concurrently.]' \
            '--tgMap[transcript to gene map tsv file]' \
            '--hash[Secondary input point for Alevin using Big freaking Hash (bfh.txt) file. Works Only with --chromium]' \
            '--dropseq[Use DropSeq Single Cell protocol for the library]' \
            '--chromiumV3[Use 10x chromium v3 Single Cell protocol for the library.]' \
            '--chromium[Use 10x chromium v2 Single Cell protocol for the library.]' \
            '--gemcode[Use 10x gemcode v1 Single Cell protocol for the library.]' \
            '--citeseq[Use CITESeq Single Cell protocol for the library, 16 CB, 12 UMI and features.]' \
            '--celseq[Use CEL-Seq Single Cell protocol for the library.]' \
            '--celseq2[Use CEL-Seq2 Single Cell protocol for the library.]' \
            '--quartzseq2[Use Quartz-Seq2 v3.2 Single Cell protocol for the library assumes 15 length barcode and 8 length UMI.]' \
            '--whitelist[File containing white-list barcodes]' \
            '--featureStart[This flag should be used with citeseq and specifies the starting index of the feature barcode on Read2.]' \
            '--featureLength[This flag should be used with citeseq and specifies the length of the feature barcode.]' \
            '--noQuant[Don'\''t run downstream barcode-salmon model.]' \
            '--numCellBootstraps[Generate mean and variance for cell x gene matrix quantification estimates.]' \
            '--numCellGibbsSamples[Generate mean and variance for cell x gene matrix quantification by running gibbs chain estimates.]' \
            '--forceCells[Explicitly specify the number of cells.]' \
            '--expectCells[define a close upper bound on expected number of cells]' \
            '--mrna[path to a file containing mito-RNA gene, one per line]' \
            '--rrna[path to a file containing ribosomal RNA, one per line]' \
            '--keepCBFraction[fraction of CB to keep, value must be in range (0,1\], use 1 to quantify all CB.]' \
            '--read-geometry[format string describing the geometry of the read]' \
            '--bc-geometry[format string describing the geometry of the cell barcode]' \
            '--umi-geometry[format string describing the genometry of the umi]' \
            '--end[Cell-Barcodes end (5 or 3) location in the read sequence from where barcode has to be extracted. (end, umiLength, barcodeLength) should all be provided if using this option]' \
            '--umiLength[umi length Parameter for unknown protocol. (end, umiLength, barcodeLength) should all be provided if using this option]' \
            '--barcodeLength[barcode length Parameter for unknown protocol. (end, umiLength, barcodeLength) should all be provided if using this option]' \
            '--noem[do not run em]' \
            '--freqThreshold[threshold for the frequency of the barcodes]' \
            '--umiEditDistance[Maximum allowble edit distance to collapse UMIs, Expect delay in running time if != 1]' \
            '--dumpfq[Dump barcode modified fastq file for downstream analysis by using coin toss for multi-mapping.]' \
            '--dumpBfh[dump the big hash with all the barcodes and the UMI sequence.]' \
            '--dumpArborescences[dump the gene-v-cell matrix for the total number of fragments used in the UMI deduplicaiton.]' \
            '--dumpUmiGraph[dump the per cell level Umi Graph.]' \
            '--dumpCellEq[dump the per cell level deduplicated equivalence classes.]' \
            '--dumpFeatures[Dump features for whitelist and downstream analysis.]' \
            '--dumpMtx[Dump cell v transcripts count matrix in sparse mtx format.]' \
            '--lowRegionMinNumBarcodes[Minimum Number of CB to use for learning Low confidence region (Default: 200).]' \
            '--maxNumBarcodes[Maximum allowable limit to process the cell barcodes. (Default: 100000)]' \
            "*: :_files"

    }

    function _salmon_index {
        _arguments \
            '-v[print version string]' \
            '-h[produce help message]' \
            '-t[arg   Transcript fasta file.]' \
            '(-t --transcripts)'{-t,--transcripts}'[arg   Transcript fasta file.]' \
            '-t[Transcript fasta file.]' \
            '(-t --transcripts)'{-t,--transcripts}'[Transcript fasta file.]' \
            '-k[arg (=31)   The size of k-mers that should be used for the quasi index.]' \
            '(-k --kmerLen)'{-k,--kmerLen}'[arg (=31)   The size of k-mers that should be used for the quasi index.]' \
            '-k[The size of k-mers that should be used for the quasi index.]' \
            '(-k --kmerLen)'{-k,--kmerLen}'[The size of k-mers that should be used for the quasi index.]' \
            '-i[arg   salmon index.]' \
            '(-i --index)'{-i,--index}'[arg   salmon index.]' \
            '-i[salmon index.]' \
            '(-i --index)'{-i,--index}'[salmon index.]' \
            '--gencode[This flag will expect the input transcript fasta to be in GENCODE format, and will split the transcript name at the first '\''|'\'' character. These reduced names will be used in the output and when looking for these transcripts in a gene to transcript GTF.]' \
            '--features[This flag will expect the input reference to be in the tsv file format, and will split the feature name at the first '\''tab'\'' character. These reduced names will be used in the output and when looking for the sequence of the features.GTF.]' \
            '--keepDuplicates[This flag will disable the default indexing behavior of discarding sequence-identical duplicate transcripts.  If this flag is passed, then duplicate transcripts that appear in the input will be retained and quantified separately.]' \
            '-p[arg (=2)   Number of threads to use during indexing.]' \
            '(-p --threads)'{-p,--threads}'[arg (=2)   Number of threads to use during indexing.]' \
            '-p[Number of threads to use during indexing.]' \
            '(-p --threads)'{-p,--threads}'[Number of threads to use during indexing.]' \
            '--keepFixedFasta[Retain the fixed fasta file (without short transcripts and duplicates, clipped, etc.) generated during indexing]' \
            '-f[arg (=-1)   The size of the Bloom filter that will be used by TwoPaCo during indexing. The filter will be of size 2^{filterSize}. The default value of -1 means that the filter size will be automatically set based on the number of distinct k-mers in the input, as estimated by nthll.]' \
            '(-f --filterSize)'{-f,--filterSize}'[arg (=-1)   The size of the Bloom filter that will be used by TwoPaCo during indexing. The filter will be of size 2^{filterSize}. The default value of -1 means that the filter size will be automatically set based on the number of distinct k-mers in the input, as estimated by nthll.]' \
            '-f[The size of the Bloom filter that will be used by TwoPaCo during indexing. The filter will be of size 2^{filterSize}. The default value of -1 means that the filter size will be automatically set based on the number of distinct k-mers in the input, as estimated by nthll.]' \
            '(-f --filterSize)'{-f,--filterSize}'[The size of the Bloom filter that will be used by TwoPaCo during indexing. The filter will be of size 2^{filterSize}. The default value of -1 means that the filter size will be automatically set based on the number of distinct k-mers in the input, as estimated by nthll.]' \
            '--tmpdir[The directory location that will be used for TwoPaCo temporary files; it will be created if need be and be removed prior to indexing completion. The default value will cause a (temporary) subdirectory of the salmon index directory to be used for this purpose.]' \
            '--sparse[Build the index using a sparse sampling of k-mer positions This will require less memory (especially during quantification), but will take longer to construct and can slow down mapping / alignment]' \
            '-d[arg   Treat these sequences ids from the reference as the decoys that may have sequence homologous to some known transcript. for example in case of the genome, provide a list of chromosome name --- one per line]' \
            '(-d --decoys)'{-d,--decoys}'[arg   Treat these sequences ids from the reference as the decoys that may have sequence homologous to some known transcript. for example in case of the genome, provide a list of chromosome name --- one per line]' \
            '-d[Treat these sequences ids from the reference as the decoys that may have sequence homologous to some known transcript. for example in case of the genome, provide a list of chromosome name --- one per line]' \
            '(-d --decoys)'{-d,--decoys}'[Treat these sequences ids from the reference as the decoys that may have sequence homologous to some known transcript. for example in case of the genome, provide a list of chromosome name --- one per line]' \
            '--type[The type of index to build; the only option is "puff" in this version of salmon.]' \
            "*: :_files"

    }

    function _salmon_quant {
        _arguments \
            '--help-reads[view the help for salmon'\''s selective-alignment-based mode]' \
            '--help-alignment[view the help for salmon'\''s alignment-based mode]' \
            "*: :_files"

    }

    function _salmon_quantmerge {
        _arguments \
            '(-v --version)'{-v,--version}'[print version string]' \
            '(-h --help)'{-h,--help}'[produce help message]' \
            '--quants[List of quantification directories.]' \
            '--names[Optional list of names to give to the samples.]' \
            '(-c --column)'{-c,--column}'[The name of the column that will be merged together into the output files. The options are {len, elen, tpm, numreads}]' \
            '--genes[Use gene quantification instead of transcript.]' \
            '--missing[The value of missing values.]' \
            '(-o --output)'{-o,--output}'[Output quantification file.]' \
            "*: :_files"

    }


function _salmon {
    local line state

    function _commands {
        local -a commands
        commands=(
            'alevin:single cell analysis'
            'index:create a salmon index'
            'quant:quantify a sample'
            'quantmerge:merge multiple quantifications into a single file'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (alevin)
            _salmon_alevin
            ;;

        (index)
            _salmon_index
            ;;

        (quant)
            _salmon_quant
            ;;

        (quantmerge)
            _salmon_quantmerge
            ;;

        esac
        ;;
     esac

}

