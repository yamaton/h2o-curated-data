#compdef _samtools samtools

# Generated with h2o 0.1.18

    function _samtools_dict {
        _arguments \
            "*: :_files"

    }

    function _samtools_faidx {
        _arguments \
            '(-o --output)'{-o,--output}'[Write FASTA to file.]' \
            '(-n --length)'{-n,--length}'[Length of FASTA sequence line. \[60\]]' \
            '(-c --continue)'{-c,--continue}'[Continue after trying to retrieve missing region.]' \
            '(-r --region-file)'{-r,--region-file}'[File of regions.  Format is chr:from-to. One per line.]' \
            '(-i --reverse-complement)'{-i,--reverse-complement}'[Reverse complement sequences.]' \
            '--mark-strand[Add strand indicator to sequence name TYPE = rc   for /rc on negative strand (default)]' \
            '--fai-idx[FILE   name of the index file (default file.fa.fai).]' \
            '--gzi-idx[FILE   name of compressed file index (default file.fa.gz.gzi).]' \
            '(-f --fastq)'{-f,--fastq}'[File and index in FASTQ format.]' \
            '(-h --help)'{-h,--help}'[This message.]' \
            "*: :_files"

    }

    function _samtools_fqidx {
        _arguments \
            '(-o --output)'{-o,--output}'[Write FASTQ to file.]' \
            '(-n --length)'{-n,--length}'[Length of FASTQ sequence line. \[60\]]' \
            '(-c --continue)'{-c,--continue}'[Continue after trying to retrieve missing region.]' \
            '(-r --region-file)'{-r,--region-file}'[File of regions.  Format is chr:from-to. One per line.]' \
            '(-i --reverse-complement)'{-i,--reverse-complement}'[Reverse complement sequences.]' \
            '--mark-strand[Add strand indicator to sequence name TYPE = rc   for /rc on negative strand (default)]' \
            '--fai-idx[FILE   name of the index file (default file.fq.fai).]' \
            '--gzi-idx[FILE   name of compressed file index (default file.fq.gz.gzi).]' \
            '(-h --help)'{-h,--help}'[This message.]' \
            "*: :_files"

    }

    function _samtools_index {
        _arguments \
            '-b[Generate BAI-format index for BAM files \[default\]]' \
            '-c[Generate CSI-format index for BAM files]' \
            '-m[Set minimum interval size for CSI indices to 2^INT \[14\]]' \
            '-@[Sets the number of threads \[none\]]' \
            "*: :_files"

    }

    function _samtools_calmd {
        _arguments \
            '-e[change identical bases to '\''='\'']' \
            '-u[uncompressed BAM output (for piping)]' \
            '-b[compressed BAM output]' \
            '-S[ignored (input format is auto-detected)]' \
            '-A[modify the quality string]' \
            '-Q[use quiet mode to output less debug info to stdout]' \
            '-r[compute the BQ tag (without -A) or cap baseQ by BAQ (with -A)]' \
            '-E[extended BAQ for better sensitivity but lower specificity]' \
            '--no-PG[do not add a PG line]' \
            "*: :_files"

    }

    function _samtools_fixmate {
        _arguments \
            '-r[Remove unmapped reads and secondary alignments]' \
            '-p[Disable FR proper pair check]' \
            '-c[Add template cigar ct tag]' \
            '-m[Add mate score tag]' \
            '-u[Uncompressed output]' \
            '--no-PG[do not add a PG line]' \
            '--input-fmt-option[Specify a single input file format option in the form of OPTION or OPTION=VALUE]' \
            '(-O --output-fmt)'{-O,--output-fmt}'[Specify output format (SAM, BAM, CRAM)]' \
            '--output-fmt-option[Specify a single output file format option in the form of OPTION or OPTION=VALUE]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_reheader {
        _arguments \
            '(-P --no-PG)'{-P,--no-PG}'[Do not generate a @PG header line.]' \
            '(-i --in-place)'{-i,--in-place}'[Modify the CRAM file directly, if possible.]' \
            '(-c --command)'{-c,--command}'[Pass the header in SAM format to external program CMD.]' \
            "*: :_files"

    }

    function _samtools_addreplacerg {
        _arguments \
            '-m[Set the mode of operation from one of overwrite_all, orphan_only \[overwrite_all\]]' \
            '-o[Where to write output to \[stdout\]]' \
            '-r[@RG line text]' \
            '-R[ID of @RG line in existing header to use]' \
            '-u[Output uncompressed data]' \
            '--no-PG[Do not add a PG line]' \
            "*: :_files"

    }

    function _samtools_markdup {
        _arguments \
            '-r[Remove duplicate reads]' \
            '-l[Max read length (default 300 bases)]' \
            '-S[Mark supplementary alignments of duplicates as duplicates (slower).]' \
            '-s[Report stats.]' \
            '-f[Write stats to named file.  Implies -s.]' \
            '-T[Write temporary files to PREFIX.samtools.nnnn.nnnn.tmp.]' \
            '-d[Optical distance (if set, marks with dt tag)]' \
            '-c[Clear previous duplicate settings and tags.]' \
            '(-m --mode)'{-m,--mode}'[Duplicate decision method for paired reads.]' \
            '-u[Output uncompressed data]' \
            '--include-fails[Include quality check failed reads.]' \
            '--no-PG[Do not add a PG line]' \
            '-t[Mark primary duplicates with the name of the original in a '\''do'\'' tag. Mainly for information and debugging.]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--write-index[Automatically index the output files \[off\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_ampliconclip {
        _arguments \
            '-b[FILE   bedfile of amplicons to be removed.]' \
            '-o[FILE   output file name (default stdout).]' \
            '-f[FILE   write stats to file name (default stderr)]' \
            '-u[Output uncompressed data]' \
            '--soft-clip[soft clip amplicons from reads (default)]' \
            '--hard-clip[hard clip amplicons from reads.]' \
            '--both-ends[clip on both ends.]' \
            '--strand[use strand data from bed file.]' \
            '--clipped[only output clipped reads.]' \
            '--fail[mark unclipped, mapped reads as QCFAIL.]' \
            '--filter-len[do not output reads INT size or shorter.]' \
            '--fail-len[INT   mark as QCFAIL reads INT size or shorter.]' \
            '--no-excluded[do not write excluded reads (unmapped or QCFAIL).]' \
            '--rejects-file[file to write filtered reads.]' \
            '--original[for clipped entries add an OA tag with original data.]' \
            '--keep-tag[for clipped entries keep the old NM and MD tags.]' \
            '--no-PG[do not add an @PG line.]' \
            "*: :_files"

    }

    function _samtools_collate {
        _arguments \
            '-O[output to stdout]' \
            '-o[output file name (use prefix if not set)]' \
            '-u[uncompressed BAM output]' \
            '-f[fast (only primary alignments)]' \
            '-r[working reads stored (with -f) \[10000\]]' \
            '-l[compression level \[1\]]' \
            '-n[number of temporary files \[64\]]' \
            '--no-PG[do not add a PG line]' \
            '--input-fmt-option[Specify a single input file format option in the form of OPTION or OPTION=VALUE]' \
            '--output-fmt[Specify output format (SAM, BAM, CRAM)]' \
            '--output-fmt-option[Specify a single output file format option in the form of OPTION or OPTION=VALUE]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_merge {
        _arguments \
            '-n[Input files are sorted by read name]' \
            '-t[Input files are sorted by TAG value]' \
            '-r[Attach RG tag (inferred from file names)]' \
            '-u[Uncompressed BAM output]' \
            '-f[Overwrite the output BAM if exist]' \
            '-1[Compress level 1]' \
            '-l[Compression level, from 0 to 9 \[-1\]]' \
            '-R[Merge file in the specified region STR \[all\]]' \
            '-h[Copy the header in FILE to <out.bam> \[in1.bam\]]' \
            '-c[Combine @RG headers with colliding IDs \[alter IDs to be distinct\]]' \
            '-p[Combine @PG headers with colliding IDs \[alter IDs to be distinct\]]' \
            '-s[Override random seed]' \
            '-b[List of input BAM filenames, one per line \[null\]]' \
            '-X[Use customized index files]' \
            '-L[Specify a BED file for multiple region filtering \[null\]]' \
            '--no-PG[do not add a PG line]' \
            "*: :_files"

    }

    function _samtools_mpileup {
        _arguments \
            '(-6 --illumina1.3+)'{-6,--illumina1.3+}'[quality is in the Illumina-1.3+ encoding]' \
            '(-A --count-orphans)'{-A,--count-orphans}'[do not discard anomalous read pairs]' \
            '(-b --bam-list)'{-b,--bam-list}'[list of input BAM filenames, one per line]' \
            '(-B --no-BAQ)'{-B,--no-BAQ}'[disable BAQ (per-Base Alignment Quality)]' \
            '(-C --adjust-MQ)'{-C,--adjust-MQ}'[adjust mapping quality; recommended:50, disable:0 \[0\]]' \
            '(-d --max-depth)'{-d,--max-depth}'[max per-file depth; avoids excessive memory usage \[8000\]]' \
            '(-E --redo-BAQ)'{-E,--redo-BAQ}'[recalculate BAQ on the fly, ignore existing BQs]' \
            '(-f --fasta-ref)'{-f,--fasta-ref}'[faidx indexed reference sequence file]' \
            '(-G --exclude-RG)'{-G,--exclude-RG}'[exclude read groups listed in FILE]' \
            '(-l --positions)'{-l,--positions}'[skip unlisted positions (chr pos) or regions (BED)]' \
            '(-q --min-MQ)'{-q,--min-MQ}'[skip alignments with mapQ smaller than INT \[0\]]' \
            '(-Q --min-BQ)'{-Q,--min-BQ}'[skip bases with baseQ/BAQ smaller than INT \[13\]]' \
            '(-r --region)'{-r,--region}'[region in which pileup is generated]' \
            '(-R --ignore-RG)'{-R,--ignore-RG}'[ignore RG tags (one BAM = one sample)]' \
            '(--rf --incl-flags)'{--rf,--incl-flags}'[required flags: skip reads with mask bits unset \[\]]' \
            '(--ff --excl-flags)'{--ff,--excl-flags}'[filter flags: skip reads with mask bits set]' \
            '(-x --ignore-overlaps)'{-x,--ignore-overlaps}'[disable read-pair overlap detection]' \
            '(-X --customized-index)'{-X,--customized-index}'[use customized index files]' \
            '(-o --output)'{-o,--output}'[write output to FILE \[standard output\]]' \
            '(-O --output-BP)'{-O,--output-BP}'[output base positions on reads]' \
            '(-s --output-MQ)'{-s,--output-MQ}'[output mapping quality]' \
            '--output-QNAME[output read names]' \
            '--output-extra[output extra read fields and read tag values]' \
            '--output-sep[set the separator character for tag lists \[,\]]' \
            '-a[output all positions (including zero depth)]' \
            '(-a -a)'{-a,-a}'[output absolutely all positions, including unused ref. sequences]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_sort {
        _arguments \
            '-l[Set compression level, from 0 (uncompressed) to 9 (best)]' \
            '-u[Output uncompressed data (equivalent to -l 0)]' \
            '-m[Set maximum memory per thread; suffix K/M/G recognized \[768M\]]' \
            '-M[Use minimiser for clustering unaligned/unplaced reads]' \
            '-K[Kmer size to use for minimiser \[20\]]' \
            '-n[Sort by read name (not compatible with samtools index command)]' \
            '-t[Sort by value of TAG. Uses position as secondary index (or read name if -n is set)]' \
            '-o[Write final output to FILE rather than standard output]' \
            '-T[Write temporary files to PREFIX.nnnn.bam]' \
            '--no-PG[do not add a PG line]' \
            "*: :_files"

    }

    function _samtools_split {
        _arguments \
            '-f[output filename format string \["%*_%#.%."\]]' \
            '-u[put reads with no RG tag or an unrecognised RG tag in FILE1]' \
            '-h[... and override the header with FILE2 (-u file only)]' \
            '-v[verbose output]' \
            '--no-PG[do not add a PG line]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--write-index[Automatically index the output files \[off\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_quickcheck {
        _arguments \
            '-v[verbose output (repeat for more verbosity)]' \
            '-q[suppress warning messages]' \
            '-u[unmapped input (do not require targets in header)]' \
            "*: :_files"

    }

    function _samtools_fastq {
        _arguments \
            '-0[write reads designated READ_OTHER to FILE]' \
            '-1[write reads designated READ1 to FILE]' \
            '-2[write reads designated READ2 to FILE]' \
            '-o[write reads designated READ1 or READ2 to FILE]' \
            '-f[only include reads with all  of the FLAGs in INT present \[0\]]' \
            '-F[only include reads with none of the FLAGS in INT present \[0x900\]]' \
            '-G[only EXCLUDE reads with all  of the FLAGs in INT present \[0\]]' \
            '-n[don'\''t append /1 and /2 to the read name]' \
            '-N[always append /1 and /2 to the read name]' \
            '-O[output quality in the OQ tag if present]' \
            '-s[write singleton reads designated READ1 or READ2 to FILE]' \
            '-t[copy RG, BC and QT tags to the FASTQ header line]' \
            '-T[copy arbitrary tags to the FASTQ header line]' \
            '-v[default quality score if not given in file \[1\]]' \
            '-i[add Illumina Casava 1.8 format entry to header (eg 1:N:0:ATCACG)]' \
            '-c[compression level \[0..9\] to use when creating gz or bgzf fastq files \[1\]]' \
            '--i1[write first index reads to FILE]' \
            '--i2[write second index reads to FILE]' \
            '--barcode-tag[Barcode tag \[default: BC\]]' \
            '--quality-tag[Quality tag \[default: QT\]]' \
            '--index-format[How to parse barcode and quality tags]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_fasta {
        _arguments \
            '-0[write reads designated READ_OTHER to FILE]' \
            '-1[write reads designated READ1 to FILE]' \
            '-2[write reads designated READ2 to FILE]' \
            '-o[write reads designated READ1 or READ2 to FILE]' \
            '-f[only include reads with all  of the FLAGs in INT present \[0\]]' \
            '-F[only include reads with none of the FLAGS in INT present \[0x900\]]' \
            '-G[only EXCLUDE reads with all  of the FLAGs in INT present \[0\]]' \
            '-n[don'\''t append /1 and /2 to the read name]' \
            '-N[always append /1 and /2 to the read name]' \
            '-s[write singleton reads designated READ1 or READ2 to FILE]' \
            '-t[copy RG, BC and QT tags to the FASTA header line]' \
            '-T[copy arbitrary tags to the FASTA header line]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_bedcov {
        _arguments \
            '-Q[mapping quality threshold \[0\]]' \
            '-X[use customized index files]' \
            '-g[remove the specified flags from the set used to filter out reads]' \
            '-G[add the specified flags to the set used to filter out reads]' \
            '-d[depth threshold. Number of reference bases with coverage above and                          including this value will be displayed in a separate column]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_coverage {
        _arguments \
            '(-b --bam-list)'{-b,--bam-list}'[list of input BAM filenames, one per line]' \
            '(-l --min-read-len)'{-l,--min-read-len}'[ignore reads shorter than INT bp \[0\]]' \
            '(-q --min-MQ)'{-q,--min-MQ}'[mapping quality threshold \[0\]]' \
            '(-Q --min-BQ)'{-Q,--min-BQ}'[base quality threshold \[0\]]' \
            '--rf[required flags: skip reads with mask bits unset \[\]]' \
            '--ff[filter flags: skip reads with mask bits set ]' \
            '(-m --histogram)'{-m,--histogram}'[show histogram instead of tabular output]' \
            '(-A --ascii)'{-A,--ascii}'[show only ASCII characters in histogram]' \
            '(-o --output)'{-o,--output}'[write output to FILE \[stdout\]]' \
            '(-H --no-header)'{-H,--no-header}'[don'\''t print a header in tabular mode]' \
            '(-w --n-bins)'{-w,--n-bins}'[number of bins in histogram \[terminal width - 40\]]' \
            '(-r --region)'{-r,--region}'[show specified region. Format: chr:start-end. ]' \
            '(-h --help)'{-h,--help}'[help (this page)]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_depth {
        _arguments \
            '-a[output all positions (including zero depth)]' \
            '(-a -a)'{-a,-a}'[output absolutely all positions, including unused ref. sequences]' \
            '-b[list of positions or regions]' \
            '-X[use customized index files]' \
            '-f[list of input BAM filenames, one per line \[null\]]' \
            '-H[print a file header]' \
            '-l[read length threshold (ignore reads shorter than <int>) \[0\]]' \
            '(-d -m)'{-d,-m}'[maximum coverage depth \[8000\]. If 0, depth is set to the maximum integer value, effectively removing any depth limit.]' \
            '-o[where to write output to \[stdout\]]' \
            '-q[base quality threshold \[0\]]' \
            '-Q[mapping quality threshold \[0\]]' \
            '-r[region]' \
            '-g[remove the specified flags from the set used to filter out reads]' \
            '-G[add the specified flags to the set used to filter out reads The default set is UNMAP,SECONDARY,QCFAIL,DUP or 0x704]' \
            '-J[include reads with deletions in depth computation]' \
            '-s[for the overlapping section of a read pair, count only the bases of a single read. This option requires raising the base quality threshold to 1.]' \
            '--input-fmt-optio[n OPT\[=VAL\]]' \
            "*: :_files"

    }

    function _samtools_flagstat {
        _arguments \
            '--input-fmt-option[Specify a single input file format option in the form of OPTION or OPTION=VALUE]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            '(-O --output-fmt)'{-O,--output-fmt}'[Specify output format (json, tsv)]' \
            "*: :_files"

    }

    function _samtools_idxstats {
        _arguments \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_phase {
        _arguments \
            '-b[prefix of BAMs to output \[null\]]' \
            '-q[min het phred-LOD \[37\]]' \
            '-Q[min base quality in het calling \[13\]]' \
            '-D[max read depth \[256\]]' \
            '-F[do not attempt to fix chimeras]' \
            '-A[drop reads with ambiguous phase]' \
            '--no-PG[do not add a PG line]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--output-fmt-option[Specify a single output file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_stats {
        _arguments \
            '(-c --coverage)'{-c,--coverage}'[Coverage distribution min,max,step \[1,1000,1\]]' \
            '(-d --remove-dups)'{-d,--remove-dups}'[Exclude from statistics reads marked as duplicates]' \
            '(-X --customized-index-file)'{-X,--customized-index-file}'[Use a customized index file]' \
            '(-f --required-flag)'{-f,--required-flag}'[<str|int>      Required flag, 0 for unset. See also `samtools flags` \[0\]]' \
            '(-F --filtering-flag)'{-F,--filtering-flag}'[Filtering flag, 0 for unset. See also `samtools flags` \[0\]]' \
            '--GC-depth[the size of GC-depth bins (decreasing bin size increases memory requirement) \[2e4\]]' \
            '(-h --help)'{-h,--help}'[This help message]' \
            '(-i --insert-size)'{-i,--insert-size}'[Maximum insert size \[8000\]]' \
            '(-I --id)'{-I,--id}'[Include only listed read group or sample name]' \
            '(-l --read-length)'{-l,--read-length}'[Include in the statistics only reads with the given read length \[-1\]]' \
            '(-m --most-inserts)'{-m,--most-inserts}'[Report only the main part of inserts \[0.99\]]' \
            '(-P --split-prefix)'{-P,--split-prefix}'[Path or string prefix for filepaths output by -S (default is input filename)]' \
            '(-q --trim-quality)'{-q,--trim-quality}'[The BWA trimming parameter \[0\]]' \
            '(-r --ref-seq)'{-r,--ref-seq}'[Reference sequence (required for GC-depth and mismatches-per-cycle calculation).]:file:_files' \
            '(-s --sam)'{-s,--sam}'[Ignored (input format is auto-detected).]' \
            '(-S --split)'{-S,--split}'[Also write statistics to separate files split by tagged field.]' \
            '(-t --target-regions)'{-t,--target-regions}'[Do stats in these regions only. Tab-delimited file chr,from,to, 1-based, inclusive.]:file:_files' \
            '(-x --sparse)'{-x,--sparse}'[Suppress outputting IS rows where there are no insertions.]' \
            '(-p --remove-overlaps)'{-p,--remove-overlaps}'[Remove overlaps of paired-end reads from coverage and base count computations.]' \
            '(-g --cov-threshold)'{-g,--cov-threshold}'[Only bases with coverage above this value will be included in the target percentage computation \[0\]]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_ampliconstats {
        _arguments \
            '(-f --required-flag)'{-f,--required-flag}'[Only include reads with all of the FLAGs present \[0x0\]]' \
            '(-F --filter-flag)'{-F,--filter-flag}'[Only include reads with none of the FLAGs present \[0xB04\]]' \
            '(-a --max-amplicons)'{-a,--max-amplicons}'[Change the maximum number of amplicons permitted \[1000\]]' \
            '(-l --max-amplicon-length)'{-l,--max-amplicon-length}'[Change the maximum length of an individual amplicon \[1000\]]' \
            '(-d --min-depth)'{-d,--min-depth}'[Minimum base depth(s) to consider position covered \[1\]]' \
            '(-d --min-depth)'{-d,--min-depth}'[Minimum base depth(s) to consider position covered \[1\]]' \
            '(-m --pos-margin)'{-m,--pos-margin}'[Margin of error for matching primer positions \[30\]]' \
            '(-o --output)'{-o,--output}'[Specify output file \[stdout if unset\]]' \
            '(-s --use-sample-name)'{-s,--use-sample-name}'[Use the sample name from the first @RG header line]' \
            '(-t --tlen-adjust)'{-t,--tlen-adjust}'[Add/subtract from TLEN; use when clipping but no fixmate step]' \
            '(-b --tcoord-bin)'{-b,--tcoord-bin}'[Bin template start,end positions into multiples of INT\[1\]]' \
            '(-c --tcoord-min-count)'{-c,--tcoord-min-count}'[Minimum template start,end frequency for recording \[10\]]' \
            '(-D --depth-bin)'{-D,--depth-bin}'[Merge FDP values within +/- FRACTION together.]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '(-@ --threads)'{-@,--threads}'[Number of additional threads to use \[0\]]' \
            "*: :_files"

    }

    function _samtools_tview {
        _arguments \
            '-d[output as (H)tml or (C)urses or (T)ext ]' \
            '-X[include customized index file]' \
            '-p[go directly to this position]' \
            '-s[display only reads from this sample or group]' \
            '-w[display width (with -d T only)]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--input-fmt-option[Specify a single input file format option in the form]' \
            '--reference[Reference sequence FASTA FILE \[null\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }

    function _samtools_view {
        _arguments \
            '-b[output BAM]' \
            '-C[output CRAM (requires -T)]' \
            '-1[use fast BAM compression (implies -b)]' \
            '-u[uncompressed BAM output (implies -b)]' \
            '-h[include header in SAM output]' \
            '-H[print SAM header only (no alignments)]' \
            '-c[print only the count of matching records]' \
            '-o[output file name \[stdout\]]' \
            '-U[output reads not selected by filters to FILE \[null\]]' \
            '-t[FILE listing reference names and lengths (see long help) \[null\]]' \
            '-X[include customized index file]' \
            '-L[only include reads overlapping this BED FILE \[null\]]' \
            '-r[only include reads in read group STR \[null\]]' \
            '-R[only include reads with read group listed in FILE \[null\]]' \
            '-d[only include reads with tag STR and associated value STR \[null\]]' \
            '-D[only include reads with tag STR and associated values listed in FILE \[null\]]' \
            '-q[only include reads with mapping quality >= INT \[0\]]' \
            '-l[only include reads in library STR \[null\]]' \
            '-m[only include reads with number of CIGAR operations consuming query sequence >= INT \[0\]]' \
            '-f[only include reads with all  of the FLAGs in INT present \[0\]]' \
            '-F[only include reads with none of the FLAGS in INT present \[0\]]' \
            '-G[only EXCLUDE reads with all  of the FLAGs in INT present \[0\]]' \
            '-M[use the multi-region iterator (increases the speed, removes duplicates and outputs the reads as they are ordered in the file)]' \
            '-x[read tag to strip (repeatable) \[null\]]' \
            '-B[collapse the backward CIGAR operation]' \
            '-?[print long help, including note about region specification]' \
            '-S[ignored (input format is auto-detected)]' \
            '--no-PG[do not add a PG line]' \
            "*: :_files"

    }

    function _samtools_depad {
        _arguments \
            '-s[Output is SAM (default is BAM)]' \
            '-S[Input is SAM (default is BAM)]' \
            '-u[Uncompressed BAM output (can'\''t use with -s)]' \
            '-1[Fast compression BAM output (can'\''t use with -s)]' \
            '(-T --reference)'{-T,--reference}'[Padded reference sequence file \[null\]]' \
            '-o[Output file name \[stdout\]]' \
            '--no-PG[do not add a PG line]' \
            '-?[Longer help]' \
            '--input-fmt-option[Specify a single input file format option in the form of OPTION or OPTION=VALUE]' \
            '--output-fmt[Specify output format (SAM, BAM, CRAM)]' \
            '--output-fmt-option[Specify a single output file format option in the form of OPTION or OPTION=VALUE]' \
            '--write-index[Automatically index the output files \[off\]]' \
            '--verbosity[Set level of verbosity]' \
            "*: :_files"

    }


function _samtools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'dict:create a sequence dictionary file'
            'faidx:index/extract FASTA'
            'fqidx:index/extract FASTQ'
            'index:index alignment'
            'calmd:recalculate MD/NM tags and '\''='\'' bases'
            'fixmate:fix mate information'
            'reheader:replace BAM header'
            'addreplacerg:adds or replaces RG tags'
            'markdup:mark duplicates'
            'ampliconclip:clip oligos from the end of reads'
            'collate:shuffle and group alignments by name'
            'merge:merge sorted alignments'
            'mpileup:multi-way pileup'
            'sort:sort alignment file'
            'split:splits a file by read group'
            'quickcheck:quickly check if SAM/BAM/CRAM file appears intact'
            'fastq:converts a BAM to a FASTQ'
            'fasta:converts a BAM to a FASTA'
            'bedcov:read depth per BED region'
            'coverage:alignment depth and percent coverage'
            'depth:compute the depth'
            'flagstat:simple stats'
            'idxstats:BAM index stats'
            'phase:phase heterozygotes'
            'stats:generate stats (former bamcheck)'
            'ampliconstats:generate amplicon specific stats'
            'tview:text alignment viewer'
            'view:SAM<->BAM<->CRAM conversion'
            'depad:convert padded BAM to unpadded BAM'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (dict)
            _samtools_dict
            ;;

        (faidx)
            _samtools_faidx
            ;;

        (fqidx)
            _samtools_fqidx
            ;;

        (index)
            _samtools_index
            ;;

        (calmd)
            _samtools_calmd
            ;;

        (fixmate)
            _samtools_fixmate
            ;;

        (reheader)
            _samtools_reheader
            ;;

        (addreplacerg)
            _samtools_addreplacerg
            ;;

        (markdup)
            _samtools_markdup
            ;;

        (ampliconclip)
            _samtools_ampliconclip
            ;;

        (collate)
            _samtools_collate
            ;;

        (merge)
            _samtools_merge
            ;;

        (mpileup)
            _samtools_mpileup
            ;;

        (sort)
            _samtools_sort
            ;;

        (split)
            _samtools_split
            ;;

        (quickcheck)
            _samtools_quickcheck
            ;;

        (fastq)
            _samtools_fastq
            ;;

        (fasta)
            _samtools_fasta
            ;;

        (bedcov)
            _samtools_bedcov
            ;;

        (coverage)
            _samtools_coverage
            ;;

        (depth)
            _samtools_depth
            ;;

        (flagstat)
            _samtools_flagstat
            ;;

        (idxstats)
            _samtools_idxstats
            ;;

        (phase)
            _samtools_phase
            ;;

        (stats)
            _samtools_stats
            ;;

        (ampliconstats)
            _samtools_ampliconstats
            ;;

        (tview)
            _samtools_tview
            ;;

        (view)
            _samtools_view
            ;;

        (depad)
            _samtools_depad
            ;;

        esac
        ;;
     esac

}

