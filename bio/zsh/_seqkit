#compdef _seqkit seqkit

# Generated with h2o 0.1.18

    function _seqkit_amplicon {
        _arguments \
            '--bed[output in BED6+1 format with amplicon as the 7th column]' \
            '(-f --flanking-region)'{-f,--flanking-region}'[region is flanking region]' \
            '(-F --forward)'{-F,--forward}'[forward primer (5'\''-primer-3'\''), degenerate bases allowed]' \
            '(-h --help)'{-h,--help}'[help for amplicon]' \
            '(-I --immediate-output)'{-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            '(-m --max-mismatch)'{-m,--max-mismatch}'[max mismatch when matching primers, no degenerate bases allowed]' \
            '(-P --only-positive-strand)'{-P,--only-positive-strand}'[only search on positive strand]' \
            '(-p --primer-file)'{-p,--primer-file}'[3- or 2-column tabular primer file, with first column as primer name]' \
            '(-r --region)'{-r,--region}'[specify region to return. type "seqkit amplicon -h" for detail]' \
            '(-R --reverse)'{-R,--reverse}'[reverse primer (5'\''-primer-3'\''), degenerate bases allowed]' \
            '(-s --strict-mode)'{-s,--strict-mode}'[strict mode, i.e., discarding seqs not fully matching (shorter) given region range]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_bam {
        _arguments \
            '(-B --bins)'{-B,--bins}'[number of histogram bins (default -1)]' \
            '(-N --bundle)'{-N,--bundle}'[partition BAM file into loci (-1) or bundles with this minimum size]' \
            '(-c --count)'{-c,--count}'[count reads per reference and save to this file]' \
            '(-W --delay)'{-W,--delay}'[sleep this many seconds after plotting (default 1)]' \
            '(-y --dump)'{-y,--dump}'[print histogram data to stderr instead of plotting]' \
            '(-G --exclude-ids)'{-G,--exclude-ids}'[exclude records with IDs contained in this file]' \
            '(-e --exec-after)'{-e,--exec-after}'[execute command after reporting]' \
            '(-E --exec-before)'{-E,--exec-before}'[execute command before reporting]' \
            '(-f --field)'{-f,--field}'[target fields]' \
            '(-g --grep-ids)'{-g,--grep-ids}'[only keep records with IDs contained in this file]' \
            '(-h --help)'{-h,--help}'[help for bam]' \
            '(-C --idx-count)'{-C,--idx-count}'[fast read per reference counting based on the BAM index]' \
            '(-i --idx-stat)'{-i,--idx-stat}'[fast statistics based on the BAM index]' \
            '(-O --img)'{-O,--img}'[save histogram to this PDF/image file]' \
            '(-H --list-fields)'{-H,--list-fields}'[list all available BAM record features]' \
            '(-L --log)'{-L,--log}'[log10(x+1) transform numeric values]' \
            '(-q --map-qual)'{-q,--map-qual}'[minimum mapping quality]' \
            '(-x --pass)'{-x,--pass}'[passthrough mode (forward filtered BAM to output)]' \
            '(-k --pretty)'{-k,--pretty}'[pretty print certain TSV outputs]' \
            '(-F --prim-only)'{-F,--prim-only}'[filter out non-primary alignment records]' \
            '(-p --print-freq)'{-p,--print-freq}'[print/report after this many records (-1 for print after EOF) (default -1)]' \
            '(-Q --quiet-mode)'{-Q,--quiet-mode}'[supress all plotting to stderr]' \
            '(-M --range-max)'{-M,--range-max}'[discard record with field (-f) value greater than this flag (default NaN)]' \
            '(-m --range-min)'{-m,--range-min}'[discard record with field (-f) value less than this flag (default NaN)]' \
            '(-R --reset)'{-R,--reset}'[reset histogram after every report]' \
            '(-Z --silent-mode)'{-Z,--silent-mode}'[supress TSV output to stderr]' \
            '(-s --stat)'{-s,--stat}'[print BAM satistics of the input files]' \
            '(-T --tool)'{-T,--tool}'[invoke toolbox in YAML format (see documentation)]' \
            '(-@ --top-bam)'{-@,--top-bam}'[save the top -? records to this bam file]' \
            '(-? --top-size)'{-?,--top-size}'[size of the top-mode buffer (default 100)]' \
            "*: :_files"

    }

    function _seqkit_common {
        _arguments \
            '(-n --by-name)'{-n,--by-name}'[match by full name    instead of just id]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-s --by-seq)'{-s,--by-seq}'[match by sequence]' \
            '(-h --help)'{-h,--help}'[help for common]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore case]' \
            "*: :_files"

    }

    function _seqkit_concat {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for concat]' \
            "*: :_files"

    }

    function _seqkit_convert {
        _arguments \
            '(-d --dry-run)'{-d,--dry-run}'[dry run]' \
            '(-f --force)'{-f,--force}'[for Illumina-1.8+ -> Sanger, truncate scores > 40 to 40]' \
            '--from[source quality encoding. if not given, we'\''ll guess it]' \
            '(-h --help)'{-h,--help}'[help for convert]' \
            '(-n --nrecords)'{-n,--nrecords}'[number of records for guessing quality encoding (default 1000)]' \
            '(-N --thresh-B-in-n-most-common)'{-N,--thresh-B-in-n-most-common}'[threshold of '\''B'\'' in top N most common quality for guessing Illumina 1.5. (default 4)]' \
            '(-F --thresh-illumina1.5-frac)'{-F,--thresh-illumina1.5-frac}'[threshold of faction of Illumina 1.5 in the leading N records (default 0.1)]' \
            '--to[target quality encoding (default "Sanger")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_duplicate {
        _arguments \
            '(-h --help)'{-h,--help}'[help for duplicate,-n, --times int   duplication number (   default 1)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_faidx {
        _arguments \
            '(-f --full-head)'{-f,--full-head}'[print full header   line instead of just ID. New fasta index file ending with .seqkit.fai will be created]' \
            '(-h --help)'{-h,--help}'[help for faidx,-i, --ignore-case   ignore case,-r, --use-regexp    IDs are regular ex   pression. But subseq region is not suppored here.]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_fish {
        _arguments \
            '(-a --all)'{-a,--all}'[search all]' \
            '(-p --aln-params)'{-p,--aln-params}'[alignment parameters in format "<match>,<mismatch>,<gap_open>,<gap_extend>" (default "4,-4,-2,-1")]' \
            '(-h --help)'{-h,--help}'[help for fish]' \
            '(-i --invert)'{-i,--invert}'[print out references not matching with any query]' \
            '(-q --min-qual)'{-q,--min-qual}'[minimum mapping quality (default 5)]' \
            '(-b --out-bam)'{-b,--out-bam}'[save aligmnets to this BAM file (memory intensive)]' \
            '(-x --pass)'{-x,--pass}'[pass through mode (write input to stdout)]' \
            '(-g --print-aln)'{-g,--print-aln}'[print sequence alignments]' \
            '(-D --print-desc)'{-D,--print-desc}'[print full sequence header]' \
            '(-f --query-fastx)'{-f,--query-fastx}'[query fasta]' \
            '(-F --query-sequences)'{-F,--query-sequences}'[query sequences]' \
            '(-r --ranges)'{-r,--ranges}'[target ranges, for example: ":10,30:40,-20:"]' \
            '(-s --stranded)'{-s,--stranded}'[search + strand only]' \
            '(-v --validate-seq)'{-v,--validate-seq}'[validate bases according to the alphabet]' \
            '(-V --validate-seq-length)'{-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[int   length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            "*: :_files"

    }

    function _seqkit_fq2fa {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for fq2fa]' \
            "*: :_files"

    }

    function _seqkit_fx2tab {
        _arguments \
            '(-a --alphabet)'{-a,--alphabet}'[print alphabet letters]' \
            '(-q --avg-qual)'{-q,--avg-qual}'[print average quality of a read]' \
            '(-B --base-content)'{-B,--base-content}'[print base content. (case ignored, multiple values supported) e.g. -B AT -B N]' \
            '(-C --base-count)'{-C,--base-count}'[print base count. (case ignored, multiple values supported) e.g. -C AT -C N]' \
            '(-I --case-sensitive)'{-I,--case-sensitive}'[calculate case sensitive base content]' \
            '(-g --gc)'{-g,--gc}'[print GC content]' \
            '(-G --gc-skew)'{-G,--gc-skew}'[print GC-Skew]' \
            '(-H --header-line)'{-H,--header-line}'[print header line]' \
            '(-h --help)'{-h,--help}'[help for fx2tab]' \
            '(-l --length)'{-l,--length}'[print sequence length]' \
            '(-n --name)'{-n,--name}'[only print names (no sequences and qualities)]' \
            '(-i --only-id)'{-i,--only-id}'[print ID instead of full head]' \
            '(-b --qual-ascii-base)'{-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            '(-s --seq-hash)'{-s,--seq-hash}'[print hash of sequence (case sensitive)]' \
            "*: :_files"

    }

    function _seqkit_genautocomplete {
        _arguments \
            '--file[autocompletion fi   le (default "/home/vierbein/.bash_completion.d/seqkit.sh")]' \
            '(-h --help)'{-h,--help}'[help for genautocomplete,--shell string   autocompletion ty   pe (bash|zsh|fish|powershell) (default "bash")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_grep {
        _arguments \
            '(-n --by-name)'{-n,--by-name}'[match by full name instead of just ID]' \
            '(-s --by-seq)'{-s,--by-seq}'[search subseq on seq, both positive and negative strand are searched, and mismatch allowed using flag -m/--max-mismatch]' \
            '(-c --circular)'{-c,--circular}'[circular genome]' \
            '(-d --degenerate)'{-d,--degenerate}'[pattern/motif contains degenerate base]' \
            '--delete-matched[delete a pattern right after being matched, this keeps the firstly matched data and speedups when using regular expressions]' \
            '(-h --help)'{-h,--help}'[help for grep]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore case]' \
            '(-I --immediate-output)'{-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            '(-v --invert-match)'{-v,--invert-match}'[invert the sense of matching, to select non-matching records]' \
            '(-m --max-mismatch)'{-m,--max-mismatch}'[max mismatch when matching by seq. For large genomes like human genome, using mapping/alignment tools would be faster]' \
            '(-P --only-positive-strand)'{-P,--only-positive-strand}'[only search on positive strand]' \
            '(-p --pattern)'{-p,--pattern}'[search pattern (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\''))]' \
            '(-f --pattern-file)'{-f,--pattern-file}'[pattern file (one record per line)]' \
            '(-R --region)'{-R,--region}'[specify sequence region for searching. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases]' \
            '(-r --use-regexp)'{-r,--use-regexp}'[patterns are regular expression]' \
            "*: :_files"

    }

    function _seqkit_head {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for head]' \
            '(-n --number)'{-n,--number}'[print first N FASTA/Q records (default 10)]' \
            "*: :_files"

    }

    function _seqkit_help {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for help]' \
            "*: :_files"

    }

    function _seqkit_locate {
        _arguments \
            '--bed[output in BED6 format]' \
            '(-c --circular)'{-c,--circular}'[circular genome. type "seqkit locate -h" for details]' \
            '(-d --degenerate)'{-d,--degenerate}'[pattern/motif contains degenerate base]' \
            '--gtf[output in GTF format]' \
            '(-h --help)'{-h,--help}'[help for locate]' \
            '(-M --hide-matched)'{-M,--hide-matched}'[do not show matched sequences]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore case]' \
            '(-I --immediate-output)'{-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            '(-m --max-mismatch)'{-m,--max-mismatch}'[max mismatch when matching by seq. For large genomes like human genome, using mapping/alignment tools would be faster]' \
            '(-G --non-greedy)'{-G,--non-greedy}'[non-greedy mode, faster but may miss motifs overlapping with others]' \
            '(-P --only-positive-strand)'{-P,--only-positive-strand}'[only search on positive strand]' \
            '(-p --pattern)'{-p,--pattern}'[pattern/motif (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\'')]' \
            '(-f --pattern-file)'{-f,--pattern-file}'[pattern/motif file (FASTA format)]' \
            '(-F --use-fmi)'{-F,--use-fmi}'[use FM-index for much faster search of lots of sequence patterns]' \
            '(-r --use-regexp)'{-r,--use-regexp}'[patterns/motifs are regular expression]' \
            '(-V --validate-seq-length)'{-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[int   length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            "*: :_files"

    }

    function _seqkit_mutate {
        _arguments \
            '(-n --by-name)'{-n,--by-name}'[\[match seqs to mutate\] match by full name instead of just id]' \
            '(-d --deletion)'{-d,--deletion}'[deletion mutation: deleting subsequence in a range. e.g., -d 1:2 for deleting leading two bases, -d -3:-1 for removing last 3 bases]' \
            '(-h --help)'{-h,--help}'[help for mutate]' \
            '(-I --ignore-case)'{-I,--ignore-case}'[\[match seqs to mutate\] ignore case of search pattern]' \
            '(-i --insertion)'{-i,--insertion}'[insertion mutation: inserting bases behind of given position, e.g., -i 0:ACGT for inserting ACGT at the beginning, -1:* for add * to the end]' \
            '(-v --invert-match)'{-v,--invert-match}'[\[match seqs to mutate\] invert the sense of matching, to select non-matching records]' \
            '(-s --pattern)'{-s,--pattern}'[\[match seqs to mutate\] search pattern (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\''))]' \
            '(-f --pattern-file)'{-f,--pattern-file}'[\[match seqs to mutate\] pattern file (one record per line)]' \
            '(-p --point)'{-p,--point}'[point mutation: changing base at given position. e.g., -p 2:C for setting 2nd base as C, -p -1:A for change last base as A]' \
            '(-r --use-regexp)'{-r,--use-regexp}'[\[match seqs to mutate\] search patterns are regular expression]' \
            "*: :_files"

    }

    function _seqkit_pair {
        _arguments \
            '(-f --force)'{-f,--force}'[overwrite outpu   t directory]' \
            '(-h --help)'{-h,--help}'[help for pair,-O, --out-dir string   output directory,-1, --read1 string     (gzipped) read1    file]' \
            '(-2 --read2)'{-2,--read2}'[(gzipped) read2    file]' \
            '(-u --save-unpaired)'{-u,--save-unpaired}'[save unpaired r   eads if there are]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_range {
        _arguments \
            '(-h --help)'{-h,--help}'[help for range,-r, --range string   range. e.g., 1:12    for first 12 records (head -n 12), -12:-1 for last 12 records (tail -n 12)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_rename {
        _arguments \
            '(-n --by-name)'{-n,--by-name}'[check duplication by full name instead of just id,-f, --force               overwrite ou   tput directory]' \
            '(-h --help)'{-h,--help}'[help for rename,-m, --multiple-outfiles   write result   s into separated files for multiple input files]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-O --out-dir)'{-O,--out-dir}'[output directory (default "renamed")]' \
            "*: :_files"

    }

    function _seqkit_replace {
        _arguments \
            '(-s --by-seq)'{-s,--by-seq}'[replace seq (only FASTA)]' \
            '(-h --help)'{-h,--help}'[help for replace]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore case]' \
            '(-K --keep-key)'{-K,--keep-key}'[keep the key as value when no value found for the key (only for sequence name)]' \
            '(-U --keep-untouch)'{-U,--keep-untouch}'[do not change anything when no value found for the key (only for sequence name)]' \
            '(-I --key-capt-idx)'{-I,--key-capt-idx}'[capture variable index of key (1-based) (default 1)]' \
            '(-m --key-miss-repl)'{-m,--key-miss-repl}'[replacement for key with no corresponding value]' \
            '(-k --kv-file)'{-k,--kv-file}'[tab-delimited key-value file for replacing key with value when using "{kv}" in -r (--replacement) (only for sequence name)]' \
            '--nr-width[minimum width for {nr} in flag -r/--replacement. e.g., formating "1" to "001" by --nr-width 3 (default 1)]' \
            '(-p --pattern)'{-p,--pattern}'[search regular expression]' \
            '(-r --replacement)'{-r,--replacement}'[replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: for *nix OS, use SINGLE quote NOT double quotes or use the \ escape character. Record number is also supported by "{nr}".use ${1} instead of $1 when {kv} given!]' \
            "*: :_files"

    }

    function _seqkit_restart {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for restart]' \
            '(-i --new-start)'{-i,--new-start}'[new start position (1-base, supporting negative value counting from the end) (default 1)]' \
            "*: :_files"

    }

    function _seqkit_rmdup {
        _arguments \
            '(-n --by-name)'{-n,--by-name}'[by full n   ame instead of just id]' \
            '(-s --by-seq)'{-s,--by-seq}'[by seq,-D, --dup-num-file string    file to s   ave number and list of duplicated seqs]' \
            '(-d --dup-seqs-file)'{-d,--dup-seqs-file}'[file to s   ave duplicated seqs]' \
            '(-h --help)'{-h,--help}'[help for   rmdup]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore ca   se]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_sample {
        _arguments \
            '(-h --help)'{-h,--help}'[help for sample,-n, --number int         sample by number (result may not exactly match), DO NOT use on large FASTQ files.,-p, --proportion float   sample by proportion,-s, --rand-seed int      rand seed (default 11),-2, --two-pass           2-pass mode r   ead files twice to lower memory usage. Not allowed when reading from stdin]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_sana {
        _arguments \
            '(-A --allow-gaps)'{-A,--allow-gaps}'[allow gap   character (-) in sequences]' \
            '(-i --format)'{-i,--format}'[input and   output format: fastq or fasta (default "fastq")]' \
            '(-h --help)'{-h,--help}'[help for s   ana]' \
            '(-I --in-format)'{-I,--in-format}'[input format: fastq or fasta,-O, --out-format string     output format: fastq or fasta,-b, --qual-ascii-base int   ASCII BASE   , 33 for Phred+33 (default 33)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_scat {
        _arguments \
            '(-A --allow-gaps)'{-A,--allow-gaps}'[allow gap character (-) in sequences]' \
            '(-d --delta)'{-d,--delta}'[minimum size increase in kilobytes to trigger parsing (default 5)]' \
            '(-D --drop-time)'{-D,--drop-time}'[Notification drop interval (default "500ms")]' \
            '(-f --find-only)'{-f,--find-only}'[concatenate exisiting files and quit]' \
            '(-i --format)'{-i,--format}'[input and output format: fastq or fasta (fastq) (default "fastq")]' \
            '(-g --gz-only)'{-g,--gz-only}'[only look for gzipped files (.gz suffix)]' \
            '(-h --help)'{-h,--help}'[help for scat]' \
            '(-I --in-format)'{-I,--in-format}'[input format: fastq or fasta (fastq)]' \
            '(-O --out-format)'{-O,--out-format}'[output format: fastq or fasta]' \
            '(-b --qual-ascii-base)'{-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            '(-r --regexp)'{-r,--regexp}'[regexp for watched files, by default guessed from the input format]' \
            '(-T --time-limit)'{-T,--time-limit}'[quit after inactive for this time period]' \
            '(-p --wait-pid)'{-p,--wait-pid}'[after process with this PID exited (default -1)]' \
            "*: :_files"

    }

    function _seqkit_seq {
        _arguments \
            '(-k --color)'{-k,--color}'[colorize sequences - to be piped into "less -R"]' \
            '(-p --complement)'{-p,--complement}'[complement sequence, flag '\''-v'\'' is recommended to switch on]' \
            '--dna2rna[DNA to RNA]' \
            '(-G --gap-letters)'{-G,--gap-letters}'[gap letters (default "- \t.")]' \
            '(-h --help)'{-h,--help}'[help for seq]' \
            '(-l --lower-case)'{-l,--lower-case}'[print sequences in lower case]' \
            '(-M --max-len)'{-M,--max-len}'[only print sequences shorter than the maximum length (-1 for no limit) (default -1)]' \
            '(-R --max-qual)'{-R,--max-qual}'[only print sequences with average quality less than this limit (-1 for no limit) (default -1)]' \
            '(-m --min-len)'{-m,--min-len}'[only print sequences longer than the minimum length (-1 for no limit) (default -1)]' \
            '(-Q --min-qual)'{-Q,--min-qual}'[only print sequences with average quality qreater or equal than this limit (-1 for no limit) (default -1)]' \
            '(-n --name)'{-n,--name}'[only print names]' \
            '(-i --only-id)'{-i,--only-id}'[print ID instead of full head]' \
            '(-q --qual)'{-q,--qual}'[only print qualities]' \
            '(-b --qual-ascii-base)'{-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            '(-g --remove-gaps)'{-g,--remove-gaps}'[remove gaps]' \
            '(-r --reverse)'{-r,--reverse}'[reverse sequence]' \
            '--rna2dna[RNA to DNA]' \
            '(-s --seq)'{-s,--seq}'[only print sequences]' \
            '(-u --upper-case)'{-u,--upper-case}'[print sequences in upper case]' \
            '(-v --validate-seq)'{-v,--validate-seq}'[validate bases according to the alphabet]' \
            '(-V --validate-seq-length)'{-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[int   length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            "*: :_files"

    }

    function _seqkit_shuffle {
        _arguments \
            '(-h --help)'{-h,--help}'[help for shuffle,-k, --keep-temp       keep tempory FASTA and .fai file when using 2-pass mode,-s, --rand-seed int   rand seed for sh   uffle (default 23)]' \
            '(-2 --two-pass)'{-2,--two-pass}'[two-pass mode re   ad files twice to lower memory usage. (only for FASTA format)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_sliding {
        _arguments \
            '(-c --circular)'{-c,--circular}'[circular genom   e (same to -C/--circular-genome)]' \
            '(-C --circular-genome)'{-C,--circular-genome}'[circular genom   e (same to -c/--circular)]' \
            '(-g --greedy)'{-g,--greedy}'[greedy mode, i   .e., exporting last subsequences even shorter than windows size]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-h --help)'{-h,--help}'[help for sliding]' \
            '(-s --step)'{-s,--step}'[step size]' \
            '(-W --window)'{-W,--window}'[window size]' \
            "*: :_files"

    }

    function _seqkit_sort {
        _arguments \
            '(-l --by-length)'{-l,--by-length}'[by sequence length]' \
            '(-n --by-name)'{-n,--by-name}'[by full name instead of just id]' \
            '(-s --by-seq)'{-s,--by-seq}'[by sequence]' \
            '(-h --help)'{-h,--help}'[help for sort]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[ignore case]' \
            '(-k --keep-temp)'{-k,--keep-temp}'[keep tempory FASTA and .fai file when using 2-pass mode]' \
            '(-N --natural-order)'{-N,--natural-order}'[sort in natural order, when sorting by IDs/full name]' \
            '(-r --reverse)'{-r,--reverse}'[reverse the result]' \
            '(-L --seq-prefix-length)'{-L,--seq-prefix-length}'[length of sequence prefix on which seqkit sorts by sequences (0 for whole sequence) (default 10000)]' \
            '(-2 --two-pass)'{-2,--two-pass}'[two-pass mode read files twice to lower memory usage. (only for FASTA format)]' \
            '--alphabet-guess-seq-lengt[h int   length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            "*: :_files"

    }

    function _seqkit_split {
        _arguments \
            '(-i --by-id)'{-i,--by-id}'[split squences according to sequence ID]' \
            '(-p --by-part)'{-p,--by-part}'[split sequences into N parts]' \
            '(-r --by-region)'{-r,--by-region}'[split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type "seqkit split -h" for more examples]' \
            '(-s --by-size)'{-s,--by-size}'[split sequences into multi parts with N sequences]' \
            '(-d --dry-run)'{-d,--dry-run}'[dry run, just print message and no files will be created.]' \
            '(-f --force)'{-f,--force}'[overwrite output directory]' \
            '(-h --help)'{-h,--help}'[help for split]' \
            '(-k --keep-temp)'{-k,--keep-temp}'[keep tempory FASTA and .fai file when using 2-pass mode]' \
            '(-O --out-dir)'{-O,--out-dir}'[output directory (default value is $infile.split)]' \
            '(-2 --two-pass)'{-2,--two-pass}'[two-pass mode read files twice to lower memory usage. (only for FASTA format)]' \
            "*: :_files"

    }

    function _seqkit_split2 {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-l --by-length)'{-l,--by-length}'[split sequences into chunks of >=N bases, supports K/M/G suffix]' \
            '(-p --by-part)'{-p,--by-part}'[split sequences into N parts]' \
            '(-s --by-size)'{-s,--by-size}'[split sequences into multi parts with N sequences]' \
            '(-f --force)'{-f,--force}'[overwrite output directory]' \
            '(-h --help)'{-h,--help}'[help for split2]' \
            '(-O --out-dir)'{-O,--out-dir}'[output directory (default value is $infile.split)]' \
            '(-1 --read1)'{-1,--read1}'[(gzipped) read1 file]' \
            '(-2 --read2)'{-2,--read2}'[(gzipped) read2 file]' \
            "*: :_files"

    }

    function _seqkit_stats {
        _arguments \
            '(-a --all)'{-a,--all}'[all statistics, including quartiles of seq length, sum_gap, N50,-b, --basename             only output    basename of files]' \
            '(-E --fq-encoding)'{-E,--fq-encoding}'[fastq quality encoding. available values: '\''sanger'\'', '\''solexa'\'', '\''illumina-1.3+'\'', '\''illumina-1.5+'\'', '\''illumina-1.8+'\''. (default "sanger"),-G, --gap-letters string   gap letters    (default "- .")]' \
            '(-h --help)'{-h,--help}'[help for st   ats]' \
            '(-e --skip-err)'{-e,--skip-err}'[skip error,    only show warning message]' \
            '(-i --stdin-label)'{-i,--stdin-label}'[label for r   eplacing default "-" for stdin (default "-")]' \
            '(-T --tabular)'{-T,--tabular}'[output in m   achine-friendly tabular format]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_subseq {
        _arguments \
            '--bed[by tab-delimited BED file]' \
            '--chr[select limited sequence with sequence IDs when using --gtf or --bed (multiple value supported, case ignored)]' \
            '(-d --down-stream)'{-d,--down-stream}'[down stream length]' \
            '--feature[select limited feature types (multiple value supported, case ignored, only works with GTF)]' \
            '--gtf[by GTF (version 2.2) file]' \
            '--gtf-tag[output this tag as sequence comment (default "gene_id")]' \
            '(-h --help)'{-h,--help}'[help for subseq]' \
            '(-f --only-flank)'{-f,--only-flank}'[only return up/down stream sequence]' \
            '(-r --region)'{-r,--region}'[by region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type "seqkit subseq -h" for more examples]' \
            '(-u --up-stream)'{-u,--up-stream}'[up stream length]' \
            "*: :_files"

    }

    function _seqkit_tab2fx {
        _arguments \
            '(-p --comment-line-prefix)'{-p,--comment-line-prefix}'[co   mment line prefix (default \[#,//\])]' \
            '(-h --help)'{-h,--help}'[he   lp for tab2fx]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_translate {
        _arguments \
            '(-x --allow-unknown-codon)'{-x,--allow-unknown-codon}'[translate unknown code to '\''X'\''. And you may not use flag --trim which removes '\''X'\'']' \
            '(-F --append-frame)'{-F,--append-frame}'[append frame information to sequence ID]' \
            '--clean[change all STOP codon positions from the '\''*'\'' character to '\''X'\'' (an unknown residue)]' \
            '(-f --frame)'{-f,--frame}'[frame(s) to translate, available value: 1, 2, 3, -1, -2, -3, and 6 for all six frames (default \[1\])]' \
            '(-h --help)'{-h,--help}'[help for translate]' \
            '(-M --init-codon-as-M)'{-M,--init-codon-as-M}'[translate initial codon at beginning to '\''M'\'']' \
            '(-l --list-transl-table)'{-l,--list-transl-table}'[show details of translate table N, 0 for all (default -1)]' \
            '(-L --list-transl-table-with-amb-codons)'{-L,--list-transl-table-with-amb-codons}'[show details of translate table N (including ambigugous codons), 0 for all.  (default -1)]' \
            '(-T --transl-table)'{-T,--transl-table}'[translate table/genetic code, type '\''seqkit translate --help'\'' for more details (default 1)]' \
            '--trim[remove all '\''X'\'' and '\''*'\'' characters from the right end of the translation]' \
            '--alphabet-guess-seq-length[length o   f sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA he   ad is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular   expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of   input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60),-o, --out-file string                 out file    ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet    and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence    type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number o   f CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            "*: :_files"

    }

    function _seqkit_version {
        _arguments \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
            '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
            '(-u --check-update)'{-u,--check-update}'[check update]' \
            '(-h --help)'{-h,--help}'[help for version]' \
            "*: :_files"

    }

    function _seqkit_watch {
        _arguments \
            '(-B --bins)'{-B,--bins}'[number of histogram bins (default -1)]' \
            '(-W --delay)'{-W,--delay}'[sleep this many seconds after online plotting (default 1)]' \
            '(-y --dump)'{-y,--dump}'[print histogram data to stderr instead of plotting]' \
            '(-f --fields)'{-f,--fields}'[target fields, available values: ReadLen, MeanQual, GC, GCSkew (default "ReadLen")]' \
            '(-h --help)'{-h,--help}'[help for watch]' \
            '(-O --img)'{-O,--img}'[save histogram to this PDF/image file]' \
            '(-H --list-fields)'{-H,--list-fields}'[print out a list of available fields]' \
            '(-L --log)'{-L,--log}'[log10(x+1) transform numeric values]' \
            '(-x --pass)'{-x,--pass}'[pass through mode (write input to stdout)]' \
            '(-p --print-freq)'{-p,--print-freq}'[print/report after this many records (-1 for print after EOF) (default -1)]' \
            '(-b --qual-ascii-base)'{-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            '(-Q --quiet-mode)'{-Q,--quiet-mode}'[supress all plotting to stderr]' \
            '(-R --reset)'{-R,--reset}'[reset histogram after every report]' \
            '(-v --validate-seq)'{-v,--validate-seq}'[validate bases according to the alphabet]' \
            '(-V --validate-seq-length)'{-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[int   length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            "*: :_files"

    }


function _seqkit {
    local line state

    function _commands {
        local -a commands
        commands=(
            'amplicon:retrieve amplicon (or specific region around it) via primer(s)'
            'bam:monitoring and online histograms of BAM record features'
            'common:find common sequences of multiple files by id/name/sequence'
            'concat:concatenate sequences with same ID from multiple files'
            'convert:convert FASTQ quality encoding between Sanger, Solexa and Illumina'
            'duplicate:duplicate sequences N times'
            'faidx:create FASTA index file and extract subsequence'
            'fish:look for short sequences in larger sequences using local alignment'
            'fq2fa:convert FASTQ to FASTA'
            'fx2tab:convert FASTA/Q to tabular format (with length/GC content/GC skew)'
            'genautocomplete:generate shell autocompletion script (bash|zsh|fish|powershell)'
            'grep:search sequences by ID/name/sequence/sequence motifs, mismatch allowed'
            'head:print first N FASTA/Q records'
            'help:Help about any command'
            'locate:locate subsequences/motifs, mismatch allowed'
            'mutate:edit sequence (point mutation, insertion, deletion)'
            'pair:match up paired-end reads from two fastq files'
            'range:print FASTA/Q records in a range (start:end)'
            'rename:rename duplicated IDs'
            'replace:replace name/sequence by regular expression'
            'restart:reset start position for circular genome'
            'rmdup:remove duplicated sequences by id/name/sequence'
            'sample:sample sequences by number or proportion'
            'sana:sanitize broken single line fastq files'
            'scat:real time recursive concatenation and streaming of fastx files'
            'seq:transform sequences (revserse, complement, extract ID...)'
            'shuffle:shuffle sequences'
            'sliding:sliding sequences, circular genome supported'
            'sort:sort sequences by id/name/sequence/length'
            'split:split sequences into files by id/seq region/size/parts (mainly for FASTA)'
            'split2:split sequences into files by size/parts (FASTA, PE/SE FASTQ)'
            'stats:simple statistics of FASTA/Q files'
            'subseq:get subsequences by region/gtf/bed, including flanking sequences'
            'tab2fx:convert tabular format to FASTA/Q format'
            'translate:translate DNA/RNA to protein sequence (supporting ambiguous bases)'
            'version:print version information and check for update'
            'watch:monitoring and online histograms of sequence features'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
        '(-h --help)'{-h,--help}'[help for seqkit]' \
        '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
        '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
        '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
        '(-w --line-width)'{-w,--line-width}'[line width when outputing FASTA format (0 for no wrap) (default 60)]' \
        '(-o --out-file)'{-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
        '--quiet[be quiet and do not show extra information]' \
        '(-t --seq-type)'{-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
        '(-j --threads)'{-j,--threads}'[number of CPUs. (default value: 1 for single-CPU PC, 2 for others. can also set with environment variable SEQKIT_THREADS) (default 2)]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (amplicon)
            _seqkit_amplicon
            ;;

        (bam)
            _seqkit_bam
            ;;

        (common)
            _seqkit_common
            ;;

        (concat)
            _seqkit_concat
            ;;

        (convert)
            _seqkit_convert
            ;;

        (duplicate)
            _seqkit_duplicate
            ;;

        (faidx)
            _seqkit_faidx
            ;;

        (fish)
            _seqkit_fish
            ;;

        (fq2fa)
            _seqkit_fq2fa
            ;;

        (fx2tab)
            _seqkit_fx2tab
            ;;

        (genautocomplete)
            _seqkit_genautocomplete
            ;;

        (grep)
            _seqkit_grep
            ;;

        (head)
            _seqkit_head
            ;;

        (help)
            _seqkit_help
            ;;

        (locate)
            _seqkit_locate
            ;;

        (mutate)
            _seqkit_mutate
            ;;

        (pair)
            _seqkit_pair
            ;;

        (range)
            _seqkit_range
            ;;

        (rename)
            _seqkit_rename
            ;;

        (replace)
            _seqkit_replace
            ;;

        (restart)
            _seqkit_restart
            ;;

        (rmdup)
            _seqkit_rmdup
            ;;

        (sample)
            _seqkit_sample
            ;;

        (sana)
            _seqkit_sana
            ;;

        (scat)
            _seqkit_scat
            ;;

        (seq)
            _seqkit_seq
            ;;

        (shuffle)
            _seqkit_shuffle
            ;;

        (sliding)
            _seqkit_sliding
            ;;

        (sort)
            _seqkit_sort
            ;;

        (split)
            _seqkit_split
            ;;

        (split2)
            _seqkit_split2
            ;;

        (stats)
            _seqkit_stats
            ;;

        (subseq)
            _seqkit_subseq
            ;;

        (tab2fx)
            _seqkit_tab2fx
            ;;

        (translate)
            _seqkit_translate
            ;;

        (version)
            _seqkit_version
            ;;

        (watch)
            _seqkit_watch
            ;;

        esac
        ;;
     esac

}

