#compdef _singularity singularity

# Generated with h2o 0.1.18

    function _singularity_build {
        _arguments \
            '--arch[architecture for remote build (default "amd64")]' \
            '(-B --bind)'{-B,--bind}'[a user-bind path specification. spec has the format src\[:dest\[:opts\]\],where src and dest are outside and inside paths. If dest is not given,it is set equal to src. Mount options ('\''opts'\'') may be specified as '\''ro'\''(read-only) or '\''rw'\'' (read/write, which is the default).Multiple bind paths can be given by a comma separated list. (not supported with remote build)]' \
            '--builder[remote Build Service URL, setting this implies --remote]' \
            '(-d --detached)'{-d,--detached}'[submit build job and print build ID (no real-time logs and requires --remote)]' \
            '--disable-cache[do not use cache or create cache]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '(-e --encrypt)'{-e,--encrypt}'[build an image with an encrypted file system]' \
            '(-f --fakeroot)'{-f,--fakeroot}'[build using user namespace to fake root user (requires a privileged installation)]' \
            '--fix-perms[ensure owner has rwX permissions on all container content for oci/docker sources]' \
            '(-F --force)'{-F,--force}'[overwrite an image file if it exists]' \
            '(-h --help)'{-h,--help}'[help for build]' \
            '--json[interpret build definition as JSON]' \
            '--library[container Library URL]' \
            '--no-cleanup[do NOT clean up bundle after failed build, can be helpful for debugging]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            '(-T --notest)'{-T,--notest}'[build without running tests in %test section]' \
            '--nv[inject host Nvidia libraries during build for post and test sections (not supported with remote build)]' \
            '--passphrase[prompt for an encryption passphrase]' \
            '--pem-path[enter an path to a PEM formated RSA key for an encrypted container]' \
            '(-r --remote)'{-r,--remote}'[build image remotely (does not require root)]' \
            '--rocm[inject host Rocm libraries during build for post and test sections (not supported with remote build)]' \
            '(-s --sandbox)'{-s,--sandbox}'[build image as sandbox format (chroot directory structure)]' \
            '--section[only run specific section(s) of deffile (setup, post, files, environment, test, labels, none) (default \[all\])]' \
            '(-u --update)'{-u,--update}'[run definition over existing container (skips header)]' \
            "*: :_files"

    }

    function _singularity_cache {
        _arguments \
            '(-h --help)'{-h,--help}'[help for cache]' \
            "*: :_files"

    }

    function _singularity_capability {
        _arguments \
            '(-h --help)'{-h,--help}'[help for capability]' \
            "*: :_files"

    }

    function _singularity_config {
        _arguments \
            '(-h --help)'{-h,--help}'[help for config]' \
            "*: :_files"

    }

    function _singularity_delete {
        _arguments \
            '(-A --arch)'{-A,--arch}'[specify requested image arch (default "amd64")]' \
            '(-F --force)'{-F,--force}'[delete image without confirmation]' \
            '(-h --help)'{-h,--help}'[help for delete]' \
            '--library[delete images from the provided library]' \
            "*: :_files"

    }

    function _singularity_exec {
        _arguments \
            '--add-caps[a comma separated capability list to add]' \
            '--allow-setuid[allow setuid binaries in container (root only)]' \
            '--app[set an application to run inside a container]' \
            '--apply-cgroups[apply cgroups from file for container processes (root only)]' \
            '(-B --bind)'{-B,--bind}'[a user-bind path specification. spec has the format src\[:dest\[:opts\]\], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('\''opts'\'') may be specified as '\''ro'\'' (read-only) or '\''rw'\'' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.]' \
            '(-e --cleanenv)'{-e,--cleanenv}'[clean environment before running container]' \
            '(-c --contain)'{-c,--contain}'[use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host]' \
            '(-C --containall)'{-C,--containall}'[contain not only file systems, but also PID, IPC, and environment]' \
            '--disable-cache[dont use cache, and dont create cache]' \
            '--dns[list of DNS server separated by commas to add in resolv.conf]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '--drop-caps[a comma separated capability list to drop]' \
            '--env[pass environment variable to contained process]' \
            '--env-file[pass environment variables from file to contained process]' \
            '(-f --fakeroot)'{-f,--fakeroot}'[run container in new user namespace as uid 0]' \
            '--fusemount[A FUSE filesystem mount specification of the form '\''<type>:<fuse command> <mountpoint>'\'' - where <type> is '\''container'\'' or '\''host'\'', specifying where the mount will be performed ('\''container-daemon'\'' or '\''host-daemon'\'' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. '\''container:sshfs 10.0.0.1:/ /sshfs'\''. Implies --pid.]' \
            '(-h --help)'{-h,--help}'[help for exec]' \
            '(-H --home)'{-H,--home}'[a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default "/home/vierbein")]' \
            '--hostname[set container hostname]' \
            '(-i --ipc)'{-i,--ipc}'[run container in a new IPC namespace]' \
            '--keep-privs[let root user keep privileges in container (root only)]' \
            '(-n --net)'{-n,--net}'[run container in a new network namespace (sets up a bridge network interface by default)]' \
            '--network[specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default "bridge")]' \
            '--network-args[specify network arguments to pass to CNI plugins]' \
            '--no-home[do NOT mount users home directory if /home is not the current working directory]' \
            '--no-init[do NOT start shim process with --pid]' \
            '--no-mount[disable one or more mount xxx options set in singularity.conf]' \
            '--no-privs[drop all privileges from root user in container)]' \
            '--no-umask[do not propagate umask to the container, set default 0022 umask]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            '--nonet[disable VM network handling]' \
            '--nv[enable experimental Nvidia support]' \
            '(-o --overlay)'{-o,--overlay}'[use an overlayFS image for persistent data storage or as read-only layer of container]' \
            '--passphrase[prompt for an encryption passphrase]' \
            '--pem-path[enter an path to a PEM formated RSA key for an encrypted container]' \
            '(-p --pid)'{-p,--pid}'[run container in a new PID namespace]' \
            '--pwd[initial working directory for payload process inside the container]' \
            '--rocm[enable experimental Rocm support]' \
            '(-S --scratch)'{-S,--scratch}'[include a scratch directory within the container that is linked to a temporary dir (use -W to force location)]' \
            '--security[enable security features (SELinux, Apparmor, Seccomp)]' \
            '(-u --userns)'{-u,--userns}'[run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images.]' \
            '--uts[run container in a new UTS namespace]' \
            '--vm[enable VM support]' \
            '--vm-cpu[number of CPU cores to allocate to Virtual Machine (implies --vm) (default "1")]' \
            '--vm-err[enable attaching stderr from VM]' \
            '--vm-ip[IP Address to assign for container usage. Defaults to DHCP within bridge network. (default "dhcp")]' \
            '--vm-ram[amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default "1024")]' \
            '(-W --workdir)'{-W,--workdir}'[working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)]' \
            '(-w --writable)'{-w,--writable}'[by default all Singularity containers are available as read only. This option makes the file system accessible as read/write.]' \
            '--writable-tmpfs[makes the file system accessible as read-write with non persistent data (with overlay support only)]' \
            "*: :_files"

    }

    function _singularity_help {
        _arguments \
            '(-h --help)'{-h,--help}'[help for help]' \
            "*: :_files"

    }

    function _singularity_inspect {
        _arguments \
            '--all[show all available data (imply --json option)]' \
            '--app[inspect a specific app]' \
            '(-d --deffile)'{-d,--deffile}'[show the Singularity recipe file that was used to generate the image]' \
            '(-e --environment)'{-e,--environment}'[show the environment settings for the image]' \
            '(-h --help)'{-h,--help}'[help for inspect]' \
            '(-H --helpfile)'{-H,--helpfile}'[inspect the runscript helpfile, if it exists]' \
            '(-j --json)'{-j,--json}'[print structured json instead of sections]' \
            '(-l --labels)'{-l,--labels}'[show the labels for the image (default)]' \
            '--list-apps[list all apps in a container]' \
            '(-r --runscript)'{-r,--runscript}'[show the runscript for the image]' \
            '(-s --startscript)'{-s,--startscript}'[show the startscript for the image]' \
            '(-t --test)'{-t,--test}'[show the test script for the image]' \
            "*: :_files"

    }

    function _singularity_instance {
        _arguments \
            '(-h --help)'{-h,--help}'[help for instance]' \
            "*: :_files"

    }

    function _singularity_key {
        _arguments \
            '(-h --help)'{-h,--help}'[help for key]' \
            "*: :_files"

    }

    function _singularity_oci {
        _arguments \
            '(-h --help)'{-h,--help}'[help for oci]' \
            "*: :_files"

    }

    function _singularity_overlay {
        _arguments \
            '(-h --help)'{-h,--help}'[help for overlay]' \
            "*: :_files"

    }

    function _singularity_plugin {
        _arguments \
            '(-h --help)'{-h,--help}'[help for plugin]' \
            "*: :_files"

    }

    function _singularity_pull {
        _arguments \
            '--arch[architecture to pull from library (default "amd64")]' \
            '--dir[download images to the specific directory]' \
            '--disable-cache[dont use cached images/blobs and dont create them]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '(-F --force)'{-F,--force}'[overwrite an image file if it exists]' \
            '(-h --help)'{-h,--help}'[help for pull]' \
            '--library[download images from the provided library]' \
            '--no-cleanup[do NOT clean up bundle after failed build, can be helpful for debugging]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            "*: :_files"

    }

    function _singularity_push {
        _arguments \
            '(-U --allow-unsigned)'{-U,--allow-unsigned}'[do not require a signed container image]' \
            '(-D --description)'{-D,--description}'[description for container image (library:// only)]' \
            '(-h --help)'{-h,--help}'[help for push]' \
            '--library[the library to push to]' \
            "*: :_files"

    }

    function _singularity_remote {
        _arguments \
            '(-c --config)'{-c,--config}'[path to the file holding remote endpoint configurations (default "/home/vierbein/.singularity/remote.yaml")]' \
            '(-h --help)'{-h,--help}'[help for remote]' \
            "*: :_files"

    }

    function _singularity_run {
        _arguments \
            '--add-caps[a comma separated capability list to add]' \
            '--allow-setuid[allow setuid binaries in container (root only)]' \
            '--app[set an application to run inside a container]' \
            '--apply-cgroups[apply cgroups from file for container processes (root only)]' \
            '(-B --bind)'{-B,--bind}'[a user-bind path specification. spec has the format src\[:dest\[:opts\]\], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('\''opts'\'') may be specified as '\''ro'\'' (read-only) or '\''rw'\'' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.]' \
            '(-e --cleanenv)'{-e,--cleanenv}'[clean environment before running container]' \
            '(-c --contain)'{-c,--contain}'[use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host]' \
            '(-C --containall)'{-C,--containall}'[contain not only file systems, but also PID, IPC, and environment]' \
            '--disable-cache[dont use cache, and dont create cache]' \
            '--dns[list of DNS server separated by commas to add in resolv.conf]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '--drop-caps[a comma separated capability list to drop]' \
            '--env[pass environment variable to contained process]' \
            '--env-file[pass environment variables from file to contained process]' \
            '(-f --fakeroot)'{-f,--fakeroot}'[run container in new user namespace as uid 0]' \
            '--fusemount[A FUSE filesystem mount specification of the form '\''<type>:<fuse command> <mountpoint>'\'' - where <type> is '\''container'\'' or '\''host'\'', specifying where the mount will be performed ('\''container-daemon'\'' or '\''host-daemon'\'' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. '\''container:sshfs 10.0.0.1:/ /sshfs'\''. Implies --pid.]' \
            '(-h --help)'{-h,--help}'[help for run]' \
            '(-H --home)'{-H,--home}'[a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default "/home/vierbein")]' \
            '--hostname[set container hostname]' \
            '(-i --ipc)'{-i,--ipc}'[run container in a new IPC namespace]' \
            '--keep-privs[let root user keep privileges in container (root only)]' \
            '(-n --net)'{-n,--net}'[run container in a new network namespace (sets up a bridge network interface by default)]' \
            '--network[specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default "bridge")]' \
            '--network-args[specify network arguments to pass to CNI plugins]' \
            '--no-home[do NOT mount users home directory if /home is not the current working directory]' \
            '--no-init[do NOT start shim process with --pid]' \
            '--no-mount[disable one or more mount xxx options set in singularity.conf]' \
            '--no-privs[drop all privileges from root user in container)]' \
            '--no-umask[do not propagate umask to the container, set default 0022 umask]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            '--nonet[disable VM network handling]' \
            '--nv[enable experimental Nvidia support]' \
            '(-o --overlay)'{-o,--overlay}'[use an overlayFS image for persistent data storage or as read-only layer of container]' \
            '--passphrase[prompt for an encryption passphrase]' \
            '--pem-path[enter an path to a PEM formated RSA key for an encrypted container]' \
            '(-p --pid)'{-p,--pid}'[run container in a new PID namespace]' \
            '--pwd[initial working directory for payload process inside the container]' \
            '--rocm[enable experimental Rocm support]' \
            '(-S --scratch)'{-S,--scratch}'[include a scratch directory within the container that is linked to a temporary dir (use -W to force location)]' \
            '--security[enable security features (SELinux, Apparmor, Seccomp)]' \
            '(-u --userns)'{-u,--userns}'[run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images.]' \
            '--uts[run container in a new UTS namespace]' \
            '--vm[enable VM support]' \
            '--vm-cpu[number of CPU cores to allocate to Virtual Machine (implies --vm) (default "1")]' \
            '--vm-err[enable attaching stderr from VM]' \
            '--vm-ip[IP Address to assign for container usage. Defaults to DHCP within bridge network. (default "dhcp")]' \
            '--vm-ram[amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default "1024")]' \
            '(-W --workdir)'{-W,--workdir}'[working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)]' \
            '(-w --writable)'{-w,--writable}'[by default all Singularity containers are available as read only. This option makes the file system accessible as read/write.]' \
            '--writable-tmpfs[makes the file system accessible as read-write with non persistent data (with overlay support only)]' \
            "*: :_files"

    }

    function _singularity_run-help {
        _arguments \
            '--app[show the help for an app]' \
            '(-h --help)'{-h,--help}'[help for run-help]' \
            "*: :_files"

    }

    function _singularity_search {
        _arguments \
            '--arch[architecture to search for (default "amd64")]' \
            '(-h --help)'{-h,--help}'[help for search]' \
            '--library[URI for library to search]' \
            '--signed[architecture to search for]' \
            "*: :_files"

    }

    function _singularity_shell {
        _arguments \
            '--add-caps[a comma separated capability list to add]' \
            '--allow-setuid[allow setuid binaries in container (root only)]' \
            '--app[set an application to run inside a container]' \
            '--apply-cgroups[apply cgroups from file for container processes (root only)]' \
            '(-B --bind)'{-B,--bind}'[a user-bind path specification. spec has the format src\[:dest\[:opts\]\], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('\''opts'\'') may be specified as '\''ro'\'' (read-only) or '\''rw'\'' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.]' \
            '(-e --cleanenv)'{-e,--cleanenv}'[clean environment before running container]' \
            '(-c --contain)'{-c,--contain}'[use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host]' \
            '(-C --containall)'{-C,--containall}'[contain not only file systems, but also PID, IPC, and environment]' \
            '--disable-cache[dont use cache, and dont create cache]' \
            '--dns[list of DNS server separated by commas to add in resolv.conf]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '--drop-caps[a comma separated capability list to drop]' \
            '--env[pass environment variable to contained process]' \
            '--env-file[pass environment variables from file to contained process]' \
            '(-f --fakeroot)'{-f,--fakeroot}'[run container in new user namespace as uid 0]' \
            '--fusemount[A FUSE filesystem mount specification of the form '\''<type>:<fuse command> <mountpoint>'\'' - where <type> is '\''container'\'' or '\''host'\'', specifying where the mount will be performed ('\''container-daemon'\'' or '\''host-daemon'\'' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. '\''container:sshfs 10.0.0.1:/ /sshfs'\''. Implies --pid.]' \
            '(-h --help)'{-h,--help}'[help for shell]' \
            '(-H --home)'{-H,--home}'[a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default "/home/vierbein")]' \
            '--hostname[set container hostname]' \
            '(-i --ipc)'{-i,--ipc}'[run container in a new IPC namespace]' \
            '--keep-privs[let root user keep privileges in container (root only)]' \
            '(-n --net)'{-n,--net}'[run container in a new network namespace (sets up a bridge network interface by default)]' \
            '--network[specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default "bridge")]' \
            '--network-args[specify network arguments to pass to CNI plugins]' \
            '--no-home[do NOT mount users home directory if /home is not the current working directory]' \
            '--no-init[do NOT start shim process with --pid]' \
            '--no-mount[disable one or more mount xxx options set in singularity.conf]' \
            '--no-privs[drop all privileges from root user in container)]' \
            '--no-umask[do not propagate umask to the container, set default 0022 umask]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            '--nonet[disable VM network handling]' \
            '--nv[enable experimental Nvidia support]' \
            '(-o --overlay)'{-o,--overlay}'[use an overlayFS image for persistent data storage or as read-only layer of container]' \
            '--passphrase[prompt for an encryption passphrase]' \
            '--pem-path[enter an path to a PEM formated RSA key for an encrypted container]' \
            '(-p --pid)'{-p,--pid}'[run container in a new PID namespace]' \
            '--pwd[initial working directory for payload process inside the container]' \
            '--rocm[enable experimental Rocm support]' \
            '(-S --scratch)'{-S,--scratch}'[include a scratch directory within the container that is linked to a temporary dir (use -W to force location)]' \
            '--security[enable security features (SELinux, Apparmor, Seccomp)]' \
            '(-s --shell)'{-s,--shell}'[path to program to use for interactive shell]' \
            '--syos[execute SyOS shell]' \
            '(-u --userns)'{-u,--userns}'[run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images.]' \
            '--uts[run container in a new UTS namespace]' \
            '--vm[enable VM support]' \
            '--vm-cpu[number of CPU cores to allocate to Virtual Machine (implies --vm) (default "1")]' \
            '--vm-err[enable attaching stderr from VM]' \
            '--vm-ip[IP Address to assign for container usage. Defaults to DHCP within bridge network. (default "dhcp")]' \
            '--vm-ram[amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default "1024")]' \
            '(-W --workdir)'{-W,--workdir}'[working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)]' \
            '(-w --writable)'{-w,--writable}'[by default all Singularity containers are available as read only. This option makes the file system accessible as read/write.]' \
            '--writable-tmpfs[makes the file system accessible as read-write with non persistent data (with overlay support only)]' \
            "*: :_files"

    }

    function _singularity_sif {
        _arguments \
            '(-h --help)'{-h,--help}'[help for sif]' \
            "*: :_files"

    }

    function _singularity_sign {
        _arguments \
            '(-g --group-id)'{-g,--group-id}'[sign objects with the specified group ID]' \
            '(-h --help)'{-h,--help}'[help for sign]' \
            '(-k --keyidx)'{-k,--keyidx}'[private key to use (index from '\''key list'\'')]' \
            '(-i --sif-id)'{-i,--sif-id}'[sign object with the specified ID]' \
            "*: :_files"

    }

    function _singularity_test {
        _arguments \
            '--add-caps[a comma separated capability list to add]' \
            '--allow-setuid[allow setuid binaries in container (root only)]' \
            '--app[set an application to run inside a container]' \
            '--apply-cgroups[apply cgroups from file for container processes (root only)]' \
            '(-B --bind)'{-B,--bind}'[a user-bind path specification. spec has the format src\[:dest\[:opts\]\], where src and dest are outside and inside paths. If dest is not given, it is set equal to src. Mount options ('\''opts'\'') may be specified as '\''ro'\'' (read-only) or '\''rw'\'' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.]' \
            '(-e --cleanenv)'{-e,--cleanenv}'[clean environment before running container]' \
            '(-c --contain)'{-c,--contain}'[use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host]' \
            '(-C --containall)'{-C,--containall}'[contain not only file systems, but also PID, IPC, and environment]' \
            '--disable-cache[dont use cache, and dont create cache]' \
            '--dns[list of DNS server separated by commas to add in resolv.conf]' \
            '--docker-login[login to a Docker Repository interactively]' \
            '--drop-caps[a comma separated capability list to drop]' \
            '--env[pass environment variable to contained process]' \
            '--env-file[pass environment variables from file to contained process]' \
            '(-f --fakeroot)'{-f,--fakeroot}'[run container in new user namespace as uid 0]' \
            '--fusemount[A FUSE filesystem mount specification of the form '\''<type>:<fuse command> <mountpoint>'\'' - where <type> is '\''container'\'' or '\''host'\'', specifying where the mount will be performed ('\''container-daemon'\'' or '\''host-daemon'\'' will run the FUSE process detached). <fuse command> is the path to the FUSE executable, plus options for the mount. <mountpoint> is the location in the container to which the FUSE mount will be attached. E.g. '\''container:sshfs 10.0.0.1:/ /sshfs'\''. Implies --pid.]' \
            '(-h --help)'{-h,--help}'[help for test]' \
            '(-H --home)'{-H,--home}'[a home directory specification. spec can either be a src path or src:dest pair. src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default "/home/vierbein")]' \
            '--hostname[set container hostname]' \
            '(-i --ipc)'{-i,--ipc}'[run container in a new IPC namespace]' \
            '--keep-privs[let root user keep privileges in container (root only)]' \
            '(-n --net)'{-n,--net}'[run container in a new network namespace (sets up a bridge network interface by default)]' \
            '--network[specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default "bridge")]' \
            '--network-args[specify network arguments to pass to CNI plugins]' \
            '--no-home[do NOT mount users home directory if /home is not the current working directory]' \
            '--no-init[do NOT start shim process with --pid]' \
            '--no-mount[disable one or more mount xxx options set in singularity.conf]' \
            '--no-privs[drop all privileges from root user in container)]' \
            '--no-umask[do not propagate umask to the container, set default 0022 umask]' \
            '--nohttps[do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)]' \
            '--nonet[disable VM network handling]' \
            '--nv[enable experimental Nvidia support]' \
            '(-o --overlay)'{-o,--overlay}'[use an overlayFS image for persistent data storage or as read-only layer of container]' \
            '--passphrase[prompt for an encryption passphrase]' \
            '--pem-path[enter an path to a PEM formated RSA key for an encrypted container]' \
            '(-p --pid)'{-p,--pid}'[run container in a new PID namespace]' \
            '--pwd[initial working directory for payload process inside the container]' \
            '--rocm[enable experimental Rocm support]' \
            '(-S --scratch)'{-S,--scratch}'[include a scratch directory within the container that is linked to a temporary dir (use -W to force location)]' \
            '--security[enable security features (SELinux, Apparmor, Seccomp)]' \
            '(-u --userns)'{-u,--userns}'[run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images.]' \
            '--uts[run container in a new UTS namespace]' \
            '--vm[enable VM support]' \
            '--vm-cpu[number of CPU cores to allocate to Virtual Machine (implies --vm) (default "1")]' \
            '--vm-err[enable attaching stderr from VM]' \
            '--vm-ip[IP Address to assign for container usage. Defaults to DHCP within bridge network. (default "dhcp")]' \
            '--vm-ram[amount of RAM in MiB to allocate to Virtual Machine (implies --vm) (default "1024")]' \
            '(-W --workdir)'{-W,--workdir}'[working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)]' \
            '(-w --writable)'{-w,--writable}'[by default all Singularity containers are available as read only. This option makes the file system accessible as read/write.]' \
            '--writable-tmpfs[makes the file system accessible as read-write with non persistent data (with overlay support only)]' \
            "*: :_files"

    }

    function _singularity_verify {
        _arguments \
            '(-a --all)'{-a,--all}'[verify all objects]' \
            '(-g --group-id)'{-g,--group-id}'[verify objects with the specified group ID]' \
            '(-h --help)'{-h,--help}'[help for verify]' \
            '(-j --json)'{-j,--json}'[output json]' \
            '--legacy-insecure[enable verification of (insecure) legacy signatures]' \
            '(-l --local)'{-l,--local}'[only verify with local key(s) in keyring]' \
            '(-i --sif-id)'{-i,--sif-id}'[verify object with the specified ID]' \
            '(-u --url)'{-u,--url}'[specify a URL for a key server]' \
            "*: :_files"

    }

    function _singularity_version {
        _arguments \
            '(-h --help)'{-h,--help}'[help for version]' \
            "*: :_files"

    }


function _singularity {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build a Singularity image'
            'cache:Manage the local cache'
            'capability:Manage Linux capabilities for users and groups'
            'config:Manage various singularity configuration (root user only)'
            'delete:Deletes requested image from the library'
            'exec:Run a command within a container'
            'help:Help about any command'
            'inspect:Show metadata for an image'
            'instance:Manage containers running as services'
            'key:Manage OpenPGP keys'
            'oci:Manage OCI containers'
            'overlay:Manage an EXT3 writable overlay image'
            'plugin:Manage Singularity plugins'
            'pull:Pull an image from a URI'
            'push:Upload image to the provided URI'
            'remote:Manage singularity remote endpoints, keyservers and OCI/Docker registry credentials'
            'run:Run the user-defined default command within a container'
            'run-help:Show the user-defined help for an image'
            'search:Search a Container Library for images'
            'shell:Run a shell within a container'
            'sif:siftool is a program for Singularity Image Format (SIF) file manipulation'
            'sign:Attach digital signature(s) to an image'
            'test:Run the user-defined tests within a container'
            'verify:Verify cryptographic signatures attached to an image'
            'version:Show the version for Singularity'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '(-c --config)'{-c,--config}'[specify a configuration file (for root or unprivileged installation only) (default "/usr/local/etc/singularity/singularity.conf")]' \
        '(-d --debug)'{-d,--debug}'[print debugging information (highest verbosity)]' \
        '(-h --help)'{-h,--help}'[help for singularity]' \
        '--nocolor[print without color output (default False)]' \
        '(-q --quiet)'{-q,--quiet}'[suppress normal output]' \
        '(-s --silent)'{-s,--silent}'[only print errors]' \
        '(-v --verbose)'{-v,--verbose}'[print additional information]' \
        '--version[version for singularity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _singularity_build
            ;;

        (cache)
            _singularity_cache
            ;;

        (capability)
            _singularity_capability
            ;;

        (config)
            _singularity_config
            ;;

        (delete)
            _singularity_delete
            ;;

        (exec)
            _singularity_exec
            ;;

        (help)
            _singularity_help
            ;;

        (inspect)
            _singularity_inspect
            ;;

        (instance)
            _singularity_instance
            ;;

        (key)
            _singularity_key
            ;;

        (oci)
            _singularity_oci
            ;;

        (overlay)
            _singularity_overlay
            ;;

        (plugin)
            _singularity_plugin
            ;;

        (pull)
            _singularity_pull
            ;;

        (push)
            _singularity_push
            ;;

        (remote)
            _singularity_remote
            ;;

        (run)
            _singularity_run
            ;;

        (run-help)
            _singularity_run-help
            ;;

        (search)
            _singularity_search
            ;;

        (shell)
            _singularity_shell
            ;;

        (sif)
            _singularity_sif
            ;;

        (sign)
            _singularity_sign
            ;;

        (test)
            _singularity_test
            ;;

        (verify)
            _singularity_verify
            ;;

        (version)
            _singularity_version
            ;;

        esac
        ;;
     esac

}

