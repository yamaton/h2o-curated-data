#compdef _unicycler unicycler

# Generated with h2o 0.1.18


function _unicycler {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '(-h --help)'{-h,--help}'[Show this help message and exit]' \
        '--help_all[Show a help message with all program options]' \
        '--version[Show Unicycler'\''s version number]' \
        '(-1 --short1)'{-1,--short1}'[FASTQ file of first short reads in each pair (required)]' \
        '(-2 --short2)'{-2,--short2}'[FASTQ file of second short reads in each pair (required)]' \
        '(-s --unpaired)'{-s,--unpaired}'[FASTQ file of unpaired short reads (optional)]' \
        '(-l --long)'{-l,--long}'[FASTQ or FASTA file of long reads (optional)]' \
        '(-o --out)'{-o,--out}'[Output directory (required)]' \
        '--verbosity[Level of stdout and log file information (default: 1)   0 = no stdout, 1 = basic progress indicators,   2 = extra info, 3 = debugging info]' \
        '--min_fasta_length[Exclude contigs from the FASTA file which are shorter than this length (default: 100)]' \
        '--keep[Level of file retention (default: 1)   0 = only keep final files: assembly (FASTA,   GFA and log),   1 = also save graphs at main checkpoints,   2 = also keep SAM (enables fast rerun in different mode),   3 = keep all temp files and save all graphs (for debugging)]' \
        '--vcf[Produce a VCF by mapping the short reads to the final assembly (experimental, default: do not produce a vcf file)]' \
        '(-t --threads)'{-t,--threads}'[Number of threads used (default: 4)]' \
        '--mode[Bridging mode (default: normal)   conservative = smaller contigs, lowest misassembly                  rate   normal = moderate contig size and misassembly rate   bold = longest contigs, higher misassembly rate]' \
        '--linear_seqs[The expected number of linear (i.e. non-circular) sequences in the underlying sequence (default: 0)]' \
        '1: :_commands' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

