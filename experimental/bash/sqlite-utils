# Auto-generated with h2o

_sqliteutils()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          query) _sqliteutils_query
            return
            ;;

          add-column) _sqliteutils_addcolumn
            return
            ;;

          add-foreign-key) _sqliteutils_addforeignkey
            return
            ;;

          add-foreign-keys) _sqliteutils_addforeignkeys
            return
            ;;

          add-geometry-column) _sqliteutils_addgeometrycolumn
            return
            ;;

          analyze-tables) _sqliteutils_analyzetables
            return
            ;;

          bulk) _sqliteutils_bulk
            return
            ;;

          convert) _sqliteutils_convert
            return
            ;;

          create-database) _sqliteutils_createdatabase
            return
            ;;

          create-index) _sqliteutils_createindex
            return
            ;;

          create-spatial-index) _sqliteutils_createspatialindex
            return
            ;;

          create-table) _sqliteutils_createtable
            return
            ;;

          create-view) _sqliteutils_createview
            return
            ;;

          disable-fts) _sqliteutils_disablefts
            return
            ;;

          disable-wal) _sqliteutils_disablewal
            return
            ;;

          drop-table) _sqliteutils_droptable
            return
            ;;

          drop-view) _sqliteutils_dropview
            return
            ;;

          dump) _sqliteutils_dump
            return
            ;;

          enable-counts) _sqliteutils_enablecounts
            return
            ;;

          enable-fts) _sqliteutils_enablefts
            return
            ;;

          enable-wal) _sqliteutils_enablewal
            return
            ;;

          extract) _sqliteutils_extract
            return
            ;;

          index-foreign-keys) _sqliteutils_indexforeignkeys
            return
            ;;

          indexes) _sqliteutils_indexes
            return
            ;;

          insert) _sqliteutils_insert
            return
            ;;

          insert-files) _sqliteutils_insertfiles
            return
            ;;

          memory) _sqliteutils_memory
            return
            ;;

          optimize) _sqliteutils_optimize
            return
            ;;

          populate-fts) _sqliteutils_populatefts
            return
            ;;

          rebuild-fts) _sqliteutils_rebuildfts
            return
            ;;

          reset-counts) _sqliteutils_resetcounts
            return
            ;;

          rows) _sqliteutils_rows
            return
            ;;

          schema) _sqliteutils_schema
            return
            ;;

          search) _sqliteutils_search
            return
            ;;

          tables) _sqliteutils_tables
            return
            ;;

          transform) _sqliteutils_transform
            return
            ;;

          triggers) _sqliteutils_triggers
            return
            ;;

          upsert) _sqliteutils_upsert
            return
            ;;

          views) _sqliteutils_views
            return
            ;;

      *)
          word_list=" query add-column add-foreign-key add-foreign-keys add-geometry-column analyze-tables bulk convert create-database create-index create-spatial-index create-table create-view disable-fts disable-wal drop-table drop-view dump enable-counts enable-fts enable-wal extract index-foreign-keys indexes insert insert-files memory optimize populate-fts rebuild-fts reset-counts rows schema search tables transform triggers upsert views --version -h --help"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_sqliteutils_query ()
{
    local cur word_list
    word_list=" --attach --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols -r --raw -p --param --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_addcolumn ()
{
    local cur word_list
    word_list=" --fk --fk-col --not-null-default --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_addforeignkey ()
{
    local cur word_list
    word_list=" --ignore --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_addforeignkeys ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_addgeometrycolumn ()
{
    local cur word_list
    word_list=" -t --type --srid --dimensions --not-null --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_analyzetables ()
{
    local cur word_list
    word_list=" -c --column --save --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_bulk ()
{
    local cur word_list
    word_list=" --batch-size --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_convert ()
{
    local cur word_list
    word_list=" --import --dry-run --multi --where -p --param --output --output-type --drop -s --silent -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_createdatabase ()
{
    local cur word_list
    word_list=" --enable-wal --init-spatialite --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_createindex ()
{
    local cur word_list
    word_list=" --name --unique --if-not-exists --analyze --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_createspatialindex ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_createtable ()
{
    local cur word_list
    word_list=" --pk --not-null --default --fk --ignore --replace --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_createview ()
{
    local cur word_list
    word_list=" --ignore --replace --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_disablefts ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_disablewal ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_droptable ()
{
    local cur word_list
    word_list=" --ignore -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_dropview ()
{
    local cur word_list
    word_list=" --ignore -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_dump ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_enablecounts ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_enablefts ()
{
    local cur word_list
    word_list=" --fts4 --fts5 --tokenize --create-triggers --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_enablewal ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_extract ()
{
    local cur word_list
    word_list=" --table --fk-column --rename --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_indexforeignkeys ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_indexes ()
{
    local cur word_list
    word_list=" --aux --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_insert ()
{
    local cur word_list
    word_list=" --pk --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --batch-size --alter --not-null --default -d --detect-types --analyze --load-extension --silent --ignore --replace --truncate -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_insertfiles ()
{
    local cur word_list
    word_list=" -c --column --pk --alter --replace --upsert --name --text --encoding -s --silent --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_memory ()
{
    local cur word_list
    word_list=" --attach --flatten --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols -r --raw -p --param --encoding -n --no-detect-types --schema --dump --save --analyze --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_optimize ()
{
    local cur word_list
    word_list=" --no-vacuum --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_populatefts ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_rebuildfts ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_resetcounts ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_rows ()
{
    local cur word_list
    word_list=" -c --column --where -p --param --limit --offset --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_schema ()
{
    local cur word_list
    word_list=" --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_search ()
{
    local cur word_list
    word_list=" -o --order -c --column --limit --sql --quote --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_tables ()
{
    local cur word_list
    word_list=" --fts4 --fts5 --counts --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --columns --schema --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_transform ()
{
    local cur word_list
    word_list=" --type --drop --rename -o --column-order --not-null --not-null-false --pk --pk-none --default --default-none --drop-foreign-key --sql --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_triggers ()
{
    local cur word_list
    word_list=" --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_upsert ()
{
    local cur word_list
    word_list=" --pk --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --batch-size --alter --not-null --default -d --detect-types --analyze --load-extension --silent -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sqliteutils_views ()
{
    local cur word_list
    word_list=" --counts --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --columns --schema --load-extension -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _sqliteutils sqlite-utils
