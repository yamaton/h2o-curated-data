#compdef _iperf iperf

# Auto-generated with h2o


function _iperf {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-b,--bandwidth}'[bandwidth to send at in bits/sec or packets per second]' \
        {-e,--enhancedreports}'[use enhanced reporting giving more tcp/udp and traffic information]' \
        {-f,--format}'[\[kmgKMG\] format to report: Kbits, Mbits, KBytes, MBytes]' \
        {-i,--interval}'[# seconds between periodic bandwidth reports]' \
        {-l,--len}'[#\[kmKM\] length of buffer in bytes to read or write (Defaults: TCP=128K, v4 UDP=1470, v6 UDP=1450)]' \
        {-m,--print_mss}'[print TCP maximum segment size (MTU - TCP/IP header)]' \
        {-o,--output}'[<filename> output the report or error message to this specified file]' \
        {-p,--port}'[# server port to listen on/connect to]' \
        {-u,--udp}'[use UDP rather than TCP]' \
        {-z,--realtime}'[request realtime scheduler]' \
        {-C,--compatibility}'[for use with older versions does not sent extra msgs]' \
        {-M,--mss}'[# set TCP maximum segment size (MTU - 40 bytes)]' \
        {-N,--nodelay}'[set TCP no delay, disabling Nagle'\''s Algorithm]' \
        {-S,--tos}'[# set the socket'\''s IP_TOS (byte) field]' \
        {-s,--server}'[run in server mode]' \
        {-t,--time}'[time in seconds to listen for new connections as well as to receive traffic (default not set)]' \
        '--udp-histogram[enable UDP latency histogram(s) with bin width and count, e.g. 1,1000=1(ms),1000(bins)]' \
        {-B,--bind}'[bind to multicast address and optional device]' \
        {-H,--ssm-host}'[set the SSM source, use with -B for (S,G)]' \
        {-U,--single_udp}'[run in single threaded UDP mode]' \
        {-D,--daemon}'[run the server as a daemon]' \
        {-V,--ipv6_domain}'[Enable IPv6 reception by setting the domain and socket to AF_INET6 (Can receive on both IPv4 and IPv6)]' \
        {-c,--client}'[run in client mode, connecting to <host>]' \
        {-d,--dualtest}'[Do a bidirectional test simultaneously]' \
        '--ipg[set the the interpacket gap (milliseconds) for packets within an isochronous frame]' \
        '--isochronous[send traffic in bursts (frames - emulate video traffic),-n, --num       #\[kmgKMG\]    number of bytes to transmit (instead of -t),-r, --tradeoff   Do a bidirectional test individually]' \
        {-t,--time}'[time in seconds to transmit for (default 10 secs)]' \
        {-B,--bind}'[bind ip (and optional port) from which to source traffic,-F, --fileinput <name>   input the data to be transmitted from a file]' \
        {-B,--bind}'[bind ip (and optional port) from which to source traffic,-F, --fileinput <name>   input the data to be transmitted from a file]' \
        {-B,--bind}'[from which to source traffic,-F, --fileinput <name>   input the data to be transmitted from a file]' \
        {-I,--stdin}'[input the data to be transmitted from stdin]' \
        {-L,--listenport}'[port to receive bidirectional tests back on]' \
        {-P,--parallel}'[number of parallel client threads to run]' \
        {-R,--reverse}'[reverse the test (client receives, server sends)]' \
        {-T,--ttl}'[time-to-live, for multicast (default 1)]' \
        {-V,--ipv6_domain}'[Set the domain to IPv6 (send packets over IPv6)]' \
        {-X,--peer-detect}'[perform server version detection and version exchange]' \
        {-x,--reportexclude}'[exclude C(connection) D(data) M(multicast) S(settings) V(server) reports,-y, --reportstyle C   report as a Comma-Separated Values]' \
        {-x,--reportexclude}'[exclude C(connection) D(data) M(multicast) S(settings) V(server) reports,-y, --reportstyle C   report as a Comma-Separated Values]' \
        {-h,--help}'[print this message and quit]' \
        {-v,--version}'[print version information and quit]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

