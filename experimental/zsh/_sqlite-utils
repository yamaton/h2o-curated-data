#compdef sqlite-utils

# Auto-generated with h2o


function _sqlite-utils {
    local line state

    function _commands {
        local -a commands
        commands=(
            'query:Execute SQL query and return the results as JSON'
            'add-column:Add a column to the specified table'
            'add-foreign-key:Add a new foreign key constraint to an existing...'
            'add-foreign-keys:Add multiple new foreign key constraints to a...'
            'add-geometry-column:Add a SpatiaLite geometry column to an existing...'
            'analyze-tables:Analyze the columns in one or more tables'
            'bulk:Execute parameterized SQL against the provided...'
            'convert:Convert columns using Python code you supply.'
            'create-database:Create a new empty database file'
            'create-index:Add an index to the specified table for the...'
            'create-spatial-index:Create a spatial index on a SpatiaLite geometry...'
            'create-table:Add a table with the specified columns.'
            'create-view:Create a view for the provided SELECT query'
            'disable-fts:Disable full-text search for specific table'
            'disable-wal:Disable WAL for database files'
            'drop-table:Drop the specified table'
            'drop-view:Drop the specified view'
            'dump:Output a SQL dump of the schema and full contents...'
            'enable-counts:Configure triggers to update a _counts table with...'
            'enable-fts:Enable full-text search for specific table and...'
            'enable-wal:Enable WAL for database files'
            'extract:Extract one or more columns into a separate table'
            'index-foreign-keys:Ensure every foreign key column has an index on it'
            'indexes:Show indexes for the whole database or specific...'
            'insert:Insert records from FILE into a table, creating...'
            'insert-files:Insert one or more files using BLOB columns in...'
            'memory:Execute SQL query against an in-memory database,...'
            'optimize:Optimize all full-text search tables and then run...'
            'populate-fts:Re-populate full-text search for specific table...'
            'rebuild-fts:Rebuild all or specific full-text search tables'
            'reset-counts:Reset calculated counts in the _counts table'
            'rows:Output all rows in the specified table'
            'schema:Show full schema for this database or for...'
            'search:Execute a full-text search against this table'
            'tables:List the tables in the database'
            'transform:Transform a table beyond the capabilities of...'
            'triggers:Show triggers configured in this database'
            'upsert:Upsert records based on their primary key.'
            'views:List the views in the database'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--version[Show the version and exit.]' \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (query)
            _sqlite-utils_query
            ;;

        (add-column)
            _sqlite-utils_add-column
            ;;

        (add-foreign-key)
            _sqlite-utils_add-foreign-key
            ;;

        (add-foreign-keys)
            _sqlite-utils_add-foreign-keys
            ;;

        (add-geometry-column)
            _sqlite-utils_add-geometry-column
            ;;

        (analyze-tables)
            _sqlite-utils_analyze-tables
            ;;

        (bulk)
            _sqlite-utils_bulk
            ;;

        (convert)
            _sqlite-utils_convert
            ;;

        (create-database)
            _sqlite-utils_create-database
            ;;

        (create-index)
            _sqlite-utils_create-index
            ;;

        (create-spatial-index)
            _sqlite-utils_create-spatial-index
            ;;

        (create-table)
            _sqlite-utils_create-table
            ;;

        (create-view)
            _sqlite-utils_create-view
            ;;

        (disable-fts)
            _sqlite-utils_disable-fts
            ;;

        (disable-wal)
            _sqlite-utils_disable-wal
            ;;

        (drop-table)
            _sqlite-utils_drop-table
            ;;

        (drop-view)
            _sqlite-utils_drop-view
            ;;

        (dump)
            _sqlite-utils_dump
            ;;

        (enable-counts)
            _sqlite-utils_enable-counts
            ;;

        (enable-fts)
            _sqlite-utils_enable-fts
            ;;

        (enable-wal)
            _sqlite-utils_enable-wal
            ;;

        (extract)
            _sqlite-utils_extract
            ;;

        (index-foreign-keys)
            _sqlite-utils_index-foreign-keys
            ;;

        (indexes)
            _sqlite-utils_indexes
            ;;

        (insert)
            _sqlite-utils_insert
            ;;

        (insert-files)
            _sqlite-utils_insert-files
            ;;

        (memory)
            _sqlite-utils_memory
            ;;

        (optimize)
            _sqlite-utils_optimize
            ;;

        (populate-fts)
            _sqlite-utils_populate-fts
            ;;

        (rebuild-fts)
            _sqlite-utils_rebuild-fts
            ;;

        (reset-counts)
            _sqlite-utils_reset-counts
            ;;

        (rows)
            _sqlite-utils_rows
            ;;

        (schema)
            _sqlite-utils_schema
            ;;

        (search)
            _sqlite-utils_search
            ;;

        (tables)
            _sqlite-utils_tables
            ;;

        (transform)
            _sqlite-utils_transform
            ;;

        (triggers)
            _sqlite-utils_triggers
            ;;

        (upsert)
            _sqlite-utils_upsert
            ;;

        (views)
            _sqlite-utils_views
            ;;

        esac
        ;;
     esac

}

function _sqlite-utils_query {
    _arguments \
        '--attach[Additional databases to attach - specify alias and filepath]':file:_files \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        {-r,--raw}'[Raw output, first column of first row]' \
        {-p,--param}'[Named :parameters for SQL query]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_add-column {
    _arguments \
        '--fk[Table to reference as a foreign key]' \
        '--fk-col[Referenced column on that foreign key table - if omitted will automatically use the primary key]' \
        '--not-null-default[Add NOT NULL DEFAULT '\''TEXT'\'' constraint]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_add-foreign-key {
    _arguments \
        '--ignore[If foreign key already exists, do nothing]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_add-foreign-keys {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_add-geometry-column {
    _arguments \
        {-t,--type}'[Specify a geometry type for this column. \[default: GEOMETRY\]]' \
        '--srid[Spatial Reference ID. See https://spatialreference.org for details on specific projections. \[default: 4326\]]' \
        '--dimensions[Coordinate dimensions. Use XYZ for threedimensional geometries.]' \
        '--not-null[Add a NOT NULL constraint.]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_analyze-tables {
    _arguments \
        {-c,--column}'[Specific columns to analyze]' \
        '--save[Save results to _analyze_tables table]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_bulk {
    _arguments \
        '--batch-size[Commit every X records]' \
        '--flatten[Flatten nested JSON objects, so {"a": {"b": 1}} becomes {"a_b": 1}]' \
        '--nl[Expect newline-delimited JSON]' \
        {-c,--csv}'[Expect CSV input]' \
        '--tsv[Expect TSV input]' \
        '--lines[Treat each line as a single value called '\''line'\'']' \
        '--text[Treat input as a single value called '\''text'\'']' \
        '--convert[Python code to convert each item]' \
        '--import[Python modules to import]' \
        '--delimiter[Delimiter to use for CSV files]' \
        '--quotechar[Quote character to use for CSV/TSV]' \
        '--sniff[Detect delimiter and quote character]' \
        '--no-headers[CSV file has no header row]' \
        '--encoding[Character encoding for input, defaults to utf-8]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_convert {
    _arguments \
        '--import[Python modules to import]' \
        '--dry-run[Show results of running this against first 10 rows]' \
        '--multi[Populate columns for keys in returned dictionary]' \
        '--where[Optional where clause]' \
        {-p,--param}'[Named :parameters for where clause]' \
        '--output[Optional separate column to populate with the output]' \
        '--output-type[Column type to use for the output column]' \
        '--drop[Drop original column afterwards]' \
        {-s,--silent}'[Don'\''t show a progress bar]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_create-database {
    _arguments \
        '--enable-wal[Enable WAL mode on the created database]' \
        '--init-spatialite[Enable SpatiaLite on the created database]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_create-index {
    _arguments \
        '--name[Explicit name for the new index]' \
        '--unique[Make this a unique index]' \
        '--if-not-exists[Ignore if index already exists]' \
        '--analyze[Run ANALYZE after creating the index]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_create-spatial-index {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_create-table {
    _arguments \
        '--pk[Column to use as primary key]' \
        '--not-null[Columns that should be created as NOT NULL]' \
        '--default[Default value that should be set for a column]' \
        '--fk[Column, other table, other column to set as a foreign key]' \
        '--ignore[If table already exists, do nothing]' \
        '--replace[If table already exists, replace it]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_create-view {
    _arguments \
        '--ignore[If view already exists, do nothing]' \
        '--replace[If view already exists, replace it]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_disable-fts {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_disable-wal {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_drop-table {
    _arguments \
        '--ignore[--load-extension TEXT SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_drop-view {
    _arguments \
        '--ignore[--load-extension TEXT SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_dump {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_enable-counts {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_enable-fts {
    _arguments \
        '--fts4[Use FTS4]' \
        '--fts5[Use FTS5]' \
        '--tokenize[Tokenizer to use, e.g. porter]' \
        '--create-triggers[Create triggers to update the FTS tables when the parent table changes.]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_enable-wal {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_extract {
    _arguments \
        '--table[Name of the other table to extract columns to]' \
        '--fk-column[Name of the foreign key column to add to the table]' \
        '--rename[Rename this column in extracted table]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_index-foreign-keys {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_indexes {
    _arguments \
        '--aux[Include auxiliary columns]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_insert {
    _arguments \
        '--pk[Columns to use as the primary key, e.g. id]' \
        '--flatten[Flatten nested JSON objects, so {"a": {"b": 1}} becomes {"a_b": 1}]' \
        '--nl[Expect newline-delimited JSON]' \
        {-c,--csv}'[Expect CSV input]' \
        '--tsv[Expect TSV input]' \
        '--lines[Treat each line as a single value called '\''line'\'']' \
        '--text[Treat input as a single value called '\''text'\'']' \
        '--convert[Python code to convert each item]' \
        '--import[Python modules to import]' \
        '--delimiter[Delimiter to use for CSV files]' \
        '--quotechar[Quote character to use for CSV/TSV]' \
        '--sniff[Detect delimiter and quote character]' \
        '--no-headers[CSV file has no header row]' \
        '--encoding[Character encoding for input, defaults to utf-8]' \
        '--batch-size[Commit every X records]' \
        '--alter[Alter existing table to add any missing columns]' \
        '--not-null[Columns that should be created as NOT NULL]' \
        '--default[Default value that should be set for a column]' \
        {-d,--detect-types}'[Detect types for columns in CSV/TSV data]' \
        '--analyze[Run ANALYZE at the end of this operation]' \
        '--load-extension[SQLite extensions to load]' \
        '--silent[Do not show progress bar]' \
        '--ignore[Ignore records if pk already exists]' \
        '--replace[Replace records if pk already exists]' \
        '--truncate[Truncate table before inserting records, if table already exists]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_insert-files {
    _arguments \
        {-c,--column}'[Column definitions for the table]' \
        '--pk[Column to use as primary key]' \
        '--alter[Alter table to add missing columns]' \
        '--replace[Replace files with matching primary key]' \
        '--upsert[Upsert files with matching primary key]' \
        '--name[File name to use]' \
        '--text[Store file content as TEXT, not BLOB]' \
        '--encoding[Character encoding for input, defaults to utf-8]' \
        {-s,--silent}'[Don'\''t show a progress bar]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_memory {
    _arguments \
        '--attach[Additional databases to attach - specify alias and filepath]':file:_files \
        '--flatten[Flatten nested JSON objects, so {"foo": {"bar": 1}} becomes {"foo_bar": 1}]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        {-r,--raw}'[Raw output, first column of first row]' \
        {-p,--param}'[Named :parameters for SQL query]' \
        '--encoding[Character encoding for CSV input, defaults to utf-8]' \
        {-n,--no-detect-types}'[Treat all CSV/TSV columns as TEXT]' \
        '--schema[Show SQL schema for in-memory database]' \
        '--dump[Dump SQL for in-memory database]' \
        '--save[Save in-memory database to this file]':file:_files \
        '--analyze[Analyze resulting tables and output results]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_optimize {
    _arguments \
        '--no-vacuum[Don'\''t run VACUUM]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_populate-fts {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_rebuild-fts {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_reset-counts {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_rows {
    _arguments \
        {-c,--column}'[Columns to return]' \
        '--where[Optional where clause]' \
        {-p,--param}'[Named :parameters for where clause]' \
        '--limit[Number of rows to return - defaults to everything]' \
        '--offset[SQL offset to use]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_schema {
    _arguments \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_search {
    _arguments \
        {-o,--order}'[Order by ('\''column'\'' or '\''column desc'\'')]' \
        {-c,--column}'[Columns to return]' \
        '--limit[Number of rows to return - defaults to everything]' \
        '--sql[Show SQL query that would be run]' \
        '--quote[Apply FTS quoting rules to search term]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_tables {
    _arguments \
        '--fts4[Just show FTS4 enabled tables]' \
        '--fts5[Just show FTS5 enabled tables]' \
        '--counts[Include row counts per table]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--columns[Include list of columns for each table]' \
        '--schema[Include schema for each table]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_transform {
    _arguments \
        '--type[Change column type to INTEGER, TEXT, FLOAT or BLOB]' \
        '--drop[Drop this column]' \
        '--rename[Rename this column to X]' \
        {-o,--column-order}'[Reorder columns]' \
        '--not-null[Set this column to NOT NULL]' \
        '--not-null-false[Remove NOT NULL from this column]' \
        '--pk[Make this column the primary key]' \
        '--pk-none[Remove primary key (convert to rowid table)]' \
        '--default[Set default value for this column]' \
        '--default-none[Remove default from this column]' \
        '--drop-foreign-key[Drop foreign key constraint for this column]' \
        '--sql[Output SQL without executing it]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_triggers {
    _arguments \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_upsert {
    _arguments \
        '--pk[Columns to use as the primary key, e.g. id \[required\]]' \
        '--flatten[Flatten nested JSON objects, so {"a": {"b": 1}} becomes {"a_b": 1}]' \
        '--nl[Expect newline-delimited JSON]' \
        {-c,--csv}'[Expect CSV input]' \
        '--tsv[Expect TSV input]' \
        '--lines[Treat each line as a single value called '\''line'\'']' \
        '--text[Treat input as a single value called '\''text'\'']' \
        '--convert[Python code to convert each item]' \
        '--import[Python modules to import]' \
        '--delimiter[Delimiter to use for CSV files]' \
        '--quotechar[Quote character to use for CSV/TSV]' \
        '--sniff[Detect delimiter and quote character]' \
        '--no-headers[CSV file has no header row]' \
        '--encoding[Character encoding for input, defaults to utf-8]' \
        '--batch-size[Commit every X records]' \
        '--alter[Alter existing table to add any missing columns]' \
        '--not-null[Columns that should be created as NOT NULL]' \
        '--default[Default value that should be set for a column]' \
        {-d,--detect-types}'[Detect types for columns in CSV/TSV data]' \
        '--analyze[Run ANALYZE at the end of this operation]' \
        '--load-extension[SQLite extensions to load]' \
        '--silent[Do not show progress bar]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _sqlite-utils_views {
    _arguments \
        '--counts[Include row counts per view]' \
        '--nl[Output newline-delimited JSON]' \
        '--arrays[Output rows as arrays instead of objects]' \
        '--csv[Output CSV]' \
        '--tsv[Output TSV]' \
        '--no-headers[Omit CSV headers]' \
        {-t,--table}'[Output as a formatted table]' \
        '--fmt[Table format - one of fancy_grid, fancy_outline, github, grid, html, jira, latex, latex_booktabs, latex_longtable, latex_raw, mediawiki, moinmoin, orgtbl, pipe, plain, presto, pretty, psql, rst, simple, textile, tsv, unsafehtml, youtrack]' \
        '--json-cols[Detect JSON cols and output them as JSON, not escaped strings]' \
        '--columns[Include list of columns for each view]' \
        '--schema[Include schema for each view]' \
        '--load-extension[SQLite extensions to load]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

_sqlite-utils "$@"

