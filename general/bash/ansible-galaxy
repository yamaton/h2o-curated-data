# Auto-generated with h2o

_ansiblegalaxy()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          collection) _ansiblegalaxy_collection
            return
            ;;

          role) _ansiblegalaxy_role
            return
            ;;

      *)
          word_list=" collection role --version -h --help -v --verbose"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_ansiblegalaxy_collection ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          collection)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          download) _ansiblegalaxy_download
            return
            ;;

          init) _ansiblegalaxy_init
            return
            ;;

          build) _ansiblegalaxy_build
            return
            ;;

          publish) _ansiblegalaxy_publish
            return
            ;;

          install) _ansiblegalaxy_install
            return
            ;;

          list) _ansiblegalaxy_list
            return
            ;;

          verify) _ansiblegalaxy_verify
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" download init build publish install list verify -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_download ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose --clear-response-cache --no-cache -n --no-deps -p --download-path -r --requirements-file --pre" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_init ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -f --force --init-path --collection-skeleton" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_build ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -f --force --output-path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_publish ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose --no-wait --import-timeout" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_install ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -f --force --clear-response-cache --no-cache -i --ignore-errors -n --no-deps --force-with-deps -p --collections-path -r --requirements-file --pre -U --upgrade --keyring --disable-gpg-verify --signature --required-valid-signature-count --ignore-signature-status-code --offline" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_list ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --collections-path --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_collection_verify ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --collections-path -i --ignore-errors --offline -r --requirements-file --keyring --signature --required-valid-signature-count --ignore-signature-status-code" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansiblegalaxy_role ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          role)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          init) _ansiblegalaxy_init
            return
            ;;

          remove) _ansiblegalaxy_remove
            return
            ;;

          delete) _ansiblegalaxy_delete
            return
            ;;

          list) _ansiblegalaxy_list
            return
            ;;

          search) _ansiblegalaxy_search
            return
            ;;

          import) _ansiblegalaxy_import
            return
            ;;

          setup) _ansiblegalaxy_setup
            return
            ;;

          info) _ansiblegalaxy_info
            return
            ;;

          install) _ansiblegalaxy_install
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" init remove delete list search import setup info install -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_init ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -f --force --offline --init-path --role-skeleton --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_remove ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --roles-path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_delete ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_list ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --roles-path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_search ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose --platforms --galaxy-tags --author" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_import ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose --no-wait --branch --role-name --status" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_setup ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --roles-path --remove --list" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_info ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -p --roles-path --offline" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_role_install ()
{
    local cur word_list
    word_list=" -h --help -s --server --token --api-key -c --ignore-certs --timeout -v --verbose -f --force -p --roles-path -i --ignore-errors -n --no-deps --force-with-deps -r --role-file -g --keep-scm-meta" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _ansiblegalaxy ansible-galaxy
