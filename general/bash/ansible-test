# Auto-generated with h2o

_ansibletest()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          coverage) _ansibletest_coverage
            return
            ;;

          env) _ansibletest_env
            return
            ;;

          shell) _ansibletest_shell
            return
            ;;

          integration) _ansibletest_integration
            return
            ;;

          network-integration) _ansibletest_networkintegration
            return
            ;;

          windows-integration) _ansibletest_windowsintegration
            return
            ;;

          sanity) _ansibletest_sanity
            return
            ;;

          units) _ansibletest_units
            return
            ;;

      *)
          word_list=" coverage env shell integration network-integration windows-integration sanity units -h --help --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_ansibletest_coverage ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          coverage)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          analyze) _ansibletest_analyze
            return
            ;;

          erase) _ansibletest_erase
            return
            ;;

          combine) _ansibletest_combine
            return
            ;;

          report) _ansibletest_report
            return
            ;;

          html) _ansibletest_html
            return
            ;;

          xml) _ansibletest_xml
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" analyze erase combine report html xml -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_analyze ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          analyze)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          targets) _coverage_targets
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" targets -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_analyze_targets ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          targets)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          generate) _analyze_generate
            return
            ;;

          expand) _analyze_expand
            return
            ;;

          filter) _analyze_filter
            return
            ;;

          combine) _analyze_combine
            return
            ;;

          missing) _analyze_missing
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" generate expand filter combine missing -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_targets_generate ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_targets_expand ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_targets_filter ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include-target --exclude-target --include-path --exclude-path --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_targets_combine ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_targets_missing ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --only-gaps --only-exists --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_erase ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --requirements --python --python-interpreter --local --venv --venv-system-site-packages --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_combine ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --group-by --all --stub --export --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_report ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --group-by --all --stub --show-missing --include --omit --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_html ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --group-by --all --stub --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_coverage_xml ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --group-by --all --stub --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_env ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --show --dump --list-files --timeout" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_shell ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --raw --export --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller --target-posix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_integration ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include --exclude --require --coverage --coverage-check --base-branch --changed --untracked --ignore-committed --ignore-staged --ignore-unstaged --start-at --start-at-task --tags --skip-tags --diff --allow-destructive --allow-root --allow-disabled --allow-unstable --allow-unstable-changed --allow-unsupported --retry-on-error --continue-on-error --debug-strategy --changed-all-target --changed-all-mode --list-targets --no-temp-workdir --no-temp-unicode --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller --target" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_networkintegration ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include --exclude --require --coverage --coverage-check --base-branch --changed --untracked --ignore-committed --ignore-staged --ignore-unstaged --start-at --start-at-task --tags --skip-tags --diff --allow-destructive --allow-root --allow-disabled --allow-unstable --allow-unstable-changed --allow-unsupported --retry-on-error --continue-on-error --debug-strategy --changed-all-target --changed-all-mode --list-targets --no-temp-workdir --no-temp-unicode --testcase --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --platform --platform-collection --platform-connection --inventory --controller --target" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_windowsintegration ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include --exclude --require --coverage --coverage-check --base-branch --changed --untracked --ignore-committed --ignore-staged --ignore-unstaged --start-at --start-at-task --tags --skip-tags --diff --allow-destructive --allow-root --allow-disabled --allow-unstable --allow-unstable-changed --allow-unsupported --retry-on-error --continue-on-error --debug-strategy --changed-all-target --changed-all-mode --list-targets --no-temp-workdir --no-temp-unicode --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --windows --inventory --controller --target" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_sanity ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include --exclude --require --coverage --coverage-check --base-branch --changed --untracked --ignore-committed --ignore-staged --ignore-unstaged --test --skip-test --allow-disabled --list-tests --enable-optional-errors --lint --junit --failure-ok --prime-venvs --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller --target-python" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ansibletest_units ()
{
    local cur word_list
    word_list=" -h --help -e --explain -v --verbose --color --debug --truncate --no-redact --include --exclude --require --coverage --coverage-check --base-branch --changed --untracked --ignore-committed --ignore-staged --ignore-unstaged --collect-only --num-workers --requirements --docker-network --docker-terminate --prime-containers --python --python-interpreter --local --venv --venv-system-site-packages --docker --docker-privileged --docker-seccomp --docker-memory --controller --target-python" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _ansibletest ansible-test
