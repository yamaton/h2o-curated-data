# Auto-generated with h2o

_arduinocli()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          board) _arduinocli_board
            return
            ;;

          burn-bootloader) _arduinocli_burnbootloader
            return
            ;;

          cache) _arduinocli_cache
            return
            ;;

          compile) _arduinocli_compile
            return
            ;;

          completion) _arduinocli_completion
            return
            ;;

          config) _arduinocli_config
            return
            ;;

          core) _arduinocli_core
            return
            ;;

          daemon) _arduinocli_daemon
            return
            ;;

          debug) _arduinocli_debug
            return
            ;;

          lib) _arduinocli_lib
            return
            ;;

          monitor) _arduinocli_monitor
            return
            ;;

          outdated) _arduinocli_outdated
            return
            ;;

          sketch) _arduinocli_sketch
            return
            ;;

          update) _arduinocli_update
            return
            ;;

          upgrade) _arduinocli_upgrade
            return
            ;;

          upload) _arduinocli_upload
            return
            ;;

          version) _arduinocli_version
            return
            ;;

      *)
          word_list=" board burn-bootloader cache compile completion config core daemon debug lib monitor outdated sketch update upgrade upload version --additional-urls --config-file --format -h --help --log-file --log-format --log-level --no-color -v --verbose"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_arduinocli_board ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          board)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          attach) _arduinocli_attach
            return
            ;;

          details) _arduinocli_details
            return
            ;;

          list) _arduinocli_list
            return
            ;;

          listall) _arduinocli_listall
            return
            ;;

          search) _arduinocli_search
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" attach details list listall search -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_board_attach ()
{
    local cur word_list
    word_list=" --discovery-timeout -b --fqbn -h --help -p --port -l --protocol --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_board_details ()
{
    local cur word_list
    word_list=" -b --fqbn -f --full -h --help --list-programmers --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_board_list ()
{
    local cur word_list
    word_list=" --discovery-timeout -h --help -w --watch --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_board_listall ()
{
    local cur word_list
    word_list=" -h --help -a --show-hidden --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_board_search ()
{
    local cur word_list
    word_list=" -h --help -a --show-hidden --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_burnbootloader ()
{
    local cur word_list
    word_list=" --discovery-timeout -b --fqbn -h --help -p --port -P --programmer -l --protocol -t --verify --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_cache ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          cache)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          clean) _arduinocli_clean
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" clean -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cache_clean ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_compile ()
{
    local cur word_list
    word_list=" --build-cache-path --build-path --build-property --clean --discovery-timeout -e --export-binaries -b --fqbn -h --help --libraries --library --only-compilation-database --optimize-for-debug --output-dir -p --port --preprocess -P --programmer -l --protocol --quiet --show-properties -u --upload -t --verify --vid-pid --warnings --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_completion ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _arduinocli_add
            return
            ;;

          delete) _arduinocli_delete
            return
            ;;

          dump) _arduinocli_dump
            return
            ;;

          init) _arduinocli_init
            return
            ;;

          remove) _arduinocli_remove
            return
            ;;

          set) _arduinocli_set
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add delete dump init remove set -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_add ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_delete ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_dump ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_init ()
{
    local cur word_list
    word_list=" --dest-dir --dest-file -h --help --overwrite --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_remove ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_set ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_core ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          core)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          download) _arduinocli_download
            return
            ;;

          install) _arduinocli_install
            return
            ;;

          list) _arduinocli_list
            return
            ;;

          search) _arduinocli_search
            return
            ;;

          uninstall) _arduinocli_uninstall
            return
            ;;

          upgrade) _arduinocli_upgrade
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" download install list search uninstall upgrade -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_download ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_install ()
{
    local cur word_list
    word_list=" -h --help --run-post-install --skip-post-install --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_list ()
{
    local cur word_list
    word_list=" --all -h --help --updatable --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_search ()
{
    local cur word_list
    word_list=" -a --all -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_uninstall ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_core_upgrade ()
{
    local cur word_list
    word_list=" -h --help --run-post-install --skip-post-install --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_daemon ()
{
    local cur word_list
    word_list=" --daemonize --debug --debug-filter -h --help --ip --port --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_debug ()
{
    local cur word_list
    word_list=" --discovery-timeout -b --fqbn -h --help -I --info --input-dir --interpreter -p --port -P --programmer -l --protocol --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_lib ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          lib)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          deps) _arduinocli_deps
            return
            ;;

          download) _arduinocli_download
            return
            ;;

          examples) _arduinocli_examples
            return
            ;;

          install) _arduinocli_install
            return
            ;;

          list) _arduinocli_list
            return
            ;;

          search) _arduinocli_search
            return
            ;;

          uninstall) _arduinocli_uninstall
            return
            ;;

          upgrade) _arduinocli_upgrade
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" deps download examples install list search uninstall upgrade -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_deps ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_download ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_examples ()
{
    local cur word_list
    word_list=" -b --fqbn -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_install ()
{
    local cur word_list
    word_list=" --git-url -h --help --no-deps --zip-path --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_list ()
{
    local cur word_list
    word_list=" --all -b --fqbn -h --help --updatable --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_search ()
{
    local cur word_list
    word_list=" -h --help --names --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_uninstall ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_lib_upgrade ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_monitor ()
{
    local cur word_list
    word_list=" -c --config --describe --discovery-timeout -b --fqbn -h --help -p --port -l --protocol -q --quiet --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_outdated ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_sketch ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          sketch)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          archive) _arduinocli_archive
            return
            ;;

          new) _arduinocli_new
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" archive new -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sketch_archive ()
{
    local cur word_list
    word_list=" -h --help --include-build-dir --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sketch_new ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_update ()
{
    local cur word_list
    word_list=" -h --help --show-outdated --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_upgrade ()
{
    local cur word_list
    word_list=" -h --help --run-post-install --skip-post-install --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_upload ()
{
    local cur word_list
    word_list=" --discovery-timeout -b --fqbn -h --help --input-dir -i --input-file -p --port -P --programmer -l --protocol -t --verify --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_arduinocli_version ()
{
    local cur word_list
    word_list=" -h --help --additional-urls --config-file --format --log-file --log-format --log-level --no-color -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _arduinocli arduino-cli
