# Generated with h2o 0.1.18

# autogenerated bash script

_cargo()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          build) _cargo_build
            return
            ;;

          check) _cargo_check
            return
            ;;

          clean) _cargo_clean
            return
            ;;

          doc) _cargo_doc
            return
            ;;

          new) _cargo_new
            return
            ;;

          init) _cargo_init
            return
            ;;

          run) _cargo_run
            return
            ;;

          test) _cargo_test
            return
            ;;

          bench) _cargo_bench
            return
            ;;

          update) _cargo_update
            return
            ;;

          search) _cargo_search
            return
            ;;

          publish) _cargo_publish
            return
            ;;

          install) _cargo_install
            return
            ;;

          uninstall) _cargo_uninstall
            return
            ;;

      *)
          word_list=" build check clean doc new init run test bench update search publish install uninstall -V --version --list --explain -v --verbose -q --quiet --color --frozen --locked --offline --config -Z -h --help" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_cargo_build ()
{
    local cur word_list
    word_list=" -q --quiet -p --package --all --workspace --exclude -j --jobs --lib --bin --bins --example --examples --test --tests --bench --benches --all-targets --release --profile --features --all-features --no-default-features --target --target-dir --out-dir --manifest-path --ignore-rust-version --message-format --build-plan --unit-graph --future-incompat-report -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_check ()
{
    local cur word_list
    word_list=" -q --quiet -p --package --all --workspace --exclude -j --jobs --lib --bin --bins --example --examples --test --tests --bench --benches --all-targets --release --profile --features --all-features --no-default-features --target --target-dir --manifest-path --ignore-rust-version --message-format --unit-graph --future-incompat-report -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_clean ()
{
    local cur word_list
    word_list=" -q --quiet -p --package --manifest-path --target --target-dir --release --profile --doc -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_doc ()
{
    local cur word_list
    word_list=" -q --quiet --open -p --package --all --workspace --exclude --no-deps --document-private-items -j --jobs --lib --bin --bins --release --profile --features --all-features --no-default-features --target --target-dir --manifest-path --message-format --ignore-rust-version --unit-graph -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_new ()
{
    local cur word_list
    word_list=" -q --quiet --registry --vcs --bin --lib --edition --name -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_init ()
{
    local cur word_list
    word_list=" -q --quiet --registry --vcs --bin --lib --edition --name -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_run ()
{
    local cur word_list
    word_list=" -q --quiet --bin --example -p --package -j --jobs --release --profile --features --all-features --no-default-features --target --target-dir --manifest-path --message-format --unit-graph --ignore-rust-version -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_test ()
{
    local cur word_list
    word_list=" -q --quiet --lib --bin --bins --example --examples --test --tests --bench --benches --all-targets --doc --no-run --no-fail-fast -p --package --all --workspace --exclude -j --jobs --release --profile --features --all-features --no-default-features --target --target-dir --manifest-path --ignore-rust-version --message-format --unit-graph --future-incompat-report -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_bench ()
{
    local cur word_list
    word_list=" -q --quiet --lib --bin --bins --example --examples --test --tests --bench --benches --all-targets --no-run -p --package --all --workspace --exclude -j --jobs --features --all-features --no-default-features --target --target-dir --manifest-path --ignore-rust-version --message-format --no-fail-fast --unit-graph -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_update ()
{
    local cur word_list
    word_list=" -q --quiet -w --workspace -p --package --aggressive --dry-run --precise --manifest-path -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_search ()
{
    local cur word_list
    word_list=" -q --quiet --index --limit --registry -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_publish ()
{
    local cur word_list
    word_list=" -q --quiet --index --token --no-verify --allow-dirty --target --target-dir --manifest-path --features --all-features --no-default-features -j --jobs --dry-run --registry -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_install ()
{
    local cur word_list
    word_list=" -q --quiet --version --git --branch --tag --rev --path --list -j --jobs -f --force --no-track --features --all-features --no-default-features --profile --debug --bin --bins --example --examples --target --target-dir --root --index --registry -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cargo_uninstall ()
{
    local cur word_list
    word_list=" -q --quiet -p --package --bin --root -v --verbose --color --frozen --locked --offline --config -Z -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _cargo cargo
