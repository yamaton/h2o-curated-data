# Generated with h2o 0.1.18

# autogenerated bash script

_conda()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          activate) _conda_activate
            return
            ;;

          deactivate) _conda_deactivate
            return
            ;;

          clean) _conda_clean
            return
            ;;

          compare) _conda_compare
            return
            ;;

          config) _conda_config
            return
            ;;

          create) _conda_create
            return
            ;;

          help) _conda_help
            return
            ;;

          info) _conda_info
            return
            ;;

          init) _conda_init
            return
            ;;

          install) _conda_install
            return
            ;;

          list) _conda_list
            return
            ;;

          package) _conda_package
            return
            ;;

          remove) _conda_remove
            return
            ;;

          uninstall) _conda_uninstall
            return
            ;;

          run) _conda_run
            return
            ;;

          search) _conda_search
            return
            ;;

          update) _conda_update
            return
            ;;

          upgrade) _conda_upgrade
            return
            ;;

      *)
          word_list=" activate deactivate clean compare config create help info init install list package remove uninstall run search update upgrade -h --help -V --version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_conda_clean ()
{
    local cur word_list
    word_list=" -h --help -a --all -i --index-cache -p --packages -t --tarballs -f --force-pkgs-dirs -c --tempfiles -d --dry-run --json -q --quiet -v --verbose -y --yes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_compare ()
{
    local cur word_list
    word_list=" -h --help --json -v --verbose -q --quiet -n --name -p --prefix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_config ()
{
    local cur word_list
    word_list=" -h --help --json -v --verbose -q --quiet --system --env --file --show --show-sources --validate --describe --write-default --get --append --prepend --add --set --remove --remove-key --stdin" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_create ()
{
    local cur word_list
    word_list=" -h --help --clone --file --dev -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --strict-channel-priority --no-channel-priority --no-deps --only-deps --no-pin --no-default-packages --copy -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes --download-only --show-channel-urls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_help ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_info ()
{
    local cur word_list
    word_list=" -h --help -a --all --base -e --envs -s --system --unsafe-channels --json -v --verbose -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_init ()
{
    local cur word_list
    word_list=" -h --help --all -d --dry-run --reverse --json -v --verbose -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_install ()
{
    local cur word_list
    word_list=" -h --help --revision --file --dev -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --strict-channel-priority --no-channel-priority --no-deps --only-deps --no-pin --force-reinstall --freeze-installed --no-update-deps --update-deps -S --satisfied-skip-solve --update-all --all --update-specs --copy -m --mkdir --clobber -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes --download-only --show-channel-urls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_list ()
{
    local cur word_list
    word_list=" -h --help --show-channel-urls -c --canonical -f --full-name --explicit --md5 -e --export -r --revisions --no-pip -n --name -p --prefix --json -v --verbose -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_package ()
{
    local cur word_list
    word_list=" -h --help -w --which -r --reset -u --untracked --pkg-name --pkg-version --pkg-build -n --name -p --prefix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_remove ()
{
    local cur word_list
    word_list=" -h --help --dev -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --all --features --force-remove --force --no-pin -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_uninstall ()
{
    local cur word_list
    word_list=" -h --help --dev -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --all --features --force-remove --force --no-pin -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_run ()
{
    local cur word_list
    word_list=" -h --help -v --verbose --dev --debug-wrapper-scripts --cwd --no-capture-output --live-stream -n --name -p --prefix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_search ()
{
    local cur word_list
    word_list=" -h --help --envs -i --info --subdir --platform -c --channel --use-local --override-channels --repodata-fn -C --use-index-cache -k --insecure --offline --json -v --verbose -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_update ()
{
    local cur word_list
    word_list=" -h --help --file -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --strict-channel-priority --no-channel-priority --no-deps --only-deps --no-pin --force-reinstall --freeze-installed --no-update-deps --update-deps -S --satisfied-skip-solve --update-all --all --update-specs --copy --clobber -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes --download-only --show-channel-urls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_conda_upgrade ()
{
    local cur word_list
    word_list=" -h --help --file -n --name -p --prefix -c --channel --use-local --override-channels --repodata-fn --strict-channel-priority --no-channel-priority --no-deps --only-deps --no-pin --force-reinstall --freeze-installed --no-update-deps --update-deps -S --satisfied-skip-solve --update-all --all --update-specs --copy --clobber -C --use-index-cache -k --insecure --offline -d --dry-run --json -q --quiet -v --verbose -y --yes --download-only --show-channel-urls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _conda conda
