# Auto-generated with h2o

_docker()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" run exec ps build pull push images login logout search version info attach commit cp create diff events export history import inspect kill load logs pause port rename restart rm rmi save start stats stop tag top unpause update wait builder buildx compose container context dev extension image init manifest network plugin sbom scan scout system trust volume swarm"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        run) _docker_run
            return
            ;;

        exec) _docker_exec
            return
            ;;

        ps) _docker_ps
            return
            ;;

        build) _docker_build
            return
            ;;

        pull) _docker_pull
            return
            ;;

        push) _docker_push
            return
            ;;

        images) _docker_images
            return
            ;;

        login) _docker_login
            return
            ;;

        logout) _docker_logout
            return
            ;;

        search) _docker_search
            return
            ;;

        version) _docker_version
            return
            ;;

        info) _docker_info
            return
            ;;

        attach) _docker_attach
            return
            ;;

        commit) _docker_commit
            return
            ;;

        cp) _docker_cp
            return
            ;;

        create) _docker_create
            return
            ;;

        diff) _docker_diff
            return
            ;;

        events) _docker_events
            return
            ;;

        export) _docker_export
            return
            ;;

        history) _docker_history
            return
            ;;

        import) _docker_import
            return
            ;;

        inspect) _docker_inspect
            return
            ;;

        kill) _docker_kill
            return
            ;;

        load) _docker_load
            return
            ;;

        logs) _docker_logs
            return
            ;;

        pause) _docker_pause
            return
            ;;

        port) _docker_port
            return
            ;;

        rename) _docker_rename
            return
            ;;

        restart) _docker_restart
            return
            ;;

        rm) _docker_rm
            return
            ;;

        rmi) _docker_rmi
            return
            ;;

        save) _docker_save
            return
            ;;

        start) _docker_start
            return
            ;;

        stats) _docker_stats
            return
            ;;

        stop) _docker_stop
            return
            ;;

        tag) _docker_tag
            return
            ;;

        top) _docker_top
            return
            ;;

        unpause) _docker_unpause
            return
            ;;

        update) _docker_update
            return
            ;;

        wait) _docker_wait
            return
            ;;

        builder) _docker_builder
            return
            ;;

        buildx) _docker_buildx
            return
            ;;

        compose) _docker_compose
            return
            ;;

        container) _docker_container
            return
            ;;

        context) _docker_context
            return
            ;;

        dev) _docker_dev
            return
            ;;

        extension) _docker_extension
            return
            ;;

        image) _docker_image
            return
            ;;

        init) _docker_init
            return
            ;;

        manifest) _docker_manifest
            return
            ;;

        network) _docker_network
            return
            ;;

        plugin) _docker_plugin
            return
            ;;

        sbom) _docker_sbom
            return
            ;;

        scan) _docker_scan
            return
            ;;

        scout) _docker_scout
            return
            ;;

        system) _docker_system
            return
            ;;

        trust) _docker_trust
            return
            ;;

        volume) _docker_volume
            return
            ;;

        swarm) _docker_swarm
            return
            ;;

    esac

    local word_list=" run exec ps build pull push images login logout search version info attach commit cp create diff events export history import inspect kill load logs pause port rename restart rm rmi save start stats stop tag top unpause update wait builder buildx compose container context dev extension image init manifest network plugin sbom scan scout system trust volume swarm "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_run()
{
    local word_list="  --add-host --annotation -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --restart --rm --runtime --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_exec()
{
    local word_list="  -d --detach --detach-keys -e --env --env-file -i --interactive --privileged -t --tty -u --user -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_ps()
{
    local word_list="  -a --all -f --filter --format -n --last -l --latest --no-trunc -q --quiet -s --size"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_build()
{
    local word_list="  --add-host --allow --attest --build-arg --build-context --builder --cache-from --cache-to --cgroup-parent -f --file --iidfile --label --load --metadata-file --network --no-cache --no-cache-filter -o --output --platform --progress --provenance --pull --push -q --quiet --sbom --secret --shm-size --ssh -t --tag --target --ulimit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_pull()
{
    local word_list="  -a --all-tags --disable-content-trust --platform -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_push()
{
    local word_list="  -a --all-tags --disable-content-trust -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_images()
{
    local word_list="  -a --all --digests -f --filter --format --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_login()
{
    local word_list="  -h --help -p --password --password-stdin -u --username"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_logout()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_search()
{
    local word_list="  -f --filter --format --limit --no-trunc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_version()
{
    local word_list="  -f --format -h --help --kubeconfig"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_info()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_attach()
{
    local word_list="  --detach-keys --no-stdin --sig-proxy"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_commit()
{
    local word_list="  -a --author -c --change -m --message -p --pause"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_cp()
{
    local word_list="  -a --archive -L --follow-link -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_create()
{
    local word_list="  --add-host --annotation -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --restart --rm --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_diff()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_events()
{
    local word_list="  -f --filter --format --since --until"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_export()
{
    local word_list="  -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_history()
{
    local word_list="  --format -H --human --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_import()
{
    local word_list="  -c --change -m --message --platform"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_inspect()
{
    local word_list="  -f --format -s --size --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_kill()
{
    local word_list="  -s --signal"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_load()
{
    local word_list="  -i --input -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_logs()
{
    local word_list="  --details -f --follow --since -n --tail -t --timestamps --until"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_pause()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_port()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_rename()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_restart()
{
    local word_list="  -s --signal -t --time"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_rm()
{
    local word_list="  -f --force -l --link -v --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_rmi()
{
    local word_list="  -f --force --no-prune"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_save()
{
    local word_list="  -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_start()
{
    local word_list="  -a --attach --detach-keys -i --interactive"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_stats()
{
    local word_list="  -a --all --format --no-stream --no-trunc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_stop()
{
    local word_list="  -s --signal -t --time"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_tag()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_top()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_unpause()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_update()
{
    local word_list="  --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -m --memory --memory-reservation --memory-swap --pids-limit --restart"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_wait()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder()
{
    local cmd i subcommands
    local subcommands=" imagetools bake build create du inspect ls prune rm stop use version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        imagetools) _docker_builder_imagetools
            return
            ;;

        bake) _docker_builder_bake
            return
            ;;

        build) _docker_builder_build
            return
            ;;

        create) _docker_builder_create
            return
            ;;

        du) _docker_builder_du
            return
            ;;

        inspect) _docker_builder_inspect
            return
            ;;

        ls) _docker_builder_ls
            return
            ;;

        prune) _docker_builder_prune
            return
            ;;

        rm) _docker_builder_rm
            return
            ;;

        stop) _docker_builder_stop
            return
            ;;

        use) _docker_builder_use
            return
            ;;

        version) _docker_builder_version
            return
            ;;

    esac

    local word_list=" imagetools bake build create du inspect ls prune rm stop use version --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_imagetools()
{
    local cmd i subcommands
    local subcommands=" create inspect"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _docker_builder_imagetools_create
            return
            ;;

        inspect) _docker_builder_imagetools_inspect
            return
            ;;

    esac

    local word_list=" create inspect --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_imagetools_create()
{
    local word_list="  --append --builder --dry-run -f --file --progress -t --tag"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_imagetools_inspect()
{
    local word_list="  --builder --format --raw"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_bake()
{
    local word_list="  --builder -f --file --load --metadata-file --no-cache --print --progress --provenance --pull --push --sbom --set"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_build()
{
    local word_list="  --add-host --allow --attest --build-arg --build-context --builder --cache-from --cache-to --cgroup-parent -f --file --iidfile --label --load --metadata-file --network --no-cache --no-cache-filter -o --output --platform --progress --provenance --pull --push -q --quiet --sbom --secret --shm-size --ssh -t --tag --target --ulimit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_create()
{
    local word_list="  --append --bootstrap --buildkitd-flags --config --driver --driver-opt --leave --name --node --platform --use"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_du()
{
    local word_list="  --builder --filter --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_inspect()
{
    local word_list="  --bootstrap --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_ls()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_prune()
{
    local word_list="  -a --all --builder --filter -f --force --keep-storage --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_rm()
{
    local word_list="  --all-inactive --builder -f --force --keep-daemon --keep-state"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_stop()
{
    local word_list="  --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_use()
{
    local word_list="  --builder --default --global"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_builder_version()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx()
{
    local cmd i subcommands
    local subcommands=" imagetools bake build create du inspect ls prune rm stop use version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        imagetools) _docker_buildx_imagetools
            return
            ;;

        bake) _docker_buildx_bake
            return
            ;;

        build) _docker_buildx_build
            return
            ;;

        create) _docker_buildx_create
            return
            ;;

        du) _docker_buildx_du
            return
            ;;

        inspect) _docker_buildx_inspect
            return
            ;;

        ls) _docker_buildx_ls
            return
            ;;

        prune) _docker_buildx_prune
            return
            ;;

        rm) _docker_buildx_rm
            return
            ;;

        stop) _docker_buildx_stop
            return
            ;;

        use) _docker_buildx_use
            return
            ;;

        version) _docker_buildx_version
            return
            ;;

    esac

    local word_list=" imagetools bake build create du inspect ls prune rm stop use version --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_imagetools()
{
    local cmd i subcommands
    local subcommands=" create inspect"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _docker_buildx_imagetools_create
            return
            ;;

        inspect) _docker_buildx_imagetools_inspect
            return
            ;;

    esac

    local word_list=" create inspect --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_imagetools_create()
{
    local word_list="  --append --builder --dry-run -f --file --progress -t --tag"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_imagetools_inspect()
{
    local word_list="  --builder --format --raw"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_bake()
{
    local word_list="  --builder -f --file --load --metadata-file --no-cache --print --progress --provenance --pull --push --sbom --set"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_build()
{
    local word_list="  --add-host --allow --attest --build-arg --build-context --builder --cache-from --cache-to --cgroup-parent -f --file --iidfile --label --load --metadata-file --network --no-cache --no-cache-filter -o --output --platform --progress --provenance --pull --push -q --quiet --sbom --secret --shm-size --ssh -t --tag --target --ulimit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_create()
{
    local word_list="  --append --bootstrap --buildkitd-flags --config --driver --driver-opt --leave --name --node --platform --use"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_du()
{
    local word_list="  --builder --filter --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_inspect()
{
    local word_list="  --bootstrap --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_ls()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_prune()
{
    local word_list="  -a --all --builder --filter -f --force --keep-storage --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_rm()
{
    local word_list="  --all-inactive --builder -f --force --keep-daemon --keep-state"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_stop()
{
    local word_list="  --builder"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_use()
{
    local word_list="  --builder --default --global"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_buildx_version()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose()
{
    local cmd i subcommands
    local subcommands=" build config cp create down events exec images kill logs ls pause port ps pull push restart rm run start stop top unpause up version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        build) _docker_compose_build
            return
            ;;

        config) _docker_compose_config
            return
            ;;

        cp) _docker_compose_cp
            return
            ;;

        create) _docker_compose_create
            return
            ;;

        down) _docker_compose_down
            return
            ;;

        events) _docker_compose_events
            return
            ;;

        exec) _docker_compose_exec
            return
            ;;

        images) _docker_compose_images
            return
            ;;

        kill) _docker_compose_kill
            return
            ;;

        logs) _docker_compose_logs
            return
            ;;

        ls) _docker_compose_ls
            return
            ;;

        pause) _docker_compose_pause
            return
            ;;

        port) _docker_compose_port
            return
            ;;

        ps) _docker_compose_ps
            return
            ;;

        pull) _docker_compose_pull
            return
            ;;

        push) _docker_compose_push
            return
            ;;

        restart) _docker_compose_restart
            return
            ;;

        rm) _docker_compose_rm
            return
            ;;

        run) _docker_compose_run
            return
            ;;

        start) _docker_compose_start
            return
            ;;

        stop) _docker_compose_stop
            return
            ;;

        top) _docker_compose_top
            return
            ;;

        unpause) _docker_compose_unpause
            return
            ;;

        up) _docker_compose_up
            return
            ;;

        version) _docker_compose_version
            return
            ;;

    esac

    local word_list=" build config cp create down events exec images kill logs ls pause port ps pull push restart rm run start stop top unpause up version --ansi --compatibility --dry-run --env-file -f --file --parallel --profile --progress --project-directory -p --project-name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_build()
{
    local word_list="  --build-arg --dry-run -m --memory --no-cache --pull --push -q --quiet --ssh"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_config()
{
    local word_list="  --dry-run --format --hash --images --no-consistency --no-interpolate --no-normalize --no-path-resolution -o --output --profiles -q --quiet --resolve-image-digests --services --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_cp()
{
    local word_list="  -a --archive --dry-run -L --follow-link --index"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_create()
{
    local word_list="  --build --dry-run --force-recreate --no-build --no-recreate --pull --remove-orphans --scale"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_down()
{
    local word_list="  --dry-run --remove-orphans --rmi -t --timeout -v --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_events()
{
    local word_list="  --dry-run --json"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_exec()
{
    local word_list="  -d --detach --dry-run -e --env --index -T --no-TTY --privileged -u --user -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_images()
{
    local word_list="  --dry-run --format -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_kill()
{
    local word_list="  --dry-run --remove-orphans -s --signal"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_logs()
{
    local word_list="  --dry-run -f --follow --no-color --no-log-prefix --since -n --tail -t --timestamps --until"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_ls()
{
    local word_list="  -a --all --dry-run --filter --format -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_pause()
{
    local word_list="  --dry-run"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_port()
{
    local word_list="  --dry-run --index --protocol"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_ps()
{
    local word_list="  -a --all --dry-run --filter --format -q --quiet --services --status"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_pull()
{
    local word_list="  --dry-run --ignore-buildable --ignore-pull-failures --include-deps -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_push()
{
    local word_list="  --dry-run --ignore-push-failures --include-deps -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_restart()
{
    local word_list="  --dry-run --no-deps -t --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_rm()
{
    local word_list="  --dry-run -f --force -s --stop -v --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_run()
{
    local word_list="  --build --cap-add --cap-drop -d --detach --dry-run --entrypoint -e --env -i --interactive -l --label --name -T --no-TTY --no-deps -p --publish --quiet-pull --remove-orphans --rm --service-ports --use-aliases -u --user -v --volume -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_start()
{
    local word_list="  --dry-run"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_stop()
{
    local word_list="  --dry-run -t --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_top()
{
    local word_list="  --dry-run"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_unpause()
{
    local word_list="  --dry-run"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_up()
{
    local word_list="  --abort-on-container-exit --always-recreate-deps --attach --attach-dependencies --build -d --detach --dry-run --exit-code-from --force-recreate --no-attach --no-build --no-color --no-deps --no-log-prefix --no-recreate --no-start --pull --quiet-pull --remove-orphans -V --renew-anon-volumes --scale -t --timeout --timestamps --wait --wait-timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_compose_version()
{
    local word_list="  --dry-run -f --format --short"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container()
{
    local cmd i subcommands
    local subcommands=" attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        attach) _docker_container_attach
            return
            ;;

        commit) _docker_container_commit
            return
            ;;

        cp) _docker_container_cp
            return
            ;;

        create) _docker_container_create
            return
            ;;

        diff) _docker_container_diff
            return
            ;;

        exec) _docker_container_exec
            return
            ;;

        export) _docker_container_export
            return
            ;;

        inspect) _docker_container_inspect
            return
            ;;

        kill) _docker_container_kill
            return
            ;;

        logs) _docker_container_logs
            return
            ;;

        ls) _docker_container_ls
            return
            ;;

        pause) _docker_container_pause
            return
            ;;

        port) _docker_container_port
            return
            ;;

        prune) _docker_container_prune
            return
            ;;

        rename) _docker_container_rename
            return
            ;;

        restart) _docker_container_restart
            return
            ;;

        rm) _docker_container_rm
            return
            ;;

        run) _docker_container_run
            return
            ;;

        start) _docker_container_start
            return
            ;;

        stats) _docker_container_stats
            return
            ;;

        stop) _docker_container_stop
            return
            ;;

        top) _docker_container_top
            return
            ;;

        unpause) _docker_container_unpause
            return
            ;;

        update) _docker_container_update
            return
            ;;

        wait) _docker_container_wait
            return
            ;;

    esac

    local word_list=" attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_attach()
{
    local word_list="  --detach-keys --no-stdin --sig-proxy"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_commit()
{
    local word_list="  -a --author -c --change -m --message -p --pause"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_cp()
{
    local word_list="  -a --archive -L --follow-link -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_create()
{
    local word_list="  --add-host --annotation -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --restart --rm --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_diff()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_exec()
{
    local word_list="  -d --detach --detach-keys -e --env --env-file -i --interactive --privileged -t --tty -u --user -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_export()
{
    local word_list="  -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_inspect()
{
    local word_list="  -f --format -s --size"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_kill()
{
    local word_list="  -s --signal"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_logs()
{
    local word_list="  --details -f --follow --since -n --tail -t --timestamps --until"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_ls()
{
    local word_list="  -a --all -f --filter --format -n --last -l --latest --no-trunc -q --quiet -s --size"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_pause()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_port()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_prune()
{
    local word_list="  --filter -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_rename()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_restart()
{
    local word_list="  -s --signal -t --time"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_rm()
{
    local word_list="  -f --force -l --link -v --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_run()
{
    local word_list="  --add-host --annotation -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --restart --rm --runtime --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_start()
{
    local word_list="  -a --attach --detach-keys -i --interactive"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_stats()
{
    local word_list="  -a --all --format --no-stream --no-trunc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_stop()
{
    local word_list="  -s --signal -t --time"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_top()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_unpause()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_update()
{
    local word_list="  --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -m --memory --memory-reservation --memory-swap --pids-limit --restart"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_container_wait()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context()
{
    local cmd i subcommands
    local subcommands=" create export import inspect list rm show update use"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _docker_context_create
            return
            ;;

        export) _docker_context_export
            return
            ;;

        import) _docker_context_import
            return
            ;;

        inspect) _docker_context_inspect
            return
            ;;

        list) _docker_context_list
            return
            ;;

        rm) _docker_context_rm
            return
            ;;

        show) _docker_context_show
            return
            ;;

        update) _docker_context_update
            return
            ;;

        use) _docker_context_use
            return
            ;;

    esac

    local word_list=" create export import inspect list rm show update use -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_create()
{
    local cmd i subcommands
    local subcommands=" aci ecs"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        aci) _docker_context_create_aci
            return
            ;;

        ecs) _docker_context_create_ecs
            return
            ;;

    esac

    local word_list=" aci ecs --default-stack-orchestrator --description --docker --from -h --help --kubernetes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_create_aci()
{
    local word_list="  --description -h --help --location --resource-group --subscription-id"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_create_ecs()
{
    local word_list="  --access-keys --description --from-env -h --help --local-simulation --profile"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_export()
{
    local word_list="  -h --help --kubeconfig"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_import()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_inspect()
{
    local word_list="  -f --format -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_list()
{
    local word_list="  --format -h --help -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_rm()
{
    local word_list="  -f --force -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_show()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_update()
{
    local word_list="  --default-stack-orchestrator --description --docker -h --help --kubernetes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_context_use()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev()
{
    local cmd i subcommands
    local subcommands=" service check create list logs open rm start stop version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        service) _docker_dev_service
            return
            ;;

        check) _docker_dev_check
            return
            ;;

        create) _docker_dev_create
            return
            ;;

        list) _docker_dev_list
            return
            ;;

        logs) _docker_dev_logs
            return
            ;;

        open) _docker_dev_open
            return
            ;;

        rm) _docker_dev_rm
            return
            ;;

        start) _docker_dev_start
            return
            ;;

        stop) _docker_dev_stop
            return
            ;;

        version) _docker_dev_version
            return
            ;;

    esac

    local word_list=" service check create list logs open rm start stop version -s --socket -v --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_service()
{
    local cmd i subcommands
    local subcommands=" start"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        start) _docker_dev_service_start
            return
            ;;

    esac

    local word_list=" start "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_service_start()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_check()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_create()
{
    local word_list="  --base-image -d --detach --language --name -o --open --path"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_list()
{
    local word_list="  -f --format -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_logs()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_open()
{
    local word_list="  -e --editor"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_rm()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_start()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_stop()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_dev_version()
{
    local word_list="  -f --format -s --short"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension()
{
    local cmd i subcommands
    local subcommands=" dev init install ls rm share update validate version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        dev) _docker_extension_dev
            return
            ;;

        init) _docker_extension_init
            return
            ;;

        install) _docker_extension_install
            return
            ;;

        ls) _docker_extension_ls
            return
            ;;

        rm) _docker_extension_rm
            return
            ;;

        share) _docker_extension_share
            return
            ;;

        update) _docker_extension_update
            return
            ;;

        validate) _docker_extension_validate
            return
            ;;

        version) _docker_extension_version
            return
            ;;

    esac

    local word_list=" dev init install ls rm share update validate version --socket"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_dev()
{
    local cmd i subcommands
    local subcommands=" debug reset ui-source"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        debug) _docker_extension_dev_debug
            return
            ;;

        reset) _docker_extension_dev_reset
            return
            ;;

        ui-source) _docker_extension_dev_uisource
            return
            ;;

    esac

    local word_list=" debug reset ui-source "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_dev_debug()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_dev_reset()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_dev_uisource()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_init()
{
    local word_list="  --image-repo -q --quiet --title --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_install()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_ls()
{
    local word_list="  --format -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_rm()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_share()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_update()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_validate()
{
    local word_list="  -a --auto-resolve-tag -e --errors-only -s --sdk-compatibility -i --validate-install-uninstall -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_extension_version()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image()
{
    local cmd i subcommands
    local subcommands=" build history import inspect load ls prune pull push rm save tag"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        build) _docker_image_build
            return
            ;;

        history) _docker_image_history
            return
            ;;

        import) _docker_image_import
            return
            ;;

        inspect) _docker_image_inspect
            return
            ;;

        load) _docker_image_load
            return
            ;;

        ls) _docker_image_ls
            return
            ;;

        prune) _docker_image_prune
            return
            ;;

        pull) _docker_image_pull
            return
            ;;

        push) _docker_image_push
            return
            ;;

        rm) _docker_image_rm
            return
            ;;

        save) _docker_image_save
            return
            ;;

        tag) _docker_image_tag
            return
            ;;

    esac

    local word_list=" build history import inspect load ls prune pull push rm save tag "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_build()
{
    local word_list="  --add-host --allow --attest --build-arg --build-context --builder --cache-from --cache-to --cgroup-parent -f --file --iidfile --label --load --metadata-file --network --no-cache --no-cache-filter -o --output --platform --progress --provenance --pull --push -q --quiet --sbom --secret --shm-size --ssh -t --tag --target --ulimit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_history()
{
    local word_list="  --format -H --human --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_import()
{
    local word_list="  -c --change -m --message --platform"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_inspect()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_load()
{
    local word_list="  -i --input -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_ls()
{
    local word_list="  -a --all --digests -f --filter --format --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_prune()
{
    local word_list="  -a --all --filter -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_pull()
{
    local word_list="  -a --all-tags --disable-content-trust --platform -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_push()
{
    local word_list="  -a --all-tags --disable-content-trust -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_rm()
{
    local word_list="  -f --force --no-prune"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_save()
{
    local word_list="  -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_image_tag()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_init()
{
    local word_list="  --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest()
{
    local cmd i subcommands
    local subcommands=" annotate create inspect push rm"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        annotate) _docker_manifest_annotate
            return
            ;;

        create) _docker_manifest_create
            return
            ;;

        inspect) _docker_manifest_inspect
            return
            ;;

        push) _docker_manifest_push
            return
            ;;

        rm) _docker_manifest_rm
            return
            ;;

    esac

    local word_list=" annotate create inspect push rm "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest_annotate()
{
    local word_list="  --arch --os --os-features --os-version --variant"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest_create()
{
    local word_list="  -a --amend --insecure"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest_inspect()
{
    local word_list="  --insecure -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest_push()
{
    local word_list="  --insecure -p --purge"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_manifest_rm()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network()
{
    local cmd i subcommands
    local subcommands=" connect create disconnect inspect ls prune rm"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        connect) _docker_network_connect
            return
            ;;

        create) _docker_network_create
            return
            ;;

        disconnect) _docker_network_disconnect
            return
            ;;

        inspect) _docker_network_inspect
            return
            ;;

        ls) _docker_network_ls
            return
            ;;

        prune) _docker_network_prune
            return
            ;;

        rm) _docker_network_rm
            return
            ;;

    esac

    local word_list=" connect create disconnect inspect ls prune rm "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_connect()
{
    local word_list="  --alias --driver-opt --ip --ip6 --link --link-local-ip"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_create()
{
    local word_list="  --attachable --aux-address --config-from --config-only -d --driver --gateway --ingress --internal --ip-range --ipam-driver --ipam-opt --ipv6 --label -o --opt --scope --subnet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_disconnect()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_inspect()
{
    local word_list="  -f --format -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_ls()
{
    local word_list="  -f --filter --format --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_prune()
{
    local word_list="  --filter -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_network_rm()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin()
{
    local cmd i subcommands
    local subcommands=" create disable enable inspect install ls push rm set upgrade"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _docker_plugin_create
            return
            ;;

        disable) _docker_plugin_disable
            return
            ;;

        enable) _docker_plugin_enable
            return
            ;;

        inspect) _docker_plugin_inspect
            return
            ;;

        install) _docker_plugin_install
            return
            ;;

        ls) _docker_plugin_ls
            return
            ;;

        push) _docker_plugin_push
            return
            ;;

        rm) _docker_plugin_rm
            return
            ;;

        set) _docker_plugin_set
            return
            ;;

        upgrade) _docker_plugin_upgrade
            return
            ;;

    esac

    local word_list=" create disable enable inspect install ls push rm set upgrade "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_create()
{
    local word_list="  --compress"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_disable()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_enable()
{
    local word_list="  --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_inspect()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_install()
{
    local word_list="  --alias --disable --disable-content-trust --grant-all-permissions"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_ls()
{
    local word_list="  -f --filter --format --no-trunc -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_push()
{
    local word_list="  --disable-content-trust"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_rm()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_set()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_plugin_upgrade()
{
    local word_list="  --disable-content-trust --grant-all-permissions --skip-remote-check"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_sbom()
{
    local word_list="  -D --debug --exclude --format --layers -o --output --platform --quiet -v --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scan()
{
    local word_list="  --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout()
{
    local cmd i subcommands
    local subcommands=" compare cves entitlement quickview recommendations stream version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        compare) _docker_scout_compare
            return
            ;;

        cves) _docker_scout_cves
            return
            ;;

        entitlement) _docker_scout_entitlement
            return
            ;;

        quickview) _docker_scout_quickview
            return
            ;;

        recommendations) _docker_scout_recommendations
            return
            ;;

        stream) _docker_scout_stream
            return
            ;;

        version) _docker_scout_version
            return
            ;;

    esac

    local word_list=" compare cves entitlement quickview recommendations stream version "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_compare()
{
    local word_list="  -e --exit-code --format --ignore-base --ignore-unchanged --only-fixed --only-package-type --only-severity --only-unfixed -o --output --platform --ref --to --to-latest --to-ref --to-stream --to-type --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_cves()
{
    local word_list="  --details -e --exit-code --format --ignore-base --locations --only-cve-id --only-fixed --only-package-type --only-severity --only-unfixed -o --output --platform --ref --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_entitlement()
{
    local word_list="  --disable"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_quickview()
{
    local word_list="  -o --output --platform --ref --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_recommendations()
{
    local word_list="  --only-refresh --only-update -o --output --platform --ref --tag --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_stream()
{
    local word_list="  --app --platform"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_scout_version()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_system()
{
    local cmd i subcommands
    local subcommands=" df events info prune"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        df) _docker_system_df
            return
            ;;

        events) _docker_system_events
            return
            ;;

        info) _docker_system_info
            return
            ;;

        prune) _docker_system_prune
            return
            ;;

    esac

    local word_list=" df events info prune "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_system_df()
{
    local word_list="  --format -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_system_events()
{
    local word_list="  -f --filter --format --since --until"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_system_info()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_system_prune()
{
    local word_list="  -a --all --filter -f --force --volumes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust()
{
    local cmd i subcommands
    local subcommands=" key signer inspect revoke sign"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        key) _docker_trust_key
            return
            ;;

        signer) _docker_trust_signer
            return
            ;;

        inspect) _docker_trust_inspect
            return
            ;;

        revoke) _docker_trust_revoke
            return
            ;;

        sign) _docker_trust_sign
            return
            ;;

    esac

    local word_list=" key signer inspect revoke sign "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_key()
{
    local cmd i subcommands
    local subcommands=" generate load"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        generate) _docker_trust_key_generate
            return
            ;;

        load) _docker_trust_key_load
            return
            ;;

    esac

    local word_list=" generate load "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_key_generate()
{
    local word_list="  --dir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_key_load()
{
    local word_list="  --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_signer()
{
    local cmd i subcommands
    local subcommands=" add remove"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        add) _docker_trust_signer_add
            return
            ;;

        remove) _docker_trust_signer_remove
            return
            ;;

    esac

    local word_list=" add remove "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_signer_add()
{
    local word_list="  --key"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_signer_remove()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_inspect()
{
    local word_list="  --pretty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_revoke()
{
    local word_list="  -y --yes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_trust_sign()
{
    local word_list="  --local"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume()
{
    local cmd i subcommands
    local subcommands=" create inspect ls prune rm"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _docker_volume_create
            return
            ;;

        inspect) _docker_volume_inspect
            return
            ;;

        ls) _docker_volume_ls
            return
            ;;

        prune) _docker_volume_prune
            return
            ;;

        rm) _docker_volume_rm
            return
            ;;

    esac

    local word_list=" create inspect ls prune rm "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume_create()
{
    local word_list="  -d --driver --label -o --opt"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume_inspect()
{
    local word_list="  -f --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume_ls()
{
    local word_list="  -f --filter --format -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume_prune()
{
    local word_list="  -a --all --filter -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_volume_rm()
{
    local word_list="  -f --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_swarm()
{
    local cmd i subcommands
    local subcommands=" init join"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        init) _docker_swarm_init
            return
            ;;

        join) _docker_swarm_join
            return
            ;;

    esac

    local word_list=" init join "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_swarm_init()
{
    local word_list="  --config -c --context -D --debug -H --host -l --log-level --tls --tlscacert --tlscert --tlskey --tlsverify"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_docker_swarm_join()
{
    local word_list="  --advertise-addr --availability --data-path-addr --listen-addr --token"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _docker docker
