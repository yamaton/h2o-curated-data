# Generated with h2o 0.1.18

# autogenerated bash script

_docker()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          builder) _docker_builder
            return
            ;;

          buildx) _docker_buildx
            return
            ;;

          checkpoint) _docker_checkpoint
            return
            ;;

          compose) _docker_compose
            return
            ;;

          config) _docker_config
            return
            ;;

          container) _docker_container
            return
            ;;

          context) _docker_context
            return
            ;;

          image) _docker_image
            return
            ;;

          manifest) _docker_manifest
            return
            ;;

          network) _docker_network
            return
            ;;

          node) _docker_node
            return
            ;;

          plugin) _docker_plugin
            return
            ;;

          scan) _docker_scan
            return
            ;;

          secret) _docker_secret
            return
            ;;

          service) _docker_service
            return
            ;;

          stack) _docker_stack
            return
            ;;

          swarm) _docker_swarm
            return
            ;;

          system) _docker_system
            return
            ;;

          trust) _docker_trust
            return
            ;;

          volume) _docker_volume
            return
            ;;

          attach) _docker_attach
            return
            ;;

          build) _docker_build
            return
            ;;

          commit) _docker_commit
            return
            ;;

          cp) _docker_cp
            return
            ;;

          create) _docker_create
            return
            ;;

          diff) _docker_diff
            return
            ;;

          events) _docker_events
            return
            ;;

          exec) _docker_exec
            return
            ;;

          export) _docker_export
            return
            ;;

          history) _docker_history
            return
            ;;

          images) _docker_images
            return
            ;;

          import) _docker_import
            return
            ;;

          info) _docker_info
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          kill) _docker_kill
            return
            ;;

          load) _docker_load
            return
            ;;

          login) _docker_login
            return
            ;;

          logout) _docker_logout
            return
            ;;

          logs) _docker_logs
            return
            ;;

          pause) _docker_pause
            return
            ;;

          port) _docker_port
            return
            ;;

          ps) _docker_ps
            return
            ;;

          pull) _docker_pull
            return
            ;;

          push) _docker_push
            return
            ;;

          rename) _docker_rename
            return
            ;;

          restart) _docker_restart
            return
            ;;

          rm) _docker_rm
            return
            ;;

          rmi) _docker_rmi
            return
            ;;

          run) _docker_run
            return
            ;;

          save) _docker_save
            return
            ;;

          search) _docker_search
            return
            ;;

          start) _docker_start
            return
            ;;

          stats) _docker_stats
            return
            ;;

          stop) _docker_stop
            return
            ;;

          tag) _docker_tag
            return
            ;;

          top) _docker_top
            return
            ;;

          unpause) _docker_unpause
            return
            ;;

          update) _docker_update
            return
            ;;

          version) _docker_version
            return
            ;;

          wait) _docker_wait
            return
            ;;

      *)
          word_list=" builder buildx checkpoint compose config container context image manifest network node plugin scan secret service stack swarm system trust volume attach build commit cp create diff events exec export history images import info inspect kill load login logout logs pause port ps pull push rename restart rm rmi run save search start stats stop tag top unpause update version wait --config -c --context -D --debug -H --host -l --log-level --tls --tlscacert --tlscert --tlskey --tlsverify -v --version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_docker_buildx ()
{
    local cur word_list
    word_list=" --builder" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_compose ()
{
    local cur word_list
    word_list=" --ansi --env-file -f --file --profile --project-directory -p --project-name" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_scan ()
{
    local cur word_list
    word_list=" --accept-license --dependency-tree --exclude-base -f --file --group-issues --json --login --reject-license --severity --token --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stack ()
{
    local cur word_list
    word_list=" --orchestrator" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_attach ()
{
    local cur word_list
    word_list=" --detach-keys --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_build ()
{
    local cur word_list
    word_list=" --add-host --build-arg --cache-from --disable-content-trust -f --file --iidfile --isolation --label --network --no-cache -o --output --platform --progress --pull -q --quiet --secret --squash --ssh -t --tag --target" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -m --message -p --pause" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_cp ()
{
    local cur word_list
    word_list=" -a --archive -L --follow-link" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_create ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_events ()
{
    local cur word_list
    word_list=" -f --filter --format --since --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_images ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_import ()
{
    local cur word_list
    word_list=" -c --change -m --message --platform" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_info ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_inspect ()
{
    local cur word_list
    word_list=" -f --format -s --size --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_kill ()
{
    local cur word_list
    word_list=" -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_login ()
{
    local cur word_list
    word_list=" -p --password --password-stdin -u --username" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_logs ()
{
    local cur word_list
    word_list=" --details -f --follow --since -n --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_ps ()
{
    local cur word_list
    word_list=" -a --all -f --filter --format -n --last -l --latest --no-trunc -q --quiet -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_pull ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust --platform -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_push ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_restart ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_rm ()
{
    local cur word_list
    word_list=" -f --force -l --link -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_rmi ()
{
    local cur word_list
    word_list=" -f --force --no-prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_run ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_save ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_search ()
{
    local cur word_list
    word_list=" -f --filter --format --limit --no-trunc" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_start ()
{
    local cur word_list
    word_list=" -a --attach --checkpoint --checkpoint-dir --detach-keys -i --interactive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stats ()
{
    local cur word_list
    word_list=" -a --all --format --no-stream --no-trunc" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stop ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_update ()
{
    local cur word_list
    word_list=" --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --kernel-memory -m --memory --memory-reservation --memory-swap --pids-limit --restart" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_version ()
{
    local cur word_list
    word_list=" -f --format --kubeconfig" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _docker docker
