# Auto-generated with h2o

_docker()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          attach) _docker_attach
            return
            ;;

          build) _docker_build
            return
            ;;

          commit) _docker_commit
            return
            ;;

          cp) _docker_cp
            return
            ;;

          create) _docker_create
            return
            ;;

          diff) _docker_diff
            return
            ;;

          events) _docker_events
            return
            ;;

          exec) _docker_exec
            return
            ;;

          export) _docker_export
            return
            ;;

          history) _docker_history
            return
            ;;

          images) _docker_images
            return
            ;;

          import) _docker_import
            return
            ;;

          info) _docker_info
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          kill) _docker_kill
            return
            ;;

          load) _docker_load
            return
            ;;

          login) _docker_login
            return
            ;;

          logout) _docker_logout
            return
            ;;

          logs) _docker_logs
            return
            ;;

          pause) _docker_pause
            return
            ;;

          port) _docker_port
            return
            ;;

          ps) _docker_ps
            return
            ;;

          pull) _docker_pull
            return
            ;;

          push) _docker_push
            return
            ;;

          rename) _docker_rename
            return
            ;;

          restart) _docker_restart
            return
            ;;

          rm) _docker_rm
            return
            ;;

          rmi) _docker_rmi
            return
            ;;

          run) _docker_run
            return
            ;;

          save) _docker_save
            return
            ;;

          search) _docker_search
            return
            ;;

          start) _docker_start
            return
            ;;

          stats) _docker_stats
            return
            ;;

          stop) _docker_stop
            return
            ;;

          tag) _docker_tag
            return
            ;;

          top) _docker_top
            return
            ;;

          unpause) _docker_unpause
            return
            ;;

          update) _docker_update
            return
            ;;

          version) _docker_version
            return
            ;;

          wait) _docker_wait
            return
            ;;

          builder) _docker_builder
            return
            ;;

          buildx) _docker_buildx
            return
            ;;

          compose) _docker_compose
            return
            ;;

          config) _docker_config
            return
            ;;

          container) _docker_container
            return
            ;;

          context) _docker_context
            return
            ;;

          image) _docker_image
            return
            ;;

          manifest) _docker_manifest
            return
            ;;

          network) _docker_network
            return
            ;;

          node) _docker_node
            return
            ;;

          plugin) _docker_plugin
            return
            ;;

          scan) _docker_scan
            return
            ;;

          secret) _docker_secret
            return
            ;;

          service) _docker_service
            return
            ;;

          stack) _docker_stack
            return
            ;;

          swarm) _docker_swarm
            return
            ;;

          system) _docker_system
            return
            ;;

          trust) _docker_trust
            return
            ;;

          volume) _docker_volume
            return
            ;;

      *)
          word_list=" attach build commit cp create diff events exec export history images import info inspect kill load login logout logs pause port ps pull push rename restart rm rmi run save search start stats stop tag top unpause update version wait builder buildx compose config container context image manifest network node plugin scan secret service stack swarm system trust volume --config -c --context -D --debug -H --host -l --log-level --tls --tlscacert --tlscert --tlskey --tlsverify -v --version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_docker_attach ()
{
    local cur word_list
    word_list=" --detach-keys --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_build ()
{
    local cur word_list
    word_list=" --add-host --build-arg --cache-from --cgroup-parent --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --disable-content-trust -f --file --force-rm --iidfile --isolation --label -m --memory --memory-swap --network --no-cache --pull -q --quiet --rm --security-opt --shm-size --squash -t --tag --target --ulimit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -m --message -p --pause" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_cp ()
{
    local cur word_list
    word_list=" -a --archive -L --follow-link" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_create ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_events ()
{
    local cur word_list
    word_list=" -f --filter --format --since --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_images ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_import ()
{
    local cur word_list
    word_list=" -c --change -m --message --platform" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_info ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_inspect ()
{
    local cur word_list
    word_list=" -f --format -s --size --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_kill ()
{
    local cur word_list
    word_list=" -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_login ()
{
    local cur word_list
    word_list=" -p --password --password-stdin -u --username" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_logs ()
{
    local cur word_list
    word_list=" --details -f --follow --since -n --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_ps ()
{
    local cur word_list
    word_list=" -a --all -f --filter --format -n --last -l --latest --no-trunc -q --quiet -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_pull ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust --platform -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_push ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_restart ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_rm ()
{
    local cur word_list
    word_list=" -f --force -l --link -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_rmi ()
{
    local cur word_list
    word_list=" -f --force --no-prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_run ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_save ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_search ()
{
    local cur word_list
    word_list=" -f --filter --format --limit --no-trunc" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_start ()
{
    local cur word_list
    word_list=" -a --attach --detach-keys -i --interactive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stats ()
{
    local cur word_list
    word_list=" -a --all --format --no-stream --no-trunc" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stop ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_update ()
{
    local cur word_list
    word_list=" --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --kernel-memory -m --memory --memory-reservation --memory-swap --pids-limit --restart" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_version ()
{
    local cur word_list
    word_list=" -f --format --kubeconfig" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_builder ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          builder)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _docker_build
            return
            ;;

          prune) _docker_prune
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_builder_build ()
{
    local cur word_list
    word_list=" --add-host --build-arg --cache-from --cgroup-parent --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --disable-content-trust -f --file --force-rm --iidfile --isolation --label -m --memory --memory-swap --network --no-cache --pull -q --quiet --rm --security-opt --shm-size -t --tag --target --ulimit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_builder_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force --keep-storage" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_buildx ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          buildx)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          bake) _docker_bake
            return
            ;;

          build) _docker_build
            return
            ;;

          create) _docker_create
            return
            ;;

          du) _docker_du
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          prune) _docker_prune
            return
            ;;

          rm) _docker_rm
            return
            ;;

          use) _docker_use
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" bake build create du inspect prune rm use --builder" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_bake ()
{
    local cur word_list
    word_list=" --builder -f --file --metadata-file --no-cache --print --progress --pull --set" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_build ()
{
    local cur word_list
    word_list=" --add-host --allow --build-arg --builder --cache-from --cache-to --cgroup-parent -f --file --iidfile --label --load --output --metadata-file --network --no-cache -o --output --platform --progress --pull --push --output -q --quiet --secret -t --tag --target --ulimit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_create ()
{
    local cur word_list
    word_list=" --append --bootstrap --buildkitd-flags --config --driver --driver-opt --leave --name --node --platform --use" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_du ()
{
    local cur word_list
    word_list=" --builder --filter --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_inspect ()
{
    local cur word_list
    word_list=" --bootstrap --builder" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_prune ()
{
    local cur word_list
    word_list=" -a --all --builder --filter -f --force --keep-storage --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_rm ()
{
    local cur word_list
    word_list=" --builder --keep-state" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_buildx_use ()
{
    local cur word_list
    word_list=" --builder --default --global" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_compose ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          compose)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _docker_build
            return
            ;;

          convert) _docker_convert
            return
            ;;

          cp) _docker_cp
            return
            ;;

          create) _docker_create
            return
            ;;

          down) _docker_down
            return
            ;;

          exec) _docker_exec
            return
            ;;

          logs) _docker_logs
            return
            ;;

          ls) _docker_ls
            return
            ;;

          port) _docker_port
            return
            ;;

          ps) _docker_ps
            return
            ;;

          pull) _docker_pull
            return
            ;;

          rm) _docker_rm
            return
            ;;

          run) _docker_run
            return
            ;;

          up) _docker_up
            return
            ;;

          version) _docker_version
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build convert cp create down exec logs ls port ps pull rm run up version --ansi --compatibility --env-file -f --file --profile --project-directory -p --project-name" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_build ()
{
    local cur word_list
    word_list=" --build-arg --no-cache --progress --pull -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_convert ()
{
    local cur word_list
    word_list=" --format --hash --images --no-interpolate --no-normalize -o --output --profiles -q --quiet --resolve-image-digests --services --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_cp ()
{
    local cur word_list
    word_list=" --all -a --archive -L --follow-link --index" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_create ()
{
    local cur word_list
    word_list=" --build --force-recreate --no-build --no-recreate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_down ()
{
    local cur word_list
    word_list=" --remove-orphans --rmi -t --timeout -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_exec ()
{
    local cur word_list
    word_list=" -d --detach -e --env --index -T --no-TTY --privileged -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_logs ()
{
    local cur word_list
    word_list=" -f --follow --no-color --no-log-prefix --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_ls ()
{
    local cur word_list
    word_list=" -a --all --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_port ()
{
    local cur word_list
    word_list=" --index --protocol" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_ps ()
{
    local cur word_list
    word_list=" -a --all --format -q --quiet --services --status" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_pull ()
{
    local cur word_list
    word_list=" --ignore-pull-failures --include-deps -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_rm ()
{
    local cur word_list
    word_list=" -f --force -s --stop -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_run ()
{
    local cur word_list
    word_list=" -d --detach --entrypoint -e --env -l --label --name -T --no-TTY --no-deps -p --publish --quiet-pull --rm --service-ports --use-aliases -u --user -v --volume -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_up ()
{
    local cur word_list
    word_list=" --abort-on-container-exit --always-recreate-deps --attach --attach-dependencies --build -d --detach --exit-code-from --force-recreate --no-build --no-color --no-deps --no-log-prefix --no-recreate --no-start --quiet-pull --remove-orphans -V --renew-anon-volumes --scale -t --timeout --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_compose_version ()
{
    local cur word_list
    word_list=" -f --format --short" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _docker_create
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          ls) _docker_ls
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create inspect ls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_create ()
{
    local cur word_list
    word_list=" -l --label --template-driver" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_inspect ()
{
    local cur word_list
    word_list=" -f --format --pretty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_ls ()
{
    local cur word_list
    word_list=" -f --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_container ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          container)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          attach) _docker_attach
            return
            ;;

          commit) _docker_commit
            return
            ;;

          cp) _docker_cp
            return
            ;;

          create) _docker_create
            return
            ;;

          diff) _docker_diff
            return
            ;;

          exec) _docker_exec
            return
            ;;

          export) _docker_export
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          kill) _docker_kill
            return
            ;;

          logs) _docker_logs
            return
            ;;

          ls) _docker_ls
            return
            ;;

          pause) _docker_pause
            return
            ;;

          port) _docker_port
            return
            ;;

          prune) _docker_prune
            return
            ;;

          rename) _docker_rename
            return
            ;;

          restart) _docker_restart
            return
            ;;

          rm) _docker_rm
            return
            ;;

          run) _docker_run
            return
            ;;

          start) _docker_start
            return
            ;;

          stats) _docker_stats
            return
            ;;

          stop) _docker_stop
            return
            ;;

          top) _docker_top
            return
            ;;

          unpause) _docker_unpause
            return
            ;;

          update) _docker_update
            return
            ;;

          wait) _docker_wait
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" attach commit cp create diff exec export inspect kill logs ls pause port prune rename restart rm run start stats stop top unpause update wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_attach ()
{
    local cur word_list
    word_list=" --detach-keys --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -m --message -p --pause" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_cp ()
{
    local cur word_list
    word_list=" -a --archive -L --follow-link" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_create ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_inspect ()
{
    local cur word_list
    word_list=" -f --format -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_kill ()
{
    local cur word_list
    word_list=" -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_logs ()
{
    local cur word_list
    word_list=" --details -f --follow --since -n --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_ls ()
{
    local cur word_list
    word_list=" -a --all -f --filter --format -n --last -l --latest --no-trunc -q --quiet -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_restart ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_rm ()
{
    local cur word_list
    word_list=" -f --force -l --link -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_run ()
{
    local cur word_list
    word_list=" --add-host -a --attach --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-parent --cgroupns --cidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-option --dns-search --domainname --entrypoint -e --env --env-file --expose --gpus --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout --help -h --hostname --init -i --interactive --ip --ip6 --ipc --isolation --kernel-memory -l --label --label-file --link --link-local-ip --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --oom-kill-disable --oom-score-adj --pid --pids-limit --platform --privileged -p --publish -P --publish-all --pull --read-only --restart --rm --runtime --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --storage-opt --sysctl --tmpfs -t --tty --ulimit -u --user --userns --uts -v --volume --volume-driver --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_start ()
{
    local cur word_list
    word_list=" -a --attach --detach-keys -i --interactive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stats ()
{
    local cur word_list
    word_list=" -a --all --format --no-stream --no-trunc" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stop ()
{
    local cur word_list
    word_list=" -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_update ()
{
    local cur word_list
    word_list=" --blkio-weight --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime -c --cpu-shares --cpus --cpuset-cpus --cpuset-mems --kernel-memory -m --memory --memory-reservation --memory-swap --pids-limit --restart" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_context ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          context)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _docker_create
            return
            ;;

          ls) _docker_ls
            return
            ;;

          update) _docker_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create ls update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_context_create ()
{
    local cur word_list
    word_list=" --default-stack-orchestrator --description --docker --from --kubernetes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_context_ls ()
{
    local cur word_list
    word_list=" --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_context_update ()
{
    local cur word_list
    word_list=" --default-stack-orchestrator --description --docker --kubernetes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_image ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          image)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _docker_build
            return
            ;;

          history) _docker_history
            return
            ;;

          import) _docker_import
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          load) _docker_load
            return
            ;;

          ls) _docker_ls
            return
            ;;

          prune) _docker_prune
            return
            ;;

          pull) _docker_pull
            return
            ;;

          push) _docker_push
            return
            ;;

          rm) _docker_rm
            return
            ;;

          save) _docker_save
            return
            ;;

          tag) _docker_tag
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build history import inspect load ls prune pull push rm save tag" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_build ()
{
    local cur word_list
    word_list=" --add-host --build-arg --cache-from --cgroup-parent --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --disable-content-trust -f --file --force-rm --iidfile --isolation --label -m --memory --memory-swap --network --no-cache --pull -q --quiet --rm --security-opt --shm-size --squash -t --tag --target --ulimit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_import ()
{
    local cur word_list
    word_list=" -c --change -m --message --platform" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_inspect ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_ls ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_pull ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust --platform -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_push ()
{
    local cur word_list
    word_list=" -a --all-tags --disable-content-trust -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_rm ()
{
    local cur word_list
    word_list=" -f --force --no-prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_save ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_manifest ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          manifest)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          annotate) _docker_annotate
            return
            ;;

          create) _docker_create
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          push) _docker_push
            return
            ;;

          rm) _docker_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" annotate create inspect push rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_annotate ()
{
    local cur word_list
    word_list=" --arch --os --os-features --os-version --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_create ()
{
    local cur word_list
    word_list=" -a --amend --insecure" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_inspect ()
{
    local cur word_list
    word_list=" --insecure -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_push ()
{
    local cur word_list
    word_list=" --insecure -p --purge" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_network ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          network)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          connect) _docker_connect
            return
            ;;

          create) _docker_create
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          ls) _docker_ls
            return
            ;;

          prune) _docker_prune
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" connect create inspect ls prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_connect ()
{
    local cur word_list
    word_list=" --alias --driver-opt --ip --ip6 --link --link-local-ip" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_create ()
{
    local cur word_list
    word_list=" --attachable --aux-address --config-from --config-only -d --driver --gateway --ingress --internal --ip-range --ipam-driver --ipam-opt --ipv6 --label -o --opt --scope --subnet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_inspect ()
{
    local cur word_list
    word_list=" -f --format -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_node ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          node)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          inspect) _docker_inspect
            return
            ;;

          ls) _docker_ls
            return
            ;;

          ps) _docker_ps
            return
            ;;

          update) _docker_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" inspect ls ps update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_node_inspect ()
{
    local cur word_list
    word_list=" -f --format --pretty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_node_ls ()
{
    local cur word_list
    word_list=" -f --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_node_ps ()
{
    local cur word_list
    word_list=" -f --filter --format --no-resolve --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_node_update ()
{
    local cur word_list
    word_list=" --availability --label-add --label-rm --role" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_plugin ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          plugin)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          install) _docker_install
            return
            ;;

          ls) _docker_ls
            return
            ;;

          upgrade) _docker_upgrade
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" install ls upgrade" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_install ()
{
    local cur word_list
    word_list=" --alias --disable --disable-content-trust --grant-all-permissions" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_upgrade ()
{
    local cur word_list
    word_list=" --disable-content-trust --grant-all-permissions --skip-remote-check" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_scan ()
{
    local cur word_list
    word_list=" --accept-license --dependency-tree --exclude-base -f --file --group-issues --json --login --reject-license --severity --token --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_secret ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          secret)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _docker_create
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          ls) _docker_ls
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create inspect ls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_create ()
{
    local cur word_list
    word_list=" -d --driver -l --label --template-driver" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_inspect ()
{
    local cur word_list
    word_list=" -f --format --pretty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_ls ()
{
    local cur word_list
    word_list=" -f --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_service ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          service)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _docker_create
            return
            ;;

          inspect) _docker_inspect
            return
            ;;

          logs) _docker_logs
            return
            ;;

          ls) _docker_ls
            return
            ;;

          ps) _docker_ps
            return
            ;;

          rollback) _docker_rollback
            return
            ;;

          update) _docker_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create inspect logs ls ps rollback update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_create ()
{
    local cur word_list
    word_list=" --cap-add --cap-drop --config --constraint --container-label --credential-spec -d --detach --dns --dns-option --dns-search --endpoint-mode --entrypoint -e --env --env-file --generic-resource --group --health-cmd --health-interval --health-retries --health-start-period --health-timeout --host --hostname --init --isolation -l --label --limit-cpu --limit-memory --limit-pids --log-driver --log-opt --max-concurrent --mode --mount --name --network --no-healthcheck --no-resolve-image --placement-pref -p --publish -q --quiet --read-only --replicas --replicas-max-per-node --reserve-cpu --reserve-memory --restart-condition --restart-delay --restart-max-attempts --restart-window --rollback-delay --rollback-failure-action --rollback-max-failure-ratio --rollback-monitor --rollback-order --rollback-parallelism --secret --stop-grace-period --stop-signal --sysctl -t --tty --ulimit --update-delay --update-failure-action --update-max-failure-ratio --update-monitor --update-order --update-parallelism -u --user --with-registry-auth -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_inspect ()
{
    local cur word_list
    word_list=" -f --format --pretty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_logs ()
{
    local cur word_list
    word_list=" --details -f --follow --no-resolve --no-task-ids --no-trunc --raw --since -n --tail -t --timestamps" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_ls ()
{
    local cur word_list
    word_list=" -f --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_ps ()
{
    local cur word_list
    word_list=" -f --filter --format --no-resolve --no-trunc -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_rollback ()
{
    local cur word_list
    word_list=" -d --detach -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_service_update ()
{
    local cur word_list
    word_list=" --args --cap-add --cap-drop --config-add --config-rm --constraint-add --constraint-rm --container-label-add --container-label-rm --credential-spec -d --detach --dns-add --dns-option-add --dns-option-rm --dns-rm --dns-search-add --dns-search-rm --endpoint-mode --entrypoint --env-add --env-rm --force --generic-resource-add --generic-resource-rm --group-add --group-rm --health-cmd --health-interval --health-retries --health-start-period --health-timeout --host-add --host-rm --hostname --image --init --isolation --label-add --label-rm --limit-cpu --limit-memory --limit-pids --log-driver --log-opt --max-concurrent --mount-add --mount-rm --network-add --network-rm --no-healthcheck --no-resolve-image --placement-pref-add --placement-pref-rm --publish-add --publish-rm -q --quiet --read-only --replicas --replicas-max-per-node --reserve-cpu --reserve-memory --restart-condition --restart-delay --restart-max-attempts --restart-window --rollback --rollback-delay --rollback-failure-action --rollback-max-failure-ratio --rollback-monitor --rollback-order --rollback-parallelism --secret-add --secret-rm --stop-grace-period --stop-signal --sysctl-add --sysctl-rm -t --tty --ulimit-add --ulimit-rm --update-delay --update-failure-action --update-max-failure-ratio --update-monitor --update-order --update-parallelism -u --user --with-registry-auth -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_stack ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          stack)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          deploy) _docker_deploy
            return
            ;;

          ls) _docker_ls
            return
            ;;

          ps) _docker_ps
            return
            ;;

          rm) _docker_rm
            return
            ;;

          services) _docker_services
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" deploy ls ps rm services --orchestrator" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_deploy ()
{
    local cur word_list
    word_list=" -c --compose-file --orchestrator --prune --resolve-image --with-registry-auth" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ls ()
{
    local cur word_list
    word_list=" --format --orchestrator" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ps ()
{
    local cur word_list
    word_list=" -f --filter --format --no-resolve --no-trunc --orchestrator -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_rm ()
{
    local cur word_list
    word_list=" --kubeconfig --orchestrator" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_services ()
{
    local cur word_list
    word_list=" -f --filter --format --orchestrator -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_swarm ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          swarm)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          ca) _docker_ca
            return
            ;;

          init) _docker_init
            return
            ;;

          join) _docker_join
            return
            ;;

          update) _docker_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" ca init join update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_swarm_ca ()
{
    local cur word_list
    word_list=" --ca-cert --ca-key --cert-expiry -d --detach --external-ca -q --quiet --rotate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_swarm_init ()
{
    local cur word_list
    word_list=" --advertise-addr --autolock --availability --cert-expiry --data-path-addr --data-path-port --default-addr-pool --default-addr-pool-mask-length --dispatcher-heartbeat --external-ca --force-new-cluster --listen-addr --max-snapshots --snapshot-interval --task-history-limit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_swarm_join ()
{
    local cur word_list
    word_list=" --advertise-addr --availability --data-path-addr --listen-addr --token" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_swarm_update ()
{
    local cur word_list
    word_list=" --autolock --cert-expiry --dispatcher-heartbeat --external-ca --max-snapshots --snapshot-interval --task-history-limit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_system ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          system)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          df) _docker_df
            return
            ;;

          events) _docker_events
            return
            ;;

          prune) _docker_prune
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" df events prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_df ()
{
    local cur word_list
    word_list=" --format -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_events ()
{
    local cur word_list
    word_list=" -f --filter --format --since --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_volume ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          volume)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _docker_create
            return
            ;;

          ls) _docker_ls
            return
            ;;

          prune) _docker_prune
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create ls prune" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_create ()
{
    local cur word_list
    word_list=" -d --driver --label -o --opt" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_ls ()
{
    local cur word_list
    word_list=" -f --filter --format -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _docker docker
