# Auto-generated with h2o

_dotnet()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          add) _dotnet_add
            return
            ;;

          build) _dotnet_build
            return
            ;;

          build-server) _dotnet_buildserver
            return
            ;;

          clean) _dotnet_clean
            return
            ;;

          help) _dotnet_help
            return
            ;;

          list) _dotnet_list
            return
            ;;

          msbuild) _dotnet_msbuild
            return
            ;;

          new) _dotnet_new
            return
            ;;

          nuget) _dotnet_nuget
            return
            ;;

          pack) _dotnet_pack
            return
            ;;

          publish) _dotnet_publish
            return
            ;;

          remove) _dotnet_remove
            return
            ;;

          restore) _dotnet_restore
            return
            ;;

          run) _dotnet_run
            return
            ;;

          sln) _dotnet_sln
            return
            ;;

          store) _dotnet_store
            return
            ;;

          test) _dotnet_test
            return
            ;;

          tool) _dotnet_tool
            return
            ;;

          vstest) _dotnet_vstest
            return
            ;;

          dev-certs) _dotnet_devcerts
            return
            ;;

          fsi) _dotnet_fsi
            return
            ;;

          sql-cache) _dotnet_sqlcache
            return
            ;;

          user-secrets) _dotnet_usersecrets
            return
            ;;

          watch) _dotnet_watch
            return
            ;;

      *)
          word_list=" add build build-server clean help list msbuild new nuget pack publish remove restore run sln store test tool vstest dev-certs fsi sql-cache user-secrets watch --additionalprobingpath --additional-deps --depsfile --fx-version --roll-forward --runtimeconfig -d --diagnostics -h --help --info --list-runtimes --list-sdks --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_dotnet_add ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_build ()
{
    local cur word_list
    word_list=" -h --help -o --output -f --framework -c --configuration -r --runtime --version-suffix --no-incremental --no-dependencies --nologo --no-restore --interactive -v --verbosity --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_buildserver ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_clean ()
{
    local cur word_list
    word_list=" -h --help -o --output --nologo -f --framework -r --runtime -c --configuration --interactive -v --verbosity" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_help ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_list ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_pack ()
{
    local cur word_list
    word_list=" -h --help -o --output --no-build --include-symbols --include-source -c --configuration --version-suffix -s --serviceable --nologo --interactive --no-restore -v --verbosity --runtime --no-dependencies --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_publish ()
{
    local cur word_list
    word_list=" -h --help -o --output -f --framework -r --runtime -c --configuration --version-suffix --manifest --no-build --self-contained --no-self-contained --nologo --interactive --no-restore -v --verbosity --no-dependencies --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_remove ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_restore ()
{
    local cur word_list
    word_list=" -h --help -s --source -r --runtime --packages --disable-parallel --configfile --no-cache --ignore-failed-sources --no-dependencies -f --force -v --verbosity --interactive --use-lock-file --locked-mode --lock-file-path --force-evaluate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_run ()
{
    local cur word_list
    word_list=" -h --help -c --configuration -f --framework -r --runtime -p --project --launch-profile --no-launch-profile --no-build --interactive --no-restore -v --verbosity --no-dependencies --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_sln ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_store ()
{
    local cur word_list
    word_list=" -h --help -m --manifest -f --framework --framework-version -r --runtime -o --output -w --working-dir --skip-optimization --skip-symbols -v --verbosity" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_test ()
{
    local cur word_list
    word_list=" -h --help -s --settings -t --list-tests --filter -a --test-adapter-path -l --logger -c --configuration -f --framework --runtime -o --output -d --diag --no-build -r --results-directory --collect --blame --blame-crash --blame-crash-dump-type --blame-crash-collect-always --blame-hang --blame-hang-dump-type --blame-hang-timeout --nologo --no-restore --interactive -v --verbosity" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_dotnet_tool ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _dotnet dotnet
