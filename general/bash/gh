# Generated with h2o 0.1.18

# autogenerated bash script

_gh()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          browse) _gh_browse
            return
            ;;

          gist) _gh_gist
            return
            ;;

          issue) _gh_issue
            return
            ;;

          pr) _gh_pr
            return
            ;;

          release) _gh_release
            return
            ;;

          repo) _gh_repo
            return
            ;;

          run) _gh_run
            return
            ;;

          workflow) _gh_workflow
            return
            ;;

          alias) _gh_alias
            return
            ;;

          api) _gh_api
            return
            ;;

          auth) _gh_auth
            return
            ;;

          completion) _gh_completion
            return
            ;;

          config) _gh_config
            return
            ;;

          secret) _gh_secret
            return
            ;;

          ssh-key) _gh_ssh-key
            return
            ;;

      *)
          word_list=" browse gist issue pr release repo run workflow alias api auth completion config secret ssh-key --help --version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_gh_browse ()
{
    local cur word_list
    word_list=" -b --branch -n --no-browser -p --projects -R --repo -s --settings -w --wiki --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_gist ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          gist)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          clone) _gh_clone
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" clone create delete edit list view --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_clone ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_create ()
{
    local cur word_list
    word_list=" -d --desc -f --filename -p --public -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_delete ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_edit ()
{
    local cur word_list
    word_list=" -a --add -f --filename --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_list ()
{
    local cur word_list
    word_list=" -L --limit --public --secret --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_view ()
{
    local cur word_list
    word_list=" -f --filename --files -r --raw -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_issue ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_pr ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_release ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_repo ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_run ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_workflow ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_alias ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_api ()
{
    local cur word_list
    word_list=" --cache -F --field -H --header --hostname -i --include --input -q --jq -X --method --paginate -p --preview -f --raw-field --silent -t --template --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_auth ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_completion ()
{
    local cur word_list
    word_list=" -s --shell --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_config ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_secret ()
{
    local cur word_list
    word_list=" -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_ssh-key ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _gh gh
