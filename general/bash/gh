# Auto-generated with h2o

_gh()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          auth) _gh_auth
            return
            ;;

          browse) _gh_browse
            return
            ;;

          codespace) _gh_codespace
            return
            ;;

          gist) _gh_gist
            return
            ;;

          issue) _gh_issue
            return
            ;;

          pr) _gh_pr
            return
            ;;

          release) _gh_release
            return
            ;;

          repo) _gh_repo
            return
            ;;

          run) _gh_run
            return
            ;;

          workflow) _gh_workflow
            return
            ;;

          alias) _gh_alias
            return
            ;;

          api) _gh_api
            return
            ;;

          completion) _gh_completion
            return
            ;;

          config) _gh_config
            return
            ;;

          extension) _gh_extension
            return
            ;;

          gpg-key) _gh_gpgkey
            return
            ;;

          label) _gh_label
            return
            ;;

          search) _gh_search
            return
            ;;

          secret) _gh_secret
            return
            ;;

          ssh-key) _gh_sshkey
            return
            ;;

          status) _gh_status
            return
            ;;

          actions) _gh_actions
            return
            ;;

          environment) _gh_environment
            return
            ;;

          formatting) _gh_formatting
            return
            ;;

          mintty) _gh_mintty
            return
            ;;

          reference) _gh_reference
            return
            ;;

      *)
          word_list=" auth browse codespace gist issue pr release repo run workflow alias api completion config extension gpg-key label search secret ssh-key status actions environment formatting mintty reference --help --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_gh_auth ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          auth)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          login) _gh_login
            return
            ;;

          logout) _gh_logout
            return
            ;;

          refresh) _gh_refresh
            return
            ;;

          setup-git) _gh_setupgit
            return
            ;;

          status) _gh_status
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" login logout refresh setup-git status --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_auth_login ()
{
    local cur word_list
    word_list=" -p --git-protocol -h --hostname -s --scopes -w --web --with-token --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_auth_logout ()
{
    local cur word_list
    word_list=" -h --hostname --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_auth_refresh ()
{
    local cur word_list
    word_list=" -h --hostname -s --scopes --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_auth_setupgit ()
{
    local cur word_list
    word_list=" -h --hostname --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_auth_status ()
{
    local cur word_list
    word_list=" -h --hostname -t --show-token --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_browse ()
{
    local cur word_list
    word_list=" -b --branch -c --commit -n --no-browser -p --projects -R --repo -s --settings -w --wiki --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_codespace ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          codespace)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          code) _gh_code
            return
            ;;

          cp) _gh_cp
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          edit) _gh_edit
            return
            ;;

          jupyter) _gh_jupyter
            return
            ;;

          list) _gh_list
            return
            ;;

          logs) _gh_logs
            return
            ;;

          ports) _gh_ports
            return
            ;;

          ssh) _gh_ssh
            return
            ;;

          stop) _gh_stop
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" code cp create delete edit jupyter list logs ports ssh stop --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_code ()
{
    local cur word_list
    word_list=" -c --codespace --insiders -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_cp ()
{
    local cur word_list
    word_list=" -c --codespace -e --expand -p --profile -r --recursive --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_create ()
{
    local cur word_list
    word_list=" -b --branch --default-permissions --devcontainer-path --idle-timeout -l --location -m --machine -r --repo -s --status --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_delete ()
{
    local cur word_list
    word_list=" --all -c --codespace --days -f --force -r --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_edit ()
{
    local cur word_list
    word_list=" -c --codespace -d --display-name -m --machine --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_jupyter ()
{
    local cur word_list
    word_list=" -c --codespace --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_list ()
{
    local cur word_list
    word_list=" -q --jq --json -L --limit -t --template --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_logs ()
{
    local cur word_list
    word_list=" -c --codespace -f --follow --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_ports ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          ports)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          forward) _codespace_forward
            return
            ;;

          visibility) _codespace_visibility
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" forward visibility -c --codespace -q --jq --json -t --template --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ports_forward ()
{
    local cur word_list
    word_list=" -c --codespace --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ports_visibility ()
{
    local cur word_list
    word_list=" -c --codespace --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_ssh ()
{
    local cur word_list
    word_list=" -c --codespace --config -d --debug --debug-file --profile --server-port --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_codespace_stop ()
{
    local cur word_list
    word_list=" -c --codespace --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_gist ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          gist)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          clone) _gh_clone
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" clone create delete edit list view --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_clone ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_create ()
{
    local cur word_list
    word_list=" -d --desc -f --filename -p --public -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_delete ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_edit ()
{
    local cur word_list
    word_list=" -a --add -d --desc -f --filename --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_list ()
{
    local cur word_list
    word_list=" -L --limit --public --secret --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gist_view ()
{
    local cur word_list
    word_list=" -f --filename --files -r --raw -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_issue ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          issue)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          close) _gh_close
            return
            ;;

          comment) _gh_comment
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          reopen) _gh_reopen
            return
            ;;

          status) _gh_status
            return
            ;;

          transfer) _gh_transfer
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" close comment create delete edit list reopen status transfer view -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_close ()
{
    local cur word_list
    word_list=" -c --comment --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_comment ()
{
    local cur word_list
    word_list=" -b --body -F --body-file -e --editor -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_create ()
{
    local cur word_list
    word_list=" -a --assignee -b --body -F --body-file -l --label -m --milestone -p --project --recover -t --title -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_delete ()
{
    local cur word_list
    word_list=" --confirm --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_edit ()
{
    local cur word_list
    word_list=" --add-assignee --add-label --add-project -b --body -F --body-file -m --milestone --remove-assignee --remove-label --remove-project -t --title --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_list ()
{
    local cur word_list
    word_list=" --app -a --assignee -A --author -q --jq --json -l --label -L --limit --mention -m --milestone -S --search -s --state -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_reopen ()
{
    local cur word_list
    word_list=" -c --comment --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_status ()
{
    local cur word_list
    word_list=" -q --jq --json -t --template --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_transfer ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_issue_view ()
{
    local cur word_list
    word_list=" -c --comments -q --jq --json -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_pr ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          pr)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          checkout) _gh_checkout
            return
            ;;

          checks) _gh_checks
            return
            ;;

          close) _gh_close
            return
            ;;

          comment) _gh_comment
            return
            ;;

          create) _gh_create
            return
            ;;

          diff) _gh_diff
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          merge) _gh_merge
            return
            ;;

          ready) _gh_ready
            return
            ;;

          reopen) _gh_reopen
            return
            ;;

          review) _gh_review
            return
            ;;

          status) _gh_status
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" checkout checks close comment create diff edit list merge ready reopen review status view -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_checkout ()
{
    local cur word_list
    word_list=" -b --branch --detach -f --force --recurse-submodules --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_checks ()
{
    local cur word_list
    word_list=" -i --interval --watch --watch -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_close ()
{
    local cur word_list
    word_list=" -c --comment -d --delete-branch --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_comment ()
{
    local cur word_list
    word_list=" -b --body -F --body-file -e --editor -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_create ()
{
    local cur word_list
    word_list=" -a --assignee -B --base -b --body -F --body-file -d --draft -f --fill -H --head -l --label -m --milestone --no-maintainer-edit -p --project --recover -r --reviewer -t --title -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_diff ()
{
    local cur word_list
    word_list=" --color --patch --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_edit ()
{
    local cur word_list
    word_list=" --add-assignee --add-label --add-project --add-reviewer -B --base -b --body -F --body-file -m --milestone --remove-assignee --remove-label --remove-project --remove-reviewer -t --title --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_list ()
{
    local cur word_list
    word_list=" --app -a --assignee -A --author -B --base -d --draft -H --head -q --jq --json -l --label -L --limit -S --search -s --state -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_merge ()
{
    local cur word_list
    word_list=" --admin --auto -b --body -F --body-file -d --delete-branch --disable-auto -m --merge -r --rebase -s --squash -t --subject --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_ready ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_reopen ()
{
    local cur word_list
    word_list=" -c --comment --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_review ()
{
    local cur word_list
    word_list=" -a --approve -b --body -F --body-file -c --comment -r --request-changes --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_status ()
{
    local cur word_list
    word_list=" -q --jq --json -t --template --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pr_view ()
{
    local cur word_list
    word_list=" -c --comments -q --jq --json -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_release ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          release)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          download) _gh_download
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          upload) _gh_upload
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create delete download edit list upload view -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_create ()
{
    local cur word_list
    word_list=" --discussion-category -d --draft --generate-notes -n --notes -F --notes-file -p --prerelease --target -t --title --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_delete ()
{
    local cur word_list
    word_list=" -y --yes --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_download ()
{
    local cur word_list
    word_list=" -A --archive -D --dir -p --pattern --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_edit ()
{
    local cur word_list
    word_list=" --discussion-category --draft -n --notes -F --notes-file --prerelease --tag --target -t --title --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_list ()
{
    local cur word_list
    word_list=" --exclude-drafts -L --limit --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_upload ()
{
    local cur word_list
    word_list=" --clobber --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_release_view ()
{
    local cur word_list
    word_list=" -q --jq --json -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_repo ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          repo)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          archive) _gh_archive
            return
            ;;

          clone) _gh_clone
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          deploy-key) _gh_deploykey
            return
            ;;

          edit) _gh_edit
            return
            ;;

          fork) _gh_fork
            return
            ;;

          list) _gh_list
            return
            ;;

          rename) _gh_rename
            return
            ;;

          sync) _gh_sync
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" archive clone create delete deploy-key edit fork list rename sync view --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_archive ()
{
    local cur word_list
    word_list=" -y --confirm --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_clone ()
{
    local cur word_list
    word_list=" -u --upstream-remote-name --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_create ()
{
    local cur word_list
    word_list=" -c --clone -d --description --disable-issues --disable-wiki -g --gitignore -h --homepage --include-all-branches --internal -l --license --private --public --push -r --remote -s --source -t --team -p --template --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_delete ()
{
    local cur word_list
    word_list=" --confirm --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_deploykey ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          deploy-key)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _repo_add
            return
            ;;

          delete) _repo_delete
            return
            ;;

          list) _repo_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add delete list -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_deploykey_add ()
{
    local cur word_list
    word_list=" -w --allow-write -t --title --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_deploykey_delete ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_deploykey_list ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_edit ()
{
    local cur word_list
    word_list=" --add-topic --allow-forking --default-branch --delete-branch-on-merge -d --description --enable-auto-merge --enable-issues --enable-merge-commit --enable-projects --enable-rebase-merge --enable-squash-merge --enable-wiki -h --homepage --remove-topic --template --visibility --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_fork ()
{
    local cur word_list
    word_list=" --clone --fork-name --org --remote --remote-name --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_list ()
{
    local cur word_list
    word_list=" --archived --fork -q --jq --json -l --language -L --limit --no-archived --source -t --template --topic --visibility --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_rename ()
{
    local cur word_list
    word_list=" -y --confirm -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_sync ()
{
    local cur word_list
    word_list=" -b --branch --force -s --source --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_view ()
{
    local cur word_list
    word_list=" -b --branch -q --jq --json -t --template -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_run ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          run)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cancel) _gh_cancel
            return
            ;;

          download) _gh_download
            return
            ;;

          list) _gh_list
            return
            ;;

          rerun) _gh_rerun
            return
            ;;

          view) _gh_view
            return
            ;;

          watch) _gh_watch
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cancel download list rerun view watch -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_cancel ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_download ()
{
    local cur word_list
    word_list=" -D --dir -n --name -p --pattern --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_list ()
{
    local cur word_list
    word_list=" -b --branch -q --jq --json -L --limit -t --template -u --user -w --workflow --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_rerun ()
{
    local cur word_list
    word_list=" -d --debug --failed -j --job --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_view ()
{
    local cur word_list
    word_list=" --exit-status -j --job -q --jq --json --log --log-failed -t --template -v --verbose -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_run_watch ()
{
    local cur word_list
    word_list=" --exit-status -i --interval --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_workflow ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          workflow)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          disable) _gh_disable
            return
            ;;

          enable) _gh_enable
            return
            ;;

          list) _gh_list
            return
            ;;

          run) _gh_run
            return
            ;;

          view) _gh_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" disable enable list run view -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_workflow_disable ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_workflow_enable ()
{
    local cur word_list
    word_list=" --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_workflow_list ()
{
    local cur word_list
    word_list=" -a --all -L --limit --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_workflow_run ()
{
    local cur word_list
    word_list=" -F --field --json -f --raw-field -r --ref --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_workflow_view ()
{
    local cur word_list
    word_list=" -r --ref -w --web -y --yaml --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_alias ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          alias)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          delete) _gh_delete
            return
            ;;

          list) _gh_list
            return
            ;;

          set) _gh_set
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" delete list set --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_alias_delete ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_alias_list ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_alias_set ()
{
    local cur word_list
    word_list=" -s --shell --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_api ()
{
    local cur word_list
    word_list=" --cache -F --field -H --header --hostname -i --include --input -q --jq -X --method --paginate -p --preview -f --raw-field --silent -t --template --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_completion ()
{
    local cur word_list
    word_list=" -s --shell --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          get) _gh_get
            return
            ;;

          list) _gh_list
            return
            ;;

          set) _gh_set
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" get list set --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_get ()
{
    local cur word_list
    word_list=" -h --host --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_list ()
{
    local cur word_list
    word_list=" -h --host --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_set ()
{
    local cur word_list
    word_list=" -h --host --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_extension ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          extension)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _gh_create
            return
            ;;

          exec) _gh_exec
            return
            ;;

          install) _gh_install
            return
            ;;

          list) _gh_list
            return
            ;;

          remove) _gh_remove
            return
            ;;

          upgrade) _gh_upgrade
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create exec install list remove upgrade --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_extension_create ()
{
    local cur word_list
    word_list=" --precompiled --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_extension_install ()
{
    local cur word_list
    word_list=" --pin --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_extension_list ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_extension_remove ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_extension_upgrade ()
{
    local cur word_list
    word_list=" --all --dry-run --force --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_gpgkey ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          gpg-key)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _gh_add
            return
            ;;

          list) _gh_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add list --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gpgkey_add ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gpgkey_list ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_label ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          label)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          clone) _gh_clone
            return
            ;;

          create) _gh_create
            return
            ;;

          delete) _gh_delete
            return
            ;;

          edit) _gh_edit
            return
            ;;

          list) _gh_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" clone create delete edit list -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_label_clone ()
{
    local cur word_list
    word_list=" -f --force --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_label_create ()
{
    local cur word_list
    word_list=" -c --color -d --description -f --force --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_label_delete ()
{
    local cur word_list
    word_list=" --confirm --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_label_edit ()
{
    local cur word_list
    word_list=" -c --color -d --description -n --name --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_label_list ()
{
    local cur word_list
    word_list=" -q --jq --json -L --limit --order -S --search --sort -t --template -w --web --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_search ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          search)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          issues) _gh_issues
            return
            ;;

          prs) _gh_prs
            return
            ;;

          repos) _gh_repos
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" issues prs repos --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_search_issues ()
{
    local cur word_list
    word_list=" --app --archived --assignee --author --closed --commenter --comments --created --include-prs --interactions --involves -q --jq --json --label --language -L --limit --locked --match --mentions --milestone --no-assignee --no-label --no-milestone --no-project --order --owner --project --reactions --repo --sort --state --team-mentions -t --template --updated --visibility -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_search_prs ()
{
    local cur word_list
    word_list=" --app --archived --assignee --author -B --base --checks --closed --commenter --comments --created --draft -H --head --interactions --involves -q --jq --json --label --language -L --limit --locked --match --mentions --merged --merged-at --milestone --no-assignee --no-label --no-milestone --no-project --order --owner --project --reactions --repo --review --review-requested --reviewed-by --sort --state --team-mentions -t --template --updated --visibility -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_search_repos ()
{
    local cur word_list
    word_list=" --archived --created --followers --forks --good-first-issues --help-wanted-issues --include-forks -q --jq --json --language --license -L --limit --match --number-topics --order --owner --size --sort --stars -t --template --topic --updated --visibility -w --web --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_secret ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          secret)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          delete) _gh_delete
            return
            ;;

          list) _gh_list
            return
            ;;

          set) _gh_set
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" delete list set -R --repo --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_delete ()
{
    local cur word_list
    word_list=" -a --app -e --env -o --org -u --user --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_list ()
{
    local cur word_list
    word_list=" -a --app -e --env -o --org -u --user --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_set ()
{
    local cur word_list
    word_list=" -a --app -b --body -e --env -f --env-file --no-store -o --org -r --repos -u --user -v --visibility --help -R --repo" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_sshkey ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          ssh-key)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _gh_add
            return
            ;;

          list) _gh_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add list --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sshkey_add ()
{
    local cur word_list
    word_list=" -t --title --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_sshkey_list ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_status ()
{
    local cur word_list
    word_list=" -e --exclude -o --org --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_actions ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_gh_reference ()
{
    local cur word_list
    word_list=" -s --shell --cache -F --field -H --header --hostname -i --include --input -q --jq -X --method --paginate -p --preview -f --raw-field --silent -t --template -p --git-protocol -h --hostname -s --scopes -w --web --with-token -h --hostname -h --hostname -s --scopes -h --hostname -h --hostname -t --show-token -b --branch -c --commit -n --no-browser -p --projects -s --settings -w --wiki -c --codespace --insiders -w --web -e --expand -p --profile -r --recursive -b --branch --default-permissions --devcontainer-path --idle-timeout -l --location -m --machine -r --repo -s --status --all --days -f --force -r --repo -d --display-name -m --machine -q --jq --json -L --limit -t --template -f --follow --config -d --debug --debug-file --profile --server-port -s --shell -h --host -h --host -h --host --precompiled --pin --all --dry-run --force -d --desc -f --filename -p --public -w --web -a --add -d --desc -f --filename -L --limit --public --secret -f --filename --files -r --raw -w --web -c --comment -b --body -F --body-file -e --editor -w --web -a --assignee -b --body -l --label -m --milestone -p --project --recover -t --title -w --web --add-assignee --add-label --add-project -b --body -m --milestone --remove-assignee --remove-label --remove-project -t --title --app -a --assignee -A --author -l --label -L --limit --mention -m --milestone -S --search -s --state -w --web -c --comment -c --comments -w --web -f --force -c --color -d --description -f --force --confirm -n --name -L --limit --order -S --search --sort -w --web -b --branch --detach -f --force --recurse-submodules -i --interval --watch --watch -w --web -d --delete-branch -B --base -b --body -d --draft -f --fill -H --head -m --milestone --no-maintainer-edit -p --project -r --reviewer -t --title -w --web --color --patch --add-project --add-reviewer -B --base -m --milestone --remove-project --remove-reviewer -B --base -d --draft -H --head -L --limit -S --search -s --state -w --web --admin --auto -b --body -d --delete-branch --disable-auto -m --merge -r --rebase -s --squash -t --subject -a --approve -b --body -c --comment -r --request-changes -c --comments -w --web --discussion-category -d --draft --generate-notes -n --notes -F --notes-file -p --prerelease --target -t --title -y --yes -A --archive -D --dir -p --pattern --discussion-category --draft --prerelease --tag --exclude-drafts --clobber -w --web -y --confirm -u --upstream-remote-name -c --clone -d --description --disable-issues --disable-wiki -g --gitignore -h --homepage --include-all-branches --internal -l --license --private --public --push -r --remote -s --source -t --team -p --template -w --allow-write -t --title --add-topic --allow-forking --default-branch --delete-branch-on-merge --enable-auto-merge --enable-issues --enable-merge-commit --enable-projects --enable-rebase-merge --enable-squash-merge --enable-wiki --remove-topic --template --visibility --clone --fork-name --org --remote --remote-name --archived --fork -l --language -L --limit --no-archived --source --topic --visibility -y --confirm -b --branch -s --source -b --branch -w --web -D --dir -n --name -p --pattern -b --branch -L --limit -u --user -w --workflow -d --debug --failed -j --job --exit-status -j --job --log --log-failed -v --verbose -w --web --exit-status -i --interval --archived --assignee --author --closed --commenter --comments --created --include-prs --interactions --involves --label --language -L --limit --locked --match --mentions --milestone --no-assignee --no-label --no-milestone --no-project --order --owner --project --reactions --repo --sort --state --team-mentions --updated --visibility -w --web -B --base --checks --draft -H --head --merged --merged-at --review --review-requested --reviewed-by --sort --archived --followers --forks --good-first-issues --help-wanted-issues --include-forks --license -L --limit --match --number-topics --order --owner --size --sort --stars --topic --visibility -a --app -e --env -o --org -u --user -a --app -e --env -o --org -u --user -a --app -b --body -e --env -f --env-file --no-store -o --org -r --repos -u --user -v --visibility -t --title -e --exclude -o --org -a --all -L --limit -F --field --json -r --ref -r --ref -w --web -y --yaml" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _gh gh
