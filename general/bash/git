# Auto-generated with h2o

_git()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          clone) _git_clone
            return
            ;;

          init) _git_init
            return
            ;;

          add) _git_add
            return
            ;;

          mv) _git_mv
            return
            ;;

          restore) _git_restore
            return
            ;;

          rm) _git_rm
            return
            ;;

          bisect) _git_bisect
            return
            ;;

          diff) _git_diff
            return
            ;;

          grep) _git_grep
            return
            ;;

          log) _git_log
            return
            ;;

          show) _git_show
            return
            ;;

          status) _git_status
            return
            ;;

          branch) _git_branch
            return
            ;;

          commit) _git_commit
            return
            ;;

          merge) _git_merge
            return
            ;;

          rebase) _git_rebase
            return
            ;;

          reset) _git_reset
            return
            ;;

          switch) _git_switch
            return
            ;;

          tag) _git_tag
            return
            ;;

          fetch) _git_fetch
            return
            ;;

          pull) _git_pull
            return
            ;;

          push) _git_push
            return
            ;;

      *)
          word_list=" clone init add mv restore rm bisect diff grep log show status branch commit merge rebase reset switch tag fetch pull push "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_git_clone ()
{
    local cur word_list
    word_list=" -l --local --no-hardlinks -s --shared --reference --dissociate -q --quiet -v --verbose --progress --server-option -n --no-checkout --reject-shallow --no-reject-shallow --bare --sparse --filter --also-filter-submodules --mirror -o --origin -b --branch -u --upload-pack --template -c --config --depth --shallow-since --shallow-exclude --single-branch --no-single-branch --no-tags --recurse-submodules --shallow-submodules --no-shallow-submodules --remote-submodules --no-remote-submodules --separate-git-dir -j --jobs" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_init ()
{
    local cur word_list
    word_list=" -q --quiet --bare --object-format --template --separate-git-dir -b --initial-branch --shared" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_add ()
{
    local cur word_list
    word_list=" -n --dry-run -v --verbose -f --force --sparse -i --interactive -p --patch -e --edit -u --update -A --all --no-ignore-removal --no-all --ignore-removal -N --intent-to-add --refresh --ignore-errors --ignore-missing --no-warn-embedded-repo --renormalize --chmod --pathspec-from-file --pathspec-file-nul --" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_mv ()
{
    local cur word_list
    word_list=" -f --force -k -n --dry-run -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_restore ()
{
    local cur word_list
    word_list=" -s --source -p --patch -W --worktree -S --staged -q --quiet --progress --no-progress --ours --theirs -m --merge --conflict --ignore-unmerged --ignore-skip-worktree-bits --recurse-submodules --no-recurse-submodules --overlay --no-overlay --pathspec-from-file --pathspec-file-nul --" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_rm ()
{
    local cur word_list
    word_list=" -f --force -n --dry-run -r -- --cached --ignore-unmatch --sparse -q --quiet --pathspec-from-file --pathspec-file-nul" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_bisect ()
{
    local cur word_list
    word_list=" --no-checkout --first-parent" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_diff ()
{
    local cur word_list
    word_list=" -p -u --patch -s --no-patch -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --exit-code --quiet --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -1 --base -2 --ours -3 --theirs -0 -static" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_grep ()
{
    local cur word_list
    word_list=" --cached --no-index --untracked --no-exclude-standard --exclude-standard --recurse-submodules -a --text --textconv --no-textconv -i --ignore-case -I --max-depth -r --recursive --no-recursive -w --word-regexp -v --invert-match -h -H --full-name -E --extended-regexp -G --basic-regexp -P --perl-regexp -F --fixed-strings -n --line-number --column -l --files-with-matches --name-only -L --files-without-match -O --open-files-in-pager -z --null -o --only-matching -c --count --color --no-color --break --heading -p --show-function -C --context -A --after-context -B --before-context -W --function-context --threads -f -e --all-match -q --quiet --" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_log ()
{
    local cur word_list
    word_list=" --follow --no-decorate --decorate --decorate-refs --decorate-refs-exclude --source --full-diff --log-size -n --max-count --skip --since --after --since-as-filter --until --before --author --committer --grep-reflog --grep --all-match --invert-grep -i --regexp-ignore-case --basic-regexp -E --extended-regexp -F --fixed-strings -P --perl-regexp --remove-empty --merges --no-merges --min-parents --max-parents --no-min-parents --no-max-parents --first-parent --exclude-first-parent-only --not --all --branches --tags --remotes --glob --exclude --reflog --alternate-refs --single-worktree --ignore-missing --bisect --stdin --cherry-mark --cherry-pick --left-only --right-only --cherry -g --walk-reflogs --merge --boundary --simplify-by-decoration --show-pulls --full-history --dense --sparse --simplify-merges --ancestry-path --dense --sparse --simplify-merges --show-pulls --date-order --author-date-order --topo-order --reverse --no-walk --do-walk --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --notes --no-notes --show-signature --relative-date --date --parents --children --left-right --graph --show-linear-break -p -u --patch -s --no-patch --diff-merges --no-diff-merges --combined-all-paths -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw -t --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -static" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_show ()
{
    local cur word_list
    word_list=" --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --notes --no-notes --show-signature -p -u --patch -s --no-patch --diff-merges --no-diff-merges --combined-all-paths -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw -t --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -static" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_status ()
{
    local cur word_list
    word_list=" -s --short -b --branch --show-stash --porcelain --long -v --verbose -u --untracked-files --ignore-submodules --ignored -z --column --no-column --ahead-behind --no-ahead-behind --renames --no-renames --find-renames" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_branch ()
{
    local cur word_list
    word_list=" -d --delete -D --create-reflog -f --force -m --move -M -c --copy -C --color --no-color -i --ignore-case --column --no-column -r --remotes -a --all -l --list --show-current -v -vv --verbose -q --quiet --abbrev --no-abbrev -t --track --no-track --recurse-submodules --set-upstream -u --set-upstream-to --unset-upstream --edit-description --contains --no-contains --merged --no-merged --sort --points-at --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_commit ()
{
    local cur word_list
    word_list=" -a --all -p --patch -C --reuse-message -c --reedit-message --fixup --squash --reset-author --short --branch --porcelain --long -z --null -F --file --author --date -m --message -t --template -s --signoff --no-signoff --trailer -n --verify -n --no-verify --allow-empty --allow-empty-message --cleanup -e --edit --no-edit --amend --no-post-rewrite -i --include -o --only --pathspec-from-file --pathspec-file-nul -u --untracked-files -v --verbose -q --quiet --dry-run --status --no-status -S --gpg-sign --no-gpg-sign --" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_merge ()
{
    local cur word_list
    word_list=" --commit --no-commit --edit -e --no-edit --cleanup --ff --no-ff --ff-only -S --gpg-sign --no-gpg-sign --log --no-log --signoff --no-signoff --stat -n --no-stat --squash --no-squash --verify --no-verify -s --strategy -X --strategy-option --verify-signatures --no-verify-signatures --summary --no-summary -q --quiet -v --verbose --progress --no-progress --autostash --no-autostash --allow-unrelated-histories -m --into-name -F --file --rerere-autoupdate --no-rerere-autoupdate --overwrite-ignore --no-overwrite-ignore --abort --quit --continue" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_rebase ()
{
    local cur word_list
    word_list=" --root --onto --keep-base --continue --abort --quit --apply --empty --no-keep-empty --keep-empty --reapply-cherry-picks --no-reapply-cherry-picks --allow-empty-message --skip --edit-todo --show-current-patch -m --merge -s --strategy -X --strategy-option --rerere-autoupdate --no-rerere-autoupdate -S --gpg-sign --no-gpg-sign -q --quiet -v --verbose --stat -n --no-stat --no-verify --verify -C --no-ff --force-rebase -f --fork-point --no-fork-point --ignore-whitespace --whitespace --committer-date-is-author-date --ignore-date --reset-author-date --signoff -i --interactive -r --rebase-merges -x --exec --autosquash --no-autosquash --autostash --no-autostash --reschedule-failed-exec --no-reschedule-failed-exec" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_reset ()
{
    local cur word_list
    word_list=" --soft --mixed --hard --merge --keep --recurse-submodules --no-recurse-submodules -q --quiet --refresh --no-refresh --pathspec-from-file --pathspec-file-nul --" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_switch ()
{
    local cur word_list
    word_list=" -c --create -C --force-create -d --detach --guess --no-guess -f --force --discard-changes -m --merge --conflict -q --quiet --progress --no-progress -t --track --no-track --orphan --ignore-other-worktrees --recurse-submodules --no-recurse-submodules" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_tag ()
{
    local cur word_list
    word_list=" -a --annotate -s --sign --no-sign -u --local-user -f --force -d --delete -v --verify -n -l --list --sort --color -i --ignore-case --column --no-column --contains --no-contains --merged --no-merged --points-at -m --message -F --file -e --edit --cleanup --create-reflog --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_fetch ()
{
    local cur word_list
    word_list=" --all -a --append --atomic --depth --deepen --shallow-since --shallow-exclude --unshallow --update-shallow --negotiation-tip --negotiate-only --dry-run --write-fetch-head --no-write-fetch-head -f --force -k --keep --multiple --write-commit-graph --no-write-commit-graph --prefetch -p --prune -P --prune-tags -n --no-tags --refetch --refmap -t --tags --recurse-submodules -j --jobs --no-recurse-submodules --set-upstream --submodule-prefix --recurse-submodules-default -u --update-head-ok --upload-pack -q --quiet -v --verbose --progress -o --server-option --show-forced-updates --no-show-forced-updates -4 --ipv4 -6 --ipv6 --stdin" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_pull ()
{
    local cur word_list
    word_list=" -q --quiet -v --verbose --commit --no-commit --edit -e --no-edit --cleanup --ff-only --ff --no-ff -S --gpg-sign --no-gpg-sign --log --no-log --signoff --no-signoff --stat -n --no-stat --squash --no-squash --verify --no-verify -s --strategy -X --strategy-option --verify-signatures --no-verify-signatures --summary --no-summary --autostash --no-autostash --allow-unrelated-histories -r --rebase --no-rebase --all -a --append --atomic --depth --deepen --shallow-since --shallow-exclude --unshallow --update-shallow --negotiation-tip --negotiate-only --dry-run -f --force -k --keep --prefetch -p --prune --no-tags --refmap -t --tags -j --jobs --set-upstream --upload-pack --progress -o --server-option --show-forced-updates --no-show-forced-updates -4 --ipv4 -6 --ipv6" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_git_push ()
{
    local cur word_list
    word_list=" --all --prune --mirror -n --dry-run --porcelain -d --delete --tags --follow-tags --signed --no-signed --signed --atomic --no-atomic -o --push-option --receive-pack --exec --force-with-lease --no-force-with-lease --force-with-lease -f --force --force-if-includes --no-force-if-includes --repo -u --set-upstream --thin --no-thin -q --quiet -v --verbose --progress --no-recurse-submodules --recurse-submodules --verify --no-verify -4 --ipv4 -6 --ipv6" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _git git
