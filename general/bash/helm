# Auto-generated with h2o

_helm()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" completion create dependency env get help history install lint list package plugin pull push registry repo rollback search show status template test uninstall upgrade verify version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        completion) _helm_completion
            return
            ;;

        create) _helm_create
            return
            ;;

        dependency) _helm_dependency
            return
            ;;

        env) _helm_env
            return
            ;;

        get) _helm_get
            return
            ;;

        help) _helm_help
            return
            ;;

        history) _helm_history
            return
            ;;

        install) _helm_install
            return
            ;;

        lint) _helm_lint
            return
            ;;

        list) _helm_list
            return
            ;;

        package) _helm_package
            return
            ;;

        plugin) _helm_plugin
            return
            ;;

        pull) _helm_pull
            return
            ;;

        push) _helm_push
            return
            ;;

        registry) _helm_registry
            return
            ;;

        repo) _helm_repo
            return
            ;;

        rollback) _helm_rollback
            return
            ;;

        search) _helm_search
            return
            ;;

        show) _helm_show
            return
            ;;

        status) _helm_status
            return
            ;;

        template) _helm_template
            return
            ;;

        test) _helm_test
            return
            ;;

        uninstall) _helm_uninstall
            return
            ;;

        upgrade) _helm_upgrade
            return
            ;;

        verify) _helm_verify
            return
            ;;

        version) _helm_version
            return
            ;;

    esac

    local word_list=" completion create dependency env get help history install lint list package plugin pull push registry repo rollback search show status template test uninstall upgrade verify version --burst-limit --debug -h --help --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_completion()
{
    local cmd i subcommands
    local subcommands=" bash fish powershell zsh"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        bash) _helm_completion_bash
            return
            ;;

        fish) _helm_completion_fish
            return
            ;;

        powershell) _helm_completion_powershell
            return
            ;;

        zsh) _helm_completion_zsh
            return
            ;;

    esac

    local word_list=" bash fish powershell zsh -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_completion_bash()
{
    local word_list="  -h --help --no-descriptions --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_completion_fish()
{
    local word_list="  -h --help --no-descriptions --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_completion_powershell()
{
    local word_list="  -h --help --no-descriptions --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_completion_zsh()
{
    local word_list="  -h --help --no-descriptions --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_create()
{
    local word_list="  -h --help -p --starter --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_dependency()
{
    local word_list="  - -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_env()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get()
{
    local cmd i subcommands
    local subcommands=" all hooks manifest notes values"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        all) _helm_get_all
            return
            ;;

        hooks) _helm_get_hooks
            return
            ;;

        manifest) _helm_get_manifest
            return
            ;;

        notes) _helm_get_notes
            return
            ;;

        values) _helm_get_values
            return
            ;;

    esac

    local word_list=" all hooks manifest notes values -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get_all()
{
    local word_list="  -h --help --revision --template --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get_hooks()
{
    local word_list="  -h --help --revision --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get_manifest()
{
    local word_list="  -h --help --revision --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get_notes()
{
    local word_list="  -h --help --revision --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_get_values()
{
    local word_list="  -a --all -h --help -o --output --revision --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_help()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_history()
{
    local word_list="  -h --help --max -o --output --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_install()
{
    local word_list="  --atomic --ca-file --cert-file --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run --enable-dns --force -g --generate-name -h --help --insecure-skip-tls-verify --key-file --keyring --name-template --no-hooks -o --output --pass-credentials --password --post-renderer --post-renderer-args --render-subchart-notes --replace --repo --set --set-file --set-json --set-literal --set-string --skip-crds --timeout --username -f --values --verify --version --wait --wait-for-jobs --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_lint()
{
    local word_list="  -h --help --quiet --set --set-file --set-json --set-literal --set-string --strict -f --values --with-subcharts --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_list()
{
    local word_list="  -a --all -A --all-namespaces -d --date --deployed --failed -f --filter -h --help -m --max --no-headers --offset -o --output --pending -r --reverse -l --selector -q --short --superseded --time-format --uninstalled --uninstalling --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_package()
{
    local word_list="  --app-version -u --dependency-update -d --destination -h --help --key --keyring --passphrase-file --sign --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_plugin()
{
    local cmd i subcommands
    local subcommands=" install list uninstall update"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        install) _helm_plugin_install
            return
            ;;

        list) _helm_plugin_list
            return
            ;;

        uninstall) _helm_plugin_uninstall
            return
            ;;

        update) _helm_plugin_update
            return
            ;;

    esac

    local word_list=" install list uninstall update -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_plugin_install()
{
    local word_list="  -h --help --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_plugin_list()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_plugin_uninstall()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_plugin_update()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_pull()
{
    local word_list="  --ca-file --cert-file -d --destination --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --prov --repo --untar --untardir --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_push()
{
    local word_list="  --ca-file --cert-file -h --help --insecure-skip-tls-verify --key-file --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_registry()
{
    local cmd i subcommands
    local subcommands=" login logout"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        login) _helm_registry_login
            return
            ;;

        logout) _helm_registry_logout
            return
            ;;

    esac

    local word_list=" login logout -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_registry_login()
{
    local word_list="  --ca-file --cert-file -h --help --insecure --key-file -p --password --password-stdin -u --username --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_registry_logout()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo()
{
    local cmd i subcommands
    local subcommands=" add index list remove update"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        add) _helm_repo_add
            return
            ;;

        index) _helm_repo_index
            return
            ;;

        list) _helm_repo_list
            return
            ;;

        remove) _helm_repo_remove
            return
            ;;

        update) _helm_repo_update
            return
            ;;

    esac

    local word_list=" add index list remove update -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo_add()
{
    local word_list="  --allow-deprecated-repos --ca-file --cert-file --force-update -h --help --insecure-skip-tls-verify --key-file --no-update --pass-credentials --password --password-stdin --username --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo_index()
{
    local word_list="  -h --help --merge --url --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo_list()
{
    local word_list="  -h --help -o --output --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo_remove()
{
    local word_list="  -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_repo_update()
{
    local word_list="  --fail-on-repo-update-fail -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_rollback()
{
    local word_list="  --cleanup-on-fail --dry-run --force -h --help --history-max --no-hooks --recreate-pods --timeout --wait --wait-for-jobs --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_search()
{
    local cmd i subcommands
    local subcommands=" hub repo"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        hub) _helm_search_hub
            return
            ;;

        repo) _helm_search_repo
            return
            ;;

    esac

    local word_list=" hub repo -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_search_hub()
{
    local word_list="  --endpoint -h --help --list-repo-url --max-col-width -o --output --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_search_repo()
{
    local word_list="  --devel -h --help --max-col-width -o --output -r --regexp --version -l --versions --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show()
{
    local cmd i subcommands
    local subcommands=" all chart crds readme values"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        all) _helm_show_all
            return
            ;;

        chart) _helm_show_chart
            return
            ;;

        crds) _helm_show_crds
            return
            ;;

        readme) _helm_show_readme
            return
            ;;

        values) _helm_show_values
            return
            ;;

    esac

    local word_list=" all chart crds readme values -h --help --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show_all()
{
    local word_list="  --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show_chart()
{
    local word_list="  --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show_crds()
{
    local word_list="  --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show_readme()
{
    local word_list="  --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_show_values()
{
    local word_list="  --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --jsonpath --key-file --keyring --pass-credentials --password --repo --username --verify --version --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_status()
{
    local word_list="  -h --help -o --output --revision --show-desc --show-resources --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_template()
{
    local word_list="  -a --api-versions --atomic --ca-file --cert-file --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run --enable-dns --force -g --generate-name -h --help --include-crds --insecure-skip-tls-verify --is-upgrade --key-file --keyring --kube-version --name-template --no-hooks --output-dir --pass-credentials --password --post-renderer --post-renderer-args --release-name --render-subchart-notes --replace --repo --set --set-file --set-json --set-literal --set-string -s --show-only --skip-crds --skip-tests --timeout --username --validate -f --values --verify --version --wait --wait-for-jobs --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_test()
{
    local word_list="  --filter -h --help --logs --timeout --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_uninstall()
{
    local word_list="  --cascade --description --dry-run -h --help --keep-history --no-hooks --timeout --wait --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_upgrade()
{
    local word_list="  --atomic --ca-file --cert-file --cleanup-on-fail --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run --enable-dns --force -h --help --history-max --insecure-skip-tls-verify -i --install --key-file --keyring --no-hooks -o --output --pass-credentials --password --post-renderer --post-renderer-args --render-subchart-notes --repo --reset-values --reuse-values --set --set-file --set-json --set-literal --set-string --skip-crds --timeout --username -f --values --verify --version --wait --wait-for-jobs --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_verify()
{
    local word_list="  -h --help --keyring --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_helm_version()
{
    local word_list="  -h --help --short --template --burst-limit --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-insecure-skip-tls-verify --kube-tls-server-name --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _helm helm
