# Auto-generated with h2o

_helm()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          completion) _helm_completion
            return
            ;;

          create) _helm_create
            return
            ;;

          dependency) _helm_dependency
            return
            ;;

          env) _helm_env
            return
            ;;

          get) _helm_get
            return
            ;;

          history) _helm_history
            return
            ;;

          install) _helm_install
            return
            ;;

          lint) _helm_lint
            return
            ;;

          list) _helm_list
            return
            ;;

          package) _helm_package
            return
            ;;

          plugin) _helm_plugin
            return
            ;;

          pull) _helm_pull
            return
            ;;

          push) _helm_push
            return
            ;;

          registry) _helm_registry
            return
            ;;

          repo) _helm_repo
            return
            ;;

          rollback) _helm_rollback
            return
            ;;

          search) _helm_search
            return
            ;;

          show) _helm_show
            return
            ;;

          status) _helm_status
            return
            ;;

          template) _helm_template
            return
            ;;

          test) _helm_test
            return
            ;;

          uninstall) _helm_uninstall
            return
            ;;

          upgrade) _helm_upgrade
            return
            ;;

          verify) _helm_verify
            return
            ;;

          version) _helm_version
            return
            ;;

      *)
          word_list=" completion create dependency env get history install lint list package plugin pull push registry repo rollback search show status template test uninstall upgrade verify version --debug -h --help --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_helm_completion ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          completion)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          bash) _helm_bash
            return
            ;;

          fish) _helm_fish
            return
            ;;

          zsh) _helm_zsh
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" bash fish zsh -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_bash ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_fish ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_zsh ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_create ()
{
    local cur word_list
    word_list=" -h --help -p --starter --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_dependency ()
{
    local cur word_list
    word_list=" - -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_env ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_get ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          get)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          all) _helm_all
            return
            ;;

          hooks) _helm_hooks
            return
            ;;

          manifest) _helm_manifest
            return
            ;;

          notes) _helm_notes
            return
            ;;

          values) _helm_values
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" all hooks manifest notes values -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_all ()
{
    local cur word_list
    word_list=" -h --help --revision --template --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_hooks ()
{
    local cur word_list
    word_list=" -h --help --revision --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_manifest ()
{
    local cur word_list
    word_list=" -h --help --revision --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_notes ()
{
    local cur word_list
    word_list=" -h --help --revision --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_values ()
{
    local cur word_list
    word_list=" -a --all -h --help -o --output --revision --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_history ()
{
    local cur word_list
    word_list=" -h --help --max -o --output --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_install ()
{
    local cur word_list
    word_list=" --atomic --ca-file --cert-file --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run -g --generate-name -h --help --insecure-skip-tls-verify --key-file --keyring --name-template --no-hooks -o --output --pass-credentials --password --post-renderer --post-renderer-args --render-subchart-notes --replace --repo --set --set-file --set-string --skip-crds --timeout --username -f --values --verify --version --wait --wait-for-jobs --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_lint ()
{
    local cur word_list
    word_list=" -h --help --quiet --set --set-file --set-string --strict -f --values --with-subcharts --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_list ()
{
    local cur word_list
    word_list=" -a --all -A --all-namespaces -d --date --deployed --failed -f --filter -h --help -m --max --offset -o --output --pending -r --reverse -l --selector -q --short --superseded --time-format --uninstalled --uninstalling --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_package ()
{
    local cur word_list
    word_list=" --app-version -u --dependency-update -d --destination -h --help --key --keyring --passphrase-file --sign --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_plugin ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          plugin)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          install) _helm_install
            return
            ;;

          list) _helm_list
            return
            ;;

          uninstall) _helm_uninstall
            return
            ;;

          update) _helm_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" install list uninstall update -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_install ()
{
    local cur word_list
    word_list=" -h --help --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_list ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_uninstall ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_plugin_update ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_pull ()
{
    local cur word_list
    word_list=" --ca-file --cert-file -d --destination --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --prov --repo --untar --untardir --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_push ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_registry ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          registry)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          login) _helm_login
            return
            ;;

          logout) _helm_logout
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" login logout -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_registry_login ()
{
    local cur word_list
    word_list=" -h --help --insecure -p --password --password-stdin -u --username --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_registry_logout ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_repo ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          repo)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _helm_add
            return
            ;;

          index) _helm_index
            return
            ;;

          list) _helm_list
            return
            ;;

          remove) _helm_remove
            return
            ;;

          update) _helm_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add index list remove update -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_add ()
{
    local cur word_list
    word_list=" --allow-deprecated-repos --ca-file --cert-file --force-update -h --help --insecure-skip-tls-verify --key-file --no-update --pass-credentials --password --password-stdin --username --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_index ()
{
    local cur word_list
    word_list=" -h --help --merge --url --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_list ()
{
    local cur word_list
    word_list=" -h --help -o --output --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_remove ()
{
    local cur word_list
    word_list=" -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_repo_update ()
{
    local cur word_list
    word_list=" --fail-on-repo-update-fail -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_rollback ()
{
    local cur word_list
    word_list=" --cleanup-on-fail --dry-run --force -h --help --history-max --no-hooks --recreate-pods --timeout --wait --wait-for-jobs --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_search ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          search)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          hub) _helm_hub
            return
            ;;

          repo) _helm_repo
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" hub repo -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_search_hub ()
{
    local cur word_list
    word_list=" --endpoint -h --help --list-repo-url --max-col-width -o --output --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_search_repo ()
{
    local cur word_list
    word_list=" --devel -h --help --max-col-width -o --output -r --regexp --version -l --versions --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_show ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          show)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          all) _helm_all
            return
            ;;

          chart) _helm_chart
            return
            ;;

          crds) _helm_crds
            return
            ;;

          readme) _helm_readme
            return
            ;;

          values) _helm_values
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" all chart crds readme values -h --help --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_all ()
{
    local cur word_list
    word_list=" --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_chart ()
{
    local cur word_list
    word_list=" --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_crds ()
{
    local cur word_list
    word_list=" --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_readme ()
{
    local cur word_list
    word_list=" --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --key-file --keyring --pass-credentials --password --repo --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_values ()
{
    local cur word_list
    word_list=" --ca-file --cert-file --devel -h --help --insecure-skip-tls-verify --jsonpath --key-file --keyring --pass-credentials --password --repo --username --verify --version --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_status ()
{
    local cur word_list
    word_list=" -h --help -o --output --revision --show-desc --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_template ()
{
    local cur word_list
    word_list=" -a --api-versions --atomic --ca-file --cert-file --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run -g --generate-name -h --help --include-crds --insecure-skip-tls-verify --is-upgrade --key-file --keyring --kube-version --name-template --no-hooks --output-dir --pass-credentials --password --post-renderer --post-renderer-args --release-name --render-subchart-notes --replace --repo --set --set-file --set-string -s --show-only --skip-crds --skip-tests --timeout --username --validate -f --values --verify --version --wait --wait-for-jobs --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_test ()
{
    local cur word_list
    word_list=" --filter -h --help --logs --timeout --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_uninstall ()
{
    local cur word_list
    word_list=" --description --dry-run -h --help --keep-history --no-hooks --timeout --wait --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_upgrade ()
{
    local cur word_list
    word_list=" --atomic --ca-file --cert-file --cleanup-on-fail --create-namespace --dependency-update --description --devel --disable-openapi-validation --dry-run --force -h --help --history-max --insecure-skip-tls-verify -i --install --key-file --keyring --no-hooks -o --output --pass-credentials --password --post-renderer --post-renderer-args --render-subchart-notes --repo --reset-values --reuse-values --set --set-file --set-string --skip-crds --timeout --username -f --values --verify --version --wait --wait-for-jobs --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_verify ()
{
    local cur word_list
    word_list=" -h --help --keyring --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_helm_version ()
{
    local cur word_list
    word_list=" -h --help --short --template --debug --kube-apiserver --kube-as-group --kube-as-user --kube-ca-file --kube-context --kube-token --kubeconfig -n --namespace --registry-config --repository-cache --repository-config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _helm helm
