# Auto-generated with h2o

_jupyter()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          bundlerextension) _jupyter_bundlerextension
            return
            ;;

          console) _jupyter_console
            return
            ;;

          execute) _jupyter_execute
            return
            ;;

          kernel) _jupyter_kernel
            return
            ;;

          kernelspec) _jupyter_kernelspec
            return
            ;;

          lab) _jupyter_lab
            return
            ;;

          labextension) _jupyter_labextension
            return
            ;;

          migrate) _jupyter_migrate
            return
            ;;

          nbclassic) _jupyter_nbclassic
            return
            ;;

          nbconvert) _jupyter_nbconvert
            return
            ;;

          nbextension) _jupyter_nbextension
            return
            ;;

          notebook) _jupyter_notebook
            return
            ;;

          qtconsole) _jupyter_qtconsole
            return
            ;;

          repo2docker) _jupyter_repo2docker
            return
            ;;

          retro) _jupyter_retro
            return
            ;;

          run) _jupyter_run
            return
            ;;

          server) _jupyter_server
            return
            ;;

          serverextension) _jupyter_serverextension
            return
            ;;

          troubleshoot) _jupyter_troubleshoot
            return
            ;;

          trust) _jupyter_trust
            return
            ;;

      *)
          word_list=" bundlerextension console execute kernel kernelspec lab labextension migrate nbclassic nbconvert nbextension notebook qtconsole repo2docker retro run server serverextension troubleshoot trust -h --help --version --config-dir --data-dir --runtime-dir --paths --json --debug" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_jupyter_bundlerextension ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --user --system --sys-prefix --py --python --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_console ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --existing --confirm-exit --no-confirm-exit --simple-prompt --no-simple-prompt --log-level --config --ip --transport --hb --shell --iopub --stdin --control --existing -f --kernel --ssh" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_execute ()
{
    local cur word_list
    word_list=" --allow-errors --timeout --startup_timeout --kernel_name" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_kernel ()
{
    local cur word_list
    word_list=" --debug --kernel --ip" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_kernelspec ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          kernelspec)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _jupyter_list
            return
            ;;

          install) _jupyter_install
            return
            ;;

          uninstall) _jupyter_uninstall
            return
            ;;

          remove) _jupyter_remove
            return
            ;;

          provisioners) _jupyter_provisioners
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list install uninstall remove provisioners" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kernelspec_list ()
{
    local cur word_list
    word_list=" --json --debug --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kernelspec_install ()
{
    local cur word_list
    word_list=" --user --replace --sys-prefix --debug --name --prefix --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kernelspec_uninstall ()
{
    local cur word_list
    word_list=" -f --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kernelspec_remove ()
{
    local cur word_list
    word_list=" -f --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kernelspec_provisioners ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_lab ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --allow-root --no-browser --autoreload --script --no-script --core-mode --dev-mode --watch --splice-source --expose-app-in-browser --extensions-in-dev-mode --collaborative --log-level --config --ip --port --port-retries --keyfile --certfile --client-ca --notebook-dir --browser --pylab --watch --app-dir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_labextension ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          labextension)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          instal) _jupyter_instal
            return
            ;;

          develop) _jupyter_develop
            return
            ;;

          build) _jupyter_build
            return
            ;;

          watch) _jupyter_watch
            return
            ;;

          update) _jupyter_update
            return
            ;;

          uninstall) _jupyter_uninstall
            return
            ;;

          list) _jupyter_list
            return
            ;;

          link) _jupyter_link
            return
            ;;

          unlink) _jupyter_unlink
            return
            ;;

          enable) _jupyter_enable
            return
            ;;

          disable) _jupyter_disable
            return
            ;;

          check) _jupyter_check
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" instal develop build watch update uninstall list link unlink enable disable check --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_labextension_instal ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --no-build --dev-build --no-minimize --clean --splice-source --log-level --config --app-dir --dev-build --minimize --debug-log-path --pin-version-as" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_migrate ()
{
    local cur word_list
    word_list=" - --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_nbclassic ()
{
    local cur word_list
    word_list=" --no-browser --no-mathjax --allow-root --ip --port --port-retries --keyfile --certfile --client-ca --notebook-dir --browser" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_nbconvert ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --execute --allow-errors --stdin --stdout --inplace --clear-output --no-prompt --no-input --allow-chromium-download --disable-chromium-sandbox --show-input --embed-images --log-level --config --to --template --template-file --theme --writer --post --output --output-dir --reveal-prefix --nbformat" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_nbextension ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          nbextension)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          install) _jupyter_install
            return
            ;;

          enable) _jupyter_enable
            return
            ;;

          disable) _jupyter_disable
            return
            ;;

          uninstall) _jupyter_uninstall
            return
            ;;

          list) _jupyter_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" install enable disable uninstall list --debug --show-config --show-config-json --user --system --sys-prefix --py --python --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_notebook ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          notebook)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _jupyter_list
            return
            ;;

          stop) _jupyter_stop
            return
            ;;

          password) _jupyter_password
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list stop password --debug --show-config --show-config-json --generate-config -y --no-browser --pylab --no-mathjax --allow-root --autoreload --script --no-script --log-level --config --ip --port --port-retries --sock --sock-mode --transport --keyfile --certfile --client-ca --notebook-dir --browser --pylab --gateway-url" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_qtconsole ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --plain --banner --no-banner --existing --confirm-exit --no-confirm-exit --log-level --config --style --stylesheet --editor --paging --ip --transport --hb --shell --iopub --stdin --control --existing -f --kernel --ssh --gui-completion" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_repo2docker ()
{
    local cur word_list
    word_list=" -h --help --help-all --version --config --json-logs --image-name --ref --debug --no-build --build-memory-limit --no-run --publish -p --publish-all -P --no-clean --push --volume -v --user-id --user-name --env -e --editable -E --target-repo-dir --appendix --label --build-arg --subdir --cache-from --engine" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_retro ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --allow-root --no-browser --autoreload --script --no-script --expose-app-in-browser --collaborative --retro-logo --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_run ()
{
    local cur word_list
    word_list=" --debug --show-config --show-config-json --generate-config -y --existing --confirm-exit --no-confirm-exit --log-level --config --ip --transport --hb --shell --iopub --stdin --control --existing -f --kernel --ssh" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_server ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          server)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _jupyter_list
            return
            ;;

          stop) _jupyter_stop
            return
            ;;

          password) _jupyter_password
            return
            ;;

          extension) _jupyter_extension
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list stop password extension --debug --show-config --show-config-json --generate-config -y --allow-root --no-browser --autoreload --script --no-script --log-level --config --ip --port --port-retries --sock --sock-mode --transport --keyfile --certfile --client-ca --notebook-dir --preferred-dir --browser --pylab --gateway-url" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_serverextension ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          serverextension)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          enable) _jupyter_enable
            return
            ;;

          disable) _jupyter_disable
            return
            ;;

          list) _jupyter_list
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" enable disable list --debug --show-config --show-config-json --user --system --sys-prefix --py --python --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_jupyter_trust ()
{
    local cur word_list
    word_list=" --reset --debug --show-config --show-config-json --generate-config -y --log-level --config" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _jupyter jupyter
