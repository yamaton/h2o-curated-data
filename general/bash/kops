# Auto-generated with h2o

_kops()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          completion) _kops_completion
            return
            ;;

          create) _kops_create
            return
            ;;

          delete) _kops_delete
            return
            ;;

          distrust) _kops_distrust
            return
            ;;

          edit) _kops_edit
            return
            ;;

          export) _kops_export
            return
            ;;

          get) _kops_get
            return
            ;;

          help) _kops_help
            return
            ;;

          promote) _kops_promote
            return
            ;;

          replace) _kops_replace
            return
            ;;

          rolling-update) _kops_rollingupdate
            return
            ;;

          toolbox) _kops_toolbox
            return
            ;;

          trust) _kops_trust
            return
            ;;

          update) _kops_update
            return
            ;;

          upgrade) _kops_upgrade
            return
            ;;

          validate) _kops_validate
            return
            ;;

          version) _kops_version
            return
            ;;

      *)
          word_list=" completion create delete distrust edit export get help promote replace rolling-update toolbox trust update upgrade validate version "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_kops_completion ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          completion)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          bash) _kops_bash
            return
            ;;

          fish) _kops_fish
            return
            ;;

          powershell) _kops_powershell
            return
            ;;

          zsh) _kops_zsh
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" bash fish powershell zsh -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_bash ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_fish ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_powershell ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_completion_zsh ()
{
    local cur word_list
    word_list=" -h --help --no-descriptions --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_create ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          create)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          instancegroup) _kops_instancegroup
            return
            ;;

          keypair) _kops_keypair
            return
            ;;

          secret) _kops_secret
            return
            ;;

          sshpublickey) _kops_sshpublickey
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster instancegroup keypair secret sshpublickey -f --filename -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_cluster ()
{
    local cur word_list
    word_list=" --node-count --yes --yes --admin-access --api-loadbalancer-class --api-loadbalancer-type --api-ssl-certificate --associate-public-ip --authorization --bastion --channel --cloud --cloud-labels --container-runtime --disable-subnet-tags --discovery-store --dns --dns-zone --dry-run --encrypt-etcd-storage --etcd-storage-type --gce-service-account -h --help --image --ipv6 --kubernetes-version --master-count --master-image --master-public-name --master-security-groups --master-size --master-tenancy --master-volume-size --master-zones --network-cidr --network-id --networking --node-count --node-image --node-security-groups --node-size --node-tenancy --node-volume-size --os-dns-servers --os-ext-net --os-ext-subnet --os-kubelet-ignore-az --os-lb-floating-subnet --os-network --os-octavia --os-octavia-provider --out -o --output --project --set --ssh-access --ssh-public-key --subnets --target -t --topology --unset --utility-subnets --vpc -y --yes --zones --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_instancegroup ()
{
    local cur word_list
    word_list=" --role --subnet --dry-run --edit -h --help -o --output --role --subnet --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_keypair ()
{
    local cur word_list
    word_list=" --cert -h --help --key --primary --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_secret ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          secret)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          ciliumpassword) _create_ciliumpassword
            return
            ;;

          dockerconfig) _create_dockerconfig
            return
            ;;

          encryptionconfig) _create_encryptionconfig
            return
            ;;

          weavepassword) _create_weavepassword
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" ciliumpassword dockerconfig encryptionconfig weavepassword -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_ciliumpassword ()
{
    local cur word_list
    word_list=" --name --state -f --filename --force -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_dockerconfig ()
{
    local cur word_list
    word_list=" --name --state --name --state -f --filename --force -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_encryptionconfig ()
{
    local cur word_list
    word_list=" --name --state --name --state -f --filename --force -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_weavepassword ()
{
    local cur word_list
    word_list=" --name --state --name --state --name --state -f --filename --force -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_sshpublickey ()
{
    local cur word_list
    word_list=" -h --help -i --ssh-public-key --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_delete ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          delete)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          instance) _kops_instance
            return
            ;;

          instancegroup) _kops_instancegroup
            return
            ;;

          secret) _kops_secret
            return
            ;;

          sshpublickey) _kops_sshpublickey
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster instance instancegroup secret sshpublickey -f --filename -h --help -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_delete_cluster ()
{
    local cur word_list
    word_list=" --external -h --help --region --unregister -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_delete_instance ()
{
    local cur word_list
    word_list=" --cloudonly --fail-on-drain-error --fail-on-validate-error -h --help --post-drain-delay --surge --validate-count --validation-timeout -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_delete_instancegroup ()
{
    local cur word_list
    word_list=" -h --help -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_delete_secret ()
{
    local cur word_list
    word_list=" -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_delete_sshpublickey ()
{
    local cur word_list
    word_list=" -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_distrust ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          distrust)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          keypair) _kops_keypair
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" keypair -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_distrust_keypair ()
{
    local cur word_list
    word_list=" -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_edit ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          edit)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          instancegroup) _kops_instancegroup
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster instancegroup -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_edit_cluster ()
{
    local cur word_list
    word_list=" -h --help --set --unset --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_edit_instancegroup ()
{
    local cur word_list
    word_list=" -h --help --set --unset --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_export ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          export)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          kubeconfig) _kops_kubeconfig
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" kubeconfig -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_export_kubeconfig ()
{
    local cur word_list
    word_list=" --admin --all --auth-plugin -h --help --internal --kubeconfig --user --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_get ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          get)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          assets) _kops_assets
            return
            ;;

          clusters) _kops_clusters
            return
            ;;

          instancegroups) _kops_instancegroups
            return
            ;;

          instances) _kops_instances
            return
            ;;

          keypairs) _kops_keypairs
            return
            ;;

          secrets) _kops_secrets
            return
            ;;

          sshpublickeys) _kops_sshpublickeys
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" assets clusters instancegroups instances keypairs secrets sshpublickeys -h --help -o --output --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_assets ()
{
    local cur word_list
    word_list=" --copy -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_clusters ()
{
    local cur word_list
    word_list=" --full -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_instancegroups ()
{
    local cur word_list
    word_list=" -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_instances ()
{
    local cur word_list
    word_list=" -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_keypairs ()
{
    local cur word_list
    word_list=" --distrusted -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_secrets ()
{
    local cur word_list
    word_list=" -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_get_sshpublickeys ()
{
    local cur word_list
    word_list=" -h --help --config --name -o --output --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_help ()
{
    local cur word_list
    word_list=" -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_promote ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          promote)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          keypair) _kops_keypair
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" keypair -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_promote_keypair ()
{
    local cur word_list
    word_list=" --name --state --name --state -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_replace ()
{
    local cur word_list
    word_list=" -f --filename --force -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_rollingupdate ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          rolling-update)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollingupdate_cluster ()
{
    local cur word_list
    word_list=" --fail-on-validate-error --bastion-interval --cloudonly --drain-timeout --fail-on-drain-error --fail-on-validate-error --force -h --help --instance-group --instance-group-roles -i --interactive --master-interval --node-interval --post-drain-delay --validate-count --validation-timeout -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_toolbox ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          toolbox)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          dump) _kops_dump
            return
            ;;

          instance-selector) _kops_instanceselector
            return
            ;;

          template) _kops_template
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" dump instance-selector template -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolbox_dump ()
{
    local cur word_list
    word_list=" --dir -h --help -o --output --private-key --ssh-user --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolbox_instanceselector ()
{
    local cur word_list
    word_list=" --allow-list --base-instance-type --burst-support --cluster-autoscaler --cpu-architecture --deny-list --dry-run --ena-support --flexible --gpu-memory --gpu-memory-max --gpu-memory-min --gpus --gpus-max --gpus-min -h --help --ig-count --max-results --memory --memory-max --memory-min --network-interfaces --network-interfaces-max --network-interfaces-min --node-count-max --node-count-min --node-security-groups --node-volume-size -o --output --placement-group-strategy --subnets --usage-class --vcpus --vcpus-max --vcpus-min --vcpus-to-memory-ratio --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolbox_template ()
{
    local cur word_list
    word_list=" --channel --config-value --fail-on-missing --format-yaml -h --help --out --set --set-string --snippets --template --values --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_trust ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          trust)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          keypair) _kops_keypair
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" keypair -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_trust_keypair ()
{
    local cur word_list
    word_list=" -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_update ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          update)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_update_cluster ()
{
    local cur word_list
    word_list=" --admin --allow-kops-downgrade --create-kube-config -h --help --internal --lifecycle-overrides --out --phase --ssh-public-key --target --user -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_upgrade ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          upgrade)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_upgrade_cluster ()
{
    local cur word_list
    word_list=" --channel -h --help --kubernetes-version -y --yes --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_validate ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          validate)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cluster) _kops_cluster
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cluster -h --help --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_validate_cluster ()
{
    local cur word_list
    word_list=" --count -h --help --kubeconfig -o --output --wait --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_kops_version ()
{
    local cur word_list
    word_list=" -h --help --server --short --config --name --state -v --v" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _kops kops
