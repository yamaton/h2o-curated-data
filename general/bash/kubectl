# Auto-generated with h2o

_kubectl()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" create expose run set explain get edit delete rollout scale autoscale certificate cluster-info top cordon uncordon drain taint describe logs attach exec port-forward proxy cp auth debug events diff apply patch replace wait kustomize label annotate completion api-resources api-versions config plugin version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        create) _kubectl_create
            return
            ;;

        expose) _kubectl_expose
            return
            ;;

        run) _kubectl_run
            return
            ;;

        set) _kubectl_set
            return
            ;;

        explain) _kubectl_explain
            return
            ;;

        get) _kubectl_get
            return
            ;;

        edit) _kubectl_edit
            return
            ;;

        delete) _kubectl_delete
            return
            ;;

        rollout) _kubectl_rollout
            return
            ;;

        scale) _kubectl_scale
            return
            ;;

        autoscale) _kubectl_autoscale
            return
            ;;

        certificate) _kubectl_certificate
            return
            ;;

        cluster-info) _kubectl_clusterinfo
            return
            ;;

        top) _kubectl_top
            return
            ;;

        cordon) _kubectl_cordon
            return
            ;;

        uncordon) _kubectl_uncordon
            return
            ;;

        drain) _kubectl_drain
            return
            ;;

        taint) _kubectl_taint
            return
            ;;

        describe) _kubectl_describe
            return
            ;;

        logs) _kubectl_logs
            return
            ;;

        attach) _kubectl_attach
            return
            ;;

        exec) _kubectl_exec
            return
            ;;

        port-forward) _kubectl_portforward
            return
            ;;

        proxy) _kubectl_proxy
            return
            ;;

        cp) _kubectl_cp
            return
            ;;

        auth) _kubectl_auth
            return
            ;;

        debug) _kubectl_debug
            return
            ;;

        events) _kubectl_events
            return
            ;;

        diff) _kubectl_diff
            return
            ;;

        apply) _kubectl_apply
            return
            ;;

        patch) _kubectl_patch
            return
            ;;

        replace) _kubectl_replace
            return
            ;;

        wait) _kubectl_wait
            return
            ;;

        kustomize) _kubectl_kustomize
            return
            ;;

        label) _kubectl_label
            return
            ;;

        annotate) _kubectl_annotate
            return
            ;;

        completion) _kubectl_completion
            return
            ;;

        api-resources) _kubectl_apiresources
            return
            ;;

        api-versions) _kubectl_apiversions
            return
            ;;

        config) _kubectl_config
            return
            ;;

        plugin) _kubectl_plugin
            return
            ;;

        version) _kubectl_version
            return
            ;;

    esac

    local word_list=" create expose run set explain get edit delete rollout scale autoscale certificate cluster-info top cordon uncordon drain taint describe logs attach exec port-forward proxy cp auth debug events diff apply patch replace wait kustomize label annotate completion api-resources api-versions config plugin version "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create()
{
    local cmd i subcommands
    local subcommands=" clusterrole clusterrolebinding configmap cronjob deployment ingress job namespace poddisruptionbudget priorityclass quota role rolebinding secret service serviceaccount token"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        clusterrole) _kubectl_create_clusterrole
            return
            ;;

        clusterrolebinding) _kubectl_create_clusterrolebinding
            return
            ;;

        configmap) _kubectl_create_configmap
            return
            ;;

        cronjob) _kubectl_create_cronjob
            return
            ;;

        deployment) _kubectl_create_deployment
            return
            ;;

        ingress) _kubectl_create_ingress
            return
            ;;

        job) _kubectl_create_job
            return
            ;;

        namespace) _kubectl_create_namespace
            return
            ;;

        poddisruptionbudget) _kubectl_create_poddisruptionbudget
            return
            ;;

        priorityclass) _kubectl_create_priorityclass
            return
            ;;

        quota) _kubectl_create_quota
            return
            ;;

        role) _kubectl_create_role
            return
            ;;

        rolebinding) _kubectl_create_rolebinding
            return
            ;;

        secret) _kubectl_create_secret
            return
            ;;

        service) _kubectl_create_service
            return
            ;;

        serviceaccount) _kubectl_create_serviceaccount
            return
            ;;

        token) _kubectl_create_token
            return
            ;;

    esac

    local word_list=" clusterrole clusterrolebinding configmap cronjob deployment ingress job namespace poddisruptionbudget priorityclass quota role rolebinding secret service serviceaccount token --allow-missing-template-keys --dry-run --edit --field-manager -f --filename -k --kustomize -o --output --raw -R --recursive --save-config -l --selector --show-managed-fields --template --validate --windows-line-endings"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_clusterrole()
{
    local word_list="  --aggregation-rule --allow-missing-template-keys --dry-run --field-manager --non-resource-url -o --output --resource --resource-name --save-config --show-managed-fields --template --validate --verb"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_clusterrolebinding()
{
    local word_list="  --allow-missing-template-keys --clusterrole --dry-run --field-manager --group -o --output --save-config --serviceaccount --show-managed-fields --template --user --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_configmap()
{
    local word_list="  --allow-missing-template-keys --append-hash --dry-run --field-manager --from-env-file --from-file --from-literal -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_cronjob()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --image -o --output --restart --save-config --schedule --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_deployment()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --image -o --output --port -r --replicas --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_ingress()
{
    local word_list="  --rule --allow-missing-template-keys --annotation --class --default-backend --dry-run --field-manager -o --output --rule --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_job()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --from --image -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_namespace()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_poddisruptionbudget()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --max-unavailable --min-available -o --output --save-config --selector --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_priorityclass()
{
    local word_list="  --allow-missing-template-keys --description --dry-run --field-manager --global-default -o --output --preemption-policy --save-config --show-managed-fields --template --validate --value"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_quota()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --hard -o --output --save-config --scopes --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_role()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager -o --output --resource --resource-name --save-config --show-managed-fields --template --validate --verb"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_rolebinding()
{
    local word_list="  --allow-missing-template-keys --clusterrole --dry-run --field-manager --group -o --output --role --save-config --serviceaccount --show-managed-fields --template --user --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_secret()
{
    local cmd i subcommands
    local subcommands=" docker-registry generic tls"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        docker-registry) _kubectl_create_secret_dockerregistry
            return
            ;;

        generic) _kubectl_create_secret_generic
            return
            ;;

        tls) _kubectl_create_secret_tls
            return
            ;;

    esac

    local word_list=" docker-registry generic tls "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_secret_dockerregistry()
{
    local word_list="  --allow-missing-template-keys --append-hash --docker-email --docker-password --docker-server --docker-username --dry-run --field-manager --from-file -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_secret_generic()
{
    local word_list="  --allow-missing-template-keys --append-hash --dry-run --field-manager --from-env-file --from-file --from-literal -o --output --save-config --show-managed-fields --template --type --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_secret_tls()
{
    local word_list="  --allow-missing-template-keys --append-hash --cert --dry-run --field-manager --key -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_service()
{
    local cmd i subcommands
    local subcommands=" clusterip externalname loadbalancer nodeport"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        clusterip) _kubectl_create_service_clusterip
            return
            ;;

        externalname) _kubectl_create_service_externalname
            return
            ;;

        loadbalancer) _kubectl_create_service_loadbalancer
            return
            ;;

        nodeport) _kubectl_create_service_nodeport
            return
            ;;

    esac

    local word_list=" clusterip externalname loadbalancer nodeport "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_service_clusterip()
{
    local word_list="  --allow-missing-template-keys --clusterip --dry-run --field-manager -o --output --save-config --show-managed-fields --tcp --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_service_externalname()
{
    local word_list="  --allow-missing-template-keys --dry-run --external-name --field-manager -o --output --save-config --show-managed-fields --tcp --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_service_loadbalancer()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --tcp --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_service_nodeport()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager --node-port -o --output --save-config --show-managed-fields --tcp --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_serviceaccount()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_create_token()
{
    local word_list="  --allow-missing-template-keys --audience --bound-object-kind --bound-object-name --bound-object-uid --duration -o --output --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_expose()
{
    local word_list="  --allow-missing-template-keys --cluster-ip --dry-run --external-ip --field-manager -f --filename -k --kustomize -l --labels --load-balancer-ip --name -o --output --override-type --overrides --port --protocol -R --recursive --save-config --selector --session-affinity --show-managed-fields --target-port --template --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_run()
{
    local word_list="  --allow-missing-template-keys --annotations --attach --command --dry-run --env --expose --field-manager --image --image-pull-policy -l --labels --leave-stdin-open -o --output --override-type --overrides --pod-running-timeout --port --privileged -q --quiet --restart --rm --save-config --show-managed-fields -i --stdin --template -t --tty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set()
{
    local cmd i subcommands
    local subcommands=" env image resources selector serviceaccount subject"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        env) _kubectl_set_env
            return
            ;;

        image) _kubectl_set_image
            return
            ;;

        resources) _kubectl_set_resources
            return
            ;;

        selector) _kubectl_set_selector
            return
            ;;

        serviceaccount) _kubectl_set_serviceaccount
            return
            ;;

        subject) _kubectl_set_subject
            return
            ;;

    esac

    local word_list=" env image resources selector serviceaccount subject "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_env()
{
    local word_list="  --all --allow-missing-template-keys -c --containers --dry-run -e --env --field-manager -f --filename --from --keys -k --kustomize --list --local -o --output --overwrite --prefix -R --recursive --resolve -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_image()
{
    local word_list="  --all --allow-missing-template-keys --dry-run --field-manager -f --filename -k --kustomize --local -o --output -R --recursive -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_resources()
{
    local word_list="  --all --allow-missing-template-keys -c --containers --dry-run --field-manager -f --filename -k --kustomize --limits --local -o --output -R --recursive --requests -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_selector()
{
    local word_list="  --all --allow-missing-template-keys --dry-run --field-manager -f --filename --local -o --output -R --recursive --resource-version --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_serviceaccount()
{
    local word_list="  --all --allow-missing-template-keys --dry-run --field-manager -f --filename -k --kustomize --local -o --output -R --recursive --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_set_subject()
{
    local word_list="  --all --allow-missing-template-keys --dry-run --field-manager -f --filename --group -k --kustomize --local -o --output -R --recursive -l --selector --serviceaccount --show-managed-fields --template --user"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_explain()
{
    local word_list="  --api-version --output --recursive"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_get()
{
    local word_list="  -A --all-namespaces --allow-missing-template-keys --chunk-size --field-selector -f --filename --ignore-not-found -k --kustomize -L --label-columns --no-headers -o --output --output-watch-events --raw -R --recursive -l --selector --server-print --show-kind --show-labels --show-managed-fields --sort-by --subresource --template -w --watch --watch-only"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_edit()
{
    local word_list="  --allow-missing-template-keys --field-manager -f --filename -k --kustomize -o --output --output-patch -R --recursive --save-config --show-managed-fields --subresource --template --validate --windows-line-endings"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_delete()
{
    local word_list="  --all -A --all-namespaces --cascade --dry-run --field-selector -f --filename --force --grace-period --ignore-not-found -k --kustomize --now -o --output --raw -R --recursive -l --selector --timeout --wait"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout()
{
    local cmd i subcommands
    local subcommands=" history pause restart resume status undo"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        history) _kubectl_rollout_history
            return
            ;;

        pause) _kubectl_rollout_pause
            return
            ;;

        restart) _kubectl_rollout_restart
            return
            ;;

        resume) _kubectl_rollout_resume
            return
            ;;

        status) _kubectl_rollout_status
            return
            ;;

        undo) _kubectl_rollout_undo
            return
            ;;

    esac

    local word_list=" history pause restart resume status undo "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_history()
{
    local word_list="  --allow-missing-template-keys -f --filename -k --kustomize -o --output -R --recursive --revision -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_pause()
{
    local word_list="  --allow-missing-template-keys --field-manager -f --filename -k --kustomize -o --output -R --recursive -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_restart()
{
    local word_list="  --allow-missing-template-keys --field-manager -f --filename -k --kustomize -o --output -R --recursive -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_resume()
{
    local word_list="  --allow-missing-template-keys --field-manager -f --filename -k --kustomize -o --output -R --recursive -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_status()
{
    local word_list="  -f --filename -k --kustomize -R --recursive --revision -l --selector --timeout -w --watch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_rollout_undo()
{
    local word_list="  --allow-missing-template-keys --dry-run -f --filename -k --kustomize -o --output -R --recursive -l --selector --show-managed-fields --template --to-revision"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_scale()
{
    local word_list="  --all --allow-missing-template-keys --current-replicas --dry-run -f --filename -k --kustomize -o --output -R --recursive --replicas --resource-version -l --selector --show-managed-fields --template --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_autoscale()
{
    local word_list="  --allow-missing-template-keys --cpu-percent --dry-run --field-manager -f --filename -k --kustomize --max --min --name -o --output -R --recursive --save-config --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_certificate()
{
    local cmd i subcommands
    local subcommands=" approve deny"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        approve) _kubectl_certificate_approve
            return
            ;;

        deny) _kubectl_certificate_deny
            return
            ;;

    esac

    local word_list=" approve deny "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_certificate_approve()
{
    local word_list="  --allow-missing-template-keys -f --filename --force -k --kustomize -o --output -R --recursive --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_certificate_deny()
{
    local word_list="  --allow-missing-template-keys -f --filename --force -k --kustomize -o --output -R --recursive --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_clusterinfo()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_top()
{
    local cmd i subcommands
    local subcommands=" node pod"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        node) _kubectl_top_node
            return
            ;;

        pod) _kubectl_top_pod
            return
            ;;

    esac

    local word_list=" node pod "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_top_node()
{
    local word_list="  --no-headers -l --selector --show-capacity --sort-by --use-protocol-buffers"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_top_pod()
{
    local word_list="  -A --all-namespaces --containers --field-selector --no-headers -l --selector --sort-by --sum --use-protocol-buffers"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_cordon()
{
    local word_list="  --dry-run -l --selector"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_uncordon()
{
    local word_list="  --dry-run -l --selector"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_drain()
{
    local word_list="  --chunk-size --delete-emptydir-data --disable-eviction --dry-run --force --grace-period --ignore-daemonsets --pod-selector -l --selector --skip-wait-for-delete-timeout --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_taint()
{
    local word_list="  --all --allow-missing-template-keys --dry-run --field-manager -o --output --overwrite -l --selector --show-managed-fields --template --validate"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_describe()
{
    local word_list="  -A --all-namespaces --chunk-size -f --filename -k --kustomize -R --recursive -l --selector --show-events"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_logs()
{
    local word_list="  --all-containers -c --container -f --follow --ignore-errors --insecure-skip-tls-verify-backend --limit-bytes --max-log-requests --pod-running-timeout --prefix -p --previous -l --selector --since --since-time --tail --timestamps"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_attach()
{
    local word_list="  -c --container --pod-running-timeout -q --quiet -i --stdin -t --tty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_exec()
{
    local word_list="  -c --container -f --filename --pod-running-timeout -q --quiet -i --stdin -t --tty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_portforward()
{
    local word_list="  --address --pod-running-timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_proxy()
{
    local word_list="  --accept-hosts --accept-paths --address --api-prefix --append-server-path --disable-filter --keepalive -p --port --reject-methods --reject-paths -u --unix-socket -w --www -P --www-prefix"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_cp()
{
    local word_list="  -c --container --no-preserve --retries"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_auth()
{
    local cmd i subcommands
    local subcommands=" can-i reconcile whoami"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        can-i) _kubectl_auth_cani
            return
            ;;

        reconcile) _kubectl_auth_reconcile
            return
            ;;

        whoami) _kubectl_auth_whoami
            return
            ;;

    esac

    local word_list=" can-i reconcile whoami "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_auth_cani()
{
    local word_list="  -A --all-namespaces --list --no-headers -q --quiet --subresource"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_auth_reconcile()
{
    local word_list="  --allow-missing-template-keys --dry-run -f --filename -k --kustomize -o --output -R --recursive --remove-extra-permissions --remove-extra-subjects --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_auth_whoami()
{
    local word_list="  --allow-missing-template-keys -o --output --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_debug()
{
    local word_list="  --arguments-only --attach -c --container --copy-to --env -f --filename --image --image-pull-policy --profile -q --quiet --replace --same-node --set-image --share-processes -i --stdin --target -t --tty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_events()
{
    local word_list="  -A --all-namespaces --allow-missing-template-keys --chunk-size --for --no-headers -o --output --show-managed-fields --template --types -w --watch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_diff()
{
    local word_list="  --field-manager -f --filename --force-conflicts -k --kustomize --prune --prune-allowlist -R --recursive -l --selector --server-side --show-managed-fields"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_apply()
{
    local word_list="  --all --allow-missing-template-keys --cascade --dry-run --field-manager -f --filename --force --force-conflicts --grace-period -k --kustomize --openapi-patch -o --output --overwrite --prune --prune-allowlist -R --recursive -l --selector --server-side --show-managed-fields --template --timeout --validate --wait"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_patch()
{
    local word_list="  --allow-missing-template-keys --dry-run --field-manager -f --filename -k --kustomize --local -o --output -p --patch --patch-file -R --recursive --show-managed-fields --subresource --template --type"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_replace()
{
    local word_list="  --allow-missing-template-keys --cascade --dry-run --field-manager -f --filename --force --grace-period -k --kustomize -o --output --raw -R --recursive --save-config --show-managed-fields --subresource --template --timeout --validate --wait"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_wait()
{
    local word_list="  --all -A --all-namespaces --allow-missing-template-keys --field-selector -f --filename --for --local -o --output -R --recursive -l --selector --show-managed-fields --template --timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_kustomize()
{
    local word_list="  --as-current-user --enable-alpha-plugins --enable-helm -e --env --helm-command --load-restrictor --mount --network --network-name -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_label()
{
    local word_list="  --all -A --all-namespaces --allow-missing-template-keys --dry-run --field-manager --field-selector -f --filename -k --kustomize --list --local -o --output --overwrite -R --recursive --resource-version -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_annotate()
{
    local word_list="  --all -A --all-namespaces --allow-missing-template-keys --dry-run --field-manager --field-selector -f --filename -k --kustomize --list --local -o --output --overwrite -R --recursive --resource-version -l --selector --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_completion()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_apiresources()
{
    local word_list="  --api-group --cached --categories --namespaced --no-headers -o --output --sort-by --verbs"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_apiversions()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config()
{
    local cmd i subcommands
    local subcommands=" current-context delete-cluster delete-context delete-user get-clusters get-contexts get-users rename-context set set-cluster set-context set-credentials unset use-context view"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        current-context) _kubectl_config_currentcontext
            return
            ;;

        delete-cluster) _kubectl_config_deletecluster
            return
            ;;

        delete-context) _kubectl_config_deletecontext
            return
            ;;

        delete-user) _kubectl_config_deleteuser
            return
            ;;

        get-clusters) _kubectl_config_getclusters
            return
            ;;

        get-contexts) _kubectl_config_getcontexts
            return
            ;;

        get-users) _kubectl_config_getusers
            return
            ;;

        rename-context) _kubectl_config_renamecontext
            return
            ;;

        set) _kubectl_config_set
            return
            ;;

        set-cluster) _kubectl_config_setcluster
            return
            ;;

        set-context) _kubectl_config_setcontext
            return
            ;;

        set-credentials) _kubectl_config_setcredentials
            return
            ;;

        unset) _kubectl_config_unset
            return
            ;;

        use-context) _kubectl_config_usecontext
            return
            ;;

        view) _kubectl_config_view
            return
            ;;

    esac

    local word_list=" current-context delete-cluster delete-context delete-user get-clusters get-contexts get-users rename-context set set-cluster set-context set-credentials unset use-context view "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_currentcontext()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_deletecluster()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_deletecontext()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_deleteuser()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_getclusters()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_getcontexts()
{
    local word_list="  --no-headers -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_getusers()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_renamecontext()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_set()
{
    local word_list="  --set-raw-bytes"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_setcluster()
{
    local word_list="  --certificate-authority --embed-certs --insecure-skip-tls-verify --proxy-url --server --tls-server-name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_setcontext()
{
    local word_list="  --cluster --current --namespace --user"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_setcredentials()
{
    local word_list="  --client-certificate --client-key --token --username --password --auth-provider --auth-provider-arg --client-certificate --client-key --embed-certs --exec-api-version --exec-arg --exec-command --exec-env --password --token --username"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_unset()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_usecontext()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_config_view()
{
    local word_list="  --allow-missing-template-keys --flatten --merge --minify -o --output --raw --show-managed-fields --template"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_plugin()
{
    local cmd i subcommands
    local subcommands=" list"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _kubectl_plugin_list
            return
            ;;

    esac

    local word_list=" list "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_plugin_list()
{
    local word_list="  --name-only"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_kubectl_version()
{
    local word_list="  --client -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _kubectl kubectl
