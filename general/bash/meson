# Auto-generated with h2o

_meson()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          setup) _meson_setup
            return
            ;;

          configure) _meson_configure
            return
            ;;

          dist) _meson_dist
            return
            ;;

          install) _meson_install
            return
            ;;

          introspect) _meson_introspect
            return
            ;;

          init) _meson_init
            return
            ;;

          test) _meson_test
            return
            ;;

          wrap) _meson_wrap
            return
            ;;

          subprojects) _meson_subprojects
            return
            ;;

          rewrite) _meson_rewrite
            return
            ;;

          compile) _meson_compile
            return
            ;;

          devenv) _meson_devenv
            return
            ;;

          env2mfile) _meson_env2mfile
            return
            ;;

      *)
          word_list=" setup configure dist install introspect init test wrap subprojects rewrite compile devenv env2mfile -h --help"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_meson_setup ()
{
    local cur word_list
    word_list=" -h --help --prefix --bindir --datadir --includedir --infodir --libdir --libexecdir --localedir --localstatedir --mandir --sbindir --sharedstatedir --sysconfdir --auto-features --backend --buildtype --debug --default-library --errorlogs --install-umask --layout --optimization --stdsplit --strip --unity --unity-size --warnlevel --werror --wrap-mode --force-fallback-for --python.install-env --python.platlibdir --python.purelibdir --pkg-config-path --build.pkg-config-path --cmake-prefix-path --build.cmake-prefix-path -D --native-file --cross-file --vsenv -v --version --fatal-meson-warnings --reconfigure --wipe" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_configure ()
{
    local cur word_list
    word_list=" -h --help --prefix --bindir --datadir --includedir --infodir --libdir --libexecdir --localedir --localstatedir --mandir --sbindir --sharedstatedir --sysconfdir --auto-features --backend --buildtype --debug --default-library --errorlogs --install-umask --layout --optimization --stdsplit --strip --unity --unity-size --warnlevel --werror --wrap-mode --force-fallback-for --python.install-env --python.platlibdir --python.purelibdir --pkg-config-path --build.pkg-config-path --cmake-prefix-path --build.cmake-prefix-path -D --clearcache" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_dist ()
{
    local cur word_list
    word_list=" -h --help -C --allow-dirty --formats --include-subprojects --no-tests" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_install ()
{
    local cur word_list
    word_list=" -h --help -C --no-rebuild --only-changed --quiet --destdir --dry-run -n --skip-subprojects --tags --strip" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_introspect ()
{
    local cur word_list
    word_list=" -h --help --ast --benchmarks --buildoptions --buildsystem-files --dependencies --scan-dependencies --installed --install-plan --projectinfo --targets --tests --backend -a --all -i --indent -f --force-object-output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_init ()
{
    local cur word_list
    word_list=" -h --help -C -n --name -e --executable -d --deps -l --language -b --build --builddir -f --force --type --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_test ()
{
    local cur word_list
    word_list=" -h --help --repeat --no-rebuild --gdb --gdb-path --list --wrapper -C --suite --no-suite --no-stdsplit --print-errorlogs --benchmark --logbase --num-processes -v --verbose -q --quiet -t --timeout-multiplier --setup --test-args" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_wrap ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          wrap)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _meson_list
            return
            ;;

          search) _meson_search
            return
            ;;

          install) _meson_install
            return
            ;;

          update) _meson_update
            return
            ;;

          info) _meson_info
            return
            ;;

          status) _meson_status
            return
            ;;

          promote) _meson_promote
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list search install update info status promote -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_list ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_search ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_install ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_update ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_info ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_status ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_wrap_promote ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_subprojects ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          subprojects)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          update) _meson_update
            return
            ;;

          checkout) _meson_checkout
            return
            ;;

          download) _meson_download
            return
            ;;

          foreach) _meson_foreach
            return
            ;;

          purge) _meson_purge
            return
            ;;

          packagefiles) _meson_packagefiles
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" update checkout download foreach purge packagefiles -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_update ()
{
    local cur word_list
    word_list=" -h --help --rebase --reset --sourcedir --types --num-processes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_checkout ()
{
    local cur word_list
    word_list=" -h --help -b --sourcedir --types --num-processes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_download ()
{
    local cur word_list
    word_list=" -h --help --sourcedir --types --num-processes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_foreach ()
{
    local cur word_list
    word_list=" -h --help --sourcedir --types --num-processes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_purge ()
{
    local cur word_list
    word_list=" -h --help --sourcedir --types --num-processes --include-cache --confirm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_subprojects_packagefiles ()
{
    local cur word_list
    word_list=" -h --help --sourcedir --types --num-processes --apply --save" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_rewrite ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          rewrite)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          target) _meson_target
            return
            ;;

          kwargs) _meson_kwargs
            return
            ;;

          default-options) _meson_defaultoptions
            return
            ;;

          command) _meson_command
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" target kwargs default-options command -h --help -s --sourcedir -V --verbose -S --skip-errors" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rewrite_target ()
{
    local cur word_list
    word_list=" -h --help -s --subdir --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rewrite_kwargs ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rewrite_defaultoptions ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rewrite_command ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_compile ()
{
    local cur word_list
    word_list=" -h --help --clean -C -j --jobs -l --load-average -v --verbose --ninja-args --vs-args --xcode-args" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_devenv ()
{
    local cur word_list
    word_list=" -h --help -C --dump" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_meson_env2mfile ()
{
    local cur word_list
    word_list=" -h --help --debarch --gccsuffix -o --cross --native --system --cpu --cpu-family --endian" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _meson meson
