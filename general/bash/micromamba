# Auto-generated with h2o

_micromamba()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" shell create install update self-update repoquery remove list package clean config info constructor env activate run ps auth search"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        shell) _micromamba_shell
            return
            ;;

        create) _micromamba_create
            return
            ;;

        install) _micromamba_install
            return
            ;;

        update) _micromamba_update
            return
            ;;

        self-update) _micromamba_selfupdate
            return
            ;;

        repoquery) _micromamba_repoquery
            return
            ;;

        remove) _micromamba_remove
            return
            ;;

        list) _micromamba_list
            return
            ;;

        package) _micromamba_package
            return
            ;;

        clean) _micromamba_clean
            return
            ;;

        config) _micromamba_config
            return
            ;;

        info) _micromamba_info
            return
            ;;

        constructor) _micromamba_constructor
            return
            ;;

        env) _micromamba_env
            return
            ;;

        activate) _micromamba_activate
            return
            ;;

        run) _micromamba_run
            return
            ;;

        ps) _micromamba_ps
            return
            ;;

        auth) _micromamba_auth
            return
            ;;

        search) _micromamba_search
            return
            ;;

    esac

    local word_list=" shell create install update self-update repoquery remove list package clean config info constructor env activate run ps auth search -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell()
{
    local cmd i subcommands
    local subcommands=" init deinit reinit hook activate reactivate deactivate enable_long_path_support"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        init) _micromamba_shell_init
            return
            ;;

        deinit) _micromamba_shell_deinit
            return
            ;;

        reinit) _micromamba_shell_reinit
            return
            ;;

        hook) _micromamba_shell_hook
            return
            ;;

        activate) _micromamba_shell_activate
            return
            ;;

        reactivate) _micromamba_shell_reactivate
            return
            ;;

        deactivate) _micromamba_shell_deactivate
            return
            ;;

        enable_long_path_support) _micromamba_shell_enablelongpathsupport
            return
            ;;

    esac

    local word_list=" init deinit reinit hook activate reactivate deactivate enable_long_path_support -h --help -p --prefix -n --name --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_init()
{
    local word_list="  -h --help -s --shell -r -p -n --root-prefix --prefix --name --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_deinit()
{
    local word_list="  -h --help -s --shell -r -p -n --root-prefix --prefix --name --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_reinit()
{
    local word_list="  -h --help -s --shell --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_hook()
{
    local word_list="  -h --help -s --shell -r -p -n --root-prefix --prefix --name --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_activate()
{
    local word_list="  -h --help -s --shell -p --prefix -n --name --stack --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_reactivate()
{
    local word_list="  -h --help -s --shell --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_deactivate()
{
    local word_list="  -h --help -s --shell --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_shell_enablelongpathsupport()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_create()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -f --file --no-pin --pin --no-py-pin --py-pin --pyc --no-pyc --allow-uninstall --no-allow-uninstall --allow-downgrade --no-allow-downgrade --allow-softlinks --no-allow-softlinks --always-softlink --no-always-softlink --always-copy --no-always-copy --extra-safety-checks --no-extra-safety-checks --lock-timeout --shortcuts --no-shortcuts --safety-checks --verify-artifacts --platform --no-deps --only-deps --category --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_install()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -f --file --no-pin --pin --no-py-pin --py-pin --pyc --no-pyc --allow-uninstall --no-allow-uninstall --allow-downgrade --no-allow-downgrade --allow-softlinks --no-allow-softlinks --always-softlink --no-always-softlink --always-copy --no-always-copy --extra-safety-checks --no-extra-safety-checks --lock-timeout --shortcuts --no-shortcuts --safety-checks --verify-artifacts --platform --no-deps --only-deps --category --freeze-installed --force-reinstall --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_update()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -f --file --no-pin --pin --no-py-pin --py-pin --pyc --no-pyc --allow-uninstall --no-allow-uninstall --allow-downgrade --no-allow-downgrade --allow-softlinks --no-allow-softlinks --always-softlink --no-always-softlink --always-copy --no-always-copy --extra-safety-checks --no-extra-safety-checks --lock-timeout --shortcuts --no-shortcuts --safety-checks --verify-artifacts --platform --no-deps --only-deps --category --prune --no-prune -a --all --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_selfupdate()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -f --file --no-pin --pin --no-py-pin --py-pin --pyc --no-pyc --allow-uninstall --no-allow-uninstall --allow-downgrade --no-allow-downgrade --allow-softlinks --no-allow-softlinks --always-softlink --no-always-softlink --always-copy --no-always-copy --extra-safety-checks --no-extra-safety-checks --lock-timeout --shortcuts --no-shortcuts --safety-checks --verify-artifacts --platform --no-deps --only-deps --category --version --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_repoquery()
{
    local cmd i subcommands
    local subcommands=" query_type"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        query_type) _micromamba_repoquery_querytype
            return
            ;;

    esac

    local word_list=" query_type -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -t --tree --recursive --pretty --use-local --platform --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_repoquery_querytype()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_remove()
{
    local word_list="  -h --help -a --all -f --force --prune --no-prune --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_list()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_package()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_clean()
{
    local word_list="  -h --help -a --all -i --index-cache -p --packages -t --tarballs -l --locks --trash -f --force-pkgs-dirs --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config()
{
    local cmd i subcommands
    local subcommands=" list sources describe prepend append remove-key remove set get"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _micromamba_config_list
            return
            ;;

        sources) _micromamba_config_sources
            return
            ;;

        describe) _micromamba_config_describe
            return
            ;;

        prepend) _micromamba_config_prepend
            return
            ;;

        append) _micromamba_config_append
            return
            ;;

        remove-key) _micromamba_config_removekey
            return
            ;;

        remove) _micromamba_config_remove
            return
            ;;

        set) _micromamba_config_set
            return
            ;;

        get) _micromamba_config_get
            return
            ;;

    esac

    local word_list=" list sources describe prepend append remove-key remove set get -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_list()
{
    local word_list="  -h --help -l --long-descriptions -g --groups -s --sources -a --all -d --descriptions --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_sources()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_describe()
{
    local word_list="  -h --help -l --long-descriptions -g --groups"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_prepend()
{
    local cmd i subcommands
    local subcommands=" specs"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        specs) _micromamba_config_prepend_specs
            return
            ;;

    esac

    local word_list=" specs -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_prepend_specs()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_append()
{
    local cmd i subcommands
    local subcommands=" specs"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        specs) _micromamba_config_append_specs
            return
            ;;

    esac

    local word_list=" specs -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_append_specs()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_removekey()
{
    local word_list="  -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_remove()
{
    local word_list="  -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_set()
{
    local word_list="  -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_config_get()
{
    local word_list="  -h --help --system --env --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_info()
{
    local word_list="  -h --help --licenses --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_constructor()
{
    local word_list="  -h --help -p --prefix --extract-conda-pkgs --extract-tarball"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_env()
{
    local cmd i subcommands
    local subcommands=" list create export remove"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _micromamba_env_list
            return
            ;;

        create) _micromamba_env_create
            return
            ;;

        export) _micromamba_env_export
            return
            ;;

        remove) _micromamba_env_remove
            return
            ;;

    esac

    local word_list=" list create export remove -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_env_list()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_env_create()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -f --file --no-pin --pin --no-py-pin --py-pin --pyc --no-pyc --allow-uninstall --no-allow-uninstall --allow-downgrade --no-allow-downgrade --allow-softlinks --no-allow-softlinks --always-softlink --no-always-softlink --always-copy --no-always-copy --extra-safety-checks --no-extra-safety-checks --lock-timeout --shortcuts --no-shortcuts --safety-checks --verify-artifacts --platform --no-deps --only-deps --category --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_env_export()
{
    local word_list="  -h --help -e --explicit --no-md5 --md5 --no-build --build --from-history --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_env_remove()
{
    local word_list="  -h --help --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_activate()
{
    local word_list="  -h --help --stack"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_run()
{
    local word_list="  -h --help -a --attach --cwd -d --detach --clean-env -e --env --label -r --root-prefix -p --prefix --relocate-prefix -n --name"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_ps()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_auth()
{
    local cmd i subcommands
    local subcommands=" login logout"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        login) _micromamba_auth_login
            return
            ;;

        logout) _micromamba_auth_logout
            return
            ;;

    esac

    local word_list=" login logout -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_auth_login()
{
    local word_list="  -h --help -p --password -u --username -t --token -b --bearer --password-stdin --token-stdin --bearer-stdin"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_auth_logout()
{
    local word_list="  -h --help --all"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_micromamba_search()
{
    local word_list="  -h --help -c --channel --override-channels --channel-priority --channel-alias --strict-channel-priority --no-channel-priority -t --tree --recursive --pretty --use-local --platform --rc-file --no-rc --no-env -v --verbose --log-level -q --quiet -y --yes --json --offline --dry-run --download-only --experimental -r --root-prefix -p --prefix --relocate-prefix -n --name --ssl-verify --ssl-no-revoke --cacert-path --repodata-ttl --retry-clean-cache"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _micromamba micromamba
