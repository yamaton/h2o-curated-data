# Auto-generated with h2o

_minikube()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" start status stop delete dashboard pause unpause docker-env podman-env cache image addons config profile update-context service tunnel mount ssh kubectl node cp ssh-key ssh-host ip logs update-check version options completion license"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        start) _minikube_start
            return
            ;;

        status) _minikube_status
            return
            ;;

        stop) _minikube_stop
            return
            ;;

        delete) _minikube_delete
            return
            ;;

        dashboard) _minikube_dashboard
            return
            ;;

        pause) _minikube_pause
            return
            ;;

        unpause) _minikube_unpause
            return
            ;;

        docker-env) _minikube_dockerenv
            return
            ;;

        podman-env) _minikube_podmanenv
            return
            ;;

        cache) _minikube_cache
            return
            ;;

        image) _minikube_image
            return
            ;;

        addons) _minikube_addons
            return
            ;;

        config) _minikube_config
            return
            ;;

        profile) _minikube_profile
            return
            ;;

        update-context) _minikube_updatecontext
            return
            ;;

        service) _minikube_service
            return
            ;;

        tunnel) _minikube_tunnel
            return
            ;;

        mount) _minikube_mount
            return
            ;;

        ssh) _minikube_ssh
            return
            ;;

        kubectl) _minikube_kubectl
            return
            ;;

        node) _minikube_node
            return
            ;;

        cp) _minikube_cp
            return
            ;;

        ssh-key) _minikube_sshkey
            return
            ;;

        ssh-host) _minikube_sshhost
            return
            ;;

        ip) _minikube_ip
            return
            ;;

        logs) _minikube_logs
            return
            ;;

        update-check) _minikube_updatecheck
            return
            ;;

        version) _minikube_version
            return
            ;;

        options) _minikube_options
            return
            ;;

        completion) _minikube_completion
            return
            ;;

        license) _minikube_license
            return
            ;;

    esac

    local word_list=" start status stop delete dashboard pause unpause docker-env podman-env cache image addons config profile update-context service tunnel mount ssh kubectl node cp ssh-key ssh-host ip logs update-check version options completion license "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_start()
{
    local word_list="  --addons --apiserver-ips --apiserver-name --apiserver-names --apiserver-port --auto-update-drivers --base-image --binary-mirror --cache-images --cert-expiration --cni --container-runtime --cpus --cri-socket --delete-on-failure --disable-driver-mounts --disable-metrics --disable-optimizations --disk-size --dns-domain --dns-proxy --docker-env --docker-opt --download-only --driver --dry-run --embed-certs --enable-default-cni --extra-config --extra-disks --feature-gates --force --force-systemd --host-dns-resolver --host-only-cidr --host-only-nic-type --hyperkit-vpnkit-sock --hyperkit-vsock-ports --hyperv-external-adapter --hyperv-use-external-switch --hyperv-virtual-switch --image-mirror-country --image-repository --insecure-registry --install-addons --interactive --iso-url --keep-context --kubernetes-version --kvm-gpu --kvm-hidden --kvm-network --kvm-numa-count --kvm-qemu-uri --listen-address --memory --mount --mount-9p-version --mount-gid --mount-ip --mount-msize --mount-options --mount-port --mount-string --mount-type --mount-uid --namespace --nat-nic-type --native-ssh --network --network-plugin --nfs-share --nfs-shares-root --no-kubernetes --no-vtx-check -n --nodes -o --output --ports --preload --qemu-firmware-path --registry-mirror --service-cluster-ip-range --socket-vmnet-client-path --socket-vmnet-path --ssh-ip-address --ssh-key --ssh-port --ssh-user --static-ip --subnet --trace --uuid --vm --vm-driver --wait --wait-timeout"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_status()
{
    local word_list="  -f --format -l --layout -n --node -o --output -w --watch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_stop()
{
    local word_list="  --all --cancel-scheduled --keep-context-active -o --output --schedule"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_delete()
{
    local word_list="  --all -o --output --purge"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_dashboard()
{
    local word_list="  --port --url"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_pause()
{
    local word_list="  -A --all-namespaces -n --namespaces -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_unpause()
{
    local word_list="  -A --all-namespaces -n --namespaces -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_dockerenv()
{
    local word_list="  --no-proxy -o --output --shell --ssh-add --ssh-host -u --unset"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_podmanenv()
{
    local word_list="  --shell -u --unset"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cache()
{
    local cmd i subcommands
    local subcommands=" add delete list reload"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        add) _minikube_cache_add
            return
            ;;

        delete) _minikube_cache_delete
            return
            ;;

        list) _minikube_cache_list
            return
            ;;

        reload) _minikube_cache_reload
            return
            ;;

    esac

    local word_list=" add delete list reload "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cache_add()
{
    local word_list="  --all"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cache_delete()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cache_list()
{
    local word_list="  --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cache_reload()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image()
{
    local cmd i subcommands
    local subcommands=" build load ls pull push rm save tag"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        build) _minikube_image_build
            return
            ;;

        load) _minikube_image_load
            return
            ;;

        ls) _minikube_image_ls
            return
            ;;

        pull) _minikube_image_pull
            return
            ;;

        push) _minikube_image_push
            return
            ;;

        rm) _minikube_image_rm
            return
            ;;

        save) _minikube_image_save
            return
            ;;

        tag) _minikube_image_tag
            return
            ;;

    esac

    local word_list=" build load ls pull push rm save tag "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_build()
{
    local word_list="  --all --build-env --build-opt -f --file -n --node --push -t --tag"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_load()
{
    local word_list="  --daemon --overwrite --pull --remote"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_ls()
{
    local word_list="  --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_pull()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_push()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_rm()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_save()
{
    local word_list="  --daemon --remote"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_image_tag()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons()
{
    local cmd i subcommands
    local subcommands=" configure disable enable images list open"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        configure) _minikube_addons_configure
            return
            ;;

        disable) _minikube_addons_disable
            return
            ;;

        enable) _minikube_addons_enable
            return
            ;;

        images) _minikube_addons_images
            return
            ;;

        list) _minikube_addons_list
            return
            ;;

        open) _minikube_addons_open
            return
            ;;

    esac

    local word_list=" configure disable enable images list open "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_configure()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_disable()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_enable()
{
    local word_list="  --force --images --refresh --registries"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_images()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_list()
{
    local word_list="  -d --docs -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_addons_open()
{
    local word_list="  --https --interval --url --wait"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config()
{
    local cmd i subcommands
    local subcommands=" defaults get set unset view"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        defaults) _minikube_config_defaults
            return
            ;;

        get) _minikube_config_get
            return
            ;;

        set) _minikube_config_set
            return
            ;;

        unset) _minikube_config_unset
            return
            ;;

        view) _minikube_config_view
            return
            ;;

    esac

    local word_list=" defaults get set unset view "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config_defaults()
{
    local word_list="  -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config_get()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config_set()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config_unset()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_config_view()
{
    local word_list="  --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_profile()
{
    local cmd i subcommands
    local subcommands=" list"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _minikube_profile_list
            return
            ;;

    esac

    local word_list=" list "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_profile_list()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_updatecontext()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_service()
{
    local cmd i subcommands
    local subcommands=" list"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _minikube_service_list
            return
            ;;

    esac

    local word_list=" list --all --https --interval -n --namespace --url --wait"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_service_list()
{
    local word_list="  -n --namespace -o --output"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_tunnel()
{
    local word_list="  --bind-address -c --cleanup"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_mount()
{
    local word_list="  --9p-version --gid --ip --kill --msize --options --port --type --uid"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_ssh()
{
    local word_list="  --native-ssh -n --node"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_kubectl()
{
    local word_list="  --ssh"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node()
{
    local cmd i subcommands
    local subcommands=" add delete list start stop"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        add) _minikube_node_add
            return
            ;;

        delete) _minikube_node_delete
            return
            ;;

        list) _minikube_node_list
            return
            ;;

        start) _minikube_node_start
            return
            ;;

        stop) _minikube_node_stop
            return
            ;;

    esac

    local word_list=" add delete list start stop "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node_add()
{
    local word_list="  --control-plane --delete-on-failure --worker"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node_delete()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node_list()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node_start()
{
    local word_list="  --delete-on-failure"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_node_stop()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_cp()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_sshkey()
{
    local word_list="  -n --node"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_sshhost()
{
    local word_list="  --append-known -n --node"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_ip()
{
    local word_list="  -n --node"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_logs()
{
    local word_list="  --audit --file -f --follow --last-start-only -n --length --node --problems"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_updatecheck()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_version()
{
    local word_list="  --components -o --output --short"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_options()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_completion()
{
    local cmd i subcommands
    local subcommands=" bash fish powershell zsh"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        bash) _minikube_completion_bash
            return
            ;;

        fish) _minikube_completion_fish
            return
            ;;

        powershell) _minikube_completion_powershell
            return
            ;;

        zsh) _minikube_completion_zsh
            return
            ;;

    esac

    local word_list=" bash fish powershell zsh "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_completion_bash()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_completion_fish()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_completion_powershell()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_completion_zsh()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_minikube_license()
{
    local word_list="  -d --dir"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _minikube minikube
