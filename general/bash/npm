# Auto-generated with h2o

_npm()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          access) _npm_access
            return
            ;;

          adduser) _npm_adduser
            return
            ;;

          audit) _npm_audit
            return
            ;;

          bin) _npm_bin
            return
            ;;

          bugs) _npm_bugs
            return
            ;;

          cache) _npm_cache
            return
            ;;

          ci) _npm_ci
            return
            ;;

          completion) _npm_completion
            return
            ;;

          config) _npm_config
            return
            ;;

          dedupe) _npm_dedupe
            return
            ;;

          deprecate) _npm_deprecate
            return
            ;;

          diff) _npm_diff
            return
            ;;

          dist-tag) _npm_disttag
            return
            ;;

          docs) _npm_docs
            return
            ;;

          doctor) _npm_doctor
            return
            ;;

          edit) _npm_edit
            return
            ;;

          exec) _npm_exec
            return
            ;;

          explain) _npm_explain
            return
            ;;

          explore) _npm_explore
            return
            ;;

          find-dupes) _npm_finddupes
            return
            ;;

          fund) _npm_fund
            return
            ;;

          get) _npm_get
            return
            ;;

          help) _npm_help
            return
            ;;

          hook) _npm_hook
            return
            ;;

          init) _npm_init
            return
            ;;

          install) _npm_install
            return
            ;;

          install-ci-test) _npm_installcitest
            return
            ;;

          install-test) _npm_installtest
            return
            ;;

          link) _npm_link
            return
            ;;

          ll) _npm_ll
            return
            ;;

          logout) _npm_logout
            return
            ;;

          ls) _npm_ls
            return
            ;;

          org) _npm_org
            return
            ;;

          outdated) _npm_outdated
            return
            ;;

          owner) _npm_owner
            return
            ;;

          pack) _npm_pack
            return
            ;;

          ping) _npm_ping
            return
            ;;

          pkg) _npm_pkg
            return
            ;;

          prefix) _npm_prefix
            return
            ;;

          profile) _npm_profile
            return
            ;;

          prune) _npm_prune
            return
            ;;

          publish) _npm_publish
            return
            ;;

          rebuild) _npm_rebuild
            return
            ;;

          repo) _npm_repo
            return
            ;;

          restart) _npm_restart
            return
            ;;

          root) _npm_root
            return
            ;;

          run-script) _npm_runscript
            return
            ;;

          search) _npm_search
            return
            ;;

          set) _npm_set
            return
            ;;

          set-script) _npm_setscript
            return
            ;;

          shrinkwrap) _npm_shrinkwrap
            return
            ;;

          star) _npm_star
            return
            ;;

          stars) _npm_stars
            return
            ;;

          start) _npm_start
            return
            ;;

          stop) _npm_stop
            return
            ;;

          team) _npm_team
            return
            ;;

          test) _npm_test
            return
            ;;

          token) _npm_token
            return
            ;;

          uninstall) _npm_uninstall
            return
            ;;

          unpublish) _npm_unpublish
            return
            ;;

          unstar) _npm_unstar
            return
            ;;

          update) _npm_update
            return
            ;;

          version) _npm_version
            return
            ;;

          view) _npm_view
            return
            ;;

          whoami) _npm_whoami
            return
            ;;

      *)
          word_list=" access adduser audit bin bugs cache ci completion config dedupe deprecate diff dist-tag docs doctor edit exec explain explore find-dupes fund get help hook init install install-ci-test install-test link ll logout ls org outdated owner pack ping pkg prefix profile prune publish rebuild repo restart root run-script search set set-script shrinkwrap star stars start stop team test token uninstall unpublish unstar update version view whoami "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_npm_access ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          access)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          public) _npm_public
            return
            ;;

          restricted) _npm_restricted
            return
            ;;

          grant) _npm_grant
            return
            ;;

          revoke) _npm_revoke
            return
            ;;

          2fa-required) _npm_2farequired
            return
            ;;

          2fa-not-required) _npm_2fanotrequired
            return
            ;;

          ls-packages) _npm_lspackages
            return
            ;;

          ls-collaborators) _npm_lscollaborators
            return
            ;;

          edit) _npm_edit
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" public restricted grant revoke 2fa-required 2fa-not-required ls-packages ls-collaborators edit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_adduser ()
{
    local cur word_list
    word_list=" --registry --scope" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_audit ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          audit)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          fix) _npm_fix
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" fix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_bin ()
{
    local cur word_list
    word_list=" --global" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_cache ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          cache)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _npm_add
            return
            ;;

          clean) _npm_clean
            return
            ;;

          ls) _npm_ls
            return
            ;;

          verify) _npm_verify
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add clean ls verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_ci ()
{
    local cur word_list
    word_list=" --audit --foreground-scripts --ignore-scripts --script-shell" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          set) _npm_set
            return
            ;;

          get) _npm_get
            return
            ;;

          list) _npm_list
            return
            ;;

          delete) _npm_delete
            return
            ;;

          edit) _npm_edit
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" set get list delete edit" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_dedupe ()
{
    local cur word_list
    word_list=" --global-style --legacy-bundling --strict-peer-deps --package-lock --save --omit --ignore-scripts --audit --bin-links --fund --dry-run --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_deprecate ()
{
    local cur word_list
    word_list=" --registry --otp" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_diff ()
{
    local cur word_list
    word_list=" --diff --diff-name-only --diff-unified --diff-ignore-all-space --diff-no-prefix --diff-src-prefix --diff-dst-prefix --diff-text --global --tag --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_disttag ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          dist-tag)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _npm_add
            return
            ;;

          rm) _npm_rm
            return
            ;;

          ls) _npm_ls
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add rm ls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_docs ()
{
    local cur word_list
    word_list=" --browser --registry --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_doctor ()
{
    local cur word_list
    word_list=" --registry" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_edit ()
{
    local cur word_list
    word_list=" --editor" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_explain ()
{
    local cur word_list
    word_list=" --json --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_hook ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          hook)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _npm_add
            return
            ;;

          ls) _npm_ls
            return
            ;;

          rm) _npm_rm
            return
            ;;

          update) _npm_update
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add ls rm update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_init ()
{
    local cur word_list
    word_list=" --yes --force --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_install ()
{
    local cur word_list
    word_list=" --save --save-exact --global --global-style --legacy-bundling --omit --strict-peer-deps --package-lock --foreground-scripts --ignore-scripts --audit --bin-links --fund --dry-run --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_installtest ()
{
    local cur word_list
    word_list=" --save --save-exact --global --global-style --legacy-bundling --omit --strict-peer-deps --package-lock --foreground-scripts --ignore-scripts --audit --bin-links --fund --dry-run --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_link ()
{
    local cur word_list
    word_list=" --save --save-exact --global --global-style --legacy-bundling --omit --ignore-scripts --audit --bin-links --fund --dry-run --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_logout ()
{
    local cur word_list
    word_list=" --registry --scope" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_ls ()
{
    local cur word_list
    word_list=" --all --json --long --parseable --global --depth --omit --link --package-lock-only --unicode --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_runscript ()
{
    local cur word_list
    word_list=" --workspace --workspaces --include-workspace-root --if-present --ignore-scripts --script-shell" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_search ()
{
    local cur word_list
    word_list=" --long --json --color --parseable --searchopts --searchexclude --registry --prefer-online --prefer-offline --offline" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_start ()
{
    local cur word_list
    word_list=" --ignore-scripts --script-shell" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_stop ()
{
    local cur word_list
    word_list=" --ignore-scripts --script-shell" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_team ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          team)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _npm_create
            return
            ;;

          destroy) _npm_destroy
            return
            ;;

          add) _npm_add
            return
            ;;

          rm) _npm_rm
            return
            ;;

          ls) _npm_ls
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create destroy add rm ls" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_test ()
{
    local cur word_list
    word_list=" --ignore-scripts --script-shell" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_version ()
{
    local cur word_list
    word_list=" --allow-same-version --commit-hooks --git-tag-version --json --preid --sign-git-tag --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_view ()
{
    local cur word_list
    word_list=" --json --workspace --workspaces --include-workspace-root" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_npm_whoami ()
{
    local cur word_list
    word_list=" --registry" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _npm npm
