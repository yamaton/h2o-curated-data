# Auto-generated with h2o

_oc()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          types) _oc_types
            return
            ;;

          login) _oc_login
            return
            ;;

          new-project) _oc_new-project
            return
            ;;

          new-app) _oc_new-app
            return
            ;;

          status) _oc_status
            return
            ;;

          project) _oc_project
            return
            ;;

          explain) _oc_explain
            return
            ;;

          cluster) _oc_cluster
            return
            ;;

          rollout) _oc_rollout
            return
            ;;

          rollback) _oc_rollback
            return
            ;;

          new-build) _oc_new-build
            return
            ;;

          start-build) _oc_start-build
            return
            ;;

          cancel-build) _oc_cancel-build
            return
            ;;

          import-image) _oc_import-image
            return
            ;;

          tag) _oc_tag
            return
            ;;

          get) _oc_get
            return
            ;;

          describe) _oc_describe
            return
            ;;

          edit) _oc_edit
            return
            ;;

          set) _oc_set
            return
            ;;

          label) _oc_label
            return
            ;;

          annotate) _oc_annotate
            return
            ;;

          expose) _oc_expose
            return
            ;;

          delete) _oc_delete
            return
            ;;

          scale) _oc_scale
            return
            ;;

          autoscale) _oc_autoscale
            return
            ;;

          logs) _oc_logs
            return
            ;;

          rsh) _oc_rsh
            return
            ;;

          rsync) _oc_rsync
            return
            ;;

          port-forward) _oc_port-forward
            return
            ;;

          debug) _oc_debug
            return
            ;;

          exec) _oc_exec
            return
            ;;

          proxy) _oc_proxy
            return
            ;;

          attach) _oc_attach
            return
            ;;

          run) _oc_run
            return
            ;;

          cp) _oc_cp
            return
            ;;

          wait) _oc_wait
            return
            ;;

          adm) _oc_adm
            return
            ;;

          create) _oc_create
            return
            ;;

          replace) _oc_replace
            return
            ;;

          apply) _oc_apply
            return
            ;;

          patch) _oc_patch
            return
            ;;

          process) _oc_process
            return
            ;;

          export) _oc_export
            return
            ;;

          extract) _oc_extract
            return
            ;;

          idle) _oc_idle
            return
            ;;

          observe) _oc_observe
            return
            ;;

          policy) _oc_policy
            return
            ;;

          convert) _oc_convert
            return
            ;;

          api-resources) _oc_api-resources
            return
            ;;

          config) _oc_config
            return
            ;;

          whoami) _oc_whoami
            return
            ;;

          completion) _oc_completion
            return
            ;;

          ex) _oc_ex
            return
            ;;

      *)
          word_list=" types login new-project new-app status project explain cluster rollout rollback new-build start-build cancel-build import-image tag get describe edit set label annotate expose delete scale autoscale logs rsh rsync port-forward debug exec proxy attach run cp wait adm create replace apply patch process export extract idle observe policy convert api-resources config whoami completion ex " 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_oc_login ()
{
    local cur word_list
    word_list=" -p --password -u --username --insecure-skip-tls-verify --token" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_new-project ()
{
    local cur word_list
    word_list=" --description --display-name --skip-config-write" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_new-app ()
{
    local cur word_list
    word_list=" --allow-missing-images --allow-missing-imagestream-tags --allow-missing-template-keys --as-test --context-dir --dry-run --grant-install-rights --ignore-unknown-parameters --insecure-registry -l --labels -L --list --name --no-install -o --output --output-version -S --search -a --show-all --show-labels --sort-by --source-secret --strategy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_status ()
{
    local cur word_list
    word_list=" --all-namespaces -o --output --suggest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_project ()
{
    local cur word_list
    word_list=" -q --short" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_explain ()
{
    local cur word_list
    word_list=" --api-version --recursive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rollback ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --change-scaling-settings --change-strategy --change-triggers -d --dry-run -o --output --template --to-version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_new-build ()
{
    local cur word_list
    word_list=" --allow-missing-images --allow-missing-imagestream-tags --allow-missing-template-keys --binary --context-dir -D --dockerfile --dry-run -l --labels --name --no-output -o --output --output-version --push-secret -a --show-all --show-labels --sort-by --source-image --source-image-path --source-secret --strategy --template --to --to-docker" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_start-build ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --build-loglevel --commit -F --follow --from-archive --from-build --from-dir --from-file --from-repo --from-webhook --git-post-receive --git-repository --incremental --list-webhooks --no-cache -o --output --template -w --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_cancel-build ()
{
    local cur word_list
    word_list=" --dump-logs --restart --state --state" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_import-image ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --confirm --dry-run --from --insecure -o --output --reference-policy --scheduled --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_tag ()
{
    local cur word_list
    word_list=" --alias -d --delete --insecure --reference --reference-policy --scheduled --source" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_get ()
{
    local cur word_list
    word_list=" --all-namespaces --allow-missing-template-keys --chunk-size --export --field-selector --ignore-not-found --include-uninitialized --no-headers -o --output --raw -R --recursive -l --selector --server-print --show-kind --show-labels --sort-by --template --use-openapi-print-columns -w --watch --watch-only" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_describe ()
{
    local cur word_list
    word_list=" --all-namespaces --include-uninitialized -R --recursive -l --selector --show-events" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_edit ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --include-uninitialized -o --output --output-patch --record -R --recursive --save-config --template --validate --windows-line-endings" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_label ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-selector --include-uninitialized --list --local -o --output --overwrite --record -R --recursive --resource-version -l --selector --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_annotate ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-selector --include-uninitialized --local -o --output --overwrite --record -R --recursive --resource-version -l --selector --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_expose ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cluster-ip --dry-run --external-ip --generator --hostname -l --labels --load-balancer-ip --name -o --output --overrides --path --port --protocol --record -R --recursive --save-config --selector --session-affinity --target-port --template --type --wildcard-policy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_delete ()
{
    local cur word_list
    word_list=" --all --cascade --field-selector --force --grace-period --ignore-not-found --include-uninitialized --now -o --output -R --recursive -l --selector --timeout --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_scale ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --current-replicas -o --output --record -R --recursive --replicas --resource-version -l --selector --template --timeout" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_autoscale ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cpu-percent --dry-run --generator --max --min --name -o --output --record -R --recursive --save-config --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_logs ()
{
    local cur word_list
    word_list=" --all-containers -c --container -f --follow --limit-bytes --pod-running-timeout -p --previous -l --selector --since --since-time --tail --timestamps --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rsh ()
{
    local cur word_list
    word_list=" -c --container -T --no-tty --shell --timeout -t --tty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rsync ()
{
    local cur word_list
    word_list=" --compress -c --container --delete --no-perms --progress -q --quiet --strategy -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_port-forward ()
{
    local cur word_list
    word_list=" --pod-running-timeout" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_debug ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --as-root --as-user -c --container --dry-run --keep-annotations --keep-init-containers --keep-liveness --keep-readiness -I --no-stdin -T --no-tty --node-name --one-container -o --output -R --recursive --show-labels --template -t --tty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_exec ()
{
    local cur word_list
    word_list=" -c --container -p --pod -i --stdin -t --tty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_proxy ()
{
    local cur word_list
    word_list=" --accept-hosts --accept-hosts --accept-paths --address --api-prefix --disable-filter -p --port --reject-methods --reject-paths -u --unix-socket -w --www -P --www-prefix" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_attach ()
{
    local cur word_list
    word_list=" -c --container --pod-running-timeout -i --stdin -t --tty" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_run ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --attach --cascade --command --dry-run --expose --force --generator --grace-period --hostport --image --image-pull-policy -l --labels --leave-stdin-open --limits -o --output --overrides --pod-running-timeout --port --quiet --record -R --recursive -r --replicas --requests --restart --rm --save-config --schedule --service-generator --service-overrides --serviceaccount -i --stdin --template --timeout -t --tty --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_cp ()
{
    local cur word_list
    word_list=" -c --container" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_wait ()
{
    local cur word_list
    word_list=" --all-namespaces --allow-missing-template-keys --for -o --output -R --recursive -l --selector --template --timeout" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_create ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --edit -o --output --raw --record -R --recursive --save-config -l --selector --template --validate --windows-line-endings" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_replace ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cascade --force --grace-period -o --output -R --recursive --save-config --template --timeout --validate --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_apply ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --cascade --dry-run --force --grace-period --include-uninitialized --openapi-patch -o --output --overwrite --prune --record -R --recursive -l --selector --template --timeout --validate --wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_patch ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --local -o --output -p --patch --record -R --recursive --template --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_process ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -f --filename --ignore-unknown-parameters -l --labels --local -o --output --parameters --raw -t --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_export ()
{
    local cur word_list
    word_list=" --all-namespaces --allow-missing-template-keys --as-template --exact -o --output --raw -R --recursive -l --selector --template" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_extract ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --confirm --no-headers -o --output --show-labels --sort-by --template --to" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_idle ()
{
    local cur word_list
    word_list=" --all --all-namespaces --dry-run --resource-names-file -l --selector" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_observe ()
{
    local cur word_list
    word_list=" --all-namespaces -a --argument -d --delete --exit-after --listen-addr --maximum-errors --names --no-headers --object-env-var --once --output --print-metrics-on-exit --resync-period --retry-count --retry-on-exit-code --strict-templates --type-env-var" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_convert ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --local -o --output --output-version -R --recursive --template --validate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_api-resources ()
{
    local cur word_list
    word_list=" --api-group --cached --namespaced --no-headers -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_whoami ()
{
    local cur word_list
    word_list=" -c --show-context --show-server -t --show-token" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _oc oc
