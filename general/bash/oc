# Auto-generated with h2o

_oc()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          login) _oc_login
            return
            ;;

          new-project) _oc_newproject
            return
            ;;

          new-app) _oc_newapp
            return
            ;;

          status) _oc_status
            return
            ;;

          project) _oc_project
            return
            ;;

          projects) _oc_projects
            return
            ;;

          explain) _oc_explain
            return
            ;;

          rollout) _oc_rollout
            return
            ;;

          rollback) _oc_rollback
            return
            ;;

          new-build) _oc_newbuild
            return
            ;;

          start-build) _oc_startbuild
            return
            ;;

          cancel-build) _oc_cancelbuild
            return
            ;;

          import-image) _oc_importimage
            return
            ;;

          tag) _oc_tag
            return
            ;;

          create) _oc_create
            return
            ;;

          apply) _oc_apply
            return
            ;;

          get) _oc_get
            return
            ;;

          describe) _oc_describe
            return
            ;;

          edit) _oc_edit
            return
            ;;

          set) _oc_set
            return
            ;;

          label) _oc_label
            return
            ;;

          annotate) _oc_annotate
            return
            ;;

          expose) _oc_expose
            return
            ;;

          delete) _oc_delete
            return
            ;;

          scale) _oc_scale
            return
            ;;

          autoscale) _oc_autoscale
            return
            ;;

          logs) _oc_logs
            return
            ;;

          rsh) _oc_rsh
            return
            ;;

          rsync) _oc_rsync
            return
            ;;

          port-forward) _oc_portforward
            return
            ;;

          debug) _oc_debug
            return
            ;;

          exec) _oc_exec
            return
            ;;

          proxy) _oc_proxy
            return
            ;;

          attach) _oc_attach
            return
            ;;

          run) _oc_run
            return
            ;;

          cp) _oc_cp
            return
            ;;

          wait) _oc_wait
            return
            ;;

          adm) _oc_adm
            return
            ;;

          replace) _oc_replace
            return
            ;;

          patch) _oc_patch
            return
            ;;

          process) _oc_process
            return
            ;;

          extract) _oc_extract
            return
            ;;

          observe) _oc_observe
            return
            ;;

          policy) _oc_policy
            return
            ;;

          image) _oc_image
            return
            ;;

          idle) _oc_idle
            return
            ;;

          api-resources) _oc_apiresources
            return
            ;;

          diff) _oc_diff
            return
            ;;

          kustomize) _oc_kustomize
            return
            ;;

          logout) _oc_logout
            return
            ;;

          config) _oc_config
            return
            ;;

          whoami) _oc_whoami
            return
            ;;

          completion) _oc_completion
            return
            ;;

          version) _oc_version
            return
            ;;

      *)
          word_list=" login new-project new-app status project projects explain rollout rollback new-build start-build cancel-build import-image tag create apply get describe edit set label annotate expose delete scale autoscale logs rsh rsync port-forward debug exec proxy attach run cp wait adm replace patch process extract observe policy image idle api-resources diff kustomize logout config whoami completion version "
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_oc_login ()
{
    local cur word_list
    word_list=" -p --password -u --username --certificate-authority --insecure-skip-tls-verify --token --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_newproject ()
{
    local cur word_list
    word_list=" --description --display-name --skip-config-write --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_newapp ()
{
    local cur word_list
    word_list=" --allow-missing-images --allow-missing-imagestream-tags --allow-missing-template-keys --as-deployment-config --as-test --binary --context-dir --dry-run --grant-install-rights --ignore-unknown-parameters --insecure-registry -l --labels -L --list --name --no-install -o --output --output-version -S --search -a --show-all --show-labels --show-managed-fields --sort-by --source-secret --strategy --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_status ()
{
    local cur word_list
    word_list=" -A --all-namespaces -o --output --suggest --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_project ()
{
    local cur word_list
    word_list=" -q --short --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_projects ()
{
    local cur word_list
    word_list=" -q --short --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_explain ()
{
    local cur word_list
    word_list=" --api-version --recursive --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rollout ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          rollout)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          cancel) _oc_cancel
            return
            ;;

          history) _oc_history
            return
            ;;

          latest) _oc_latest
            return
            ;;

          pause) _oc_pause
            return
            ;;

          restart) _oc_restart
            return
            ;;

          resume) _oc_resume
            return
            ;;

          retry) _oc_retry
            return
            ;;

          status) _oc_status
            return
            ;;

          undo) _oc_undo
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" cancel history latest pause restart resume retry status undo --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_cancel ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -k --kustomize -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_history ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -k --kustomize -o --output -R --recursive --revision --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_latest ()
{
    local cur word_list
    word_list=" --again --allow-missing-template-keys --dry-run -o --output --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_pause ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --field-manager -k --kustomize -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_restart ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --field-manager -k --kustomize -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_resume ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --field-manager -k --kustomize -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_retry ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -k --kustomize -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_status ()
{
    local cur word_list
    word_list=" -k --kustomize -R --recursive --revision --timeout -w --watch --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rollout_undo ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -k --kustomize -o --output -R --recursive --show-managed-fields --template --to-revision --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rollback ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --change-scaling-settings --change-strategy --change-triggers -d --dry-run -o --output --show-managed-fields --template --to-version --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_newbuild ()
{
    local cur word_list
    word_list=" --allow-missing-images --allow-missing-imagestream-tags --allow-missing-template-keys --binary --context-dir -D --dockerfile --dry-run --insecure-registry -l --labels --name --no-output -o --output --output-version --push-secret -a --show-all --show-labels --show-managed-fields --source-image --source-image-path --source-secret --strategy --template --to --to-docker --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_startbuild ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --build-loglevel --commit --exclude -F --follow --from-archive --from-build --from-dir --from-file --from-repo --from-webhook --git-post-receive --git-repository --incremental --list-webhooks --no-cache -o --output --show-managed-fields --template -w --wait --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_cancelbuild ()
{
    local cur word_list
    word_list=" --dump-logs --restart --state --state --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_importimage ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --confirm --dry-run --from --insecure -o --output --reference-policy --scheduled --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_tag ()
{
    local cur word_list
    word_list=" --alias -d --delete --insecure --reference --reference-policy --scheduled --source --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_create ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          create)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _oc_build
            return
            ;;

          clusterrole) _oc_clusterrole
            return
            ;;

          clusterrolebinding) _oc_clusterrolebinding
            return
            ;;

          configmap) _oc_configmap
            return
            ;;

          cronjob) _oc_cronjob
            return
            ;;

          deployment) _oc_deployment
            return
            ;;

          deploymentconfig) _oc_deploymentconfig
            return
            ;;

          identity) _oc_identity
            return
            ;;

          imagestream) _oc_imagestream
            return
            ;;

          imagestreamtag) _oc_imagestreamtag
            return
            ;;

          ingress) _oc_ingress
            return
            ;;

          job) _oc_job
            return
            ;;

          namespace) _oc_namespace
            return
            ;;

          priorityclass) _oc_priorityclass
            return
            ;;

          quota) _oc_quota
            return
            ;;

          role) _oc_role
            return
            ;;

          rolebinding) _oc_rolebinding
            return
            ;;

          route) _oc_route
            return
            ;;

          service) _oc_service
            return
            ;;

          serviceaccount) _oc_serviceaccount
            return
            ;;

          user) _oc_user
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build clusterrole clusterrolebinding configmap cronjob deployment deploymentconfig identity imagestream imagestreamtag ingress job namespace priorityclass quota role rolebinding route service serviceaccount user --allow-missing-template-keys --dry-run --edit --field-manager -k --kustomize -o --output --raw --record -R --recursive --save-config -l --selector --show-managed-fields --template --validate --windows-line-endings --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_build ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --build-loglevel --context-dir --dockerfile-contents --dockerfile-path --dry-run --from-image --image-optimization-policy -o --output --save-config --show-managed-fields --source-git --source-revision --strategy --template --to-image --to-image-stream --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_clusterrole ()
{
    local cur word_list
    word_list=" --aggregation-rule --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_clusterrolebinding ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --clusterrole --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_configmap ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --append-hash --dry-run --field-manager --from-env-file -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_cronjob ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager --image -o --output --restart --save-config --schedule --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_deployment ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager -o --output --port -r --replicas --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_deploymentconfig ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --image -o --output --save-config --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_identity ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -o --output --save-config --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_imagestream ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --lookup-local -o --output --save-config --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_imagestreamtag ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --from --from-image --insecure -o --output --reference --reference-policy --save-config --scheduled --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_ingress ()
{
    local cur word_list
    word_list=" --rule --allow-missing-template-keys --class --default-backend --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_job ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager --from --image -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_namespace ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_priorityclass ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --description --dry-run --field-manager --global-default -o --output --preemption-policy --save-config --show-managed-fields --template --validate --value --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_quota ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager --hard -o --output --save-config --scopes --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_role ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_rolebinding ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --clusterrole --dry-run --field-manager -o --output --role --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_route ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_service ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_serviceaccount ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager -o --output --save-config --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_create_user ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --full-name -o --output --save-config --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_apply ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --cascade --dry-run --field-manager --force --force-conflicts --grace-period -k --kustomize --openapi-patch -o --output --overwrite --prune --record -R --recursive -l --selector --server-side --show-managed-fields --template --timeout --validate --wait --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_get ()
{
    local cur word_list
    word_list=" -A --all-namespaces --allow-missing-template-keys --chunk-size --field-selector --ignore-not-found -k --kustomize --no-headers -o --output --output-watch-events --raw -R --recursive -l --selector --server-print --show-kind --show-labels --show-managed-fields --sort-by --template -w --watch --watch-only --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_describe ()
{
    local cur word_list
    word_list=" -A --all-namespaces -k --kustomize -R --recursive -l --selector --show-events --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_edit ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --field-manager -k --kustomize -o --output --output-patch --record -R --recursive --save-config --show-managed-fields --template --validate --windows-line-endings --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_set ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          set)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          env) _oc_env
            return
            ;;

          image) _oc_image
            return
            ;;

          probe) _oc_probe
            return
            ;;

          resources) _oc_resources
            return
            ;;

          selector) _oc_selector
            return
            ;;

          volumes) _oc_volumes
            return
            ;;

          data) _oc_data
            return
            ;;

          build-secret) _oc_buildsecret
            return
            ;;

          build-hook) _oc_buildhook
            return
            ;;

          image-lookup) _oc_imagelookup
            return
            ;;

          triggers) _oc_triggers
            return
            ;;

          subject) _oc_subject
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" env image probe resources selector volumes data build-secret build-hook image-lookup triggers subject --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_env ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys -c --containers --dry-run --from -k --kustomize --list --local -o --output --overwrite --prefix -R --recursive --resolve --resource-version -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_image ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager -k --kustomize --local -o --output --record -R --recursive -l --selector --show-managed-fields --source --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_probe ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys -c --containers --dry-run --failure-threshold --get-url --initial-delay-seconds -k --kustomize --liveness --local --open-tcp -o --output --period-seconds --readiness -R --recursive --remove -l --selector --show-managed-fields --startup --success-threshold --template --timeout-seconds --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_resources ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys -c --containers --dry-run --field-manager -k --kustomize --limits --local -o --output --record -R --recursive --requests -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_selector ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager --local -o --output --record -R --recursive --resource-version --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_volumes ()
{
    local cur word_list
    word_list=" --add --all --allow-missing-template-keys --claim-class --claim-mode --claim-name --claim-size --configmap-name --confirm -c --containers --default-mode --dry-run -k --kustomize --local -m --mount-path --name -o --output --overwrite --path --read-only -R --recursive --remove --secret-name -l --selector --show-managed-fields --source --sub-path --template -t --type --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_data ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run -k --kustomize --local -o --output -R --recursive -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_buildsecret ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run -k --kustomize --local -o --output --pull --push -R --recursive --remove -l --selector --show-managed-fields --source --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_buildhook ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --command --dry-run -k --kustomize --local -o --output --post-commit -R --recursive --remove --script -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_imagelookup ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --enabled -k --kustomize --list --local -o --output -R --recursive -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_triggers ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --auto -c --containers --dry-run --from-bitbucket --from-config --from-github --from-gitlab --from-image --from-webhook --from-webhook-allow-env -k --kustomize --local --manual -o --output -R --recursive --remove --remove-all -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_subject ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager -k --kustomize --local -o --output -R --recursive -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_label ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager --field-selector -k --kustomize --list --local -o --output --overwrite --record -R --recursive --resource-version -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_annotate ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager --field-selector -k --kustomize --list --local -o --output --overwrite --record -R --recursive --resource-version -l --selector --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_expose ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cluster-ip --dry-run --external-ip --field-manager --generator --hostname -k --kustomize -l --labels --load-balancer-ip --name -o --output --overrides --path --port --protocol --record -R --recursive --save-config --selector --session-affinity --show-managed-fields --target-port --template --type --wildcard-policy --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_delete ()
{
    local cur word_list
    word_list=" --all -A --all-namespaces --cascade --dry-run --field-selector --force --grace-period --ignore-not-found -k --kustomize --now -o --output --raw -R --recursive -l --selector --timeout --wait --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_scale ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --current-replicas --dry-run -k --kustomize -o --output --record -R --recursive --replicas --resource-version -l --selector --show-managed-fields --template --timeout --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_autoscale ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cpu-percent --dry-run --field-manager -k --kustomize --max --min --name -o --output --record -R --recursive --save-config --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_logs ()
{
    local cur word_list
    word_list=" --all-containers -c --container -f --follow --ignore-errors --insecure-skip-tls-verify-backend --limit-bytes --max-log-requests --pod-running-timeout --prefix -p --previous -l --selector --since --since-time --tail --timestamps --version --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rsh ()
{
    local cur word_list
    word_list=" -c --container -T --no-tty --pod-running-timeout --shell -t --tty --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_rsync ()
{
    local cur word_list
    word_list=" --compress -c --container --delete --no-perms --progress -q --quiet --strategy -w --watch --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_portforward ()
{
    local cur word_list
    word_list=" --address --address --pod-running-timeout --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_debug ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --as-root --as-user -c --container --dry-run --image --image-stream --keep-annotations --keep-init-containers --keep-labels --keep-liveness --keep-readiness -k --kustomize -I --no-stdin -T --no-tty --node-name --one-container -o --output --preserve-pod -q --quiet -R --recursive --show-labels --show-managed-fields --template --to-namespace -t --tty --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_exec ()
{
    local cur word_list
    word_list=" -c --container --pod-running-timeout -q --quiet -i --stdin -t --tty --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_proxy ()
{
    local cur word_list
    word_list=" --accept-hosts --accept-hosts --accept-paths --address --api-prefix --disable-filter --keepalive -p --port --reject-methods --reject-paths -u --unix-socket -w --www -P --www-prefix --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_attach ()
{
    local cur word_list
    word_list=" -c --container --pod-running-timeout -q --quiet -i --stdin -t --tty --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_run ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --attach --cascade --command --dry-run --expose --field-manager --force --grace-period --image --image-pull-policy -k --kustomize -l --labels --leave-stdin-open -o --output --overrides --pod-running-timeout --port --privileged -q --quiet --record -R --recursive --restart --rm --save-config --show-managed-fields -i --stdin --template --timeout -t --tty --wait --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_cp ()
{
    local cur word_list
    word_list=" -c --container --no-preserve --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_wait ()
{
    local cur word_list
    word_list=" --all -A --all-namespaces --allow-missing-template-keys --field-selector --for --local -o --output -R --recursive -l --selector --show-managed-fields --template --timeout --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_adm ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          adm)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          upgrade) _oc_upgrade
            return
            ;;

          top) _oc_top
            return
            ;;

          must-gather) _oc_mustgather
            return
            ;;

          inspect) _oc_inspect
            return
            ;;

          drain) _oc_drain
            return
            ;;

          cordon) _oc_cordon
            return
            ;;

          uncordon) _oc_uncordon
            return
            ;;

          taint) _oc_taint
            return
            ;;

          node-logs) _oc_nodelogs
            return
            ;;

          new-project) _oc_newproject
            return
            ;;

          policy) _oc_policy
            return
            ;;

          groups) _oc_groups
            return
            ;;

          pod-network) _oc_podnetwork
            return
            ;;

          prune) _oc_prune
            return
            ;;

          migrate) _oc_migrate
            return
            ;;

          create-kubeconfig) _oc_createkubeconfig
            return
            ;;

          create-login-template) _oc_createlogintemplate
            return
            ;;

          create-error-template) _oc_createerrortemplate
            return
            ;;

          build-chain) _oc_buildchain
            return
            ;;

          completion) _oc_completion
            return
            ;;

          config) _oc_config
            return
            ;;

          verify-image-signature) _oc_verifyimagesignature
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" upgrade top must-gather inspect drain cordon uncordon taint node-logs new-project policy groups pod-network prune migrate create-kubeconfig create-login-template create-error-template build-chain completion config verify-image-signature --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_upgrade ()
{
    local cur word_list
    word_list=" --allow-explicit-upgrade --allow-upgrade-with-warnings --clear --force --to --to-image --to-latest --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_top ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_mustgather ()
{
    local cur word_list
    word_list=" --dest-dir --node-name --source-dir --timeout --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_inspect ()
{
    local cur word_list
    word_list=" -A --all-namespaces --dest-dir --events-file --since --since-time --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_drain ()
{
    local cur word_list
    word_list=" --delete-emptydir-data --disable-eviction --dry-run --force --grace-period --ignore-daemonsets --ignore-errors --pod-selector -l --selector --skip-wait-for-delete-timeout --timeout --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_cordon ()
{
    local cur word_list
    word_list=" --dry-run -l --selector --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_uncordon ()
{
    local cur word_list
    word_list=" --dry-run -l --selector --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_taint ()
{
    local cur word_list
    word_list=" --all --allow-missing-template-keys --dry-run --field-manager -o --output --overwrite -l --selector --show-managed-fields --template --validate --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_nodelogs ()
{
    local cur word_list
    word_list=" --boot --case-sensitive -g --grep -o --output --path --raw --role -l --selector --since --tail --unify --until --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_newproject ()
{
    local cur word_list
    word_list=" --admin --admin-role --description --display-name --node-selector --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_policy ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_groups ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_podnetwork ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_prune ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_migrate ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_createkubeconfig ()
{
    local cur word_list
    word_list=" --master --public-master --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_createlogintemplate ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_createerrortemplate ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_buildchain ()
{
    local cur word_list
    word_list=" --all -o --output --reverse --trigger-only --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_completion ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_config ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_adm_verifyimagesignature ()
{
    local cur word_list
    word_list=" --expected-identity --expected-identity --save --expected-identity --insecure --public-key --registry-url --remove-all --save --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_replace ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --cascade --dry-run --field-manager --force --grace-period -k --kustomize -o --output --raw -R --recursive --save-config --show-managed-fields --template --timeout --validate --wait --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_patch ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run --field-manager -k --kustomize --local -o --output -p --patch --patch-file --record -R --recursive --show-managed-fields --template --type --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_process ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -f --filename --ignore-unknown-parameters -l --labels --local -o --output --parameters --raw --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_extract ()
{
    local cur word_list
    word_list=" --confirm --to --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_observe ()
{
    local cur word_list
    word_list=" -- -A --all-namespaces --allow-missing-template-keys -d --delete --exit-after --listen-addr --maximum-errors --names --object-env-var --once -o --output --print-metrics-on-exit -q --quiet --resync-period --retry-count --retry-on-exit-code -l --selector --template --type-env-var --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_policy ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          policy)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add-role-to-group) _oc_addroletogroup
            return
            ;;

          add-role-to-user) _oc_addroletouser
            return
            ;;

          remove-group) _oc_removegroup
            return
            ;;

          remove-user) _oc_removeuser
            return
            ;;

          scc-review) _oc_sccreview
            return
            ;;

          scc-subject-review) _oc_sccsubjectreview
            return
            ;;

          who-can) _oc_whocan
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add-role-to-group add-role-to-user remove-group remove-user scc-review scc-subject-review who-can --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_addroletogroup ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -o --output --role-namespace --rolebinding-name --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_addroletouser ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -o --output --role-namespace --rolebinding-name --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_removegroup ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -o --output --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_removeuser ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --dry-run -o --output --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_sccreview ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -k --kustomize --no-headers -o --output -R --recursive --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_sccsubjectreview ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys -k --kustomize --no-headers -o --output -R --recursive -z --serviceaccount --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_policy_whocan ()
{
    local cur word_list
    word_list=" -A --all-namespaces --allow-missing-template-keys -o --output --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_image ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          image)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          info) _oc_info
            return
            ;;

          mirror) _oc_mirror
            return
            ;;

          serve) _oc_serve
            return
            ;;

          append) _oc_append
            return
            ;;

          extract) _oc_extract
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" info mirror serve append extract --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_info ()
{
    local cur word_list
    word_list=" --dir --filter-by-os --insecure -o --output -a --registry-config --skip-verification --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_mirror ()
{
    local cur word_list
    word_list=" --keep-manifest-list --filter-by-os --keep-manifest-list --continue-on-error --dir --dry-run --filter-by-os --force --from-dir --insecure --keep-manifest-list --max-per-registry --max-registry -a --registry-config --skip-missing --skip-mount --skip-multiple-scopes --skip-verification --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_serve ()
{
    local cur word_list
    word_list=" --dir --listen --tls-crt --tls-key --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_append ()
{
    local cur word_list
    word_list=" --created-at --dir --drop-history --dry-run --filter-by-os --force --from --from-dir --image --insecure --max-per-registry --meta -a --registry-config --skip-verification --to --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_extract ()
{
    local cur word_list
    word_list=" --all-layers --confirm --dir --dry-run --filter-by-os --insecure --only-files -p --preserve-ownership -a --registry-config --skip-verification --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_idle ()
{
    local cur word_list
    word_list=" --all -A --all-namespaces --dry-run --resource-names-file -l --selector --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_apiresources ()
{
    local cur word_list
    word_list=" --api-group --cached --namespaced --no-headers -o --output --sort-by --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_diff ()
{
    local cur word_list
    word_list=" --field-manager --force-conflicts -k --kustomize -R --recursive -l --selector --server-side --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_kustomize ()
{
    local cur word_list
    word_list=" --enable-alpha-plugins --enable-helm --enable-managedby-label --helm-command --load-restrictor --network --network-name -o --output --reorder --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_logout ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          get-contexts) _oc_getcontexts
            return
            ;;

          set) _oc_set
            return
            ;;

          set-cluster) _oc_setcluster
            return
            ;;

          set-context) _oc_setcontext
            return
            ;;

          unset) _oc_unset
            return
            ;;

          view) _oc_view
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" get-contexts set set-cluster set-context unset view --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_getcontexts ()
{
    local cur word_list
    word_list=" --no-headers -o --output --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_set ()
{
    local cur word_list
    word_list=" --set-raw-bytes --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_setcluster ()
{
    local cur word_list
    word_list=" --embed-certs --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_setcontext ()
{
    local cur word_list
    word_list=" --current --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_unset ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_view ()
{
    local cur word_list
    word_list=" --allow-missing-template-keys --flatten --merge --minify -o --output --raw --show-managed-fields --template --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_whoami ()
{
    local cur word_list
    word_list=" --show-console -c --show-context --show-server -t --show-token --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_completion ()
{
    local cur word_list
    word_list=" --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_oc_version ()
{
    local cur word_list
    word_list=" --client -o --output --add-dir-header --add_dir_header --alsologtostderr --as --cache-dir --certificate-authority --client-certificate --client-key --cluster --context --insecure-skip-tls-verify --kubeconfig --log-backtrace-at --log-dir --log-file --log-file-max-size --log-flush-frequency --log_backtrace_at --log_dir --log_file --log_file_max_size --loglevel --logtostderr --match-server-version -n --namespace --one-output --one_output --request-timeout -s --server --skip-headers --skip-log-headers --skip_headers --skip_log_headers --stderrthreshold --tls-server-name --token --user -v --v --vmodule" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _oc oc
