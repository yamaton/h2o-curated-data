# Auto-generated with h2o

_ploomber()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          build) _ploomber_build
            return
            ;;

          cloud) _ploomber_cloud
            return
            ;;

          examples) _ploomber_examples
            return
            ;;

          install) _ploomber_install
            return
            ;;

          interact) _ploomber_interact
            return
            ;;

          nb) _ploomber_nb
            return
            ;;

          plot) _ploomber_plot
            return
            ;;

          report) _ploomber_report
            return
            ;;

          scaffold) _ploomber_scaffold
            return
            ;;

          status) _ploomber_status
            return
            ;;

          task) _ploomber_task
            return
            ;;

      *)
          word_list=" build cloud examples install interact nb plot report scaffold status task --version --help"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_ploomber_cloud ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          cloud)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          abort) _ploomber_abort
            return
            ;;

          build) _ploomber_build
            return
            ;;

          data) _ploomber_data
            return
            ;;

          delete-pipeline) _ploomber_deletepipeline
            return
            ;;

          download) _ploomber_download
            return
            ;;

          get-key) _ploomber_getkey
            return
            ;;

          get-pipelines) _ploomber_getpipelines
            return
            ;;

          list) _ploomber_list
            return
            ;;

          logs) _ploomber_logs
            return
            ;;

          nb) _ploomber_nb
            return
            ;;

          products) _ploomber_products
            return
            ;;

          set-key) _ploomber_setkey
            return
            ;;

          status) _ploomber_status
            return
            ;;

          task) _ploomber_task
            return
            ;;

          write-pipeline) _ploomber_writepipeline
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" abort build data delete-pipeline download get-key get-pipelines list logs nb products set-key status task write-pipeline --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_abort ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_build ()
{
    local cur word_list
    word_list=" -f --force --json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_data ()
{
    local cur word_list
    word_list=" -u --upload -n --name --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_deletepipeline ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_download ()
{
    local cur word_list
    word_list=" -s --summary" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_getkey ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_getpipelines ()
{
    local cur word_list
    word_list=" -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_list ()
{
    local cur word_list
    word_list=" --json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_logs ()
{
    local cur word_list
    word_list=" -i --image -t --task" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_nb ()
{
    local cur word_list
    word_list=" --json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_products ()
{
    local cur word_list
    word_list=" -d --delete --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_setkey ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_status ()
{
    local cur word_list
    word_list=" -w --watch -s --summary" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_task ()
{
    local cur word_list
    word_list=" -f --force --json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_cloud_writepipeline ()
{
    local cur word_list
    word_list=" --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ploomber_examples ()
{
    local cur word_list
    word_list=" -n --name -f --force -o --output -b --branch --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ploomber_install ()
{
    local cur word_list
    word_list=" -l --use-lock -L --no-use-lock -e --create-env -v --use-venv --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ploomber_nb ()
{
    local cur word_list
    word_list=" -h --help --log -l --log-file -F --entry-point -e --single-click -S --single-click-disable -d --install-hook -I --uninstall-hook -u --inject -i --remove -r --format -f --pair -p --sync -s" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ploomber_scaffold ()
{
    local cur word_list
    word_list=" -c --conda -p --pip -P --package -E --empty -e --entry-point --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _ploomber ploomber
