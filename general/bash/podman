# Auto-generated with h2o

_podman()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          attach) _podman_attach
            return
            ;;

          auto-update) _podman_autoupdate
            return
            ;;

          build) _podman_build
            return
            ;;

          commit) _podman_commit
            return
            ;;

          container) _podman_container
            return
            ;;

          cp) _podman_cp
            return
            ;;

          create) _podman_create
            return
            ;;

          diff) _podman_diff
            return
            ;;

          events) _podman_events
            return
            ;;

          exec) _podman_exec
            return
            ;;

          export) _podman_export
            return
            ;;

          generate) _podman_generate
            return
            ;;

          healthcheck) _podman_healthcheck
            return
            ;;

          help) _podman_help
            return
            ;;

          history) _podman_history
            return
            ;;

          image) _podman_image
            return
            ;;

          images) _podman_images
            return
            ;;

          import) _podman_import
            return
            ;;

          info) _podman_info
            return
            ;;

          init) _podman_init
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          kill) _podman_kill
            return
            ;;

          load) _podman_load
            return
            ;;

          login) _podman_login
            return
            ;;

          logout) _podman_logout
            return
            ;;

          logs) _podman_logs
            return
            ;;

          machine) _podman_machine
            return
            ;;

          manifest) _podman_manifest
            return
            ;;

          mount) _podman_mount
            return
            ;;

          network) _podman_network
            return
            ;;

          pause) _podman_pause
            return
            ;;

          play) _podman_play
            return
            ;;

          pod) _podman_pod
            return
            ;;

          port) _podman_port
            return
            ;;

          ps) _podman_ps
            return
            ;;

          pull) _podman_pull
            return
            ;;

          push) _podman_push
            return
            ;;

          rename) _podman_rename
            return
            ;;

          restart) _podman_restart
            return
            ;;

          rm) _podman_rm
            return
            ;;

          rmi) _podman_rmi
            return
            ;;

          run) _podman_run
            return
            ;;

          save) _podman_save
            return
            ;;

          search) _podman_search
            return
            ;;

          secret) _podman_secret
            return
            ;;

          start) _podman_start
            return
            ;;

          stats) _podman_stats
            return
            ;;

          stop) _podman_stop
            return
            ;;

          system) _podman_system
            return
            ;;

          tag) _podman_tag
            return
            ;;

          top) _podman_top
            return
            ;;

          unmount) _podman_unmount
            return
            ;;

          unpause) _podman_unpause
            return
            ;;

          unshare) _podman_unshare
            return
            ;;

          untag) _podman_untag
            return
            ;;

          version) _podman_version
            return
            ;;

          volume) _podman_volume
            return
            ;;

          wait) _podman_wait
            return
            ;;

      *)
          word_list=" attach auto-update build commit container cp create diff events exec export generate healthcheck help history image images import info init inspect kill load login logout logs machine manifest mount network pause play pod port ps pull push rename restart rm rmi run save search secret start stats stop system tag top unmount unpause unshare untag version volume wait --cgroup-manager --cni-config-dir --conmon -c --connection --events-backend --help --hooks-dir --identity --log-level --namespace --network-cmd-path -r --remote --root --runroot --runtime --runtime-flag --storage-driver --storage-opt --syslog --tmpdir --url -v --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_podman_attach ()
{
    local cur word_list
    word_list=" --detach-keys -l --latest --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_autoupdate ()
{
    local cur word_list
    word_list=" --authfile --dry-run --format --rollback" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_build ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch --authfile --build-arg --cache-from --cap-add --cap-drop --cert-dir --cgroup-parent --cni-plugin-path --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --creds --decryption-key --device -D --disable-compression --disable-content-trust --dns-option --dns-search -f --file --force-rm --format --from --http-proxy --ignorefile --iidfile --ipc --isolation --jobs --label --layers --logfile --manifest -m --memory --memory-swap --network --no-cache --os --pid --platform --pull --pull-always --pull-never -q --quiet --rm --secret --security-opt --shm-size --sign-by --squash --squash-all --ssh --stdin -t --tag --target --timestamp --tls-verify --ulimit --userns --userns-gid-map --userns-gid-map-group --userns-uid-map --userns-uid-map-user --uts --variant -v --volume" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -f --format --iidfile --include-volumes -m --message -p --pause -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_container ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          container)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          attach) _podman_attach
            return
            ;;

          checkpoint) _podman_checkpoint
            return
            ;;

          cleanup) _podman_cleanup
            return
            ;;

          commit) _podman_commit
            return
            ;;

          cp) _podman_cp
            return
            ;;

          create) _podman_create
            return
            ;;

          diff) _podman_diff
            return
            ;;

          exec) _podman_exec
            return
            ;;

          exists) _podman_exists
            return
            ;;

          export) _podman_export
            return
            ;;

          init) _podman_init
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          kill) _podman_kill
            return
            ;;

          list) _podman_list
            return
            ;;

          logs) _podman_logs
            return
            ;;

          mount) _podman_mount
            return
            ;;

          pause) _podman_pause
            return
            ;;

          port) _podman_port
            return
            ;;

          prune) _podman_prune
            return
            ;;

          ps) _podman_ps
            return
            ;;

          rename) _podman_rename
            return
            ;;

          restart) _podman_restart
            return
            ;;

          restore) _podman_restore
            return
            ;;

          rm) _podman_rm
            return
            ;;

          run) _podman_run
            return
            ;;

          runlabel) _podman_runlabel
            return
            ;;

          start) _podman_start
            return
            ;;

          stats) _podman_stats
            return
            ;;

          stop) _podman_stop
            return
            ;;

          top) _podman_top
            return
            ;;

          unmount) _podman_unmount
            return
            ;;

          unpause) _podman_unpause
            return
            ;;

          wait) _podman_wait
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" attach checkpoint cleanup commit cp create diff exec exists export init inspect kill list logs mount pause port prune ps rename restart restore rm run runlabel start stats stop top unmount unpause wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_attach ()
{
    local cur word_list
    word_list=" --detach-keys -l --latest --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_checkpoint ()
{
    local cur word_list
    word_list=" -a --all -c --compress -e --export --ignore-rootfs --ignore-volumes -k --keep -l --latest -R --leave-running -P --pre-checkpoint --tcp-established --with-previous" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_cleanup ()
{
    local cur word_list
    word_list=" -a --all --exec -l --latest --rm --rmi" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -f --format --iidfile --include-volumes -m --message -p --pause -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_cp ()
{
    local cur word_list
    word_list=" -a --archive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_create ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-ctr --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_diff ()
{
    local cur word_list
    word_list=" --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive -l --latest --preserve-fds --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_exists ()
{
    local cur word_list
    word_list=" --external" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_init ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_kill ()
{
    local cur word_list
    word_list=" -a --all --cidfile -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_list ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_logs ()
{
    local cur word_list
    word_list=" -f --follow -l --latest -n --names --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_mount ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --notruncate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_pause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_port ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_ps ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest --running -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_restore ()
{
    local cur word_list
    word_list=" -a --all --ignore-rootfs --ignore-static-ip --ignore-static-mac --ignore-volumes -i --import --import-previous -k --keep -l --latest -n --name --pod -p --publish --tcp-established" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_rm ()
{
    local cur word_list
    word_list=" -a --all --cidfile -f --force -i --ignore -l --latest -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_run ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --preserve-fds --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rmi --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_runlabel ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --creds --display -n --name -q --quiet --replace --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_start ()
{
    local cur word_list
    word_list=" --all -a --attach --detach-keys -f --filter -i --interactive -l --latest --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stats ()
{
    local cur word_list
    word_list=" -a --all --format -i --interval -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stop ()
{
    local cur word_list
    word_list=" -a --all --cidfile -i --ignore -l --latest -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_unpause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_wait ()
{
    local cur word_list
    word_list=" --condition -i --interval -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_cp ()
{
    local cur word_list
    word_list=" -a --archive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_create ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-ctr --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_diff ()
{
    local cur word_list
    word_list=" --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_events ()
{
    local cur word_list
    word_list=" --filter --format --since --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive -l --latest --preserve-fds --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_generate ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          generate)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          kube) _podman_kube
            return
            ;;

          systemd) _podman_systemd
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" kube systemd" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_generate_kube ()
{
    local cur word_list
    word_list=" -f --filename -s --service" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_generate_systemd ()
{
    local cur word_list
    word_list=" --container-prefix -f --files --format -n --name --new --no-header --pod-prefix --restart-policy --separator -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_healthcheck ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          healthcheck)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          run) _podman_run
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" run" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc --notruncate -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_image ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          image)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _podman_build
            return
            ;;

          diff) _podman_diff
            return
            ;;

          exists) _podman_exists
            return
            ;;

          history) _podman_history
            return
            ;;

          import) _podman_import
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          list) _podman_list
            return
            ;;

          load) _podman_load
            return
            ;;

          mount) _podman_mount
            return
            ;;

          prune) _podman_prune
            return
            ;;

          pull) _podman_pull
            return
            ;;

          push) _podman_push
            return
            ;;

          rm) _podman_rm
            return
            ;;

          save) _podman_save
            return
            ;;

          scp) _podman_scp
            return
            ;;

          search) _podman_search
            return
            ;;

          sign) _podman_sign
            return
            ;;

          tag) _podman_tag
            return
            ;;

          tree) _podman_tree
            return
            ;;

          trust) _podman_trust
            return
            ;;

          unmount) _podman_unmount
            return
            ;;

          untag) _podman_untag
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build diff exists history import inspect list load mount prune pull push rm save scp search sign tag tree trust unmount untag" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_build ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch --authfile --build-arg --cache-from --cap-add --cap-drop --cert-dir --cgroup-parent --cni-plugin-path --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --creds --decryption-key --device -D --disable-compression --disable-content-trust --dns-option --dns-search -f --file --force-rm --format --from --http-proxy --ignorefile --iidfile --ipc --isolation --jobs --label --layers --logfile --manifest -m --memory --memory-swap --network --no-cache --os --pid --platform --pull --pull-always --pull-never -q --quiet --rm --secret --security-opt --shm-size --sign-by --squash --squash-all --ssh --stdin -t --tag --target --timestamp --tls-verify --ulimit --userns --userns-gid-map --userns-gid-map-group --userns-uid-map --userns-uid-map-user --uts --variant -v --volume" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_diff ()
{
    local cur word_list
    word_list=" --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc --notruncate -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_import ()
{
    local cur word_list
    word_list=" -c --change -m --message -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_inspect ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_list ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          list)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          podman) _image_podman
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" podman -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_list_podman ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_mount ()
{
    local cur word_list
    word_list=" -a --all --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_pull ()
{
    local cur word_list
    word_list=" --all-tags --arch --authfile --cert-dir --creds --disable-content-trust --os --platform -q --quiet --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_push ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --compress --creds --digestfile --disable-content-trust -f --format -q --quiet --remove-signatures --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_save ()
{
    local cur word_list
    word_list=" --compress --format -m --multi-image-archive -o --output -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_scp ()
{
    local cur word_list
    word_list=" -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_search ()
{
    local cur word_list
    word_list=" --authfile -f --filter --format --limit --list-tags --no-trunc --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_sign ()
{
    local cur word_list
    word_list=" -a --all --cert-dir -d --directory --sign-by" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_tree ()
{
    local cur word_list
    word_list=" --whatrequires" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_trust ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          trust)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          set) _image_set
            return
            ;;

          show) _image_show
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" set show" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_trust_set ()
{
    local cur word_list
    word_list=" -f --pubkeysfile -t --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_trust_show ()
{
    local cur word_list
    word_list=" -j --json --raw" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_images ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_import ()
{
    local cur word_list
    word_list=" -c --change -m --message -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_info ()
{
    local cur word_list
    word_list=" -D --debug -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_init ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest -s --size -t --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_kill ()
{
    local cur word_list
    word_list=" -a --all --cidfile -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_login ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --get-login -p --password --password-stdin --tls-verify -u --username -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_logout ()
{
    local cur word_list
    word_list=" -a --all --authfile" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_logs ()
{
    local cur word_list
    word_list=" -f --follow -l --latest -n --names --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_machine ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          machine)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          init) _podman_init
            return
            ;;

          list) _podman_list
            return
            ;;

          rm) _podman_rm
            return
            ;;

          ssh) _podman_ssh
            return
            ;;

          start) _podman_start
            return
            ;;

          stop) _podman_stop
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" init list rm ssh start stop" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_init ()
{
    local cur word_list
    word_list=" --cpus --disk-size --ignition-path --image-path -m --memory" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_list ()
{
    local cur word_list
    word_list=" --format --noheading" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_rm ()
{
    local cur word_list
    word_list=" --force --save-ignition --save-image --save-keys" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_manifest ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          manifest)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _podman_add
            return
            ;;

          annotate) _podman_annotate
            return
            ;;

          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          push) _podman_push
            return
            ;;

          remove) _podman_remove
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add annotate create exists inspect push remove rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_add ()
{
    local cur word_list
    word_list=" --all --annotation --arch --authfile --cert-dir --creds --features --os --os-version --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_annotate ()
{
    local cur word_list
    word_list=" --annotation --arch --features --os --os-features --os-version --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_create ()
{
    local cur word_list
    word_list=" --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_push ()
{
    local cur word_list
    word_list=" --all --authfile --cert-dir --creds --digestfile -f --format -q --quiet --remove-signatures --rm --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_mount ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --notruncate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_network ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          network)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          connect) _podman_connect
            return
            ;;

          create) _podman_create
            return
            ;;

          disconnect) _podman_disconnect
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          prune) _podman_prune
            return
            ;;

          reload) _podman_reload
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" connect create disconnect exists inspect ls prune reload rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_connect ()
{
    local cur word_list
    word_list=" --alias" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_create ()
{
    local cur word_list
    word_list=" --disable-dns -d --driver --gateway --internal --ip-range --ipv6 --label -o --opt --subnet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_disconnect ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_inspect ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --no-trunc --noheading -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_reload ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_rm ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_play ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          play)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          kube) _podman_kube
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" kube" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_play_kube ()
{
    local cur word_list
    word_list=" --authfile --build --cert-dir --configmap --creds --down --ip --log-driver --mac-address --network -q --quiet --seccomp-profile-root --start --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pod ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          pod)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          kill) _podman_kill
            return
            ;;

          logs) _podman_logs
            return
            ;;

          pause) _podman_pause
            return
            ;;

          prune) _podman_prune
            return
            ;;

          ps) _podman_ps
            return
            ;;

          restart) _podman_restart
            return
            ;;

          rm) _podman_rm
            return
            ;;

          start) _podman_start
            return
            ;;

          stats) _podman_stats
            return
            ;;

          stop) _podman_stop
            return
            ;;

          top) _podman_top
            return
            ;;

          unpause) _podman_unpause
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create exists inspect kill logs pause prune ps restart rm start stats stop top unpause" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_create ()
{
    local cur word_list
    word_list=" --add-host --cgroup-parent --dns --dns-opt --dns-search --gidmap -h --hostname --infra --infra-command --infra-conmon-pidfile --infra-image --infra-name --ip -l --label --label-file --mac-address -n --name --network --network-alias --no-hosts --pid --pod-id-file -p --publish --replace --share --subgidname --subuidname --uidmap --userns" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_kill ()
{
    local cur word_list
    word_list=" -a --all -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_logs ()
{
    local cur word_list
    word_list=" -c --container -f --follow -l --latest --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_pause ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_prune ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_ps ()
{
    local cur word_list
    word_list=" --ctr-ids --ctr-names --ctr-status -f --filter --format -l --latest --no-trunc --noheading --ns -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force -i --ignore -l --latest --pod-id-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_start ()
{
    local cur word_list
    word_list=" -a --all -l --latest --pod-id-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_stats ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_stop ()
{
    local cur word_list
    word_list=" -a --all -i --ignore -l --latest --pod-id-file -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_unpause ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_port ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_ps ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pull ()
{
    local cur word_list
    word_list=" --all-tags --arch --authfile --cert-dir --creds --disable-content-trust --os --platform -q --quiet --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_push ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --compress --creds --digestfile --disable-content-trust -f --format -q --quiet --remove-signatures --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest --running -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_rm ()
{
    local cur word_list
    word_list=" -a --all --cidfile -f --force -i --ignore -l --latest -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_rmi ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_run ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --preserve-fds --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rmi --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_save ()
{
    local cur word_list
    word_list=" --compress --format -m --multi-image-archive -o --output -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_search ()
{
    local cur word_list
    word_list=" --authfile -f --filter --format --limit --list-tags --no-trunc --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_secret ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          secret)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create inspect ls rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_create ()
{
    local cur word_list
    word_list=" --driver --driver-opts --env" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_inspect ()
{
    local cur word_list
    word_list=" --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_ls ()
{
    local cur word_list
    word_list=" --format --noheading" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_rm ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_start ()
{
    local cur word_list
    word_list=" --all -a --attach --detach-keys -f --filter -i --interactive -l --latest --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_stats ()
{
    local cur word_list
    word_list=" -a --all --format -i --interval -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_stop ()
{
    local cur word_list
    word_list=" -a --all --cidfile -i --ignore -l --latest -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_system ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          system)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          connection) _podman_connection
            return
            ;;

          df) _podman_df
            return
            ;;

          info) _podman_info
            return
            ;;

          migrate) _podman_migrate
            return
            ;;

          prune) _podman_prune
            return
            ;;

          renumber) _podman_renumber
            return
            ;;

          reset) _podman_reset
            return
            ;;

          service) _podman_service
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" connection df info migrate prune renumber reset service" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_connection ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          connection)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _system_add
            return
            ;;

          default) _system_default
            return
            ;;

          list) _system_list
            return
            ;;

          remove) _system_remove
            return
            ;;

          rename) _system_rename
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add default list remove rename" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_connection_add ()
{
    local cur word_list
    word_list=" -d --default --identity -p --port --socket-path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_connection_list ()
{
    local cur word_list
    word_list=" --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_df ()
{
    local cur word_list
    word_list=" --format -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_info ()
{
    local cur word_list
    word_list=" -D --debug -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_migrate ()
{
    local cur word_list
    word_list=" --new-runtime" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_reset ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_service ()
{
    local cur word_list
    word_list=" --cors -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unpause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unshare ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          unshare)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          podman) _podman_podman
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" podman --rootless-cni" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_unshare_podman ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          podman)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          attach) _unshare_attach
            return
            ;;

          auto-update) _unshare_autoupdate
            return
            ;;

          build) _unshare_build
            return
            ;;

          commit) _unshare_commit
            return
            ;;

          container) _unshare_container
            return
            ;;

          cp) _unshare_cp
            return
            ;;

          create) _unshare_create
            return
            ;;

          diff) _unshare_diff
            return
            ;;

          events) _unshare_events
            return
            ;;

          exec) _unshare_exec
            return
            ;;

          export) _unshare_export
            return
            ;;

          generate) _unshare_generate
            return
            ;;

          healthcheck) _unshare_healthcheck
            return
            ;;

          help) _unshare_help
            return
            ;;

          history) _unshare_history
            return
            ;;

          image) _unshare_image
            return
            ;;

          images) _unshare_images
            return
            ;;

          import) _unshare_import
            return
            ;;

          info) _unshare_info
            return
            ;;

          init) _unshare_init
            return
            ;;

          inspect) _unshare_inspect
            return
            ;;

          kill) _unshare_kill
            return
            ;;

          load) _unshare_load
            return
            ;;

          login) _unshare_login
            return
            ;;

          logout) _unshare_logout
            return
            ;;

          logs) _unshare_logs
            return
            ;;

          machine) _unshare_machine
            return
            ;;

          manifest) _unshare_manifest
            return
            ;;

          mount) _unshare_mount
            return
            ;;

          network) _unshare_network
            return
            ;;

          pause) _unshare_pause
            return
            ;;

          play) _unshare_play
            return
            ;;

          pod) _unshare_pod
            return
            ;;

          port) _unshare_port
            return
            ;;

          ps) _unshare_ps
            return
            ;;

          pull) _unshare_pull
            return
            ;;

          push) _unshare_push
            return
            ;;

          rename) _unshare_rename
            return
            ;;

          restart) _unshare_restart
            return
            ;;

          rm) _unshare_rm
            return
            ;;

          rmi) _unshare_rmi
            return
            ;;

          run) _unshare_run
            return
            ;;

          save) _unshare_save
            return
            ;;

          search) _unshare_search
            return
            ;;

          secret) _unshare_secret
            return
            ;;

          start) _unshare_start
            return
            ;;

          stats) _unshare_stats
            return
            ;;

          stop) _unshare_stop
            return
            ;;

          system) _unshare_system
            return
            ;;

          tag) _unshare_tag
            return
            ;;

          top) _unshare_top
            return
            ;;

          unmount) _unshare_unmount
            return
            ;;

          unpause) _unshare_unpause
            return
            ;;

          unshare) _unshare_unshare
            return
            ;;

          untag) _unshare_untag
            return
            ;;

          version) _unshare_version
            return
            ;;

          volume) _unshare_volume
            return
            ;;

          wait) _unshare_wait
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" attach auto-update build commit container cp create diff events exec export generate healthcheck help history image images import info init inspect kill load login logout logs machine manifest mount network pause play pod port ps pull push rename restart rm rmi run save search secret start stats stop system tag top unmount unpause unshare untag version volume wait --cgroup-manager --cni-config-dir --conmon -c --connection --events-backend --help --hooks-dir --identity --log-level --namespace --network-cmd-path -r --remote --root --runroot --runtime --runtime-flag --storage-driver --storage-opt --syslog --tmpdir --url -v --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_attach ()
{
    local cur word_list
    word_list=" --detach-keys -l --latest --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_autoupdate ()
{
    local cur word_list
    word_list=" --authfile --dry-run --format --rollback" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_build ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch --authfile --build-arg --cache-from --cap-add --cap-drop --cert-dir --cgroup-parent --cni-plugin-path --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --creds --decryption-key --device -D --disable-compression --disable-content-trust --dns-option --dns-search -f --file --force-rm --format --from --http-proxy --ignorefile --iidfile --ipc --isolation --jobs --label --layers --logfile --manifest -m --memory --memory-swap --network --no-cache --os --pid --platform --pull --pull-always --pull-never -q --quiet --rm --secret --security-opt --shm-size --sign-by --squash --squash-all --ssh --stdin -t --tag --target --timestamp --tls-verify --ulimit --userns --userns-gid-map --userns-gid-map-group --userns-uid-map --userns-uid-map-user --uts --variant -v --volume" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -f --format --iidfile --include-volumes -m --message -p --pause -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_container ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          container)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          attach) _podman_attach
            return
            ;;

          checkpoint) _podman_checkpoint
            return
            ;;

          cleanup) _podman_cleanup
            return
            ;;

          commit) _podman_commit
            return
            ;;

          cp) _podman_cp
            return
            ;;

          create) _podman_create
            return
            ;;

          diff) _podman_diff
            return
            ;;

          exec) _podman_exec
            return
            ;;

          exists) _podman_exists
            return
            ;;

          export) _podman_export
            return
            ;;

          init) _podman_init
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          kill) _podman_kill
            return
            ;;

          list) _podman_list
            return
            ;;

          logs) _podman_logs
            return
            ;;

          mount) _podman_mount
            return
            ;;

          pause) _podman_pause
            return
            ;;

          port) _podman_port
            return
            ;;

          prune) _podman_prune
            return
            ;;

          ps) _podman_ps
            return
            ;;

          rename) _podman_rename
            return
            ;;

          restart) _podman_restart
            return
            ;;

          restore) _podman_restore
            return
            ;;

          rm) _podman_rm
            return
            ;;

          run) _podman_run
            return
            ;;

          runlabel) _podman_runlabel
            return
            ;;

          start) _podman_start
            return
            ;;

          stats) _podman_stats
            return
            ;;

          stop) _podman_stop
            return
            ;;

          top) _podman_top
            return
            ;;

          unmount) _podman_unmount
            return
            ;;

          unpause) _podman_unpause
            return
            ;;

          wait) _podman_wait
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" attach checkpoint cleanup commit cp create diff exec exists export init inspect kill list logs mount pause port prune ps rename restart restore rm run runlabel start stats stop top unmount unpause wait" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_attach ()
{
    local cur word_list
    word_list=" --detach-keys -l --latest --no-stdin --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_checkpoint ()
{
    local cur word_list
    word_list=" -a --all -c --compress -e --export --ignore-rootfs --ignore-volumes -k --keep -l --latest -R --leave-running -P --pre-checkpoint --tcp-established --with-previous" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_cleanup ()
{
    local cur word_list
    word_list=" -a --all --exec -l --latest --rm --rmi" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_commit ()
{
    local cur word_list
    word_list=" -a --author -c --change -f --format --iidfile --include-volumes -m --message -p --pause -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_cp ()
{
    local cur word_list
    word_list=" -a --archive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_create ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-ctr --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_diff ()
{
    local cur word_list
    word_list=" --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive -l --latest --preserve-fds --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_exists ()
{
    local cur word_list
    word_list=" --external" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_init ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest -s --size" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_kill ()
{
    local cur word_list
    word_list=" -a --all --cidfile -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_list ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_logs ()
{
    local cur word_list
    word_list=" -f --follow -l --latest -n --names --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_mount ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --notruncate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_pause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_port ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_ps ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest --running -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_restore ()
{
    local cur word_list
    word_list=" -a --all --ignore-rootfs --ignore-static-ip --ignore-static-mac --ignore-volumes -i --import --import-previous -k --keep -l --latest -n --name --pod -p --publish --tcp-established" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_rm ()
{
    local cur word_list
    word_list=" -a --all --cidfile -f --force -i --ignore -l --latest -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_run ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --preserve-fds --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rmi --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_runlabel ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --creds --display -n --name -q --quiet --replace --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_start ()
{
    local cur word_list
    word_list=" --all -a --attach --detach-keys -f --filter -i --interactive -l --latest --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stats ()
{
    local cur word_list
    word_list=" -a --all --format -i --interval -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_stop ()
{
    local cur word_list
    word_list=" -a --all --cidfile -i --ignore -l --latest -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_unpause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_container_wait ()
{
    local cur word_list
    word_list=" --condition -i --interval -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_cp ()
{
    local cur word_list
    word_list=" -a --archive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_create ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-ctr --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_diff ()
{
    local cur word_list
    word_list=" --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_events ()
{
    local cur word_list
    word_list=" --filter --format --since --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_exec ()
{
    local cur word_list
    word_list=" -d --detach --detach-keys -e --env --env-file -i --interactive -l --latest --preserve-fds --privileged -t --tty -u --user -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_generate ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          generate)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          kube) _podman_kube
            return
            ;;

          systemd) _podman_systemd
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" kube systemd" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_generate_kube ()
{
    local cur word_list
    word_list=" -f --filename -s --service" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_generate_systemd ()
{
    local cur word_list
    word_list=" --container-prefix -f --files --format -n --name --new --no-header --pod-prefix --restart-policy --separator -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_healthcheck ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          healthcheck)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          run) _podman_run
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" run" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc --notruncate -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_image ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          image)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          build) _podman_build
            return
            ;;

          diff) _podman_diff
            return
            ;;

          exists) _podman_exists
            return
            ;;

          history) _podman_history
            return
            ;;

          import) _podman_import
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          list) _podman_list
            return
            ;;

          load) _podman_load
            return
            ;;

          mount) _podman_mount
            return
            ;;

          prune) _podman_prune
            return
            ;;

          pull) _podman_pull
            return
            ;;

          push) _podman_push
            return
            ;;

          rm) _podman_rm
            return
            ;;

          save) _podman_save
            return
            ;;

          scp) _podman_scp
            return
            ;;

          search) _podman_search
            return
            ;;

          sign) _podman_sign
            return
            ;;

          tag) _podman_tag
            return
            ;;

          tree) _podman_tree
            return
            ;;

          trust) _podman_trust
            return
            ;;

          unmount) _podman_unmount
            return
            ;;

          untag) _podman_untag
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" build diff exists history import inspect list load mount prune pull push rm save scp search sign tag tree trust unmount untag" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_build ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch --authfile --build-arg --cache-from --cap-add --cap-drop --cert-dir --cgroup-parent --cni-plugin-path --compress --cpu-period --cpu-quota -c --cpu-shares --cpuset-cpus --cpuset-mems --creds --decryption-key --device -D --disable-compression --disable-content-trust --dns-option --dns-search -f --file --force-rm --format --from --http-proxy --ignorefile --iidfile --ipc --isolation --jobs --label --layers --logfile --manifest -m --memory --memory-swap --network --no-cache --os --pid --platform --pull --pull-always --pull-never -q --quiet --rm --secret --security-opt --shm-size --sign-by --squash --squash-all --ssh --stdin -t --tag --target --timestamp --tls-verify --ulimit --userns --userns-gid-map --userns-gid-map-group --userns-uid-map --userns-uid-map-user --uts --variant -v --volume" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_diff ()
{
    local cur word_list
    word_list=" --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_history ()
{
    local cur word_list
    word_list=" --format -H --human --no-trunc --notruncate -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_import ()
{
    local cur word_list
    word_list=" -c --change -m --message -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_inspect ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_list ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_mount ()
{
    local cur word_list
    word_list=" -a --all --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_pull ()
{
    local cur word_list
    word_list=" --all-tags --arch --authfile --cert-dir --creds --disable-content-trust --os --platform -q --quiet --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_push ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --compress --creds --digestfile --disable-content-trust -f --format -q --quiet --remove-signatures --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_save ()
{
    local cur word_list
    word_list=" --compress --format -m --multi-image-archive -o --output -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_scp ()
{
    local cur word_list
    word_list=" -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_search ()
{
    local cur word_list
    word_list=" --authfile -f --filter --format --limit --list-tags --no-trunc --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_sign ()
{
    local cur word_list
    word_list=" -a --all --cert-dir -d --directory --sign-by" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_tree ()
{
    local cur word_list
    word_list=" --whatrequires" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_image_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_images ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          images)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          podman) _podman_podman
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" podman -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_images_podman ()
{
    local cur word_list
    word_list=" -a --all --digests -f --filter --format --history --no-trunc -n --noheading -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_import ()
{
    local cur word_list
    word_list=" -c --change -m --message -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_info ()
{
    local cur word_list
    word_list=" -D --debug -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_init ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest -s --size -t --type" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_kill ()
{
    local cur word_list
    word_list=" -a --all --cidfile -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_load ()
{
    local cur word_list
    word_list=" -i --input -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_login ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --get-login -p --password --password-stdin --tls-verify -u --username -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_logout ()
{
    local cur word_list
    word_list=" -a --all --authfile" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_logs ()
{
    local cur word_list
    word_list=" -f --follow -l --latest -n --names --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_machine ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          machine)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          init) _podman_init
            return
            ;;

          list) _podman_list
            return
            ;;

          rm) _podman_rm
            return
            ;;

          ssh) _podman_ssh
            return
            ;;

          start) _podman_start
            return
            ;;

          stop) _podman_stop
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" init list rm ssh start stop" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_init ()
{
    local cur word_list
    word_list=" --cpus --disk-size --ignition-path --image-path -m --memory" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_list ()
{
    local cur word_list
    word_list=" --format --noheading" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_machine_rm ()
{
    local cur word_list
    word_list=" --force --save-ignition --save-image --save-keys" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_manifest ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          manifest)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          add) _podman_add
            return
            ;;

          annotate) _podman_annotate
            return
            ;;

          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          push) _podman_push
            return
            ;;

          remove) _podman_remove
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" add annotate create exists inspect push remove rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_add ()
{
    local cur word_list
    word_list=" --all --annotation --arch --authfile --cert-dir --creds --features --os --os-version --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_annotate ()
{
    local cur word_list
    word_list=" --annotation --arch --features --os --os-features --os-version --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_create ()
{
    local cur word_list
    word_list=" --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_manifest_push ()
{
    local cur word_list
    word_list=" --all --authfile --cert-dir --creds --digestfile -f --format -q --quiet --remove-signatures --rm --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_mount ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --notruncate" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_network ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          network)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          connect) _podman_connect
            return
            ;;

          create) _podman_create
            return
            ;;

          disconnect) _podman_disconnect
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          prune) _podman_prune
            return
            ;;

          reload) _podman_reload
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" connect create disconnect exists inspect ls prune reload rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_connect ()
{
    local cur word_list
    word_list=" --alias" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_create ()
{
    local cur word_list
    word_list=" --disable-dns -d --driver --gateway --internal --ip-range --ipv6 --label -o --opt --subnet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_disconnect ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_inspect ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --no-trunc --noheading -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_reload ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_network_rm ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_play ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          play)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          kube) _podman_kube
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" kube" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_play_kube ()
{
    local cur word_list
    word_list=" --authfile --build --cert-dir --configmap --creds --down --ip --log-driver --mac-address --network -q --quiet --seccomp-profile-root --start --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pod ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          pod)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          kill) _podman_kill
            return
            ;;

          logs) _podman_logs
            return
            ;;

          pause) _podman_pause
            return
            ;;

          prune) _podman_prune
            return
            ;;

          ps) _podman_ps
            return
            ;;

          restart) _podman_restart
            return
            ;;

          rm) _podman_rm
            return
            ;;

          start) _podman_start
            return
            ;;

          stats) _podman_stats
            return
            ;;

          stop) _podman_stop
            return
            ;;

          top) _podman_top
            return
            ;;

          unpause) _podman_unpause
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create exists inspect kill logs pause prune ps restart rm start stats stop top unpause" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_create ()
{
    local cur word_list
    word_list=" --add-host --cgroup-parent --dns --dns-opt --dns-search --gidmap -h --hostname --infra --infra-command --infra-conmon-pidfile --infra-image --infra-name --ip -l --label --label-file --mac-address -n --name --network --network-alias --no-hosts --pid --pod-id-file -p --publish --replace --share --subgidname --subuidname --uidmap --userns" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_inspect ()
{
    local cur word_list
    word_list=" -f --format -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_kill ()
{
    local cur word_list
    word_list=" -a --all -l --latest -s --signal" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_logs ()
{
    local cur word_list
    word_list=" -c --container -f --follow -l --latest --since --tail -t --timestamps --until" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_pause ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_prune ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_ps ()
{
    local cur word_list
    word_list=" --ctr-ids --ctr-names --ctr-status -f --filter --format -l --latest --no-trunc --noheading --ns -q --quiet --sort" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force -i --ignore -l --latest --pod-id-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_start ()
{
    local cur word_list
    word_list=" -a --all -l --latest --pod-id-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_stats ()
{
    local cur word_list
    word_list=" -a --all --format -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_stop ()
{
    local cur word_list
    word_list=" -a --all -i --ignore -l --latest --pod-id-file -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_pod_unpause ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_port ()
{
    local cur word_list
    word_list=" -a --all -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_ps ()
{
    local cur word_list
    word_list=" -a --all --external -f --filter --format -n --last -l --latest --no-trunc --noheading --ns -p --pod -q --quiet -s --size --sort --sync -w --watch" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_pull ()
{
    local cur word_list
    word_list=" --all-tags --arch --authfile --cert-dir --creds --disable-content-trust --os --platform -q --quiet --tls-verify --variant" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_push ()
{
    local cur word_list
    word_list=" --authfile --cert-dir --compress --creds --digestfile --disable-content-trust -f --format -q --quiet --remove-signatures --sign-by --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_restart ()
{
    local cur word_list
    word_list=" -a --all -l --latest --running -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_rm ()
{
    local cur word_list
    word_list=" -a --all --cidfile -f --force -i --ignore -l --latest -v --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_rmi ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_run ()
{
    local cur word_list
    word_list=" --add-host --annotation --arch -a --attach --authfile --blkio-weight --blkio-weight-device --cap-add --cap-drop --cgroup-conf --cgroup-parent --cgroupns --cgroups --cidfile --conmon-pidfile --cpu-period --cpu-quota --cpu-rt-period --cpu-rt-runtime --cpu-shares --cpus --cpuset-cpus --cpuset-mems -d --detach --detach-keys --device --device-cgroup-rule --device-read-bps --device-read-iops --device-write-bps --device-write-iops --disable-content-trust --dns --dns-opt --dns-search --entrypoint -e --env --env-file --env-host --expose --gidmap --group-add --health-cmd --health-interval --health-retries --health-start-period --health-timeout -h --hostname --http-proxy --image-volume --init --init-path -i --interactive --ip --ipc --kernel-memory -l --label --label-file --log-driver --log-opt --mac-address -m --memory --memory-reservation --memory-swap --memory-swappiness --mount --name --network --network-alias --no-healthcheck --no-hosts --oom-kill-disable --oom-score-adj --os --personality --pid --pidfile --pids-limit --platform --pod --pod-id-file --preserve-fds --privileged -p --publish -P --publish-all --pull -q --quiet --read-only --read-only-tmpfs --replace --requires --restart --rm --rmi --rootfs --sdnotify --seccomp-policy --secret --security-opt --shm-size --sig-proxy --stop-signal --stop-timeout --subgidname --subuidname --sysctl --systemd --timeout --tls-verify --tmpfs -t --tty --tz --uidmap --ulimit --umask -u --user --userns --uts --variant -v --volume --volumes-from -w --workdir" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_save ()
{
    local cur word_list
    word_list=" --compress --format -m --multi-image-archive -o --output -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_search ()
{
    local cur word_list
    word_list=" --authfile -f --filter --format --limit --list-tags --no-trunc --tls-verify" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_secret ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          secret)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create inspect ls rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_create ()
{
    local cur word_list
    word_list=" --driver --driver-opts --env" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_inspect ()
{
    local cur word_list
    word_list=" --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_ls ()
{
    local cur word_list
    word_list=" --format --noheading" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_secret_rm ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_start ()
{
    local cur word_list
    word_list=" --all -a --attach --detach-keys -f --filter -i --interactive -l --latest --sig-proxy" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_stats ()
{
    local cur word_list
    word_list=" -a --all --format -i --interval -l --latest --no-reset --no-stream" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_stop ()
{
    local cur word_list
    word_list=" -a --all --cidfile -i --ignore -l --latest -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_system ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          system)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          connection) _podman_connection
            return
            ;;

          df) _podman_df
            return
            ;;

          info) _podman_info
            return
            ;;

          migrate) _podman_migrate
            return
            ;;

          prune) _podman_prune
            return
            ;;

          renumber) _podman_renumber
            return
            ;;

          reset) _podman_reset
            return
            ;;

          service) _podman_service
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" connection df info migrate prune renumber reset service" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_df ()
{
    local cur word_list
    word_list=" --format -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_info ()
{
    local cur word_list
    word_list=" -D --debug -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_migrate ()
{
    local cur word_list
    word_list=" --new-runtime" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_prune ()
{
    local cur word_list
    word_list=" -a --all --filter -f --force --volumes" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_reset ()
{
    local cur word_list
    word_list=" -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_system_service ()
{
    local cur word_list
    word_list=" --cors -t --time" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_top ()
{
    local cur word_list
    word_list=" -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unmount ()
{
    local cur word_list
    word_list=" -a --all -f --force -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unpause ()
{
    local cur word_list
    word_list=" -a --all" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_unshare ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          unshare)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          podman) _podman_podman
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" podman --rootless-cni" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_unshare_podman ()
{
    local cur word_list
    word_list=" --cgroup-manager --cni-config-dir --conmon -c --connection --events-backend --help --hooks-dir --identity --log-level --namespace --network-cmd-path -r --remote --root --runroot --runtime --runtime-flag --storage-driver --storage-opt --syslog --tmpdir --url -v --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_version ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_volume ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          volume)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          export) _podman_export
            return
            ;;

          import) _podman_import
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          prune) _podman_prune
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create exists export import inspect ls prune rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_create ()
{
    local cur word_list
    word_list=" --driver -l --label -o --opt" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_inspect ()
{
    local cur word_list
    word_list=" -a --all -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --noheading -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_wait ()
{
    local cur word_list
    word_list=" --condition -i --interval -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_version ()
{
    local cur word_list
    word_list=" -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_volume ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          volume)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          create) _podman_create
            return
            ;;

          exists) _podman_exists
            return
            ;;

          export) _podman_export
            return
            ;;

          import) _podman_import
            return
            ;;

          inspect) _podman_inspect
            return
            ;;

          ls) _podman_ls
            return
            ;;

          prune) _podman_prune
            return
            ;;

          rm) _podman_rm
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" create exists export import inspect ls prune rm" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_create ()
{
    local cur word_list
    word_list=" --driver -l --label -o --opt" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_export ()
{
    local cur word_list
    word_list=" -o --output" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_inspect ()
{
    local cur word_list
    word_list=" -a --all -f --format" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_ls ()
{
    local cur word_list
    word_list=" -f --filter --format --noheading -q --quiet" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_prune ()
{
    local cur word_list
    word_list=" --filter -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_volume_rm ()
{
    local cur word_list
    word_list=" -a --all -f --force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_podman_wait ()
{
    local cur word_list
    word_list=" --condition -i --interval -l --latest" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _podman podman
