# Auto-generated with h2o

_rustup()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          show) _rustup_show
            return
            ;;

          update) _rustup_update
            return
            ;;

          check) _rustup_check
            return
            ;;

          default) _rustup_default
            return
            ;;

          toolchain) _rustup_toolchain
            return
            ;;

          target) _rustup_target
            return
            ;;

          component) _rustup_component
            return
            ;;

          override) _rustup_override
            return
            ;;

          run) _rustup_run
            return
            ;;

          which) _rustup_which
            return
            ;;

          doc) _rustup_doc
            return
            ;;

          man) _rustup_man
            return
            ;;

          self) _rustup_self
            return
            ;;

          set) _rustup_set
            return
            ;;

          completions) _rustup_completions
            return
            ;;

      *)
          word_list=" show update check default toolchain target component override run which doc man self set completions -v --verbose -q --quiet -h --help -V --version"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_rustup_show ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          show)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          active-toolchain) _rustup_activetoolchain
            return
            ;;

          home) _rustup_home
            return
            ;;

          profile) _rustup_profile
            return
            ;;

          keys) _rustup_keys
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" active-toolchain home profile keys -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_activetoolchain ()
{
    local cur word_list
    word_list=" -h --help -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_home ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_profile ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_show_keys ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_update ()
{
    local cur word_list
    word_list=" --force --force-non-host -h --help --no-self-update" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_check ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_default ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_toolchain ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          toolchain)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _rustup_list
            return
            ;;

          install) _rustup_install
            return
            ;;

          uninstall) _rustup_uninstall
            return
            ;;

          link) _rustup_link
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list install uninstall link -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolchain_list ()
{
    local cur word_list
    word_list=" -h --help -v --verbose" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolchain_install ()
{
    local cur word_list
    word_list=" --allow-downgrade --force -h --help --no-self-update -c --component --profile -t --target" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolchain_uninstall ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_toolchain_link ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_target ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          target)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _rustup_list
            return
            ;;

          add) _rustup_add
            return
            ;;

          remove) _rustup_remove
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list add remove -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_target_list ()
{
    local cur word_list
    word_list=" -h --help --installed --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_target_add ()
{
    local cur word_list
    word_list=" -h --help --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_target_remove ()
{
    local cur word_list
    word_list=" -h --help --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_component ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          component)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _rustup_list
            return
            ;;

          add) _rustup_add
            return
            ;;

          remove) _rustup_remove
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list add remove -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_component_list ()
{
    local cur word_list
    word_list=" -h --help --installed --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_component_add ()
{
    local cur word_list
    word_list=" -h --help --target --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_component_remove ()
{
    local cur word_list
    word_list=" -h --help --target --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_override ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          override)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          list) _rustup_list
            return
            ;;

          set) _rustup_set
            return
            ;;

          unset) _rustup_unset
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" list set unset -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_override_list ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_override_set ()
{
    local cur word_list
    word_list=" -h --help --path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_override_unset ()
{
    local cur word_list
    word_list=" -h --help --nonexistent --path" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_run ()
{
    local cur word_list
    word_list=" -h --help --install" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_which ()
{
    local cur word_list
    word_list=" -h --help --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_doc ()
{
    local cur word_list
    word_list=" --alloc --book --cargo --core --edition-guide --embedded-book -h --help --nomicon --path --proc_macro --reference --rust-by-example --rustc --rustdoc --std --test --unstable-book --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_man ()
{
    local cur word_list
    word_list=" -h --help --toolchain" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_self ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          self)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          update) _rustup_update
            return
            ;;

          uninstall) _rustup_uninstall
            return
            ;;

          upgrade-data) _rustup_upgradedata
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" update uninstall upgrade-data -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_self_update ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_self_uninstall ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_self_upgradedata ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_set ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          set)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          auto-self-update) _rustup_autoselfupdate
            return
            ;;

          default-host) _rustup_defaulthost
            return
            ;;

          profile) _rustup_profile
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" auto-self-update default-host profile -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_autoselfupdate ()
{
    local cur word_list
    word_list=" -h --help -V --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_defaulthost ()
{
    local cur word_list
    word_list=" -h --help -V --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_profile ()
{
    local cur word_list
    word_list=" -h --help -V --version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_rustup_completions ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _rustup rustup
