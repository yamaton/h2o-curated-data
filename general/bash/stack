# Auto-generated with h2o

_stack()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          build) _stack_build
            return
            ;;

          install) _stack_install
            return
            ;;

          uninstall) _stack_uninstall
            return
            ;;

          test) _stack_test
            return
            ;;

          bench) _stack_bench
            return
            ;;

          haddock) _stack_haddock
            return
            ;;

          new) _stack_new
            return
            ;;

          templates) _stack_templates
            return
            ;;

          init) _stack_init
            return
            ;;

          setup) _stack_setup
            return
            ;;

          path) _stack_path
            return
            ;;

          ls) _stack_ls
            return
            ;;

          unpack) _stack_unpack
            return
            ;;

          update) _stack_update
            return
            ;;

          upgrade) _stack_upgrade
            return
            ;;

          upload) _stack_upload
            return
            ;;

          sdist) _stack_sdist
            return
            ;;

          dot) _stack_dot
            return
            ;;

          ghc) _stack_ghc
            return
            ;;

          hoogle) _stack_hoogle
            return
            ;;

          exec) _stack_exec
            return
            ;;

          run) _stack_run
            return
            ;;

          ghci) _stack_ghci
            return
            ;;

          repl) _stack_repl
            return
            ;;

          runghc) _stack_runghc
            return
            ;;

          runhaskell) _stack_runhaskell
            return
            ;;

          script) _stack_script
            return
            ;;

          eval) _stack_eval
            return
            ;;

          clean) _stack_clean
            return
            ;;

          purge) _stack_purge
            return
            ;;

          query) _stack_query
            return
            ;;

          list) _stack_list
            return
            ;;

          ide) _stack_ide
            return
            ;;

          docker) _stack_docker
            return
            ;;

          config) _stack_config
            return
            ;;

          hpc) _stack_hpc
            return
            ;;

      *)
          word_list=" build install uninstall test bench haddock new templates init setup path ls unpack update upgrade upload sdist dot ghc hoogle exec run ghci repl runghc runhaskell script eval clean purge query list ide docker config hpc --help --version --numeric-version --hpack-numeric-version --docker --nix --verbosity -v --verbose --silent --time-in-log --no-time-in-log --stack-root --work-dir --system-ghc --no-system-ghc --install-ghc --no-install-ghc --arch --ghc-variant --ghc-build -j --jobs --extra-include-dirs --extra-lib-dirs --custom-preprocessor-extensions --with-gcc --with-hpack --skip-ghc-check --no-skip-ghc-check --skip-msys --no-skip-msys --local-bin-path --setup-info-yaml --modify-code-page --no-modify-code-page --allow-different-user --no-allow-different-user --dump-logs --no-dump-logs --color --colour --snapshot-location-base --resolver --compiler --terminal --no-terminal --stack-colors --stack-colours --terminal-width --stack-yaml --lock-file --full"
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_stack_build ()
{
    local cur word_list
    word_list=" --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_install ()
{
    local cur word_list
    word_list=" --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_uninstall ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_test ()
{
    local cur word_list
    word_list=" --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_bench ()
{
    local cur word_list
    word_list=" --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_haddock ()
{
    local cur word_list
    word_list=" --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_new ()
{
    local cur word_list
    word_list=" --bare -p --param --omit-packages --force --ignore-subdirs --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_templates ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_init ()
{
    local cur word_list
    word_list=" --omit-packages --force --ignore-subdirs --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_setup ()
{
    local cur word_list
    word_list=" --reinstall --no-reinstall --ghc-bindist --ghcjs-boot-options --ghcjs-boot-clean --no-ghcjs-boot-clean --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_path ()
{
    local cur word_list
    word_list=" --stack-root --project-root --config-location --bin-path --programs --compiler-exe --compiler-bin --compiler-tools-bin --local-bin --extra-include-dirs --extra-library-dirs --snapshot-pkg-db --local-pkg-db --global-pkg-db --ghc-package-path --snapshot-install-root --local-install-root --snapshot-doc-root --local-doc-root --local-hoogle-root --dist-dir --local-hpc-root --local-bin-path --ghc-paths --global-stack-root --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ls ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          ls)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          snapshots) _stack_snapshots
            return
            ;;

          dependencies) _stack_dependencies
            return
            ;;

          stack-colors) _stack_stackcolors
            return
            ;;

          stack-colours) _stack_stackcolours
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" snapshots dependencies stack-colors stack-colours --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ls_snapshots ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          snapshots)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          remote) _ls_remote
            return
            ;;

          local) _ls_local
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" remote local -l --lts -n --nightly -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ls_dependencies ()
{
    local cur word_list
    word_list=" --separator --license --no-license --external --no-external --include-base --no-include-base --depth --prune --flag --test --bench --global-hints -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ls_stackcolors ()
{
    local cur word_list
    word_list=" --basic --no-basic --sgr --no-sgr --example --no-example -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ls_stackcolours ()
{
    local cur word_list
    word_list=" --basic --no-basic --sgr --no-sgr --example --no-example -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_unpack ()
{
    local cur word_list
    word_list=" --to --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_update ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_upgrade ()
{
    local cur word_list
    word_list=" --source-only --binary-platform --force-download --binary-version --github-org --github-repo --binary-only --git --git-repo --git-branch --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_upload ()
{
    local cur word_list
    word_list=" --pvp-bounds --ignore-check --test-tarball --no-test-tarball --tar-dir --candidate --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_sdist ()
{
    local cur word_list
    word_list=" --pvp-bounds --ignore-check --test-tarball --no-test-tarball --tar-dir --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_dot ()
{
    local cur word_list
    word_list=" --external --no-external --include-base --no-include-base --depth --prune --flag --test --bench --global-hints --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ghc ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_hoogle ()
{
    local cur word_list
    word_list=" --setup --no-setup --rebuild --server --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_exec ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_run ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ghci ()
{
    local cur word_list
    word_list=" --pedantic --ghci-options --ghc-options --flag --with-ghc --load --no-load --package --main-is --load-local-deps --package-hiding --no-package-hiding --only-main --trace --profile --no-strip --test --no-test --bench --no-bench --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_repl ()
{
    local cur word_list
    word_list=" --pedantic --ghci-options --ghc-options --flag --with-ghc --load --no-load --package --main-is --load-local-deps --package-hiding --no-package-hiding --only-main --trace --profile --no-strip --test --no-test --bench --no-bench --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_runghc ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_runhaskell ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_script ()
{
    local cur word_list
    word_list=" --package --compile --optimize --ghc-options --extra-dep --no-run --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_eval ()
{
    local cur word_list
    word_list=" --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_clean ()
{
    local cur word_list
    word_list=" --full --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_purge ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_query ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_list ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_ide ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          ide)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          packages) _stack_packages
            return
            ;;

          targets) _stack_targets
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" packages targets --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ide_packages ()
{
    local cur word_list
    word_list=" --stdout --cabal-files --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_ide_targets ()
{
    local cur word_list
    word_list=" --stdout --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_docker ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          docker)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          pull) _stack_pull
            return
            ;;

          reset) _stack_reset
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" pull reset --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_pull ()
{
    local cur word_list
    word_list=" --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_docker_reset ()
{
    local cur word_list
    word_list=" --keep-home --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_config ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          config)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          set) _stack_set
            return
            ;;

          env) _stack_env
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" set env --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_set ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          set)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          resolver) _config_resolver
            return
            ;;

          system-ghc) _config_systemghc
            return
            ;;

          install-ghc) _config_installghc
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" resolver system-ghc install-ghc --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_resolver ()
{
    local cur word_list
    word_list=" -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_systemghc ()
{
    local cur word_list
    word_list=" --global -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_set_installghc ()
{
    local cur word_list
    word_list=" --global -h --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_config_env ()
{
    local cur word_list
    word_list=" --locals --no-locals --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --locale-utf8 --no-locale-utf8 --keep-ghc-rts --no-keep-ghc-rts --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_stack_hpc ()
{
    local cur word_list
    local i=1 subcommand_index

    # take the last word that's NOT starting with -
    while [[ ( $i < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          hpc)
            subcommand_index=$i
            break
            ;;
        esac
        (( i++ ))
    done

    while [[ ( $subcommand_index < $COMP_CWORD ) ]]; do
        local s="${COMP_WORDS[subcommand_index}"
        case "$s" in
          report) _stack_report
            return
            ;;

          *)  ;; 
        esac
        (( subcommand_index++ ))
    done

    word_list=" report --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_hpc_report ()
{
    local cur word_list
    word_list=" --all --destdir --open --setup-info-yaml --snapshot-location-base --help" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _stack stack
