# Auto-generated with h2o

_terraform()
{
    local i=1 cmd cur word_list
    cur="${COMP_WORDS[COMP_CWORD]}"

    # take the last word that's NOT starting with -
    while [[ ( "$i" < "$COMP_CWORD" ) ]]; do
        local s="${COMP_WORDS[i]}"
        case "$s" in
          -*) ;;
          *)
            cmd="$s"
            ;;
        esac
        (( i++ ))
    done

    case "$cmd" in
          init) _terraform_init
            return
            ;;

          validate) _terraform_validate
            return
            ;;

          plan) _terraform_plan
            return
            ;;

          apply) _terraform_apply
            return
            ;;

          destroy) _terraform_destroy
            return
            ;;

          console) _terraform_console
            return
            ;;

          fmt) _terraform_fmt
            return
            ;;

          force-unlock) _terraform_force-unlock
            return
            ;;

          get) _terraform_get
            return
            ;;

          graph) _terraform_graph
            return
            ;;

          import) _terraform_import
            return
            ;;

          login) _terraform_login
            return
            ;;

          logout) _terraform_logout
            return
            ;;

          output) _terraform_output
            return
            ;;

          providers) _terraform_providers
            return
            ;;

          refresh) _terraform_refresh
            return
            ;;

          show) _terraform_show
            return
            ;;

          state) _terraform_state
            return
            ;;

          taint) _terraform_taint
            return
            ;;

          test) _terraform_test
            return
            ;;

          untaint) _terraform_untaint
            return
            ;;

          version) _terraform_version
            return
            ;;

          workspace) _terraform_workspace
            return
            ;;

      *)
          word_list=" init validate plan apply destroy console fmt force-unlock get graph import login logout output providers refresh show state taint test untaint version workspace -chdir -help -version" 
          COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
          ;;
    esac

}

_terraform_init ()
{
    local cur word_list
    word_list=" -backend -backend-config -force-copy -from-module -get -input -no-color -plugin-dir -reconfigure -migrate-state -upgrade -lockfile -ignore-remote-version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_validate ()
{
    local cur word_list
    word_list=" -json -no-color" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_plan ()
{
    local cur word_list
    word_list=" -destroy -refresh-only -refresh -replace -target -var -var-file -compact-warnings -detailed-exitcode -input -lock -lock-timeout -no-color -out -parallelism -state" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_apply ()
{
    local cur word_list
    word_list=" -auto-approve -backup -compact-warnings -lock -lock-timeout -input -no-color -parallelism -state -state-out" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_console ()
{
    local cur word_list
    word_list=" -state -var -var-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_fmt ()
{
    local cur word_list
    word_list=" -list -write -diff -check -no-color -recursive" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_force-unlock ()
{
    local cur word_list
    word_list=" -force" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_get ()
{
    local cur word_list
    word_list=" -update -no-color" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_graph ()
{
    local cur word_list
    word_list=" -plan -draw-cycles -type -module-depth" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_import ()
{
    local cur word_list
    word_list=" -config -allow-missing-config -input -lock -lock-timeout -no-color -var -var-file -ignore-remote-version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_output ()
{
    local cur word_list
    word_list=" -state -no-color -json -raw" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_refresh ()
{
    local cur word_list
    word_list=" -compact-warnings -input -lock -lock-timeout -no-color -target -var -var-file" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_show ()
{
    local cur word_list
    word_list=" -no-color -json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_taint ()
{
    local cur word_list
    word_list=" -allow-missing -lock -lock-timeout -ignore-remote-version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_test ()
{
    local cur word_list
    word_list=" - - - -compact-warnings -junit-xml -no-color" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_untaint ()
{
    local cur word_list
    word_list=" -allow-missing -lock -lock-timeout -ignore-remote-version" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

_terraform_version ()
{
    local cur word_list
    word_list=" -json" 
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${word_list}" -- "${cur}") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _terraform terraform
