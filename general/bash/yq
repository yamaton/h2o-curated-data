# Auto-generated with h2o

_yq()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" completion eval eval-all help shell-completion"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        completion) _yq_completion
            return
            ;;

        eval) _yq_eval
            return
            ;;

        eval-all) _yq_evalall
            return
            ;;

        help) _yq_help
            return
            ;;

        shell-completion) _yq_shellcompletion
            return
            ;;

    esac

    local word_list=" completion eval eval-all help shell-completion -C --colors -e --exit-status --expression --from-file -f --front-matter --header-preprocess -h --help -I --indent -i --inplace -p --input-format -M --no-colors -N --no-doc -0 --nul-output -n --null-input -o --output-format -P --prettyPrint -s --split-exp --split-exp-file -r --unwrapScalar -v --verbose -V --version --xml-attribute-prefix --xml-content-name --xml-directive-name --xml-keep-namespace --xml-proc-inst-prefix --xml-raw-token --xml-skip-directives --xml-skip-proc-inst --xml-strict-mode"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_yq_completion()
{
    local word_list="  -h --help -C --colors -e --exit-status --expression --from-file -f --front-matter --header-preprocess -I --indent -i --inplace -p --input-format -M --no-colors -N --no-doc -0 --nul-output -n --null-input -o --output-format -P --prettyPrint -s --split-exp --split-exp-file -r --unwrapScalar -v --verbose --xml-attribute-prefix --xml-content-name --xml-directive-name --xml-keep-namespace --xml-proc-inst-prefix --xml-raw-token --xml-skip-directives --xml-skip-proc-inst --xml-strict-mode"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_yq_eval()
{
    local word_list="  -h --help -C --colors -e --exit-status --expression --from-file -f --front-matter --header-preprocess -I --indent -i --inplace -p --input-format -M --no-colors -N --no-doc -0 --nul-output -n --null-input -o --output-format -P --prettyPrint -s --split-exp --split-exp-file -r --unwrapScalar -v --verbose --xml-attribute-prefix --xml-content-name --xml-directive-name --xml-keep-namespace --xml-proc-inst-prefix --xml-raw-token --xml-skip-directives --xml-skip-proc-inst --xml-strict-mode"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_yq_evalall()
{
    local word_list="  -h --help -C --colors -e --exit-status --expression --from-file -f --front-matter --header-preprocess -I --indent -i --inplace -p --input-format -M --no-colors -N --no-doc -0 --nul-output -n --null-input -o --output-format -P --prettyPrint -s --split-exp --split-exp-file -r --unwrapScalar -v --verbose --xml-attribute-prefix --xml-content-name --xml-directive-name --xml-keep-namespace --xml-proc-inst-prefix --xml-raw-token --xml-skip-directives --xml-skip-proc-inst --xml-strict-mode"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_yq_help()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_yq_shellcompletion()
{
    local word_list="  -h --help -C --colors -e --exit-status --expression --from-file -f --front-matter --header-preprocess -I --indent -i --inplace -p --input-format -M --no-colors -N --no-doc -0 --nul-output -n --null-input -o --output-format -P --prettyPrint -s --split-exp --split-exp-file -r --unwrapScalar -v --verbose --xml-attribute-prefix --xml-content-name --xml-directive-name --xml-keep-namespace --xml-proc-inst-prefix --xml-raw-token --xml-skip-directives --xml-skip-proc-inst --xml-strict-mode"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _yq yq
