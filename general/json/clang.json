{
  "name": "clang",
  "description": "clang",
  "options": [
    {
      "names": [
        "-#"
      ],
      "argument": "##",
      "description": "Print (but do not run) the commands to run for this compilation"
    },
    {
      "names": [
        "--analyzer-output"
      ],
      "argument": "<value>",
      "description": "Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|text)."
    },
    {
      "names": [
        "--analyze"
      ],
      "argument": "",
      "description": "Run the static analyzer"
    },
    {
      "names": [
        "-arcmt-migrate-emit-errors"
      ],
      "argument": "",
      "description": "Emit ARC errors even if the migrator can fix them"
    },
    {
      "names": [
        "-arcmt-migrate-report-output"
      ],
      "argument": "<value>",
      "description": "Output path for the plist report"
    },
    {
      "names": [
        "-B"
      ],
      "argument": "<dir>",
      "description": "Add <dir> to search path for binaries and object files used implicitly"
    },
    {
      "names": [
        "-CC"
      ],
      "argument": "",
      "description": "Include comments from within macros in preprocessed output"
    },
    {
      "names": [
        "-cl-denorms-are-zero"
      ],
      "argument": "",
      "description": "OpenCL only. Allow denormals to be flushed to zero."
    },
    {
      "names": [
        "-cl-fast-relaxed-math"
      ],
      "argument": "",
      "description": "OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__."
    },
    {
      "names": [
        "-cl-finite-math-only"
      ],
      "argument": "",
      "description": "OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf."
    },
    {
      "names": [
        "-cl-fp32-correctly-rounded-divide-sqrt"
      ],
      "argument": "",
      "description": "OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded."
    },
    {
      "names": [
        "-cl-kernel-arg-info"
      ],
      "argument": "",
      "description": "OpenCL only. Generate kernel argument metadata."
    },
    {
      "names": [
        "-cl-mad-enable"
      ],
      "argument": "",
      "description": "OpenCL only. Allow use of less precise MAD computations in the generated binary."
    },
    {
      "names": [
        "-cl-no-signed-zeros"
      ],
      "argument": "",
      "description": "OpenCL only. Allow use of less precise no signed zeros computations in the generated binary."
    },
    {
      "names": [
        "-cl-opt-disable"
      ],
      "argument": "",
      "description": "OpenCL only. This option disables all optimizations. By default optimizations are enabled."
    },
    {
      "names": [
        "-cl-single-precision-constant"
      ],
      "argument": "",
      "description": "OpenCL only. Treat double precision floating-point constant as single precision constant."
    },
    {
      "names": [
        "-cl-std"
      ],
      "argument": "<value>",
      "description": "OpenCL language standard to compile for."
    },
    {
      "names": [
        "-cl-strict-aliasing"
      ],
      "argument": "",
      "description": "OpenCL only. This option is added for compatibility with OpenCL 1.0."
    },
    {
      "names": [
        "-cl-uniform-work-group-size"
      ],
      "argument": "",
      "description": "OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel"
    },
    {
      "names": [
        "-cl-unsafe-math-optimizations"
      ],
      "argument": "",
      "description": "OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable."
    },
    {
      "names": [
        "--config"
      ],
      "argument": "<value>",
      "description": "Specifies configuration file"
    },
    {
      "names": [
        "--cuda-compile-host-device"
      ],
      "argument": "",
      "description": "Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations."
    },
    {
      "names": [
        "--cuda-device-only"
      ],
      "argument": "",
      "description": "Compile CUDA code for device only"
    },
    {
      "names": [
        "--cuda-gpu-arch"
      ],
      "argument": "<value>",
      "description": "CUDA GPU architecture (e.g. sm_35).  May be specified more than once."
    },
    {
      "names": [
        "--cuda-host-only"
      ],
      "argument": "",
      "description": "Compile CUDA code for host only.  Has no effect on non-CUDA compilations."
    },
    {
      "names": [
        "--cuda-include-ptx"
      ],
      "argument": "<value>",
      "description": "Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once."
    },
    {
      "names": [
        "--cuda-noopt-device-debug"
      ],
      "argument": "",
      "description": "Enable device-side debug info generation. Disables ptxas optimizations."
    },
    {
      "names": [
        "--cuda-path-ignore-env"
      ],
      "argument": "",
      "description": "Ignore environment variables to detect CUDA installation"
    },
    {
      "names": [
        "--cuda-path"
      ],
      "argument": "<value>",
      "description": "CUDA installation path"
    },
    {
      "names": [
        "-cxx-isystem"
      ],
      "argument": "<directory>",
      "description": "Add directory to the C++ SYSTEM include search path"
    },
    {
      "names": [
        "-C"
      ],
      "argument": "",
      "description": "Include comments in preprocessed output"
    },
    {
      "names": [
        "-c"
      ],
      "argument": "",
      "description": "Only run preprocess, compile, and assemble steps"
    },
    {
      "names": [
        "-dD"
      ],
      "argument": "",
      "description": "Print macro definitions in -E mode in addition to normal output"
    },
    {
      "names": [
        "-dependency-dot"
      ],
      "argument": "<value>",
      "description": "Filename to write DOT-formatted header dependencies to"
    },
    {
      "names": [
        "-dependency-file"
      ],
      "argument": "<value>",
      "description": "Filename (or -) to write dependency output to"
    },
    {
      "names": [
        "-dI"
      ],
      "argument": "",
      "description": "Print include directives in -E mode in addition to normal output"
    },
    {
      "names": [
        "-dM"
      ],
      "argument": "",
      "description": "Print macro definitions in -E mode instead of normal output"
    },
    {
      "names": [
        "-D"
      ],
      "argument": "<macro>=<value>",
      "description": "Define <macro> to <value> (or 1 if <value> omitted)"
    },
    {
      "names": [
        "-emit-ast"
      ],
      "argument": "",
      "description": "Emit Clang AST files for source inputs"
    },
    {
      "names": [
        "-emit-interface-stubs"
      ],
      "argument": "",
      "description": "Generate Inteface Stub Files."
    },
    {
      "names": [
        "-emit-llvm"
      ],
      "argument": "",
      "description": "Use the LLVM representation for assembler and object files"
    },
    {
      "names": [
        "-emit-merged-ifs"
      ],
      "argument": "",
      "description": "Generate Interface Stub Files, emit merged text not binary."
    },
    {
      "names": [
        "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"
      ],
      "argument": "",
      "description": "Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark"
    },
    {
      "names": [
        "-E"
      ],
      "argument": "",
      "description": "Only run the preprocessor"
    },
    {
      "names": [
        "-faddrsig"
      ],
      "argument": "",
      "description": "Emit an address-significance table"
    },
    {
      "names": [
        "-faligned-allocation"
      ],
      "argument": "",
      "description": "Enable C++17 aligned allocation functions"
    },
    {
      "names": [
        "-fallow-editor-placeholders"
      ],
      "argument": "",
      "description": "Treat editor placeholders as valid source code"
    },
    {
      "names": [
        "-fansi-escape-codes"
      ],
      "argument": "",
      "description": "Use ANSI escape codes for diagnostics"
    },
    {
      "names": [
        "-fapple-kext"
      ],
      "argument": "",
      "description": "Use Apple's kernel extensions ABI"
    },
    {
      "names": [
        "-fapple-link-rtlib"
      ],
      "argument": "",
      "description": "Force linking the clang builtins runtime library"
    },
    {
      "names": [
        "-fapple-pragma-pack"
      ],
      "argument": "",
      "description": "Enable Apple gcc-compatible #pragma pack handling"
    },
    {
      "names": [
        "-fapplication-extension"
      ],
      "argument": "",
      "description": "Restrict code to those available for App Extensions"
    },
    {
      "names": [
        "-fblocks"
      ],
      "argument": "",
      "description": "Enable the 'blocks' language feature"
    },
    {
      "names": [
        "-fborland-extensions"
      ],
      "argument": "",
      "description": "Accept non-standard constructs supported by the Borland compiler"
    },
    {
      "names": [
        "-fbuild-session-file"
      ],
      "argument": "<file>",
      "description": "Use the last modification time of <file> as the build session timestamp"
    },
    {
      "names": [
        "-fbuild-session-timestamp"
      ],
      "argument": "<time since Epoch in seconds>",
      "description": "Time when the current build session started"
    },
    {
      "names": [
        "-fbuiltin-module-map"
      ],
      "argument": "",
      "description": "Load the clang builtins module map file."
    },
    {
      "names": [
        "-fc++-static-destructors"
      ],
      "argument": "",
      "description": "Enable C++ static destructor registration (the default)"
    },
    {
      "names": [
        "-fcall-saved-x10"
      ],
      "argument": "",
      "description": "Make the x10 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x11"
      ],
      "argument": "",
      "description": "Make the x11 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x12"
      ],
      "argument": "",
      "description": "Make the x12 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x13"
      ],
      "argument": "",
      "description": "Make the x13 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x14"
      ],
      "argument": "",
      "description": "Make the x14 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x15"
      ],
      "argument": "",
      "description": "Make the x15 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x18"
      ],
      "argument": "",
      "description": "Make the x18 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x8"
      ],
      "argument": "",
      "description": "Make the x8 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcall-saved-x9"
      ],
      "argument": "",
      "description": "Make the x9 register call-saved (AArch64 only)"
    },
    {
      "names": [
        "-fcf-protection"
      ],
      "argument": "<value>",
      "description": "Instrument control-flow architecture protection. Options: return, branch, full, none."
    },
    {
      "names": [
        "-fcf-protection"
      ],
      "argument": "",
      "description": "Enable cf-protection in 'full' mode"
    },
    {
      "names": [
        "-fchar8_t"
      ],
      "argument": "",
      "description": "Enable C++ builtin type char8_t"
    },
    {
      "names": [
        "-fclang-abi-compat"
      ],
      "argument": "<version>",
      "description": "Attempt to match the ABI of Clang <version>"
    },
    {
      "names": [
        "-fcolor-diagnostics"
      ],
      "argument": "",
      "description": "Use colors in diagnostics"
    },
    {
      "names": [
        "-fcomment-block-commands"
      ],
      "argument": "<arg>",
      "description": "Treat each comma separated argument in <arg> as a documentation comment block command"
    },
    {
      "names": [
        "-fcomplete-member-pointers"
      ],
      "argument": "",
      "description": "Require member pointer base types to be complete if they would be significant under the Microsoft ABI"
    },
    {
      "names": [
        "-fconvergent-functions"
      ],
      "argument": "",
      "description": "Assume functions may be convergent"
    },
    {
      "names": [
        "-fcoroutines-ts"
      ],
      "argument": "",
      "description": "Enable support for the C++ Coroutines TS"
    },
    {
      "names": [
        "-fcoverage-mapping"
      ],
      "argument": "",
      "description": "Generate coverage mapping to enable code coverage analysis"
    },
    {
      "names": [
        "-fcs-profile-generate"
      ],
      "argument": "<directory>",
      "description": "Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fcs-profile-generate"
      ],
      "argument": "",
      "description": "Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fcuda-approx-transcendentals"
      ],
      "argument": "",
      "description": "Use approximate transcendental functions"
    },
    {
      "names": [
        "-fcuda-flush-denormals-to-zero"
      ],
      "argument": "",
      "description": "Flush denormal floating point values to zero in CUDA device mode."
    },
    {
      "names": [
        "-fcuda-short-ptr"
      ],
      "argument": "",
      "description": "Use 32-bit pointers for accessing const/local/shared address spaces."
    },
    {
      "names": [
        "-fcxx-exceptions"
      ],
      "argument": "",
      "description": "Enable C++ exceptions"
    },
    {
      "names": [
        "-fdata-sections"
      ],
      "argument": "",
      "description": "Place each data in its own section (ELF Only)"
    },
    {
      "names": [
        "-fdebug-compilation-dir"
      ],
      "argument": "<value>",
      "description": "The compilation directory to embed in the debug info."
    },
    {
      "names": [
        "-fdebug-default-version"
      ],
      "argument": "<value>",
      "description": "Default DWARF version to use, if a -g option caused DWARF debug info to be produced"
    },
    {
      "names": [
        "-fdebug-info-for-profiling"
      ],
      "argument": "",
      "description": "Emit extra debug info to make sample profile more accurate."
    },
    {
      "names": [
        "-fdebug-macro"
      ],
      "argument": "",
      "description": "Emit macro debug information"
    },
    {
      "names": [
        "-fdebug-prefix-map"
      ],
      "argument": "<value>",
      "description": "remap file source paths in debug info"
    },
    {
      "names": [
        "-fdebug-ranges-base-address"
      ],
      "argument": "",
      "description": "Use DWARF base address selection entries in debug_ranges"
    },
    {
      "names": [
        "-fdebug-types-section"
      ],
      "argument": "",
      "description": "Place debug types in their own section (ELF Only)"
    },
    {
      "names": [
        "-fdeclspec"
      ],
      "argument": "",
      "description": "Allow __declspec as a keyword"
    },
    {
      "names": [
        "-fdelayed-template-parsing"
      ],
      "argument": "",
      "description": "Parse templated function definitions at the end of the translation unit"
    },
    {
      "names": [
        "-fdelete-null-pointer-checks"
      ],
      "argument": "",
      "description": "Treat usage of null pointers as undefined behavior."
    },
    {
      "names": [
        "-fdiagnostics-absolute-paths"
      ],
      "argument": "",
      "description": "Print absolute paths in diagnostics"
    },
    {
      "names": [
        "-fdiagnostics-hotness-threshold"
      ],
      "argument": "<number>",
      "description": "Prevent optimization remarks from being output if they do not have at least this profile count"
    },
    {
      "names": [
        "-fdiagnostics-parseable-fixits"
      ],
      "argument": "",
      "description": "Print fix-its in machine parseable form"
    },
    {
      "names": [
        "-fdiagnostics-print-source-range-info"
      ],
      "argument": "",
      "description": "Print source range spans in numeric form"
    },
    {
      "names": [
        "-fdiagnostics-show-hotness"
      ],
      "argument": "",
      "description": "Enable profile hotness information in diagnostic line"
    },
    {
      "names": [
        "-fdiagnostics-show-note-include-stack"
      ],
      "argument": "",
      "description": "Display include stacks for diagnostic notes"
    },
    {
      "names": [
        "-fdiagnostics-show-option"
      ],
      "argument": "",
      "description": "Print option name with mappable diagnostics"
    },
    {
      "names": [
        "-fdiagnostics-show-template-tree"
      ],
      "argument": "",
      "description": "Print a template comparison tree for differing templates"
    },
    {
      "names": [
        "-fdigraphs"
      ],
      "argument": "",
      "description": "Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)"
    },
    {
      "names": [
        "-fdiscard-value-names"
      ],
      "argument": "",
      "description": "Discard value names in LLVM IR"
    },
    {
      "names": [
        "-fdollars-in-identifiers"
      ],
      "argument": "",
      "description": "Allow '$' in identifiers"
    },
    {
      "names": [
        "-fdouble-square-bracket-attributes"
      ],
      "argument": "",
      "description": "Enable '[[]]' attributes in all C and C++ language modes"
    },
    {
      "names": [
        "-fdwarf-exceptions"
      ],
      "argument": "",
      "description": "Use DWARF style exceptions"
    },
    {
      "names": [
        "-fembed-bitcode-marker"
      ],
      "argument": "",
      "description": "Embed placeholder LLVM IR data as a marker"
    },
    {
      "names": [
        "-fembed-bitcode"
      ],
      "argument": "<option>",
      "description": "Embed LLVM bitcode (option: off, all, bitcode, marker)"
    },
    {
      "names": [
        "-fembed-bitcode"
      ],
      "argument": "",
      "description": "Embed LLVM IR bitcode as data"
    },
    {
      "names": [
        "-femit-all-decls"
      ],
      "argument": "",
      "description": "Emit all declarations, even if unused"
    },
    {
      "names": [
        "-femulated-tls"
      ],
      "argument": "",
      "description": "Use emutls functions to access thread_local variables"
    },
    {
      "names": [
        "-fexceptions"
      ],
      "argument": "",
      "description": "Enable support for exception handling"
    },
    {
      "names": [
        "-fexperimental-isel"
      ],
      "argument": "",
      "description": "Enables the experimental global instruction selector"
    },
    {
      "names": [
        "-fexperimental-new-constant-interpreter"
      ],
      "argument": "",
      "description": "Enable the experimental new constant interpreter"
    },
    {
      "names": [
        "-fexperimental-new-pass-manager"
      ],
      "argument": "",
      "description": "Enables an experimental new pass manager in LLVM."
    },
    {
      "names": [
        "-ffast-math"
      ],
      "argument": "",
      "description": "Allow aggressive, lossy floating-point optimizations"
    },
    {
      "names": [
        "-ffile-prefix-map"
      ],
      "argument": "<value>",
      "description": "remap file source paths in debug info and predefined preprocessor macros"
    },
    {
      "names": [
        "-ffine-grained-bitfield-accesses"
      ],
      "argument": "",
      "description": "Use separate accesses for consecutive bitfield runs with legal widths and alignments."
    },
    {
      "names": [
        "-ffixed-point"
      ],
      "argument": "",
      "description": "Enable fixed point types"
    },
    {
      "names": [
        "-ffixed-r19"
      ],
      "argument": "",
      "description": "Reserve register r19 (Hexagon only)"
    },
    {
      "names": [
        "-ffixed-r9"
      ],
      "argument": "",
      "description": "Reserve the r9 register (ARM only)"
    },
    {
      "names": [
        "-ffixed-x10"
      ],
      "argument": "",
      "description": "Reserve the 10 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x11"
      ],
      "argument": "",
      "description": "Reserve the 11 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x12"
      ],
      "argument": "",
      "description": "Reserve the 12 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x13"
      ],
      "argument": "",
      "description": "Reserve the 13 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x14"
      ],
      "argument": "",
      "description": "Reserve the 14 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x15"
      ],
      "argument": "",
      "description": "Reserve the 15 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x16"
      ],
      "argument": "",
      "description": "Reserve the 16 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x17"
      ],
      "argument": "",
      "description": "Reserve the 17 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x18"
      ],
      "argument": "",
      "description": "Reserve the 18 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x19"
      ],
      "argument": "",
      "description": "Reserve the 19 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x1"
      ],
      "argument": "",
      "description": "Reserve the 1 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x20"
      ],
      "argument": "",
      "description": "Reserve the 20 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x21"
      ],
      "argument": "",
      "description": "Reserve the 21 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x22"
      ],
      "argument": "",
      "description": "Reserve the 22 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x23"
      ],
      "argument": "",
      "description": "Reserve the 23 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x24"
      ],
      "argument": "",
      "description": "Reserve the 24 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x25"
      ],
      "argument": "",
      "description": "Reserve the 25 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x26"
      ],
      "argument": "",
      "description": "Reserve the 26 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x27"
      ],
      "argument": "",
      "description": "Reserve the 27 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x28"
      ],
      "argument": "",
      "description": "Reserve the 28 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x29"
      ],
      "argument": "",
      "description": "Reserve the 29 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x2"
      ],
      "argument": "",
      "description": "Reserve the 2 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x30"
      ],
      "argument": "",
      "description": "Reserve the 30 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x31"
      ],
      "argument": "",
      "description": "Reserve the 31 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x3"
      ],
      "argument": "",
      "description": "Reserve the 3 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x4"
      ],
      "argument": "",
      "description": "Reserve the 4 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x5"
      ],
      "argument": "",
      "description": "Reserve the 5 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x6"
      ],
      "argument": "",
      "description": "Reserve the 6 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x7"
      ],
      "argument": "",
      "description": "Reserve the 7 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x8"
      ],
      "argument": "",
      "description": "Reserve the 8 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-ffixed-x9"
      ],
      "argument": "",
      "description": "Reserve the 9 register (AArch64/RISC-V only)"
    },
    {
      "names": [
        "-fforce-dwarf-frame"
      ],
      "argument": "",
      "description": "Always emit a debug frame section"
    },
    {
      "names": [
        "-fforce-emit-vtables"
      ],
      "argument": "",
      "description": "Emits more virtual tables to improve devirtualization"
    },
    {
      "names": [
        "-fforce-enable-int128"
      ],
      "argument": "",
      "description": "Enable support for int128_t type"
    },
    {
      "names": [
        "-ffp-contract"
      ],
      "argument": "<value>",
      "description": "Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma) | off (never fuse). Default is 'fast' for CUDA/HIP and 'on' otherwise."
    },
    {
      "names": [
        "-ffp-exception-behavior"
      ],
      "argument": "<value>",
      "description": "Specifies the exception behavior of floating-point operations."
    },
    {
      "names": [
        "-ffp-model"
      ],
      "argument": "<value>",
      "description": "Controls the semantics of floating-point calculations."
    },
    {
      "names": [
        "-ffreestanding"
      ],
      "argument": "",
      "description": "Assert that the compilation takes place in a freestanding environment"
    },
    {
      "names": [
        "-ffunction-sections"
      ],
      "argument": "",
      "description": "Place each function in its own section (ELF Only)"
    },
    {
      "names": [
        "-fgnu-keywords"
      ],
      "argument": "",
      "description": "Allow GNU-extension keywords regardless of language standard"
    },
    {
      "names": [
        "-fgnu-runtime"
      ],
      "argument": "",
      "description": "Generate output compatible with the standard GNU Objective-C runtime"
    },
    {
      "names": [
        "-fgnu89-inline"
      ],
      "argument": "",
      "description": "Use the gnu89 inline semantics"
    },
    {
      "names": [
        "-fgnuc-version"
      ],
      "argument": "<value>",
      "description": "Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)"
    },
    {
      "names": [
        "-fgpu-allow-device-init"
      ],
      "argument": "",
      "description": "Allow device side init function in HIP"
    },
    {
      "names": [
        "-fgpu-rdc"
      ],
      "argument": "",
      "description": "Generate relocatable device code, also known as separate compilation mode."
    },
    {
      "names": [
        "-fhip-new-launch-api"
      ],
      "argument": "",
      "description": "Use new kernel launching API for HIP."
    },
    {
      "names": [
        "-fimplicit-module-maps"
      ],
      "argument": "",
      "description": "Implicitly search the file system for module map files."
    },
    {
      "names": [
        "-finline-functions"
      ],
      "argument": "",
      "description": "Inline suitable functions"
    },
    {
      "names": [
        "-finline-hint-functions"
      ],
      "argument": "",
      "description": "Inline functions which are (explicitly or implicitly) marked inline"
    },
    {
      "names": [
        "-finstrument-function-entry-bare"
      ],
      "argument": "",
      "description": "Instrument function entry only, after inlining, without arguments to the instrumentation call"
    },
    {
      "names": [
        "-finstrument-functions-after-inlining"
      ],
      "argument": "",
      "description": "Like -finstrument-functions, but insert the calls after inlining"
    },
    {
      "names": [
        "-finstrument-functions"
      ],
      "argument": "",
      "description": "Generate calls to instrument function entry and exit"
    },
    {
      "names": [
        "-fintegrated-as"
      ],
      "argument": "",
      "description": "Enable the integrated assembler"
    },
    {
      "names": [
        "-fintegrated-cc1"
      ],
      "argument": "",
      "description": "Run cc1 in-process"
    },
    {
      "names": [
        "-fkeep-static-consts"
      ],
      "argument": "",
      "description": "Keep static const variables even if unused"
    },
    {
      "names": [
        "-flax-vector-conversions"
      ],
      "argument": "<value>",
      "description": "Enable implicit vector bit-casts"
    },
    {
      "names": [
        "-flto-jobs"
      ],
      "argument": "<value>",
      "description": "Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)"
    },
    {
      "names": [
        "-flto"
      ],
      "argument": "<value>",
      "description": "Set LTO mode to either 'full' or 'thin'"
    },
    {
      "names": [
        "-flto"
      ],
      "argument": "",
      "description": "Enable LTO in 'full' mode"
    },
    {
      "names": [
        "-fmacro-prefix-map"
      ],
      "argument": "<value>",
      "description": "remap file source paths in predefined preprocessor macros"
    },
    {
      "names": [
        "-fmath-errno"
      ],
      "argument": "",
      "description": "Require math functions to indicate errors by setting errno"
    },
    {
      "names": [
        "-fmax-type-align"
      ],
      "argument": "<value>",
      "description": "Specify the maximum alignment to enforce on pointers lacking an explicit alignment"
    },
    {
      "names": [
        "-fmerge-all-constants"
      ],
      "argument": "",
      "description": "Allow merging of constants"
    },
    {
      "names": [
        "-fmodule-file"
      ],
      "argument": "[<name>=]<file>",
      "description": "Specify the mapping of module name to precompiled module file, or load a module file if name is omitted."
    },
    {
      "names": [
        "-fmodule-map-file"
      ],
      "argument": "<file>",
      "description": "Load this module map file"
    },
    {
      "names": [
        "-fmodule-name"
      ],
      "argument": "<name>",
      "description": "Specify the name of the module to build"
    },
    {
      "names": [
        "-fmodules-cache-path"
      ],
      "argument": "<directory>",
      "description": "Specify the module cache path"
    },
    {
      "names": [
        "-fmodules-decluse"
      ],
      "argument": "",
      "description": "Require declaration of modules used within a module"
    },
    {
      "names": [
        "-fmodules-disable-diagnostic-validation"
      ],
      "argument": "",
      "description": "Disable validation of the diagnostic options when loading the module"
    },
    {
      "names": [
        "-fmodules-ignore-macro"
      ],
      "argument": "<value>",
      "description": "Ignore the definition of the given macro when building and loading modules"
    },
    {
      "names": [
        "-fmodules-prune-after"
      ],
      "argument": "<seconds>",
      "description": "Specify the interval (in seconds) after which a module file will be considered unused"
    },
    {
      "names": [
        "-fmodules-prune-interval"
      ],
      "argument": "<seconds>",
      "description": "Specify the interval (in seconds) between attempts to prune the module cache"
    },
    {
      "names": [
        "-fmodules-search-all"
      ],
      "argument": "",
      "description": "Search even non-imported modules to resolve references"
    },
    {
      "names": [
        "-fmodules-strict-decluse"
      ],
      "argument": "",
      "description": "Like -fmodules-decluse but requires all headers to be in modules"
    },
    {
      "names": [
        "-fmodules-ts"
      ],
      "argument": "",
      "description": "Enable support for the C++ Modules TS"
    },
    {
      "names": [
        "-fmodules-user-build-path"
      ],
      "argument": "<directory>",
      "description": "Specify the module user build path"
    },
    {
      "names": [
        "-fmodules-validate-input-files-content"
      ],
      "argument": "",
      "description": "Validate PCM input files based on content if mtime differs"
    },
    {
      "names": [
        "-fmodules-validate-once-per-build-session"
      ],
      "argument": "",
      "description": "Don't verify input files for the modules if the module has been successfully validated or loaded during this build session"
    },
    {
      "names": [
        "-fmodules-validate-system-headers"
      ],
      "argument": "",
      "description": "Validate the system headers that a module depends on when loading the module"
    },
    {
      "names": [
        "-fmodules"
      ],
      "argument": "",
      "description": "Enable the 'modules' language feature"
    },
    {
      "names": [
        "-fms-compatibility-version"
      ],
      "argument": "<value>",
      "description": "Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"
    },
    {
      "names": [
        "-fms-compatibility"
      ],
      "argument": "",
      "description": "Enable full Microsoft Visual C++ compatibility"
    },
    {
      "names": [
        "-fms-extensions"
      ],
      "argument": "",
      "description": "Accept some non-standard constructs supported by the Microsoft compiler"
    },
    {
      "names": [
        "-fmsc-version"
      ],
      "argument": "<value>",
      "description": "Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"
    },
    {
      "names": [
        "-fnew-alignment"
      ],
      "argument": "<align>",
      "description": "Specifies the largest alignment guaranteed by '::operator new(size_t)'"
    },
    {
      "names": [
        "-fno-access-control"
      ],
      "argument": "",
      "description": "Disable C++ access control"
    },
    {
      "names": [
        "-fno-addrsig"
      ],
      "argument": "",
      "description": "Don't emit an address-significance table"
    },
    {
      "names": [
        "-fno-assume-sane-operator-new"
      ],
      "argument": "",
      "description": "Don't assume that C++'s global operator new can't alias any pointer"
    },
    {
      "names": [
        "-fno-autolink"
      ],
      "argument": "",
      "description": "Disable generation of linker directives for automatic library linking"
    },
    {
      "names": [
        "-fno-builtin-"
      ],
      "argument": "<value>",
      "description": "Disable implicit builtin knowledge of a specific function"
    },
    {
      "names": [
        "-fno-builtin"
      ],
      "argument": "",
      "description": "Disable implicit builtin knowledge of functions"
    },
    {
      "names": [
        "-fno-c++-static-destructors"
      ],
      "argument": "",
      "description": "Disable C++ static destructor registration"
    },
    {
      "names": [
        "-fno-char8_t"
      ],
      "argument": "",
      "description": "Disable C++ builtin type char8_t"
    },
    {
      "names": [
        "-fno-common"
      ],
      "argument": "",
      "description": "Compile common globals like normal definitions"
    },
    {
      "names": [
        "-fno-complete-member-pointers"
      ],
      "argument": "",
      "description": "Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI"
    },
    {
      "names": [
        "-fno-constant-cfstrings"
      ],
      "argument": "",
      "description": "Disable creation of CodeFoundation-type constant strings"
    },
    {
      "names": [
        "-fno-coverage-mapping"
      ],
      "argument": "",
      "description": "Disable code coverage analysis"
    },
    {
      "names": [
        "-fno-crash-diagnostics"
      ],
      "argument": "",
      "description": "Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash"
    },
    {
      "names": [
        "-fno-debug-info-for-profiling"
      ],
      "argument": "",
      "description": "Do not emit extra debug info for sample profiler."
    },
    {
      "names": [
        "-fno-debug-macro"
      ],
      "argument": "",
      "description": "Do not emit macro debug information"
    },
    {
      "names": [
        "-fno-declspec"
      ],
      "argument": "",
      "description": "Disallow __declspec as a keyword"
    },
    {
      "names": [
        "-fno-delayed-template-parsing"
      ],
      "argument": "",
      "description": "Disable delayed template parsing"
    },
    {
      "names": [
        "-fno-delete-null-pointer-checks"
      ],
      "argument": "",
      "description": "Do not treat usage of null pointers as undefined behavior."
    },
    {
      "names": [
        "-fno-diagnostics-fixit-info"
      ],
      "argument": "",
      "description": "Do not include fixit information in diagnostics"
    },
    {
      "names": [
        "-fno-digraphs"
      ],
      "argument": "",
      "description": "Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'"
    },
    {
      "names": [
        "-fno-discard-value-names"
      ],
      "argument": "",
      "description": "Do not discard value names in LLVM IR"
    },
    {
      "names": [
        "-fno-dollars-in-identifiers"
      ],
      "argument": "",
      "description": "Disallow '$' in identifiers"
    },
    {
      "names": [
        "-fno-double-square-bracket-attributes"
      ],
      "argument": "",
      "description": "Disable '[[]]' attributes in all C and C++ language modes"
    },
    {
      "names": [
        "-fno-elide-constructors"
      ],
      "argument": "",
      "description": "Disable C++ copy constructor elision"
    },
    {
      "names": [
        "-fno-elide-type"
      ],
      "argument": "",
      "description": "Do not elide types when printing diagnostics"
    },
    {
      "names": [
        "-fno-experimental-isel"
      ],
      "argument": "",
      "description": "Disables the experimental global instruction selector"
    },
    {
      "names": [
        "-fno-experimental-new-pass-manager"
      ],
      "argument": "",
      "description": "Disables an experimental new pass manager in LLVM."
    },
    {
      "names": [
        "-fno-fine-grained-bitfield-accesses"
      ],
      "argument": "",
      "description": "Use large-integer access for consecutive bitfield runs."
    },
    {
      "names": [
        "-fno-fixed-point"
      ],
      "argument": "",
      "description": "Disable fixed point types"
    },
    {
      "names": [
        "-fno-force-dwarf-frame"
      ],
      "argument": "",
      "description": "Don't always emit a debug frame section"
    },
    {
      "names": [
        "-fno-force-enable-int128"
      ],
      "argument": "",
      "description": "Disable support for int128_t type"
    },
    {
      "names": [
        "-fno-gnu-inline-asm"
      ],
      "argument": "",
      "description": "Disable GNU style inline asm"
    },
    {
      "names": [
        "-fno-integrated-as"
      ],
      "argument": "",
      "description": "Disable the integrated assembler"
    },
    {
      "names": [
        "-fno-integrated-cc1"
      ],
      "argument": "",
      "description": "Spawn a separate process for each cc1"
    },
    {
      "names": [
        "-fno-jump-tables"
      ],
      "argument": "",
      "description": "Do not use jump tables for lowering switches"
    },
    {
      "names": [
        "-fno-lto"
      ],
      "argument": "",
      "description": "Disable LTO mode (default)"
    },
    {
      "names": [
        "-fno-merge-all-constants"
      ],
      "argument": "",
      "description": "Disallow merging of constants"
    },
    {
      "names": [
        "-fno-objc-infer-related-result-type"
      ],
      "argument": "",
      "description": "do not infer Objective-C related result type based on method family"
    },
    {
      "names": [
        "-fno-operator-names"
      ],
      "argument": "",
      "description": "Do not treat C++ operator name keywords as synonyms for operators"
    },
    {
      "names": [
        "-fno-plt"
      ],
      "argument": "",
      "description": "Do not use the PLT to make function calls"
    },
    {
      "names": [
        "-fno-preserve-as-comments"
      ],
      "argument": "",
      "description": "Do not preserve comments in inline assembly"
    },
    {
      "names": [
        "-fno-profile-generate"
      ],
      "argument": "",
      "description": "Disable generation of profile instrumentation."
    },
    {
      "names": [
        "-fno-profile-instr-generate"
      ],
      "argument": "",
      "description": "Disable generation of profile instrumentation."
    },
    {
      "names": [
        "-fno-profile-instr-use"
      ],
      "argument": "",
      "description": "Disable using instrumentation data for profile-guided optimization"
    },
    {
      "names": [
        "-fno-register-global-dtors-with-atexit"
      ],
      "argument": "",
      "description": "Don't use atexit or __cxa_atexit to register global destructors"
    },
    {
      "names": [
        "-fno-reroll-loops"
      ],
      "argument": "",
      "description": "Turn off loop reroller"
    },
    {
      "names": [
        "-fno-rtlib-add-rpath"
      ],
      "argument": "",
      "description": "Do not add -rpath with architecture-specific resource directory to the linker flags"
    },
    {
      "names": [
        "-fno-rtti-data"
      ],
      "argument": "",
      "description": "Control emission of RTTI data"
    },
    {
      "names": [
        "-fno-rtti"
      ],
      "argument": "",
      "description": "Disable generation of rtti information"
    },
    {
      "names": [
        "-fno-sanitize-address-poison-custom-array-cookie"
      ],
      "argument": "",
      "description": "Disable poisoning array cookies when using custom operator new[] in AddressSanitizer"
    },
    {
      "names": [
        "-fno-sanitize-address-use-after-scope"
      ],
      "argument": "",
      "description": "Disable use-after-scope detection in AddressSanitizer"
    },
    {
      "names": [
        "-fno-sanitize-address-use-odr-indicator"
      ],
      "argument": "",
      "description": "Disable ODR indicator globals"
    },
    {
      "names": [
        "-fno-sanitize-blacklist"
      ],
      "argument": "",
      "description": "Don't use blacklist file for sanitizers"
    },
    {
      "names": [
        "-fno-sanitize-cfi-canonical-jump-tables"
      ],
      "argument": "",
      "description": "Do not make the jump table addresses canonical in the symbol table"
    },
    {
      "names": [
        "-fno-sanitize-cfi-cross-dso"
      ],
      "argument": "",
      "description": "Disable control flow integrity (CFI) checks for cross-DSO calls."
    },
    {
      "names": [
        "-fno-sanitize-coverage"
      ],
      "argument": "<value>",
      "description": "Disable specified features of coverage instrumentation for Sanitizers"
    },
    {
      "names": [
        "-fno-sanitize-memory-track-origins"
      ],
      "argument": "",
      "description": "Disable origins tracking in MemorySanitizer"
    },
    {
      "names": [
        "-fno-sanitize-memory-use-after-dtor"
      ],
      "argument": "",
      "description": "Disable use-after-destroy detection in MemorySanitizer"
    },
    {
      "names": [
        "-fno-sanitize-recover"
      ],
      "argument": "<value>",
      "description": "Disable recovery for specified sanitizers"
    },
    {
      "names": [
        "-fno-sanitize-stats"
      ],
      "argument": "",
      "description": "Disable sanitizer statistics gathering."
    },
    {
      "names": [
        "-fno-sanitize-thread-atomics"
      ],
      "argument": "",
      "description": "Disable atomic operations instrumentation in ThreadSanitizer"
    },
    {
      "names": [
        "-fno-sanitize-thread-func-entry-exit"
      ],
      "argument": "",
      "description": "Disable function entry/exit instrumentation in ThreadSanitizer"
    },
    {
      "names": [
        "-fno-sanitize-thread-memory-access"
      ],
      "argument": "",
      "description": "Disable memory access instrumentation in ThreadSanitizer"
    },
    {
      "names": [
        "-fno-sanitize-trap"
      ],
      "argument": "<value>",
      "description": "Disable trapping for specified sanitizers"
    },
    {
      "names": [
        "-fno-short-wchar"
      ],
      "argument": "",
      "description": "Force wchar_t to be an unsigned int"
    },
    {
      "names": [
        "-fno-show-column"
      ],
      "argument": "",
      "description": "Do not include column number on diagnostics"
    },
    {
      "names": [
        "-fno-show-source-location"
      ],
      "argument": "",
      "description": "Do not include source location information with diagnostics"
    },
    {
      "names": [
        "-fno-signed-char"
      ],
      "argument": "",
      "description": "Char is unsigned"
    },
    {
      "names": [
        "-fno-signed-zeros"
      ],
      "argument": "",
      "description": "Allow optimizations that ignore the sign of floating point zeros"
    },
    {
      "names": [
        "-fno-spell-checking"
      ],
      "argument": "",
      "description": "Disable spell-checking"
    },
    {
      "names": [
        "-fno-stack-protector"
      ],
      "argument": "",
      "description": "Disable the use of stack protectors"
    },
    {
      "names": [
        "-fno-stack-size-section"
      ],
      "argument": "",
      "description": "Don't emit section containing metadata on function stack sizes"
    },
    {
      "names": [
        "-fno-standalone-debug"
      ],
      "argument": "",
      "description": "Limit debug information produced to reduce size of debug binary"
    },
    {
      "names": [
        "-fno-strict-float-cast-overflow"
      ],
      "argument": "",
      "description": "Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions"
    },
    {
      "names": [
        "-fno-temp-file"
      ],
      "argument": "",
      "description": "Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes"
    },
    {
      "names": [
        "-fno-threadsafe-statics"
      ],
      "argument": "",
      "description": "Do not emit code to make initialization of local statics thread safe"
    },
    {
      "names": [
        "-fno-trigraphs"
      ],
      "argument": "",
      "description": "Do not process trigraph sequences"
    },
    {
      "names": [
        "-fno-unroll-loops"
      ],
      "argument": "",
      "description": "Turn off loop unroller"
    },
    {
      "names": [
        "-fno-use-cxa-atexit"
      ],
      "argument": "",
      "description": "Don't use __cxa_atexit for calling destructors"
    },
    {
      "names": [
        "-fno-use-init-array"
      ],
      "argument": "",
      "description": "Don't use .init_array instead of .ctors"
    },
    {
      "names": [
        "-fobjc-arc-exceptions"
      ],
      "argument": "",
      "description": "Use EH-safe code when synthesizing retains and releases in -fobjc-arc"
    },
    {
      "names": [
        "-fobjc-arc"
      ],
      "argument": "",
      "description": "Synthesize retain and release calls for Objective-C pointers"
    },
    {
      "names": [
        "-fobjc-exceptions"
      ],
      "argument": "",
      "description": "Enable Objective-C exceptions"
    },
    {
      "names": [
        "-fobjc-runtime"
      ],
      "argument": "<value>",
      "description": "Specify the target Objective-C runtime kind and version"
    },
    {
      "names": [
        "-fobjc-weak"
      ],
      "argument": "",
      "description": "Enable ARC-style weak references in Objective-C"
    },
    {
      "names": [
        "-fopenmp-simd"
      ],
      "argument": "",
      "description": "Emit OpenMP code only for SIMD-based constructs."
    },
    {
      "names": [
        "-fopenmp-targets"
      ],
      "argument": "<value>",
      "description": "Specify comma-separated list of triples OpenMP offloading targets to be supported"
    },
    {
      "names": [
        "-fopenmp"
      ],
      "argument": "",
      "description": "Parse OpenMP pragmas and generate parallel code."
    },
    {
      "names": [
        "-foptimization-record-file"
      ],
      "argument": "<file>",
      "description": "Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options."
    },
    {
      "names": [
        "-foptimization-record-passes"
      ],
      "argument": "<regex>",
      "description": "Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)"
    },
    {
      "names": [
        "-forder-file-instrumentation"
      ],
      "argument": "",
      "description": "Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fpack-struct"
      ],
      "argument": "<value>",
      "description": "Specify the default maximum struct packing alignment"
    },
    {
      "names": [
        "-fpascal-strings"
      ],
      "argument": "",
      "description": "Recognize and construct Pascal-style string literals"
    },
    {
      "names": [
        "-fpass-plugin"
      ],
      "argument": "<dsopath>",
      "description": "Load pass plugin from a dynamic shared object file (only with new pass manager)."
    },
    {
      "names": [
        "-fpatchable-function-entry"
      ],
      "argument": "<N,M>",
      "description": "Generate M NOPs before function entry and N-M NOPs after function entry"
    },
    {
      "names": [
        "-fpcc-struct-return"
      ],
      "argument": "",
      "description": "Override the default ABI to return all structs on the stack"
    },
    {
      "names": [
        "-fpch-validate-input-files-content"
      ],
      "argument": "",
      "description": "Validate PCH input files based on content if mtime differs"
    },
    {
      "names": [
        "-fplt"
      ],
      "argument": "",
      "description": "Use the PLT to make function calls"
    },
    {
      "names": [
        "-fplugin"
      ],
      "argument": "<dsopath>",
      "description": "Load the named plugin (dynamic shared object)"
    },
    {
      "names": [
        "-fprebuilt-module-path"
      ],
      "argument": "<directory>",
      "description": "Specify the prebuilt module path"
    },
    {
      "names": [
        "-fprofile-exclude-files"
      ],
      "argument": "<value>",
      "description": "Instrument only functions from files where names don't match all the regexes separated by a semi-colon"
    },
    {
      "names": [
        "-fprofile-filter-files"
      ],
      "argument": "<value>",
      "description": "Instrument only functions from files where names match any regex separated by a semi-colon"
    },
    {
      "names": [
        "-fprofile-generate"
      ],
      "argument": "<directory>",
      "description": "Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fprofile-generate"
      ],
      "argument": "",
      "description": "Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fprofile-instr-generate"
      ],
      "argument": "<file>",
      "description": "Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fprofile-instr-generate"
      ],
      "argument": "",
      "description": "Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)"
    },
    {
      "names": [
        "-fprofile-instr-use"
      ],
      "argument": "<value>",
      "description": "Use instrumentation data for profile-guided optimization"
    },
    {
      "names": [
        "-fprofile-remapping-file"
      ],
      "argument": "<file>",
      "description": "Use the remappings described in <file> to match the profile data against names in the program"
    },
    {
      "names": [
        "-fprofile-sample-accurate"
      ],
      "argument": "",
      "description": "Specifies that the sample profile is accurate"
    },
    {
      "names": [
        "-fprofile-sample-use"
      ],
      "argument": "<value>",
      "description": "Enable sample-based profile guided optimizations"
    },
    {
      "names": [
        "-fprofile-use"
      ],
      "argument": "<pathname>",
      "description": "Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>."
    },
    {
      "names": [
        "-freciprocal-math"
      ],
      "argument": "",
      "description": "Allow division operations to be reassociated"
    },
    {
      "names": [
        "-freg-struct-return"
      ],
      "argument": "",
      "description": "Override the default ABI to return small structs in registers"
    },
    {
      "names": [
        "-fregister-global-dtors-with-atexit"
      ],
      "argument": "",
      "description": "Use atexit or __cxa_atexit to register global destructors"
    },
    {
      "names": [
        "-frelaxed-template-template-args"
      ],
      "argument": "",
      "description": "Enable C++17 relaxed template template argument matching"
    },
    {
      "names": [
        "-freroll-loops"
      ],
      "argument": "",
      "description": "Turn on loop reroller"
    },
    {
      "names": [
        "-frtlib-add-rpath"
      ],
      "argument": "",
      "description": "Add -rpath with architecture-specific resource directory to the linker flags"
    },
    {
      "names": [
        "-fsanitize-address-field-padding"
      ],
      "argument": "<value>",
      "description": "Level of field padding for AddressSanitizer"
    },
    {
      "names": [
        "-fsanitize-address-globals-dead-stripping"
      ],
      "argument": "",
      "description": "Enable linker dead stripping of globals in AddressSanitizer"
    },
    {
      "names": [
        "-fsanitize-address-poison-custom-array-cookie"
      ],
      "argument": "",
      "description": "Enable poisoning array cookies when using custom operator new[] in AddressSanitizer"
    },
    {
      "names": [
        "-fsanitize-address-use-after-scope"
      ],
      "argument": "",
      "description": "Enable use-after-scope detection in AddressSanitizer"
    },
    {
      "names": [
        "-fsanitize-address-use-odr-indicator"
      ],
      "argument": "",
      "description": "Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size"
    },
    {
      "names": [
        "-fsanitize-blacklist"
      ],
      "argument": "<value>",
      "description": "Path to blacklist file for sanitizers"
    },
    {
      "names": [
        "-fsanitize-cfi-canonical-jump-tables"
      ],
      "argument": "",
      "description": "Make the jump table addresses canonical in the symbol table"
    },
    {
      "names": [
        "-fsanitize-cfi-cross-dso"
      ],
      "argument": "",
      "description": "Enable control flow integrity (CFI) checks for cross-DSO calls."
    },
    {
      "names": [
        "-fsanitize-cfi-icall-generalize-pointers"
      ],
      "argument": "",
      "description": "Generalize pointers in CFI indirect call type signature checks"
    },
    {
      "names": [
        "-fsanitize-coverage"
      ],
      "argument": "<value>",
      "description": "Specify the type of coverage instrumentation for Sanitizers"
    },
    {
      "names": [
        "-fsanitize-hwaddress-abi"
      ],
      "argument": "<value>",
      "description": "Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused."
    },
    {
      "names": [
        "-fsanitize-memory-track-origins"
      ],
      "argument": "<value>",
      "description": "Enable origins tracking in MemorySanitizer"
    },
    {
      "names": [
        "-fsanitize-memory-track-origins"
      ],
      "argument": "",
      "description": "Enable origins tracking in MemorySanitizer"
    },
    {
      "names": [
        "-fsanitize-memory-use-after-dtor"
      ],
      "argument": "",
      "description": "Enable use-after-destroy detection in MemorySanitizer"
    },
    {
      "names": [
        "-fsanitize-recover"
      ],
      "argument": "<value>",
      "description": "Enable recovery for specified sanitizers"
    },
    {
      "names": [
        "-fsanitize-stats"
      ],
      "argument": "",
      "description": "Enable sanitizer statistics gathering."
    },
    {
      "names": [
        "-fsanitize-system-blacklist"
      ],
      "argument": "<value>",
      "description": "Path to system blacklist file for sanitizers"
    },
    {
      "names": [
        "-fsanitize-thread-atomics"
      ],
      "argument": "",
      "description": "Enable atomic operations instrumentation in ThreadSanitizer (default)"
    },
    {
      "names": [
        "-fsanitize-thread-func-entry-exit"
      ],
      "argument": "",
      "description": "Enable function entry/exit instrumentation in ThreadSanitizer (default)"
    },
    {
      "names": [
        "-fsanitize-thread-memory-access"
      ],
      "argument": "",
      "description": "Enable memory access instrumentation in ThreadSanitizer (default)"
    },
    {
      "names": [
        "-fsanitize-trap"
      ],
      "argument": "<value>",
      "description": "Enable trapping for specified sanitizers"
    },
    {
      "names": [
        "-fsanitize-undefined-strip-path-components"
      ],
      "argument": "<number>",
      "description": "Strip (or keep only, if negative) a given number of path components when emitting check metadata."
    },
    {
      "names": [
        "-fsanitize"
      ],
      "argument": "<check>",
      "description": "Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks"
    },
    {
      "names": [
        "-fsave-optimization-record"
      ],
      "argument": "<format>",
      "description": "Generate an optimization record file in a specific format"
    },
    {
      "names": [
        "-fsave-optimization-record"
      ],
      "argument": "",
      "description": "Generate a YAML optimization record file"
    },
    {
      "names": [
        "-fseh-exceptions"
      ],
      "argument": "",
      "description": "Use SEH style exceptions"
    },
    {
      "names": [
        "-fshort-enums"
      ],
      "argument": "",
      "description": "Allocate to an enum type only as many bytes as it needs for the declared range of possible values"
    },
    {
      "names": [
        "-fshort-wchar"
      ],
      "argument": "",
      "description": "Force wchar_t to be a short unsigned int"
    },
    {
      "names": [
        "-fshow-overloads"
      ],
      "argument": "<value>",
      "description": "Which overload candidates to show when overload resolution fails: best|all; defaults to all"
    },
    {
      "names": [
        "-fsized-deallocation"
      ],
      "argument": "",
      "description": "Enable C++14 sized global deallocation functions"
    },
    {
      "names": [
        "-fsjlj-exceptions"
      ],
      "argument": "",
      "description": "Use SjLj style exceptions"
    },
    {
      "names": [
        "-fslp-vectorize"
      ],
      "argument": "",
      "description": "Enable the superword-level parallelism vectorization passes"
    },
    {
      "names": [
        "-fsplit-dwarf-inlining"
      ],
      "argument": "",
      "description": "Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF"
    },
    {
      "names": [
        "-fsplit-lto-unit"
      ],
      "argument": "",
      "description": "Enables splitting of the LTO unit."
    },
    {
      "names": [
        "-fstack-protector-all"
      ],
      "argument": "",
      "description": "Enable stack protectors for all functions"
    },
    {
      "names": [
        "-fstack-protector-strong"
      ],
      "argument": "",
      "description": "Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable"
    },
    {
      "names": [
        "-fstack-protector"
      ],
      "argument": "",
      "description": "Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca, which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable"
    },
    {
      "names": [
        "-fstack-size-section"
      ],
      "argument": "",
      "description": "Emit section containing metadata on function stack sizes"
    },
    {
      "names": [
        "-fstandalone-debug"
      ],
      "argument": "",
      "description": "Emit full debug info for all types used by the program"
    },
    {
      "names": [
        "-fstrict-enums"
      ],
      "argument": "",
      "description": "Enable optimizations based on the strict definition of an enum's value range"
    },
    {
      "names": [
        "-fstrict-float-cast-overflow"
      ],
      "argument": "",
      "description": "Assume that overflowing float-to-int casts are undefined (default)"
    },
    {
      "names": [
        "-fstrict-return"
      ],
      "argument": "",
      "description": "Always treat control flow paths that fall off the end of a non-void function as unreachable"
    },
    {
      "names": [
        "-fstrict-vtable-pointers"
      ],
      "argument": "",
      "description": "Enable optimizations based on the strict rules for overwriting polymorphic C++ objects"
    },
    {
      "names": [
        "-fthin-link-bitcode"
      ],
      "argument": "<value>",
      "description": "Write minimized bitcode to <file> for the ThinLTO thin link only"
    },
    {
      "names": [
        "-fthinlto-index"
      ],
      "argument": "<value>",
      "description": "Perform ThinLTO importing using provided function summary index"
    },
    {
      "names": [
        "-ftime-trace-granularity"
      ],
      "argument": "<value>",
      "description": "Minimum time granularity (in microseconds) traced by time profiler"
    },
    {
      "names": [
        "-ftime-trace"
      ],
      "argument": "",
      "description": "Turn on time profiler. Generates JSON file based on output filename."
    },
    {
      "names": [
        "-ftrap-function"
      ],
      "argument": "<value>",
      "description": "Issue call to specified function rather than a trap instruction"
    },
    {
      "names": [
        "-ftrapv-handler"
      ],
      "argument": "<function name>",
      "description": "Specify the function to be called on overflow"
    },
    {
      "names": [
        "-ftrapv"
      ],
      "argument": "",
      "description": "Trap on integer overflow"
    },
    {
      "names": [
        "-ftrigraphs"
      ],
      "argument": "",
      "description": "Process trigraph sequences"
    },
    {
      "names": [
        "-ftrivial-auto-var-init"
      ],
      "argument": "<value>",
      "description": "Initialize trivial automatic stack variables: uninitialized (default) | pattern"
    },
    {
      "names": [
        "-funique-section-names"
      ],
      "argument": "",
      "description": "Use unique names for text and data sections (ELF Only)"
    },
    {
      "names": [
        "-funroll-loops"
      ],
      "argument": "",
      "description": "Turn on loop unroller"
    },
    {
      "names": [
        "-fuse-init-array"
      ],
      "argument": "",
      "description": "Use .init_array instead of .ctors"
    },
    {
      "names": [
        "-fvalidate-ast-input-files-content"
      ],
      "argument": "",
      "description": "Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical"
    },
    {
      "names": [
        "-fveclib"
      ],
      "argument": "<value>",
      "description": "Use the given vector functions library"
    },
    {
      "names": [
        "-fvectorize"
      ],
      "argument": "",
      "description": "Enable the loop vectorization passes"
    },
    {
      "names": [
        "-fvirtual-function-elimination"
      ],
      "argument": "",
      "description": "Enables dead virtual function elimination optimization. Requires -flto=full"
    },
    {
      "names": [
        "-fvisibility-global-new-delete-hidden"
      ],
      "argument": "",
      "description": "Give global C++ operator new and delete declarations hidden visibility"
    },
    {
      "names": [
        "-fvisibility-inlines-hidden"
      ],
      "argument": "",
      "description": "Give inline C++ member functions hidden visibility by default"
    },
    {
      "names": [
        "-fvisibility-ms-compat"
      ],
      "argument": "",
      "description": "Give global types 'default' visibility and global functions and variables 'hidden' visibility by default"
    },
    {
      "names": [
        "-fvisibility"
      ],
      "argument": "<value>",
      "description": "Set the default symbol visibility for all global declarations"
    },
    {
      "names": [
        "-fwasm-exceptions"
      ],
      "argument": "",
      "description": "Use WebAssembly style exceptions"
    },
    {
      "names": [
        "-fwhole-program-vtables"
      ],
      "argument": "",
      "description": "Enables whole-program vtable optimization. Requires -flto"
    },
    {
      "names": [
        "-fwrapv"
      ],
      "argument": "",
      "description": "Treat signed integer overflow as two's complement"
    },
    {
      "names": [
        "-fwritable-strings"
      ],
      "argument": "",
      "description": "Store string literals as writable data"
    },
    {
      "names": [
        "-fxray-always-emit-customevents"
      ],
      "argument": "",
      "description": "Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented."
    },
    {
      "names": [
        "-fxray-always-emit-typedevents"
      ],
      "argument": "",
      "description": "Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented."
    },
    {
      "names": [
        "-fxray-always-instrument"
      ],
      "argument": "<value>",
      "description": "DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute."
    },
    {
      "names": [
        "-fxray-attr-list"
      ],
      "argument": "<value>",
      "description": "Filename defining the list of functions/types for imbuing XRay attributes."
    },
    {
      "names": [
        "-fxray-instruction-threshold"
      ],
      "argument": "<value>",
      "description": "Sets the minimum function size to instrument with XRay"
    },
    {
      "names": [
        "-fxray-instrumentation-bundle"
      ],
      "argument": "<value>",
      "description": "Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'."
    },
    {
      "names": [
        "-fxray-instrument"
      ],
      "argument": "",
      "description": "Generate XRay instrumentation sleds on function entry and exit"
    },
    {
      "names": [
        "-fxray-link-deps"
      ],
      "argument": "",
      "description": "Tells clang to add the link dependencies for XRay."
    },
    {
      "names": [
        "-fxray-modes"
      ],
      "argument": "<value>",
      "description": "List of modes to link in by default into XRay instrumented binaries."
    },
    {
      "names": [
        "-fxray-never-instrument"
      ],
      "argument": "<value>",
      "description": "DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute."
    },
    {
      "names": [
        "-fzvector"
      ],
      "argument": "",
      "description": "Enable System z vector language extension"
    },
    {
      "names": [
        "-F"
      ],
      "argument": "<value>",
      "description": "Add directory to framework include search path"
    },
    {
      "names": [
        "--gcc-toolchain"
      ],
      "argument": "<value>",
      "description": "Use the gcc toolchain at the given directory"
    },
    {
      "names": [
        "-gcodeview-ghash"
      ],
      "argument": "",
      "description": "Emit type record hashes in a .debug$H section"
    },
    {
      "names": [
        "-gcodeview"
      ],
      "argument": "",
      "description": "Generate CodeView debug information"
    },
    {
      "names": [
        "-gdwarf-2"
      ],
      "argument": "",
      "description": "Generate source-level debug information with dwarf version 2"
    },
    {
      "names": [
        "-gdwarf-3"
      ],
      "argument": "",
      "description": "Generate source-level debug information with dwarf version 3"
    },
    {
      "names": [
        "-gdwarf-4"
      ],
      "argument": "",
      "description": "Generate source-level debug information with dwarf version 4"
    },
    {
      "names": [
        "-gdwarf-5"
      ],
      "argument": "",
      "description": "Generate source-level debug information with dwarf version 5"
    },
    {
      "names": [
        "-gdwarf"
      ],
      "argument": "",
      "description": "Generate source-level debug information with the default dwarf version"
    },
    {
      "names": [
        "-gembed-source"
      ],
      "argument": "",
      "description": "Embed source text in DWARF debug sections"
    },
    {
      "names": [
        "-gline-directives-only"
      ],
      "argument": "",
      "description": "Emit debug line info directives only"
    },
    {
      "names": [
        "-gline-tables-only"
      ],
      "argument": "",
      "description": "Emit debug line number tables only"
    },
    {
      "names": [
        "-gmodules"
      ],
      "argument": "",
      "description": "Generate debug info with external references to clang modules or precompiled headers"
    },
    {
      "names": [
        "-gno-embed-source"
      ],
      "argument": "",
      "description": "Restore the default behavior of not embedding source text in DWARF debug sections"
    },
    {
      "names": [
        "-gno-inline-line-tables"
      ],
      "argument": "",
      "description": "Don't emit inline line tables"
    },
    {
      "names": [
        "--gpu-max-threads-per-block"
      ],
      "argument": "<value>",
      "description": "Default max threads per block for kernel launch bounds for HIP"
    },
    {
      "names": [
        "-gsplit-dwarf"
      ],
      "argument": "<value>",
      "description": "Set DWARF fission mode to either 'split' or 'single'"
    },
    {
      "names": [
        "-gz"
      ],
      "argument": "<value>",
      "description": "DWARF debug sections compression type"
    },
    {
      "names": [
        "-gz"
      ],
      "argument": "",
      "description": "DWARF debug sections compression type"
    },
    {
      "names": [
        "-G"
      ],
      "argument": "<size>",
      "description": "Put objects of at most <size> bytes into small data section (MIPS / Hexagon)"
    },
    {
      "names": [
        "-g"
      ],
      "argument": "",
      "description": "Generate source-level debug information"
    },
    {
      "names": [
        "--help-hidden"
      ],
      "argument": "",
      "description": "Display help for hidden options"
    },
    {
      "names": [
        "-help"
      ],
      "argument": "",
      "description": "Display available options"
    },
    {
      "names": [
        "--hip-device-lib-path"
      ],
      "argument": "<value>",
      "description": "HIP device library path"
    },
    {
      "names": [
        "--hip-device-lib"
      ],
      "argument": "<value>",
      "description": "HIP device library"
    },
    {
      "names": [
        "--hip-link"
      ],
      "argument": "",
      "description": "Link clang-offload-bundler bundles for HIP"
    },
    {
      "names": [
        "-H"
      ],
      "argument": "",
      "description": "Show header includes and nesting depth"
    },
    {
      "names": [
        "-I-"
      ],
      "argument": "",
      "description": "Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path"
    },
    {
      "names": [
        "-idirafter"
      ],
      "argument": "<value>",
      "description": "Add directory to AFTER include search path"
    },
    {
      "names": [
        "-iframeworkwithsysroot"
      ],
      "argument": "<directory>",
      "description": "Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot"
    },
    {
      "names": [
        "-iframework"
      ],
      "argument": "<value>",
      "description": "Add directory to SYSTEM framework search path"
    },
    {
      "names": [
        "-imacros"
      ],
      "argument": "<file>",
      "description": "Include macros from file before parsing"
    },
    {
      "names": [
        "-include-pch"
      ],
      "argument": "<file>",
      "description": "Include precompiled header file"
    },
    {
      "names": [
        "-include"
      ],
      "argument": "<file>",
      "description": "Include file before parsing"
    },
    {
      "names": [
        "-index-header-map"
      ],
      "argument": "",
      "description": "Make the next included directory (-I or -F) an indexer header map"
    },
    {
      "names": [
        "-iprefix"
      ],
      "argument": "<dir>",
      "description": "Set the -iwithprefix/-iwithprefixbefore prefix"
    },
    {
      "names": [
        "-iquote"
      ],
      "argument": "<directory>",
      "description": "Add directory to QUOTE include search path"
    },
    {
      "names": [
        "-isysroot"
      ],
      "argument": "<dir>",
      "description": "Set the system root directory (usually /)"
    },
    {
      "names": [
        "-isystem-after"
      ],
      "argument": "<directory>",
      "description": "Add directory to end of the SYSTEM include search path"
    },
    {
      "names": [
        "-isystem"
      ],
      "argument": "<directory>",
      "description": "Add directory to SYSTEM include search path"
    },
    {
      "names": [
        "-ivfsoverlay"
      ],
      "argument": "<value>",
      "description": "Overlay the virtual filesystem described by file over the real file system"
    },
    {
      "names": [
        "-iwithprefixbefore"
      ],
      "argument": "<dir>",
      "description": "Set directory to include search path with prefix"
    },
    {
      "names": [
        "-iwithprefix"
      ],
      "argument": "<dir>",
      "description": "Set directory to SYSTEM include search path with prefix"
    },
    {
      "names": [
        "-iwithsysroot"
      ],
      "argument": "<directory>",
      "description": "Add directory to SYSTEM include search path, absolute paths are relative to -isysroot"
    },
    {
      "names": [
        "-I"
      ],
      "argument": "<dir>",
      "description": "Add directory to include search path"
    },
    {
      "names": [
        "--libomptarget-nvptx-path"
      ],
      "argument": "<value>",
      "description": "Path to libomptarget-nvptx libraries"
    },
    {
      "names": [
        "-L"
      ],
      "argument": "<dir>",
      "description": "Add directory to library search path"
    },
    {
      "names": [
        "-mabicalls"
      ],
      "argument": "",
      "description": "Enable SVR4-style position-independent code (Mips only)"
    },
    {
      "names": [
        "-malign-double"
      ],
      "argument": "",
      "description": "Align doubles to two words in structs (x86 only)"
    },
    {
      "names": [
        "-mbackchain"
      ],
      "argument": "",
      "description": "Link stack frames through backchain on System Z"
    },
    {
      "names": [
        "-mbranch-protection"
      ],
      "argument": "<value>",
      "description": "Enforce targets of indirect branches and function returns"
    },
    {
      "names": [
        "-mcmodel"
      ],
      "argument": "medany",
      "description": "Equivalent to -mcmodel=medium, compatible with RISC-V gcc."
    },
    {
      "names": [
        "-mcmodel"
      ],
      "argument": "medlow",
      "description": "Equivalent to -mcmodel=small, compatible with RISC-V gcc."
    },
    {
      "names": [
        "-mcmse"
      ],
      "argument": "",
      "description": "Allow use of CMSE (Armv8-M Security Extensions)"
    },
    {
      "names": [
        "-mcode-object-v3"
      ],
      "argument": "",
      "description": "Enable code object v3 (AMDGPU only)"
    },
    {
      "names": [
        "-mcrc"
      ],
      "argument": "",
      "description": "Allow use of CRC instructions (ARM/Mips only)"
    },
    {
      "names": [
        "-mcumode"
      ],
      "argument": "",
      "description": "CU wavefront execution mode is used (AMDGPU only)"
    },
    {
      "names": [
        "-MD"
      ],
      "argument": "",
      "description": "Write a depfile containing user and system headers"
    },
    {
      "names": [
        "-meabi"
      ],
      "argument": "<value>",
      "description": "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"
    },
    {
      "names": [
        "-membedded-data"
      ],
      "argument": "",
      "description": "Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)"
    },
    {
      "names": [
        "-mexecute-only"
      ],
      "argument": "",
      "description": "Disallow generation of data access to code sections (ARM only)"
    },
    {
      "names": [
        "-mextern-sdata"
      ],
      "argument": "",
      "description": "Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)"
    },
    {
      "names": [
        "-mfentry"
      ],
      "argument": "",
      "description": "Insert calls to fentry at function entry (x86/SystemZ only)"
    },
    {
      "names": [
        "-mfix-cortex-a53-835769"
      ],
      "argument": "",
      "description": "Workaround Cortex-A53 erratum 835769 (AArch64 only)"
    },
    {
      "names": [
        "-mfp32"
      ],
      "argument": "",
      "description": "Use 32-bit floating point registers (MIPS only)"
    },
    {
      "names": [
        "-mfp64"
      ],
      "argument": "",
      "description": "Use 64-bit floating point registers (MIPS only)"
    },
    {
      "names": [
        "-MF"
      ],
      "argument": "<file>",
      "description": "Write depfile output from -MMD, -MD, -MM, or -M to <file>"
    },
    {
      "names": [
        "-mgeneral-regs-only"
      ],
      "argument": "",
      "description": "Generate code which only uses the general purpose registers (AArch64 only)"
    },
    {
      "names": [
        "-mglobal-merge"
      ],
      "argument": "",
      "description": "Enable merging of globals"
    },
    {
      "names": [
        "-mgpopt"
      ],
      "argument": "",
      "description": "Use GP relative accesses for symbols known to be in a small data section (MIPS)"
    },
    {
      "names": [
        "-MG"
      ],
      "argument": "",
      "description": "Add missing headers to depfile"
    },
    {
      "names": [
        "-mhvx-length"
      ],
      "argument": "<value>",
      "description": "Set Hexagon Vector Length"
    },
    {
      "names": [
        "-mhvx"
      ],
      "argument": "<value>",
      "description": "Enable Hexagon Vector eXtensions"
    },
    {
      "names": [
        "-mhvx"
      ],
      "argument": "",
      "description": "Enable Hexagon Vector eXtensions"
    },
    {
      "names": [
        "-miamcu"
      ],
      "argument": "",
      "description": "Use Intel MCU ABI"
    },
    {
      "names": [
        "--migrate"
      ],
      "argument": "",
      "description": "Run the migrator"
    },
    {
      "names": [
        "-mincremental-linker-compatible"
      ],
      "argument": "",
      "description": "(integrated-as) Emit an object file which can be used with an incremental linker"
    },
    {
      "names": [
        "-mindirect-jump"
      ],
      "argument": "<value>",
      "description": "Change indirect jump instructions to inhibit speculation"
    },
    {
      "names": [
        "-mios-version-min"
      ],
      "argument": "<value>",
      "description": "Set iOS deployment target"
    },
    {
      "names": [
        "-MJ"
      ],
      "argument": "<value>",
      "description": "Write a compilation database entry per input"
    },
    {
      "names": [
        "-mllvm"
      ],
      "argument": "<value>",
      "description": "Additional arguments to forward to LLVM's option processing"
    },
    {
      "names": [
        "-mlocal-sdata"
      ],
      "argument": "",
      "description": "Extend the -G behaviour to object local data (MIPS)"
    },
    {
      "names": [
        "-mlong-calls"
      ],
      "argument": "",
      "description": "Generate branches with extended addressability, usually via indirect jumps."
    },
    {
      "names": [
        "-mlong-double-128"
      ],
      "argument": "",
      "description": "Force long double to be 128 bits"
    },
    {
      "names": [
        "-mlong-double-64"
      ],
      "argument": "",
      "description": "Force long double to be 64 bits"
    },
    {
      "names": [
        "-mlong-double-80"
      ],
      "argument": "",
      "description": "Force long double to be 80 bits, padded to 128 bits for storage"
    },
    {
      "names": [
        "-mmacosx-version-min"
      ],
      "argument": "<value>",
      "description": "Set Mac OS X deployment target"
    },
    {
      "names": [
        "-mmadd4"
      ],
      "argument": "",
      "description": "Enable the generation of 4-operand madd.s, madd.d and related instructions."
    },
    {
      "names": [
        "-MMD"
      ],
      "argument": "",
      "description": "Write a depfile containing user headers"
    },
    {
      "names": [
        "-mmemops"
      ],
      "argument": "",
      "description": "Enable generation of memop instructions"
    },
    {
      "names": [
        "-mms-bitfields"
      ],
      "argument": "",
      "description": "Set the default structure layout to be compatible with the Microsoft compiler standard"
    },
    {
      "names": [
        "-mmsa"
      ],
      "argument": "",
      "description": "Enable MSA ASE (MIPS only)"
    },
    {
      "names": [
        "-mmt"
      ],
      "argument": "",
      "description": "Enable MT ASE (MIPS only)"
    },
    {
      "names": [
        "-MM"
      ],
      "argument": "",
      "description": "Like -MMD, but also implies -E and writes to stdout by default"
    },
    {
      "names": [
        "-mno-abicalls"
      ],
      "argument": "",
      "description": "Disable SVR4-style position-independent code (Mips only)"
    },
    {
      "names": [
        "-mno-code-object-v3"
      ],
      "argument": "",
      "description": "Disable code object v3 (AMDGPU only)"
    },
    {
      "names": [
        "-mno-crc"
      ],
      "argument": "",
      "description": "Disallow use of CRC instructions (Mips only)"
    },
    {
      "names": [
        "-mno-cumode"
      ],
      "argument": "",
      "description": "WGP wavefront execution mode is used (AMDGPU only)"
    },
    {
      "names": [
        "-mno-embedded-data"
      ],
      "argument": "",
      "description": "Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)"
    },
    {
      "names": [
        "-mno-execute-only"
      ],
      "argument": "",
      "description": "Allow generation of data access to code sections (ARM only)"
    },
    {
      "names": [
        "-mno-extern-sdata"
      ],
      "argument": "",
      "description": "Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)"
    },
    {
      "names": [
        "-mno-fix-cortex-a53-835769"
      ],
      "argument": "",
      "description": "Don't workaround Cortex-A53 erratum 835769 (AArch64 only)"
    },
    {
      "names": [
        "-mno-global-merge"
      ],
      "argument": "",
      "description": "Disable merging of globals"
    },
    {
      "names": [
        "-mno-gpopt"
      ],
      "argument": "",
      "description": "Do not use GP relative accesses for symbols known to be in a small data section (MIPS)"
    },
    {
      "names": [
        "-mno-hvx"
      ],
      "argument": "",
      "description": "Disable Hexagon Vector eXtensions"
    },
    {
      "names": [
        "-mno-implicit-float"
      ],
      "argument": "",
      "description": "Don't generate implicit floating point instructions"
    },
    {
      "names": [
        "-mno-incremental-linker-compatible"
      ],
      "argument": "",
      "description": "(integrated-as) Emit an object file which cannot be used with an incremental linker"
    },
    {
      "names": [
        "-mno-local-sdata"
      ],
      "argument": "",
      "description": "Do not extend the -G behaviour to object local data (MIPS)"
    },
    {
      "names": [
        "-mno-long-calls"
      ],
      "argument": "",
      "description": "Restore the default behaviour of not generating long calls"
    },
    {
      "names": [
        "-mno-madd4"
      ],
      "argument": "",
      "description": "Disable the generation of 4-operand madd.s, madd.d and related instructions."
    },
    {
      "names": [
        "-mno-memops"
      ],
      "argument": "",
      "description": "Disable generation of memop instructions"
    },
    {
      "names": [
        "-mno-movt"
      ],
      "argument": "",
      "description": "Disallow use of movt/movw pairs (ARM only)"
    },
    {
      "names": [
        "-mno-ms-bitfields"
      ],
      "argument": "",
      "description": "Do not set the default structure layout to be compatible with the Microsoft compiler standard"
    },
    {
      "names": [
        "-mno-msa"
      ],
      "argument": "",
      "description": "Disable MSA ASE (MIPS only)"
    },
    {
      "names": [
        "-mno-mt"
      ],
      "argument": "",
      "description": "Disable MT ASE (MIPS only)"
    },
    {
      "names": [
        "-mno-neg-immediates"
      ],
      "argument": "",
      "description": "Disallow converting instructions with negative immediates to their negation or inversion."
    },
    {
      "names": [
        "-mno-nvj"
      ],
      "argument": "",
      "description": "Disable generation of new-value jumps"
    },
    {
      "names": [
        "-mno-nvs"
      ],
      "argument": "",
      "description": "Disable generation of new-value stores"
    },
    {
      "names": [
        "-mno-outline"
      ],
      "argument": "",
      "description": "Disable function outlining (AArch64 only)"
    },
    {
      "names": [
        "-mno-packets"
      ],
      "argument": "",
      "description": "Disable generation of instruction packets"
    },
    {
      "names": [
        "-mno-relax"
      ],
      "argument": "",
      "description": "Disable linker relaxation"
    },
    {
      "names": [
        "-mno-restrict-it"
      ],
      "argument": "",
      "description": "Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode"
    },
    {
      "names": [
        "-mno-save-restore"
      ],
      "argument": "",
      "description": "Disable using library calls for save and restore"
    },
    {
      "names": [
        "-mno-sram-ecc"
      ],
      "argument": "",
      "description": "Disable SRAM ECC (AMDGPU only)"
    },
    {
      "names": [
        "-mno-stack-arg-probe"
      ],
      "argument": "",
      "description": "Disable stack probes which are enabled by default"
    },
    {
      "names": [
        "-mno-tls-direct-seg-refs"
      ],
      "argument": "",
      "description": "Disable direct TLS access through segment registers"
    },
    {
      "names": [
        "-mno-unaligned-access"
      ],
      "argument": "",
      "description": "Force all memory accesses to be aligned (AArch32/AArch64 only)"
    },
    {
      "names": [
        "-mno-wavefrontsize64"
      ],
      "argument": "",
      "description": "Wavefront size 32 is used"
    },
    {
      "names": [
        "-mno-xnack"
      ],
      "argument": "",
      "description": "Disable XNACK (AMDGPU only)"
    },
    {
      "names": [
        "-mnocrc"
      ],
      "argument": "",
      "description": "Disallow use of CRC instructions (ARM only)"
    },
    {
      "names": [
        "-mnop-mcount"
      ],
      "argument": "",
      "description": "Generate mcount/__fentry__ calls as nops. To activate they need to be patched in."
    },
    {
      "names": [
        "-mnvj"
      ],
      "argument": "",
      "description": "Enable generation of new-value jumps"
    },
    {
      "names": [
        "-mnvs"
      ],
      "argument": "",
      "description": "Enable generation of new-value stores"
    },
    {
      "names": [
        "-module-dependency-dir"
      ],
      "argument": "<value>",
      "description": "Directory to dump module dependencies to"
    },
    {
      "names": [
        "-module-file-info"
      ],
      "argument": "",
      "description": "Provide information about a particular module file"
    },
    {
      "names": [
        "-momit-leaf-frame-pointer"
      ],
      "argument": "",
      "description": "Omit frame pointer setup for leaf functions"
    },
    {
      "names": [
        "-moutline"
      ],
      "argument": "",
      "description": "Enable function outlining (AArch64 only)"
    },
    {
      "names": [
        "-mpacked-stack"
      ],
      "argument": "",
      "description": "Use packed stack layout (SystemZ only)."
    },
    {
      "names": [
        "-mpackets"
      ],
      "argument": "",
      "description": "Enable generation of instruction packets"
    },
    {
      "names": [
        "-mpie-copy-relocations"
      ],
      "argument": "",
      "description": "Use copy relocations support for PIE builds"
    },
    {
      "names": [
        "-mprefer-vector-width"
      ],
      "argument": "<value>",
      "description": "Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions."
    },
    {
      "names": [
        "-MP"
      ],
      "argument": "",
      "description": "Create phony target for each dependency (other than main file)"
    },
    {
      "names": [
        "-mqdsp6-compat"
      ],
      "argument": "",
      "description": "Enable hexagon-qdsp6 backward compatibility"
    },
    {
      "names": [
        "-MQ"
      ],
      "argument": "<value>",
      "description": "Specify name of main file output to quote in depfile"
    },
    {
      "names": [
        "-mrecord-mcount"
      ],
      "argument": "",
      "description": "Generate a __mcount_loc section entry for each __fentry__ call."
    },
    {
      "names": [
        "-mrelax-all"
      ],
      "argument": "",
      "description": "(integrated-as) Relax all machine instructions"
    },
    {
      "names": [
        "-mrelax"
      ],
      "argument": "",
      "description": "Enable linker relaxation"
    },
    {
      "names": [
        "-mrestrict-it"
      ],
      "argument": "",
      "description": "Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode."
    },
    {
      "names": [
        "-mrtd"
      ],
      "argument": "",
      "description": "Make StdCall calling convention the default"
    },
    {
      "names": [
        "-msave-restore"
      ],
      "argument": "",
      "description": "Enable using library calls for save and restore"
    },
    {
      "names": [
        "-msign-return-address"
      ],
      "argument": "<value>",
      "description": "Select return address signing scope"
    },
    {
      "names": [
        "-msoft-float"
      ],
      "argument": "",
      "description": "Use software floating point"
    },
    {
      "names": [
        "-msram-ecc"
      ],
      "argument": "",
      "description": "Enable SRAM ECC (AMDGPU only)"
    },
    {
      "names": [
        "-mstack-alignment"
      ],
      "argument": "<value>",
      "description": "Set the stack alignment"
    },
    {
      "names": [
        "-mstack-arg-probe"
      ],
      "argument": "",
      "description": "Enable stack probes"
    },
    {
      "names": [
        "-mstack-probe-size"
      ],
      "argument": "<value>",
      "description": "Set the stack probe size"
    },
    {
      "names": [
        "-mstackrealign"
      ],
      "argument": "",
      "description": "Force realign the stack at entry to every function"
    },
    {
      "names": [
        "-mthread-model"
      ],
      "argument": "<value>",
      "description": "The thread model to use, e.g. posix, single (posix by default)"
    },
    {
      "names": [
        "-mtls-direct-seg-refs"
      ],
      "argument": "",
      "description": "Enable direct TLS access through segment registers (default)"
    },
    {
      "names": [
        "-mtls-size"
      ],
      "argument": "<value>",
      "description": "Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)"
    },
    {
      "names": [
        "-mtp"
      ],
      "argument": "<value>",
      "description": "Thread pointer access method (AArch32/AArch64 only)"
    },
    {
      "names": [
        "-MT"
      ],
      "argument": "<value>",
      "description": "Specify name of main file output in depfile"
    },
    {
      "names": [
        "-munaligned-access"
      ],
      "argument": "",
      "description": "Allow memory accesses to be unaligned (AArch32/AArch64 only)"
    },
    {
      "names": [
        "-MV"
      ],
      "argument": "",
      "description": "Use NMake/Jom format for the depfile"
    },
    {
      "names": [
        "-mwavefrontsize64"
      ],
      "argument": "",
      "description": "Wavefront size 64 is used"
    },
    {
      "names": [
        "-mxnack"
      ],
      "argument": "",
      "description": "Enable XNACK (AMDGPU only)"
    },
    {
      "names": [
        "-M"
      ],
      "argument": "",
      "description": "Like -MD, but also implies -E and writes to stdout by default"
    },
    {
      "names": [
        "--no-cuda-gpu-arch"
      ],
      "argument": "<value>",
      "description": "Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value."
    },
    {
      "names": [
        "--no-cuda-include-ptx"
      ],
      "argument": "<value>",
      "description": "Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once."
    },
    {
      "names": [
        "--no-cuda-version-check"
      ],
      "argument": "",
      "description": "Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture."
    },
    {
      "names": [
        "--no-system-header-prefix"
      ],
      "argument": "<prefix>",
      "description": "Treat all #include paths starting with <prefix> as not including a system header."
    },
    {
      "names": [
        "-nobuiltininc"
      ],
      "argument": "",
      "description": "Disable builtin #include directories"
    },
    {
      "names": [
        "-nogpulib"
      ],
      "argument": "",
      "description": "Do not link device library for CUDA/HIP device compilation"
    },
    {
      "names": [
        "-nostdinc++"
      ],
      "argument": "",
      "description": "Disable standard #include directories for the C++ standard library"
    },
    {
      "names": [
        "-ObjC++"
      ],
      "argument": "",
      "description": "Treat source input files as Objective-C++ inputs"
    },
    {
      "names": [
        "-objcmt-atomic-property"
      ],
      "argument": "",
      "description": "Make migration to 'atomic' properties"
    },
    {
      "names": [
        "-objcmt-migrate-all"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC"
    },
    {
      "names": [
        "-objcmt-migrate-annotation"
      ],
      "argument": "",
      "description": "Enable migration to property and method annotations"
    },
    {
      "names": [
        "-objcmt-migrate-designated-init"
      ],
      "argument": "",
      "description": "Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods"
    },
    {
      "names": [
        "-objcmt-migrate-instancetype"
      ],
      "argument": "",
      "description": "Enable migration to infer instancetype for method result type"
    },
    {
      "names": [
        "-objcmt-migrate-literals"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC literals"
    },
    {
      "names": [
        "-objcmt-migrate-ns-macros"
      ],
      "argument": "",
      "description": "Enable migration to NS_ENUM/NS_OPTIONS macros"
    },
    {
      "names": [
        "-objcmt-migrate-property-dot-syntax"
      ],
      "argument": "",
      "description": "Enable migration of setter/getter messages to property-dot syntax"
    },
    {
      "names": [
        "-objcmt-migrate-property"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC property"
    },
    {
      "names": [
        "-objcmt-migrate-protocol-conformance"
      ],
      "argument": "",
      "description": "Enable migration to add protocol conformance on classes"
    },
    {
      "names": [
        "-objcmt-migrate-readonly-property"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC readonly property"
    },
    {
      "names": [
        "-objcmt-migrate-readwrite-property"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC readwrite property"
    },
    {
      "names": [
        "-objcmt-migrate-subscripting"
      ],
      "argument": "",
      "description": "Enable migration to modern ObjC subscripting"
    },
    {
      "names": [
        "-objcmt-ns-nonatomic-iosonly"
      ],
      "argument": "",
      "description": "Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute"
    },
    {
      "names": [
        "-objcmt-returns-innerpointer-property"
      ],
      "argument": "",
      "description": "Enable migration to annotate property with NS_RETURNS_INNER_POINTER"
    },
    {
      "names": [
        "-objcmt-whitelist-dir-path"
      ],
      "argument": "<value>",
      "description": "Only modify files with a filename contained in the provided directory path"
    },
    {
      "names": [
        "-ObjC"
      ],
      "argument": "",
      "description": "Treat source input files as Objective-C inputs"
    },
    {
      "names": [
        "-o"
      ],
      "argument": "<file>",
      "description": "Write output to <file>"
    },
    {
      "names": [
        "-pg"
      ],
      "argument": "",
      "description": "Enable mcount instrumentation"
    },
    {
      "names": [
        "-pipe"
      ],
      "argument": "",
      "description": "Use pipes between commands, when possible"
    },
    {
      "names": [
        "--precompile"
      ],
      "argument": "",
      "description": "Only precompile the input"
    },
    {
      "names": [
        "-print-effective-triple"
      ],
      "argument": "",
      "description": "Print the effective target triple"
    },
    {
      "names": [
        "-print-file-name"
      ],
      "argument": "<file>",
      "description": "Print the full library path of <file>"
    },
    {
      "names": [
        "-print-ivar-layout"
      ],
      "argument": "",
      "description": "Enable Objective-C Ivar layout bitmap print trace"
    },
    {
      "names": [
        "-print-libgcc-file-name"
      ],
      "argument": "",
      "description": "Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")"
    },
    {
      "names": [
        "-print-prog-name"
      ],
      "argument": "<name>",
      "description": "Print the full program path of <name>"
    },
    {
      "names": [
        "-print-resource-dir"
      ],
      "argument": "",
      "description": "Print the resource directory pathname"
    },
    {
      "names": [
        "-print-search-dirs"
      ],
      "argument": "",
      "description": "Print the paths used for finding libraries and programs"
    },
    {
      "names": [
        "-print-supported-cpus"
      ],
      "argument": "",
      "description": "Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)"
    },
    {
      "names": [
        "-print-target-triple"
      ],
      "argument": "",
      "description": "Print the normalized target triple"
    },
    {
      "names": [
        "-pthread"
      ],
      "argument": "",
      "description": "Support POSIX threads in generated code"
    },
    {
      "names": [
        "--ptxas-path"
      ],
      "argument": "<value>",
      "description": "Path to ptxas (used for compiling CUDA code)"
    },
    {
      "names": [
        "-P"
      ],
      "argument": "",
      "description": "Disable linemarker output in -E mode"
    },
    {
      "names": [
        "-Qn"
      ],
      "argument": "",
      "description": "Do not emit metadata containing compiler name and version"
    },
    {
      "names": [
        "-Qunused-arguments"
      ],
      "argument": "",
      "description": "Don't emit warning for unused driver arguments"
    },
    {
      "names": [
        "-Qy"
      ],
      "argument": "",
      "description": "Emit metadata containing compiler name and version"
    },
    {
      "names": [
        "-relocatable-pch"
      ],
      "argument": "",
      "description": "Whether to build a relocatable precompiled header"
    },
    {
      "names": [
        "-rewrite-legacy-objc"
      ],
      "argument": "",
      "description": "Rewrite Legacy Objective-C source to C++"
    },
    {
      "names": [
        "-rewrite-objc"
      ],
      "argument": "",
      "description": "Rewrite Objective-C source to C++"
    },
    {
      "names": [
        "-Rpass-analysis"
      ],
      "argument": "<value>",
      "description": "Report transformation analysis from optimization passes whose name matches the given POSIX regular expression"
    },
    {
      "names": [
        "-Rpass-missed"
      ],
      "argument": "<value>",
      "description": "Report missed transformations by optimization passes whose name matches the given POSIX regular expression"
    },
    {
      "names": [
        "-Rpass"
      ],
      "argument": "<value>",
      "description": "Report transformations performed by optimization passes whose name matches the given POSIX regular expression"
    },
    {
      "names": [
        "-rtlib"
      ],
      "argument": "<value>",
      "description": "Compiler runtime library to use"
    },
    {
      "names": [
        "-R"
      ],
      "argument": "<remark>",
      "description": "Enable the specified remark"
    },
    {
      "names": [
        "-save-stats"
      ],
      "argument": "<value>",
      "description": "Save llvm statistics."
    },
    {
      "names": [
        "-save-stats"
      ],
      "argument": "",
      "description": "Save llvm statistics."
    },
    {
      "names": [
        "-save-temps"
      ],
      "argument": "<value>",
      "description": "Save intermediate compilation results."
    },
    {
      "names": [
        "-save-temps"
      ],
      "argument": "",
      "description": "Save intermediate compilation results"
    },
    {
      "names": [
        "-serialize-diagnostics"
      ],
      "argument": "<value>",
      "description": "Serialize compiler diagnostics to a file"
    },
    {
      "names": [
        "-shared-libsan"
      ],
      "argument": "",
      "description": "Dynamically link the sanitizer runtime"
    },
    {
      "names": [
        "-static-libsan"
      ],
      "argument": "",
      "description": "Statically link the sanitizer runtime"
    },
    {
      "names": [
        "-static-openmp"
      ],
      "argument": "",
      "description": "Use the static host OpenMP runtime while linking."
    },
    {
      "names": [
        "-std"
      ],
      "argument": "<value>",
      "description": "Language standard to compile for"
    },
    {
      "names": [
        "-stdlib++-isystem"
      ],
      "argument": "<directory>",
      "description": "Use directory as the C++ standard library include path"
    },
    {
      "names": [
        "-stdlib"
      ],
      "argument": "<value>",
      "description": "C++ standard library to use"
    },
    {
      "names": [
        "--system-header-prefix"
      ],
      "argument": "<prefix>",
      "description": "Treat all #include paths starting with <prefix> as including a system header."
    },
    {
      "names": [
        "-S"
      ],
      "argument": "",
      "description": "Only run preprocess and compilation steps"
    },
    {
      "names": [
        "--target"
      ],
      "argument": "<value>",
      "description": "Generate code for the given target"
    },
    {
      "names": [
        "-Tbss"
      ],
      "argument": "<addr>",
      "description": "Set starting address of BSS to <addr>"
    },
    {
      "names": [
        "-Tdata"
      ],
      "argument": "<addr>",
      "description": "Set starting address of DATA to <addr>"
    },
    {
      "names": [
        "-time"
      ],
      "argument": "",
      "description": "Time individual commands"
    },
    {
      "names": [
        "-traditional-cpp"
      ],
      "argument": "",
      "description": "Enable some traditional CPP emulation"
    },
    {
      "names": [
        "-trigraphs"
      ],
      "argument": "",
      "description": "Process trigraph sequences"
    },
    {
      "names": [
        "-Ttext"
      ],
      "argument": "<addr>",
      "description": "Set starting address of TEXT to <addr>"
    },
    {
      "names": [
        "-T"
      ],
      "argument": "<script>",
      "description": "Specify <script> as linker script"
    },
    {
      "names": [
        "-undef"
      ],
      "argument": "",
      "description": "undef all system defines"
    },
    {
      "names": [
        "-unwindlib"
      ],
      "argument": "<value>",
      "description": "Unwind library to use"
    },
    {
      "names": [
        "-U"
      ],
      "argument": "<macro>",
      "description": "Undefine macro <macro>"
    },
    {
      "names": [
        "--verify-debug-info"
      ],
      "argument": "",
      "description": "Verify the binary representation of debug output"
    },
    {
      "names": [
        "-verify-pch"
      ],
      "argument": "",
      "description": "Load and verify that a pre-compiled header file is not stale"
    },
    {
      "names": [
        "--version"
      ],
      "argument": "",
      "description": "Print version information"
    },
    {
      "names": [
        "-v"
      ],
      "argument": "",
      "description": "Show commands to run and use verbose output"
    },
    {
      "names": [
        "-Wa"
      ],
      "argument": "<,arg>",
      "description": "Pass the comma separated arguments in <arg> to the assembler"
    },
    {
      "names": [
        "-Wdeprecated"
      ],
      "argument": "",
      "description": "Enable warnings for deprecated constructs and define __DEPRECATED"
    },
    {
      "names": [
        "-Wl"
      ],
      "argument": "<,arg>",
      "description": "Pass the comma separated arguments in <arg> to the linker"
    },
    {
      "names": [
        "-working-directory"
      ],
      "argument": "<value>",
      "description": "Resolve file paths relative to the specified directory"
    },
    {
      "names": [
        "-Wp"
      ],
      "argument": "<,arg>",
      "description": "Pass the comma separated arguments in <arg> to the preprocessor"
    },
    {
      "names": [
        "-W"
      ],
      "argument": "<warning>",
      "description": "Enable the specified warning"
    },
    {
      "names": [
        "-w"
      ],
      "argument": "",
      "description": "Suppress all warnings"
    },
    {
      "names": [
        "-Xanalyzer"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the static analyzer"
    },
    {
      "names": [
        "-Xassembler"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the assembler"
    },
    {
      "names": [
        "-Xclang"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the clang compiler"
    },
    {
      "names": [
        "-Xcuda-fatbinary"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to fatbinary invocation"
    },
    {
      "names": [
        "-Xcuda-ptxas"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the ptxas assembler"
    },
    {
      "names": [
        "-Xlinker"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the linker"
    },
    {
      "names": [
        "-Xopenmp-target"
      ],
      "argument": "<triple>",
      "description": "<arg> Pass <arg> to the target offloading toolchain identified by <triple>."
    },
    {
      "names": [
        "-Xopenmp-target"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the target offloading toolchain."
    },
    {
      "names": [
        "-Xpreprocessor"
      ],
      "argument": "<arg>",
      "description": "Pass <arg> to the preprocessor"
    },
    {
      "names": [
        "-x"
      ],
      "argument": "<language>",
      "description": "Treat subsequent input files as having type <language>"
    },
    {
      "names": [
        "-z"
      ],
      "argument": "<arg>",
      "description": "Pass -z <arg> to the linker"
    }
  ]
}
