{"name":"go","description":"go","usage":"go <command> [arguments]","options":[],"subcommands":[{"name":"bug","description":"start a bug report","usage":"go bug","options":[]},{"name":"build","description":"compile packages and dependencies","usage":"go build [-o output] [build flags] [packages]","options":[{"names":["-C"],"argument":"dir","description":"Change to dir before running the command. Any files named on the command line are interpreted after changing directories. If used, this flag must be the first one in the command line."},{"names":["-a"],"argument":"","description":"force rebuilding of packages that are already up-to-date."},{"names":["-n"],"argument":"","description":"print the commands but do not run them."},{"names":["-p"],"argument":"n","description":"the number of programs, such as build commands or test binaries, that can be run in parallel. The default is GOMAXPROCS, normally the number of CPUs available."},{"names":["-race"],"argument":"","description":"enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, darwin/arm64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA)."},{"names":["-msan"],"argument":"","description":"enable interoperation with memory sanitizer. Supported only on linux/amd64, linux/arm64, freebsd/amd64 and only with Clang/LLVM as the host C compiler. PIE build mode will be used on all platforms except linux/amd64."},{"names":["-asan"],"argument":"","description":"enable interoperation with address sanitizer. Supported only on linux/arm64, linux/amd64. Supported only on linux/amd64 or linux/arm64 and only with GCC 7 and higher or Clang/LLVM 9 and higher."},{"names":["-cover"],"argument":"","description":"enable code coverage instrumentation."},{"names":["-covermode"],"argument":"set,count,atomic","description":"set the mode for coverage analysis. The default is \"set\" unless -race is enabled, in which case it is \"atomic\". The values: set: bool: does this statement run? count: int: how many times does this statement run? atomic: int: count, but correct in multithreaded tests;"},{"names":["-coverpkg"],"argument":"pattern1,pattern2,pattern3","description":"For a build that targets package 'main' (e.g. building a Go executable), apply coverage analysis to each package matching the patterns. The default is to apply coverage analysis to packages in the main Go module. See 'go help packages' for a description of package patterns. Sets -cover."},{"names":["-v"],"argument":"","description":"print the names of packages as they are compiled."},{"names":["-work"],"argument":"","description":"print the name of the temporary work directory and do not delete it when exiting."},{"names":["-x"],"argument":"","description":"print the commands."},{"names":["-asmflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool asm invocation."},{"names":["-buildmode"],"argument":"mode","description":"build mode to use. See 'go help buildmode' for more."},{"names":["-buildvcs"],"argument":"","description":"Whether to stamp binaries with version control information (\"true\", \"false\", or \"auto\"). By default (\"auto\"), version control information is stamped into a binary if the main package, the main module containing it, and the current directory are all in the same repository. Use -buildvcs=false to always omit version control information, or -buildvcs=true to error out if version control information is available but cannot be included due to a missing tool or ambiguous directory structure."},{"names":["-compiler"],"argument":"name","description":"name of compiler to use, as in runtime.Compiler (gccgo or gc)."},{"names":["-gccgoflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each gccgo compiler/linker invocation."},{"names":["-gcflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool compile invocation."},{"names":["-installsuffix"],"argument":"suffix","description":"a suffix to use in the name of the package installation directory, in order to keep output separate from default builds. If using the -race flag, the install suffix is automatically set to race or, if set explicitly, has _race appended to it. Likewise for the -msan and -asan flags. Using a -buildmode option that requires non-default compile flags has a similar effect."},{"names":["-ldflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool link invocation."},{"names":["-linkshared"],"argument":"","description":"build code that will be linked against shared libraries previously created with -buildmode=shared."},{"names":["-mod"],"argument":"mode","description":"module download mode to use: readonly, vendor, or mod. By default, if a vendor directory is present and the go version in go.mod is 1.14 or higher, the go command acts as if -mod=vendor were set. Otherwise, the go command acts as if -mod=readonly were set. See https://golang.org/ref/mod#build-commands for details."},{"names":["-modcacherw"],"argument":"","description":"leave newly-created directories in the module cache read-write instead of making them read-only."},{"names":["-modfile"],"argument":"file","description":"in module aware mode, read (and possibly write) an alternate go.mod file instead of the one in the module root directory. A file named \"go.mod\" must still be present in order to determine the module root directory, but it is not accessed. When -modfile is specified, an alternate go.sum file is also used: its path is derived from the -modfile flag by trimming the \".mod\" extension and appending \".sum\"."},{"names":["-overlay"],"argument":"file","description":"read a JSON config file that provides an overlay for build operations. The file is a JSON struct with a single field, named 'Replace', that maps each disk file path (a string) to its backing file path, so that a build will run as if the disk file path exists with the contents given by the backing file paths, or as if the disk file path does not exist if its backing file path is empty. Support for the -overlay flag has some limitations: importantly, cgo files included from outside the include path must be in the same directory as the Go package they are included from, and overlays will not appear when binaries and tests are run through go run and go test respectively."},{"names":["-pgo"],"argument":"file","description":"specify the file path of a profile for profile-guided optimization (PGO). When the special name \"auto\" is specified, for each main package in the build, the go command selects a file named \"default.pgo\" in the package's directory if that file exists, and applies it to the (transitive) dependencies of the main package (other packages are not affected). Special name \"off\" turns off PGO. The default is \"auto\"."},{"names":["-pkgdir"],"argument":"dir","description":"install and load all packages from dir instead of the usual locations. For example, when building with a non-standard configuration, use -pkgdir to keep generated packages in a separate location."},{"names":["-tags"],"argument":"tag,list","description":"a comma-separated list of additional build tags to consider satisfied during the build. For more information about build tags, see 'go help buildconstraint'. (Earlier versions of Go used a space-separated list, and that form is deprecated but still recognized.)"},{"names":["-trimpath"],"argument":"","description":"remove all file system paths from the resulting executable. Instead of absolute file system paths, the recorded file names will begin either a module path@version (when using modules), or a plain import path (when using the standard library, or GOPATH)."},{"names":["-toolexec"],"argument":"'cmd args'","description":"a program to use to invoke toolchain programs like vet and asm. For example, instead of running asm, the go command will run 'cmd args /path/to/asm <arguments for asm>'. The TOOLEXEC_IMPORTPATH environment variable will be set, matching 'go list -f {{.ImportPath}}' for the package being built."}]},{"name":"clean","description":"remove object files and cached files","usage":"go clean [clean flags] [build flags] [packages]","options":[]},{"name":"doc","description":"show documentation for package or symbol","usage":"go doc [doc flags] [package|[package.]symbol[.methodOrField]]","options":[{"names":["-all"],"argument":"","description":"Show all the documentation for the package."},{"names":["-c"],"argument":"","description":"Respect case when matching symbols."},{"names":["-cmd"],"argument":"","description":"Treat a command (package main) like a regular package. Otherwise package main's exported symbols are hidden when showing the package's top-level documentation."},{"names":["-short"],"argument":"","description":"One-line representation for each symbol."},{"names":["-src"],"argument":"","description":"Show the full source code for the symbol. This will display the full Go source of its declaration and definition, such as a function definition (including the body), type declaration or enclosing const block. The output may therefore include unexported details."},{"names":["-u"],"argument":"","description":"Show documentation for unexported as well as exported symbols, methods, and fields."}],"subcommands":[{"name":"documentation","description":"for json.Decoder's Decode method:","usage":"","options":[]}]},{"name":"env","description":"print Go environment information","usage":"go env [-json] [-u] [-w] [var ...]","options":[]},{"name":"fix","description":"update packages to use new APIs","usage":"go fix [-fix list] [packages]","options":[]},{"name":"fmt","description":"gofmt (reformat) package sources","usage":"go fmt [-n] [-x] [packages]","options":[]},{"name":"generate","description":"generate Go files by processing source","usage":"go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages]","options":[{"names":["-run"],"argument":"\"\"","description":"if non-empty, specifies a regular expression to select directives whose full original source text (excluding any trailing spaces and final newline) matches the expression."},{"names":["-skip"],"argument":"\"\"","description":"if non-empty, specifies a regular expression to suppress directives whose full original source text (excluding any trailing spaces and final newline) matches the expression. If a directive matches both the -run and the -skip arguments, it is skipped."}]},{"name":"get","description":"add dependencies to current module and install them","usage":"go get [-t] [-u] [-v] [build flags] [packages]","options":[]},{"name":"install","description":"compile and install packages and dependencies","usage":"go install [build flags] [packages]","options":[]},{"name":"list","description":"list packages or modules","usage":"go list [-f format] [-json] [-m] [list flags] [build flags] [packages]","options":[]},{"name":"mod","description":"module maintenance","usage":"go mod <command> [arguments]","options":[],"subcommands":[{"name":"download","description":"download modules to local cache","usage":"go mod download [-x] [-json] [-reuse=old.json] [modules]","options":[]},{"name":"edit","description":"edit go.mod from tools or scripts","usage":"go mod edit [editing flags] [-fmt|-print|-json] [go.mod]","options":[]},{"name":"graph","description":"print module requirement graph","usage":"go mod graph [-go=version] [-x]","options":[]},{"name":"init","description":"initialize new module in current directory","usage":"go mod init [module-path]","options":[]},{"name":"tidy","description":"add missing and remove unused modules","usage":"go mod tidy [-e] [-v] [-x] [-go=version] [-compat=version]","options":[]},{"name":"vendor","description":"make vendored copy of dependencies","usage":"go mod vendor [-e] [-v] [-o outdir]","options":[]},{"name":"verify","description":"verify dependencies have expected content","usage":"go mod verify","options":[]},{"name":"why","description":"explain why packages or modules are needed","usage":"go mod why [-m] [-vendor] packages...","options":[]}]},{"name":"work","description":"workspace maintenance","usage":"go work <command> [arguments]","options":[],"subcommands":[{"name":"edit","description":"edit go.work from tools or scripts","usage":"go work edit [editing flags] [go.work]","options":[]},{"name":"init","description":"initialize workspace file","usage":"go work init [moddirs]","options":[]},{"name":"sync","description":"sync workspace build list to modules","usage":"go work sync","options":[]},{"name":"use","description":"add modules to workspace file","usage":"go work use [-r] [moddirs]","options":[]}]},{"name":"run","description":"compile and run Go program","usage":"go run [build flags] [-exec xprog] package [arguments...]","options":[]},{"name":"test","description":"test packages","usage":"go test [build/test flags] [packages] [build/test flags & test binary flags]","options":[{"names":["-C"],"argument":"dir","description":"Change to dir before running the command. Any files named on the command line are interpreted after changing directories. If used, this flag must be the first one in the command line."},{"names":["-a"],"argument":"","description":"force rebuilding of packages that are already up-to-date."},{"names":["-n"],"argument":"","description":"print the commands but do not run them."},{"names":["-p"],"argument":"n","description":"the number of programs, such as build commands or test binaries, that can be run in parallel. The default is GOMAXPROCS, normally the number of CPUs available."},{"names":["-race"],"argument":"","description":"enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, darwin/arm64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA)."},{"names":["-msan"],"argument":"","description":"enable interoperation with memory sanitizer. Supported only on linux/amd64, linux/arm64, freebsd/amd64 and only with Clang/LLVM as the host C compiler. PIE build mode will be used on all platforms except linux/amd64."},{"names":["-asan"],"argument":"","description":"enable interoperation with address sanitizer. Supported only on linux/arm64, linux/amd64. Supported only on linux/amd64 or linux/arm64 and only with GCC 7 and higher or Clang/LLVM 9 and higher."},{"names":["-cover"],"argument":"","description":"enable code coverage instrumentation."},{"names":["-covermode"],"argument":"set,count,atomic","description":"set the mode for coverage analysis. The default is \"set\" unless -race is enabled, in which case it is \"atomic\". The values: set: bool: does this statement run? count: int: how many times does this statement run? atomic: int: count, but correct in multithreaded tests;"},{"names":["-coverpkg"],"argument":"pattern1,pattern2,pattern3","description":"For a build that targets package 'main' (e.g. building a Go executable), apply coverage analysis to each package matching the patterns. The default is to apply coverage analysis to packages in the main Go module. See 'go help packages' for a description of package patterns. Sets -cover."},{"names":["-v"],"argument":"","description":"print the names of packages as they are compiled."},{"names":["-work"],"argument":"","description":"print the name of the temporary work directory and do not delete it when exiting."},{"names":["-x"],"argument":"","description":"print the commands."},{"names":["-asmflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool asm invocation."},{"names":["-buildmode"],"argument":"mode","description":"build mode to use. See 'go help buildmode' for more."},{"names":["-buildvcs"],"argument":"","description":"Whether to stamp binaries with version control information (\"true\", \"false\", or \"auto\"). By default (\"auto\"), version control information is stamped into a binary if the main package, the main module containing it, and the current directory are all in the same repository. Use -buildvcs=false to always omit version control information, or -buildvcs=true to error out if version control information is available but cannot be included due to a missing tool or ambiguous directory structure."},{"names":["-compiler"],"argument":"name","description":"name of compiler to use, as in runtime.Compiler (gccgo or gc)."},{"names":["-gccgoflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each gccgo compiler/linker invocation."},{"names":["-gcflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool compile invocation."},{"names":["-installsuffix"],"argument":"suffix","description":"a suffix to use in the name of the package installation directory, in order to keep output separate from default builds. If using the -race flag, the install suffix is automatically set to race or, if set explicitly, has _race appended to it. Likewise for the -msan and -asan flags. Using a -buildmode option that requires non-default compile flags has a similar effect."},{"names":["-ldflags"],"argument":"'[pattern=]arg list'","description":"arguments to pass on each go tool link invocation."},{"names":["-linkshared"],"argument":"","description":"build code that will be linked against shared libraries previously created with -buildmode=shared."},{"names":["-mod"],"argument":"mode","description":"module download mode to use: readonly, vendor, or mod. By default, if a vendor directory is present and the go version in go.mod is 1.14 or higher, the go command acts as if -mod=vendor were set. Otherwise, the go command acts as if -mod=readonly were set. See https://golang.org/ref/mod#build-commands for details."},{"names":["-modcacherw"],"argument":"","description":"leave newly-created directories in the module cache read-write instead of making them read-only."},{"names":["-modfile"],"argument":"file","description":"in module aware mode, read (and possibly write) an alternate go.mod file instead of the one in the module root directory. A file named \"go.mod\" must still be present in order to determine the module root directory, but it is not accessed. When -modfile is specified, an alternate go.sum file is also used: its path is derived from the -modfile flag by trimming the \".mod\" extension and appending \".sum\"."},{"names":["-overlay"],"argument":"file","description":"read a JSON config file that provides an overlay for build operations. The file is a JSON struct with a single field, named 'Replace', that maps each disk file path (a string) to its backing file path, so that a build will run as if the disk file path exists with the contents given by the backing file paths, or as if the disk file path does not exist if its backing file path is empty. Support for the -overlay flag has some limitations: importantly, cgo files included from outside the include path must be in the same directory as the Go package they are included from, and overlays will not appear when binaries and tests are run through go run and go test respectively."},{"names":["-pgo"],"argument":"file","description":"specify the file path of a profile for profile-guided optimization (PGO). When the special name \"auto\" is specified, for each main package in the build, the go command selects a file named \"default.pgo\" in the package's directory if that file exists, and applies it to the (transitive) dependencies of the main package (other packages are not affected). Special name \"off\" turns off PGO. The default is \"auto\"."},{"names":["-pkgdir"],"argument":"dir","description":"install and load all packages from dir instead of the usual locations. For example, when building with a non-standard configuration, use -pkgdir to keep generated packages in a separate location."},{"names":["-tags"],"argument":"tag,list","description":"a comma-separated list of additional build tags to consider satisfied during the build. For more information about build tags, see 'go help buildconstraint'. (Earlier versions of Go used a space-separated list, and that form is deprecated but still recognized.)"},{"names":["-trimpath"],"argument":"","description":"remove all file system paths from the resulting executable. Instead of absolute file system paths, the recorded file names will begin either a module path@version (when using modules), or a plain import path (when using the standard library, or GOPATH)."},{"names":["-toolexec"],"argument":"'cmd args'","description":"a program to use to invoke toolchain programs like vet and asm. For example, instead of running asm, the go command will run 'cmd args /path/to/asm <arguments for asm>'. The TOOLEXEC_IMPORTPATH environment variable will be set, matching 'go list -f {{.ImportPath}}' for the package being built."},{"names":["-args"],"argument":"","description":"Pass the remainder of the command line (everything after -args) to the test binary, uninterpreted and unchanged. Because this flag consumes the remainder of the command line, the package list (if present) must appear before this flag."},{"names":["-c"],"argument":"","description":"Compile the test binary to pkg.test in the current directory but do not run it (where pkg is the last element of the package's import path). The file name or target directory can be changed with the -o flag."},{"names":["-exec"],"argument":"xprog","description":"Run the test binary using xprog. The behavior is the same as in 'go run'. See 'go help run' for details."},{"names":["-json"],"argument":"","description":"Convert test output to JSON suitable for automated processing. See 'go doc test2json' for the encoding details."},{"names":["-o"],"argument":"file","description":"Compile the test binary to the named file. The test still runs (unless -c or -i is specified). If file ends in a slash or names an existing directory, the test is written to pkg.test in that directory."}]},{"name":"tool","description":"run specified go tool","usage":"go tool [-n] command [args...]","options":[]},{"name":"version","description":"print Go version","usage":"go version [-m] [-v] [file ...]","options":[]},{"name":"vet","description":"report likely mistakes in packages","usage":"go vet [build flags] [-vettool prog] [vet flags] [packages]","options":[]},{"name":"buildconstraint","description":"build constraints","usage":"","options":[{"names":["-"],"argument":"","description":"\"unix\", if GOOS is a Unix or Unix-like system."}]},{"name":"buildmode","description":"build modes","usage":"","options":[{"names":["-buildmode"],"argument":"archive","description":"Build the listed non-main packages into .a files. Packages named main are ignored."},{"names":["-buildmode"],"argument":"c-archive","description":"Build the listed main package, plus all packages it imports, into a C archive file. The only callable symbols will be those functions exported using a cgo //export comment. Requires exactly one main package to be listed."},{"names":["-buildmode"],"argument":"c-shared","description":"Build the listed main package, plus all packages it imports, into a C shared library. The only callable symbols will be those functions exported using a cgo //export comment. Requires exactly one main package to be listed."},{"names":["-buildmode"],"argument":"default","description":"Listed main packages are built into executables and listed non-main packages are built into .a files (the default behavior)."},{"names":["-buildmode"],"argument":"shared","description":"Combine all the listed non-main packages into a single shared library that will be used when building with the -linkshared option. Packages named main are ignored."},{"names":["-buildmode"],"argument":"exe","description":"Build the listed main packages and everything they import into executables. Packages not named main are ignored."},{"names":["-buildmode"],"argument":"pie","description":"Build the listed main packages and everything they import into position independent executables (PIE). Packages not named main are ignored."},{"names":["-buildmode"],"argument":"plugin","description":"Build the listed main packages, plus all packages that they import, into a Go plugin. Packages not named main are ignored."}]},{"name":"c","description":"calling between Go and C","usage":"","options":[]},{"name":"cache","description":"build and test caching","usage":"","options":[]},{"name":"environment","description":"environment variables","usage":"","options":[]},{"name":"filetype","description":"file types","usage":"","options":[]},{"name":"gopath","description":"GOPATH environment variable","usage":"","options":[]},{"name":"gopath-get","description":"legacy GOPATH go get","usage":"go get [-d] [-f] [-t] [-u] [-v] [-fix] [build flags] [packages]","options":[]},{"name":"goproxy","description":"module proxy protocol","usage":"","options":[]},{"name":"importpath","description":"import path syntax","usage":"","options":[]},{"name":"modules","description":"modules, module versions, and more","usage":"","options":[]},{"name":"module-get","description":"module-aware go get","usage":"go get [-t] [-u] [-v] [build flags] [packages]","options":[]},{"name":"module-auth","description":"module authentication using go.sum","usage":"","options":[]},{"name":"packages","description":"package lists and patterns","usage":"","options":[]},{"name":"private","description":"configuration for downloading non-public code","usage":"","options":[]},{"name":"testflag","description":"testing flags","usage":"","options":[{"names":["-bench"],"argument":"regexp","description":"Run only those benchmarks matching a regular expression. By default, no benchmarks are run. To run all benchmarks, use '-bench .' or '-bench=.'. The regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a benchmark's identifier must match the corresponding element in the sequence, if any. Possible parents of matches are run with b.N=1 to identify sub-benchmarks. For example, given -bench=X/Y, top-level benchmarks matching X are run with b.N=1 to find any sub-benchmarks matching Y, which are then run in full."},{"names":["-benchtime"],"argument":"t","description":"Run enough iterations of each benchmark to take t, specified as a time.Duration (for example, -benchtime 1h30s). The default is 1 second (1s). The special syntax Nx means to run the benchmark N times (for example, -benchtime 100x)."},{"names":["-count"],"argument":"n","description":"Run each test, benchmark, and fuzz seed n times (default 1). If -cpu is set, run n times for each GOMAXPROCS value. Examples are always run once. -count does not apply to fuzz tests matched by -fuzz."},{"names":["-cover"],"argument":"","description":"Enable coverage analysis. Note that because coverage works by annotating the source code before compilation, compilation and test failures with coverage enabled may report line numbers that don't correspond to the original sources."},{"names":["-covermode"],"argument":"set,count,atomic","description":"Set the mode for coverage analysis for the package[s] being tested. The default is \"set\" unless -race is enabled, in which case it is \"atomic\". The values:"},{"names":["-coverpkg"],"argument":"pattern1,pattern2,pattern3","description":"Apply coverage analysis in each test to packages matching the patterns. The default is for each test to analyze only the package being tested. See 'go help packages' for a description of package patterns. Sets -cover."},{"names":["-cpu"],"argument":"1,2,4","description":"Specify a list of GOMAXPROCS values for which the tests, benchmarks or fuzz tests should be executed. The default is the current value of GOMAXPROCS. -cpu does not apply to fuzz tests matched by -fuzz."},{"names":["-failfast"],"argument":"","description":"Do not start new tests after the first test failure."},{"names":["-fullpath"],"argument":"","description":"Show full file names in the error messages."},{"names":["-fuzz"],"argument":"regexp","description":"Run the fuzz test matching the regular expression. When specified, the command line argument must match exactly one package within the main module, and regexp must match exactly one fuzz test within that package. Fuzzing will occur after tests, benchmarks, seed corpora of other fuzz tests, and examples have completed. See the Fuzzing section of the testing package documentation for details."},{"names":["-fuzztime"],"argument":"t","description":"Run enough iterations of the fuzz target during fuzzing to take t, specified as a time.Duration (for example, -fuzztime 1h30s)."},{"names":["-fuzzminimizetime"],"argument":"t","description":"Run enough iterations of the fuzz target during each minimization attempt to take t, as specified as a time.Duration (for example, -fuzzminimizetime 30s)."},{"names":["-json"],"argument":"","description":"Log verbose output and test results in JSON. This presents the same information as the -v flag in a machine-readable format."},{"names":["-list"],"argument":"regexp","description":"List tests, benchmarks, fuzz tests, or examples matching the regular expression. No tests, benchmarks, fuzz tests, or examples will be run. This will only list top-level tests. No subtest or subbenchmarks will be shown."},{"names":["-parallel"],"argument":"n","description":"Allow parallel execution of test functions that call t.Parallel, and fuzz targets that call t.Parallel when running the seed corpus. The value of this flag is the maximum number of tests to run simultaneously. While fuzzing, the value of this flag is the maximum number of subprocesses that may call the fuzz function simultaneously, regardless of whether T.Parallel is called. By default, -parallel is set to the value of GOMAXPROCS. Setting -parallel to values higher than GOMAXPROCS may cause degraded performance due to CPU contention, especially when fuzzing. Note that -parallel only applies within a single test binary. The 'go test' command may run tests for different packages in parallel as well, according to the setting of the -p flag (see 'go help build')."},{"names":["-run"],"argument":"regexp","description":"Run only those tests, examples, and fuzz tests matching the regular expression. For tests, the regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a test's identifier must match the corresponding element in the sequence, if any. Note that possible parents of matches are run too, so that -run=X/Y matches and runs and reports the result of all tests matching X, even those without sub-tests matching Y, because it must run them to look for those sub-tests. See also -skip."},{"names":["-short"],"argument":"","description":"Tell long-running tests to shorten their run time. It is off by default but set during all.bash so that installing the Go tree can run a sanity check but not spend time running exhaustive tests."},{"names":["-shuffle"],"argument":"off,on,N","description":"Randomize the execution order of tests and benchmarks. It is off by default. If -shuffle is set to on, then it will seed the randomizer using the system clock. If -shuffle is set to an integer N, then N will be used as the seed value. In both cases, the seed will be reported for reproducibility."},{"names":["-skip"],"argument":"regexp","description":"Run only those tests, examples, fuzz tests, and benchmarks that do not match the regular expression. Like for -run and -bench, for tests and benchmarks, the regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a test's identifier must match the corresponding element in the sequence, if any."},{"names":["-timeout"],"argument":"d","description":"If a test binary runs longer than duration d, panic. If d is 0, the timeout is disabled. The default is 10 minutes (10m)."},{"names":["-v"],"argument":"","description":"Verbose output: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds."},{"names":["-vet"],"argument":"list","description":"Configure the invocation of \"go vet\" during \"go test\" to use the comma-separated list of vet checks. If list is empty, \"go test\" runs \"go vet\" with a curated list of checks believed to be always worth addressing. If list is \"off\", \"go test\" does not run \"go vet\" at all."},{"names":["-benchmem"],"argument":"","description":"Print memory allocation statistics for benchmarks."},{"names":["-blockprofile"],"argument":"block.out","description":"Write a goroutine blocking profile to the specified file when all tests are complete. Writes test binary as -c would."},{"names":["-blockprofilerate"],"argument":"n","description":"Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate with n. See 'go doc runtime.SetBlockProfileRate'. The profiler aims to sample, on average, one blocking event every n nanoseconds the program spends blocked. By default, if -test.blockprofile is set without this flag, all blocking events are recorded, equivalent to -test.blockprofilerate=1."},{"names":["-coverprofile"],"argument":"cover.out","description":"Write a coverage profile to the file after all tests have passed. Sets -cover."},{"names":["-cpuprofile"],"argument":"cpu.out","description":"Write a CPU profile to the specified file before exiting. Writes test binary as -c would."},{"names":["-memprofile"],"argument":"mem.out","description":"Write an allocation profile to the file after all tests have passed. Writes test binary as -c would."},{"names":["-memprofilerate"],"argument":"n","description":"Enable more precise (and expensive) memory allocation profiles by setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'. To profile all memory allocations, use -test.memprofilerate=1."},{"names":["-mutexprofile"],"argument":"mutex.out","description":"Write a mutex contention profile to the specified file when all tests are complete. Writes test binary as -c would."},{"names":["-mutexprofilefraction"],"argument":"n","description":"Sample 1 in n stack traces of goroutines holding a contended mutex."},{"names":["-outputdir"],"argument":"directory","description":"Place output files from profiling in the specified directory, by default the directory in which \"go test\" is running."},{"names":["-trace"],"argument":"trace.out","description":"Write an execution trace to the specified file before exiting."}]},{"name":"testfunc","description":"testing functions","usage":"","options":[]},{"name":"vcs","description":"controlling version control with GOVCS","usage":"","options":[]}],"version":"go version go1.21.1","tldr":"> Tool for managing go source code.\n> Some subcommands such as `go build` have their own usage documentation.\n> More information: <https://golang.org>.\n\n- Download and install a package, specified by its import path:\n\n`go get {{package_path}}`\n\n- Compile and run a source file (it has to contain a `main` package):\n\n`go run {{file}}.go`\n\n- Compile a source file into a named executable:\n\n`go build -o {{executable}} {{file}}.go`\n\n- Compile the package present in the current directory:\n\n`go build`\n\n- Execute all test cases of the current package (files have to end with `_test.go`):\n\n`go test`\n\n- Compile and install the current package:\n\n`go install`\n\n- Initialize a new module in the current directory:\n\n`go mod init {{module_name}}`\n"}
