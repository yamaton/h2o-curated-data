{"name":"grex","description":"grex","options":[{"names":["-f","--file"],"argument":"<FILE>","description":"Reads test cases on separate lines from a file."},{"names":["-d","--digits"],"argument":"","description":"Converts any Unicode decimal digit to \\d."},{"names":["-D","--non-digits"],"argument":"","description":"Converts any character which is not a Unicode decimal digit to \\D."},{"names":["-s","--spaces"],"argument":"","description":"Converts any Unicode whitespace character to \\s."},{"names":["-S","--non-spaces"],"argument":"","description":"Converts any character which is not a Unicode whitespace character to \\S"},{"names":["-w","--words"],"argument":"","description":"Converts any Unicode word character to \\w."},{"names":["-W","--non-words"],"argument":"","description":"Converts any character which is not a Unicode word character to \\W."},{"names":["-e","--escape"],"argument":"","description":"Replaces all non-ASCII characters with unicode escape sequences"},{"names":["--with-surrogates"],"argument":"","description":"Converts astral code points to surrogate pairs if --escape is set"},{"names":["-r","--repetitions"],"argument":"","description":"Detects repeated non-overlapping substrings and converts them to {min,max} quantifier notation"},{"names":["--min-repetitions"],"argument":"<QUANTITY>","description":"Specifies the minimum quantity of substring repetitions to be converted if --repetitions is set"},{"names":["--min-substring-length"],"argument":"<LENGTH>","description":"Specifies the minimum length a repeated substring must have in order to be converted if --repetitions is set"},{"names":["--no-anchors"],"argument":"","description":"Removes the caret and dollar sign anchors from the resulting regular expression."},{"names":["--no-end-anchor"],"argument":"","description":"Removes the dollar sign anchor `$` from the resulting regular expression."},{"names":["--no-start-anchor"],"argument":"","description":"Removes the caret anchor `^` from the resulting regular expression."},{"names":["-x","--verbose"],"argument":"","description":"Produces a nicer-looking regular expression in verbose mode"},{"names":["-c","--colorize"],"argument":"","description":"Provides syntax highlighting for the resulting regular expression"},{"names":["-i","--ignore-case"],"argument":"","description":"Performs case-insensitive matching, letters match both upper and lower case"},{"names":["-g","--capture-groups"],"argument":"","description":"Replaces non-capturing groups with capturing ones"},{"names":["-h","--help"],"argument":"","description":"Print help information"},{"names":["-v","--version"],"argument":"","description":"Print version information"}],"version":"grex 1.4.0","tldr":"> Simple command-line tool to generate regular expressions.\n> More information: <https://github.com/pemistahl/grex>.\n\n- Generate a simple regular expression:\n\n` grex {{space_separated_strings}}`\n\n- Generate a case-insensitive regular expression:\n\n`grex -i {{space_separated_strings}}`\n\n- Replace digits with '\\d':\n\n`grex -d {{space_separated_strings}}`\n\n- Replace Unicode word character with '\\w':\n\n`grex -w {{space_separated_strings}}`\n\n- Replace spaces with '\\s':\n\n`grex -s {{space_separated_strings}}`\n\n- Add {min, max} quantifier representation for repeating sub-strings:\n\n`grex -r {{space_separated_strings}}`\n"}
