{"name":"http","description":"http","options":[{"names":["--json","-j"],"argument":"","description":"(default) Data items from the command line are serialized as a JSON object. The Content-Type and Accept headers are set to application/json (if not specified)."},{"names":["--form","-f"],"argument":"","description":"Data items from the command line are serialized as form fields."},{"names":["--multipart"],"argument":"","description":"Similar to --form, but always sends a multipart/form-data request (i.e., even without files)."},{"names":["--boundary"],"argument":"BOUNDARY","description":"Specify a custom boundary string for multipart/form-data requests. Only has effect only together with --form."},{"names":["--raw"],"argument":"RAW","description":"This option allows you to pass raw request data without extra processing (as opposed to the structured request items syntax):"},{"names":["--compress","-x"],"argument":"","description":"Content compressed (encoded) with Deflate algorithm. The Content-Encoding header is set to deflate."},{"names":["--pretty"],"argument":"{all,colors,format,none}","description":"Controls output processing. The value can be \"none\" to not prettify"},{"names":["--style","-s"],"argument":"STYLE","description":"Output coloring style (default is \"auto\"). It can be one of:"},{"names":["--unsorted"],"argument":"","description":"Disables all sorting while formatting output. It is a shortcut for:"},{"names":["--response-charset"],"argument":"utf8","description":"--response-charset=big5"},{"names":["--response-mime"],"argument":"MIME_TYPE","description":"Override the response mime type for coloring and formatting for the terminal, e.g.:"},{"names":["--format-options"],"argument":"FORMAT_OPTIONS","description":"Controls output formatting. Only relevant when formatting is enabled"},{"names":["--print","-p"],"argument":"WHAT","description":"String specifying what the output should contain:"},{"names":["--headers","-h"],"argument":"","description":"Print only the response headers. Shortcut for --print=h."},{"names":["--meta","-m"],"argument":"","description":"Print only the response metadata. Shortcut for --print=m."},{"names":["--body","-b"],"argument":"","description":"Print only the response body. Shortcut for --print=b."},{"names":["--verbose","-v"],"argument":"","description":"Verbose output. For the level one (with single `-v`/`--verbose`), print the whole request as well as the response. Also print any intermediary requests/responses (such as redirects). For the second level and higher, print these as well as the response metadata."},{"names":["--all"],"argument":"","description":"By default, only the final request/response is shown. Use this flag to show any intermediary requests/responses as well. Intermediary requests include followed redirects (with --follow), the first unauthorized request when Digest auth is used (--auth=digest), etc."},{"names":["--stream","-S"],"argument":"","description":"Always stream the response body by line, i.e., behave like `tail -f'."},{"names":["--output","-o"],"argument":"FILE","description":"Save output to FILE instead of stdout. If --download is also set, then only the response body is saved to FILE. Other parts of the HTTP exchange are printed to stderr."},{"names":["--download","-d"],"argument":"","description":"Do not print the response body to stdout. Rather, download it and store it in a file. The filename is guessed unless specified with --output [filename]. This action is similar to the default behaviour of wget."},{"names":["--continue","-c"],"argument":"","description":"Resume an interrupted download. Note that the --output option needs to be specified as well."},{"names":["--quiet","-q"],"argument":"","description":"Do not print to stdout or stderr, except for errors and warnings when provided once. Provide twice to suppress warnings as well. stdout is still redirected if --output is specified. Flag doesn't affect behaviour of download beyond not printing to terminal."},{"names":["--session"],"argument":"SESSION_NAME_OR_PATH","description":"Create, or reuse and update a session. Within a session, custom headers, auth credential, as well as any cookies sent by the server persist between requests."},{"names":["--session-read-only"],"argument":"SESSION_NAME_OR_PATH","description":"Create or read a session without updating it form the request/response exchange."},{"names":["--auth","-a"],"argument":"USER[:PASS] | TOKEN","description":"For username/password based authentication mechanisms (e.g basic auth or digest auth) if only the username is provided (-a username), HTTPie will prompt for the password."},{"names":["--auth-type","-A"],"argument":"{basic,bearer,digest}","description":"The authentication mechanism to be used. Defaults to \"basic\"."},{"names":["--ignore-netrc"],"argument":"","description":"Ignore credentials from .netrc."},{"names":["--offline"],"argument":"","description":"Build the request and print it but don’t actually send it."},{"names":["--proxy"],"argument":"PROTOCOL:PROXY_URL","description":"String mapping protocol to the URL of the proxy (e.g. http:http://foo.bar:3128). You can specify multiple proxies with different protocols. The environment variables $ALL_PROXY, $HTTP_PROXY, and $HTTPS_proxy are supported as well."},{"names":["--follow","-F"],"argument":"","description":"Follow 30x Location redirects."},{"names":["--max-redirects"],"argument":"MAX_REDIRECTS","description":"By default, requests have a limit of 30 redirects (works with --follow)."},{"names":["--max-headers"],"argument":"MAX_HEADERS","description":"The maximum number of response headers to be read before giving up (default 0, i.e., no limit)."},{"names":["--timeout"],"argument":"SECONDS","description":"The connection timeout of the request in seconds. The default value is 0, i.e., there is no timeout limit. This is not a time limit on the entire response download; rather, an error is reported if the server has not issued a response for timeout seconds (more precisely, if no bytes have been received on the underlying socket for timeout seconds)."},{"names":["--check-status"],"argument":"","description":"By default, HTTPie exits with 0 when no network or other fatal errors occur. This flag instructs HTTPie to also check the HTTP status code and exit with an error if the status indicates one."},{"names":["--path-as-is"],"argument":"","description":"Bypass dot segment (/../ or /./) URL squashing."},{"names":["--chunked"],"argument":"","description":"Enable streaming via chunked transfer encoding. The Transfer-Encoding header is set to chunked."},{"names":["--verify"],"argument":"VERIFY","description":"Set to \"no\" (or \"false\") to skip checking the host's SSL certificate. Defaults to \"yes\" (\"true\"). You can also pass the path to a CA_BUNDLE file for private certs. (Or you can set the REQUESTS_CA_BUNDLE environment variable instead.)"},{"names":["--ssl"],"argument":"{ssl2.3,tls1,tls1.1,tls1.2}","description":"The desired protocol version to use. This will default to SSL v2.3 which will negotiate the highest protocol that both the server and your installation of OpenSSL support. Available protocols may vary depending on OpenSSL installation (only the supported ones are shown here)."},{"names":["--ciphers"],"argument":"CIPHERS","description":"A string in the OpenSSL cipher list format. By default, the following is used:"},{"names":["--cert"],"argument":"CERT","description":"You can specify a local cert to use as client side SSL certificate. This file may either contain both private key and certificate or you may specify --cert-key separately."},{"names":["--cert-key"],"argument":"CERT_KEY","description":"The private key to use with SSL. Only needed if --cert is given and the certificate file does not contain the private key."},{"names":["--cert-key-pass"],"argument":"CERT_KEY_PASS","description":"The passphrase to be used to with the given private key. Only needed if --cert-key is given and the key file requires a passphrase. If not provided, you’ll be prompted interactively."},{"names":["--ignore-stdin","-I"],"argument":"","description":"Do not attempt to read stdin"},{"names":["--help"],"argument":"","description":"Show this help message and exit."},{"names":["--manual"],"argument":"","description":"Show the full manual."},{"names":["--version"],"argument":"","description":"Show version and exit."},{"names":["--traceback"],"argument":"","description":"Prints the exception traceback should one occur."},{"names":["--default-scheme"],"argument":"DEFAULT_SCHEME","description":"The default scheme to use if not specified in the URL."},{"names":["--debug"],"argument":"","description":"Prints the exception traceback should one occur, as well as other information useful for debugging HTTPie itself and for reporting bugs."}],"version":"3.2.1","tldr":"> HTTPie: HTTP client, aims to be easier to use than cURL.\n> More information: <https://httpie.org>.\n\n- Download a URL to a file:\n\n`http --download {{example.org}}`\n\n- Send form-encoded data:\n\n`http --form {{example.org}} {{name='bob'}} {{profile_picture@'bob.png'}}`\n\n- Send JSON object:\n\n`http {{example.org}} {{name='bob'}}`\n\n- Specify an HTTP method:\n\n`http {{HEAD}} {{example.org}}`\n\n- Include an extra header:\n\n`http {{example.org}} {{X-MyHeader:123}}`\n\n- Pass a username and password for server authentication:\n\n`http --auth {{username:password}} {{example.org}}`\n\n- Specify raw request body via stdin:\n\n`cat {{data.txt}} | http PUT {{example.org}}`\n"}
