{"name":"hyperfine","description":"hyperfine","options":[{"names":["-w","--warmup"],"argument":"warmupruns","description":"Perform warmupruns (number) before the actual benchmark. This can be used to fill (disk) caches for I/O-heavy programs."},{"names":["-m","--min-runs"],"argument":"minruns","description":"Perform at least minruns (number) runs for each command. Default: 10."},{"names":["-M","--max-runs"],"argument":"maxruns","description":"Perform at most maxruns (number) runs for each command. Default: no limit."},{"names":["-r","--runs"],"argument":"runs","description":"Perform exactly runs (number) runs for each command. If this option is not specified, hyperfine automatically determines the number of runs."},{"names":["-s","--setup"],"argument":"cmd","description":"Execute cmd once before each set of timing runs. This is useful for compiling software or doing other one-off setup. The --setup option can only be specified once."},{"names":["-p","--prepare"],"argument":"cmd...","description":"Execute cmd before each timing run. This is useful for clearing disk caches, for example. The --prepare option can be specified once for all commands or multiple times, once for each command. In the latter case, each preparation command will be run prior to the corresponding benchmark command."},{"names":["-c","--cleanup"],"argument":"cmd","description":"Execute cmd after the completion of all benchmarking runs for each individual command to be benchmarked. This is useful if the commands to be benchmarked produce artifacts that need to be cleaned up."},{"names":["-P","--parameter-scan"],"argument":"var min max","description":"Perform benchmark runs for each value in the range min..max. Replaces the string '{var}' in each command by the current parameter value."},{"names":["-D","--parameter-step-size"],"argument":"delta","description":"This argument requires --parameter-scan to be specified as well. Traverse the range min..max in steps of delta."},{"names":["-L","--parameter-list"],"argument":"var values","description":"Perform benchmark runs for each value in the comma-separated list of values. Replaces the string '{var}' in each command by the current parameter value."},{"names":["--style"],"argument":"type","description":"Set output style type (default: auto). Set this to 'basic' to disable output coloring and interactive elements. Set it to 'full' to enable all effects even if no interactive terminal was detected. Set this to 'nocolor' to keep the interactive output without any colors. Set this to 'color' to keep the colors without any interactive output. Set this to 'none' to disable all the output of the tool. In hyperfine versions v0.4.0..v1.12.0 this option took the -s, short option, which is now used by --setup."},{"names":["-S","--shell"],"argument":"shell","description":"Set the shell to use for executing benchmarked commands."},{"names":["-i","--ignore-failure"],"argument":"","description":"Ignore non-zero exit codes of the benchmarked programs."},{"names":["-u","--time-unit"],"argument":"unit","description":"Set the time unit to be used. Default: second. Possible values: millisecond, second."},{"names":["--export-asciidoc"],"argument":"file","description":"Export the timing summary statistics as an AsciiDoc table to the given file."},{"names":["--export-csv"],"argument":"file","description":"Export the timing summary statistics as CSV to the given file. If you need the timing results for each individual run, use the JSON export format."},{"names":["--export-json"],"argument":"file","description":"Export the timing summary statistics and timings of individual runs as JSON to the given file."},{"names":["--export-markdown"],"argument":"file","description":"Export the timing summary statistics as a Markdown table to the given file."},{"names":["--show-output"],"argument":"","description":"Print the stdout and stderr of the benchmark instead of suppressing it. This will increase the time it takes for benchmarks to run, so it should only be used for debugging purposes or when trying to benchmark output speed."},{"names":["-n","--command-name"],"argument":"name","description":"Identify a command with the given name. Commands and names are paired in the same order: the first command executed gets the first name passed as option."},{"names":["-h","--help"],"argument":"","description":"Print help message."},{"names":["-V","--version"],"argument":"","description":"Show version information."}],"version":"hyperfine 1.14.0","tldr":"> A command-line benchmarking tool.\n> More information: <https://github.com/sharkdp/hyperfine/>.\n\n- Run a basic benchmark, performing at least 10 runs:\n\n`hyperfine '{{make}}'`\n\n- Run a comparative benchmark:\n\n`hyperfine '{{make target1}}' '{{make target2}}'`\n\n- Change minimum number of benchmarking runs:\n\n`hyperfine --min-runs {{7}} '{{make}}'`\n\n- Perform benchmark with warmup:\n\n`hyperfine --warmup {{5}} '{{make}}'`\n\n- Run a command before each benchmark run (to clear caches, etc.):\n\n`hyperfine --prepare '{{make clean}}' '{{make}}'`\n\n- Run a benchmark where a single parameter changes for each run:\n\n`hyperfine --prepare '{{make clean}}' --parameter-scan {{num_threads}} {{1}} {{10}} '{{make -j {num_threads}}}'`\n"}
