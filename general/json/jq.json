{"name":"jq","description":"jq","options":[{"names":["-c"],"argument":"","description":"compact instead of pretty-printed output;"},{"names":["-n"],"argument":"","description":"use `null` as the single input value;"},{"names":["-e"],"argument":"","description":"set the exit status code based on the output;"},{"names":["-s"],"argument":"","description":"read (slurp) all inputs into an array; apply filter to it;"},{"names":["-r"],"argument":"","description":"output raw strings, not JSON texts;"},{"names":["-R"],"argument":"","description":"read raw strings, not JSON texts;"},{"names":["-C"],"argument":"","description":"colorize JSON;"},{"names":["-M"],"argument":"","description":"monochrome (don't colorize JSON);"},{"names":["-S"],"argument":"","description":"sort keys of objects on output;"},{"names":["--tab"],"argument":"","description":"use tabs for indentation;"},{"names":["--arg"],"argument":"a v","description":"set variable $a to value <v>;"},{"names":["--argjson"],"argument":"a v","description":"set variable $a to JSON value <v>;"},{"names":["--slurpfile"],"argument":"a f","description":"set variable $a to an array of JSON texts read from <f>;"},{"names":["--rawfile"],"argument":"a f","description":"set variable $a to a string consisting of the contents of <f>;"},{"names":["--args"],"argument":"","description":"remaining arguments are string arguments, not files;"},{"names":["--jsonargs"],"argument":"","description":"remaining arguments are JSON arguments, not files;"},{"names":["--"],"argument":"","description":"terminates argument processing;"}],"tldr":"> A command-line JSON processor that uses a domain-specific language.\n> More information: <https://stedolan.github.io/jq/manual/>.\n\n- Execute the specified expression (print a colored and formatted json):\n\n`{{cat path/to/file.json}} | jq '{{.}}'`\n\n- Execute the specified script:\n\n`{{cat path/to/file.json}} | jq --from-file {{path/to/script.jq}}`\n\n- Pass the specifed arguments:\n\n`{{cat path/to/file.json}} | jq {{--arg \"name1\" \"value1\" --arg \"name2\" \"value2\" ...}} '{{. + $ARGS.named}}'`\n\n- Print the specifed keys:\n\n`{{cat path/to/file.json}} | jq '{{.key1, .key2, ...}}'`\n\n- Print the specifed array items:\n\n`{{cat path/to/file.json}} | jq '{{.[index1], .[index2], ...}}'`\n\n- Print all array items/object keys:\n\n`{{cat path/to/file.json}} | jq '.[]'`\n\n- Add/remove the specified keys:\n\n`{{cat path/to/file.json}} | jq '{{.}} {{+|-}} {{{\"key1\": \"value1\", \"key2\": \"value2\", ...}}}'`\n"}
