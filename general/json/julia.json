{"name":"julia","description":"julia","usage":"julia [switches] -- [programfile] [args...]","options":[{"names":["-v","--version"],"argument":"","description":"Display version information"},{"names":["-h","--help"],"argument":"","description":"Print this message (--help-hidden for more)"},{"names":["--help-hidden"],"argument":"","description":"Uncommon options not shown by `-h`"},{"names":["--project"],"argument":"[={<dir>|@.}]","description":"Set <dir> as the home project/environment"},{"names":["-J","--sysimage"],"argument":"<file>","description":"Start up with the given system image file"},{"names":["-H","--home"],"argument":"<dir>","description":"Set location of `julia` executable"},{"names":["--startup-file"],"argument":"{yes*|no}","description":"Load `JULIA_DEPOT_PATH/config/startup.jl`; if `JULIA_DEPOT_PATH` environment variable is unset, load `~/.julia/config/startup.jl`"},{"names":["--handle-signals"],"argument":"{yes*|no}","description":"Enable or disable Julia's default signal handlers"},{"names":["--sysimage-native-code"],"argument":"{yes*|no}","description":"Use native code from system image if available"},{"names":["--compiled-modules"],"argument":"{yes*|no}","description":"Enable or disable incremental precompilation of modules"},{"names":["-e","--eval"],"argument":"<expr>","description":"Evaluate <expr>"},{"names":["-E","--print"],"argument":"<expr>","description":"Evaluate <expr> and display the result"},{"names":["-L","--load"],"argument":"<file>","description":"Load <file> immediately on all processors"},{"names":["-t","--threads"],"argument":"{N|auto}","description":"Enable N threads; \"auto\" currently sets N to the number of local CPU threads but this might change in the future"},{"names":["-p","--procs"],"argument":"{N|auto}","description":"Integer value N launches N additional local worker processes \"auto\" launches as many workers as the number of local CPU threads (logical cores)"},{"names":["--machine-file"],"argument":"<file>","description":"Run processes on hosts listed in <file>"},{"names":["-i"],"argument":"","description":"Interactive mode; REPL runs and `isinteractive()` is true"},{"names":["-q","--quiet"],"argument":"","description":"Quiet startup: no banner, suppress REPL warnings"},{"names":["--banner"],"argument":"{yes|no|auto*}","description":"Enable or disable startup banner"},{"names":["--color"],"argument":"{yes|no|auto*}","description":"Enable or disable color text"},{"names":["--history-file"],"argument":"{yes*|no}","description":"Load or save history"},{"names":["--depwarn"],"argument":"{yes|no*|error}","description":"Enable or disable syntax and method deprecation warnings (`error` turns warnings into errors)"},{"names":["--warn-overwrite"],"argument":"{yes|no*}","description":"Enable or disable method overwrite warnings"},{"names":["--warn-scope"],"argument":"{yes*|no}","description":"Enable or disable warning for ambiguous top-level scope"},{"names":["-C","--cpu-target"],"argument":"<target>","description":"Limit usage of CPU features up to <target>; set to `help` to see the available options"},{"names":["-O","--optimize"],"argument":"{0,1,2*,3}","description":"Set the optimization level (level 3 if `-O` is used without a level)"},{"names":["--min-optlevel"],"argument":"{0*,1,2,3}","description":"Set a lower bound on the optimization level"},{"names":["-g"],"argument":"[{0,1*,2}]","description":"Set the level of debug info generation (level 2 if `-g` is used without a level)"},{"names":["--inline"],"argument":"{yes*|no}","description":"Control whether inlining is permitted, including overriding @inline declarations"},{"names":["--check-bounds"],"argument":"{yes|no|auto*}","description":"Emit bounds checks always, never, or respect @inbounds declarations"},{"names":["--math-mode"],"argument":"{ieee,fast}","description":"Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)"},{"names":["--code-coverage"],"argument":"[={none*|user|all}]","description":"Count executions of source lines (omitting setting is equivalent to `user`)"},{"names":["--code-coverage"],"argument":"@<path>","description":"Count executions but only in files that fall under the given file path/directory. The `@` prefix is required to select this option. A `@` with no path will track the current directory."},{"names":["--code-coverage"],"argument":"tracefile.info","description":"Append coverage information to the LCOV tracefile (filename supports format tokens)"},{"names":["--track-allocation"],"argument":"[={none*|user|all}]","description":"Count bytes allocated by each source line (omitting setting is equivalent to `user`)"},{"names":["--track-allocation"],"argument":"@<path>","description":"Count bytes but only in files that fall under the given file path/directory. The `@` prefix is required to select this option. A `@` with no path will track the current directory."},{"names":["--bug-report"],"argument":"KIND","description":"Launch a bug report session. It can be used to start a REPL, run a script, or evaluate expressions. It first tries to use BugReporting.jl installed in current environment and fallbacks to the latest compatible BugReporting.jl if not. For more information, see --bug-report=help."}],"version":"julia version 1.8.2","tldr":"> A high-level, high-performance dynamic programming language for technical computing.\n> More information: <https://docs.julialang.org/en/v1/manual/getting-started/>.\n\n- Start a REPL (interactive shell):\n\n`julia`\n\n- Execute a Julia program and exit:\n\n`julia {{program.jl}}`\n\n- Execute a Julia program that takes arguments:\n\n`julia {{program.jl}} {{arguments}}`\n\n- Evaluate a string containing Julia code:\n\n`julia -e '{{julia_code}}'`\n\n- Evaluate a string of Julia code, passing arguments to it:\n\n`julia -e '{{for x in ARGS; println(x); end}}' {{arguments}}`\n\n- Evaluate an expression and print the result:\n\n`julia -E '{{(1 - cos(pi/4))/2}}'`\n\n- Start Julia in parallel mode, using N worker processes:\n\n`julia -p {{N}}`\n"}
