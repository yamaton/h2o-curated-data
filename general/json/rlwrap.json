{"name":"rlwrap","description":"readline wrapper","usage":"rlwrap [rlwrap-options] command ...","options":[{"names":["-a","--always-readline"],"argument":"[password_prompt]","description":"Always remain in \"readline mode\", regardless of command's terminal settings. Use this option if you want to use rlwrap with commands that already do some line editing. NB: With this option, rlwrap will echo (and save) passwords, unless you give command's password prompt as an argument. The argument is optional; if given, it has to directly follow the option without an intervening space."},{"names":["-A","--ansi-colour-aware"],"argument":"","description":"Prompts that use colour will confuse rlwrap, especially at the end of long input lines. This option will make rlwrap better behaved in such cases. If the prompt contains anything fancier than ANSI colour codes, this option may actually make things worse."},{"names":["-b","--break-chars"],"argument":"list_of_characters","description":"Consider the specified characters word-breaking (whitespace is always word-breaking). This determines what is considered a \"word\", both when completing and when building a completion word list from files specified by -f options following (not preceding!) it. Default list (){}[],'+-=&^%$#@\"\";|\\ Unless -c is specified, / and . (period) are included in the default list."},{"names":["-c","--complete-filenames"],"argument":"","description":"Complete filenames (filename completion is always case-sensitive, even with the -i option). On Linux, OS X, FreeBSD and Solaris rlwrap will keep track of command's working directory, so that relative filenames will be completed as one would expect."},{"names":["-C","--command-name"],"argument":"command_name|N","description":"Use command_name instead of command to determine the names of history and completion files, and to initialise readline (as specified in ~/.inputrc). A numeric argument N > 0 means: use the Nth argument counting backwards from the end of the argument list"},{"names":["-D","--history-no-dupes"],"argument":"n","description":"How aggressively to weed out duplicate entries from the input history. If n = 0, all inputs are kept in the history list, if n = 1 (this is the default) consecutive duplicates are dropped from the list, while n = 2 will make rlwrap drop all previous occurrences of the current input from the list."},{"names":["-e","--extra-char-after-completion"],"argument":"char","description":"By default, rlwrap appends a space after any inserted completion text. Use this option to change this to '' (don't insert anything) or some other character."},{"names":["-f","--file"],"argument":"file","description":"Split file into words (using the default word-breaking characters, or those specified by --break-chars), and add them to the completion word list. This option can be given more than once, and adds to the default completion list in $RLWRAP_HOME or /usr/share/rlwrap/completions."},{"names":["-g","--forget-matching"],"argument":"regexp","description":"Forget (i.e. never put into the history list) all input lines that match the POSIX 1003.2 regular expression regexp. The match is always case-insensitive. regexp may be an ordinary string. For more about regular expressions, see regex (7)"},{"names":["-h","--help"],"argument":"","description":"Print a short help message."},{"names":["-H","--history-filename"],"argument":"file","description":"Read command history from file (and write it back there if --histsize >= 0)"},{"names":["-i","--case-insensitive"],"argument":"","description":"Ignore case when completing (filename completion remains case-sensitive). This option has to come before any -f options."},{"names":["-I","--pass-sigint-as-sigterm"],"argument":"","description":"Send a TERM signal to command when an INT is received (e.g. when you press CTRL-C)."},{"names":["-l","--logfile"],"argument":"file","description":"When in readline mode, append command's output (including echo'ed user input) to file (creating file when it doesn't exist)."},{"names":["-n","--no-warnings"],"argument":"","description":"Don't print warnings."},{"names":["-N","--no-children"],"argument":"","description":"Don't rlwrap command's children: whenever rlwrap notices that command is waiting for one of its children, it switches to direct mode, handing down all keypresses immediately. With this option commands that need --always-readline can call editors and pagers and still be usable."},{"names":["-m","--multi-line"],"argument":"[newline_substitute]","description":"Enable multi-line input using a \"newline substitute\" character sequence (\" \\ \", [space-backslash-space] by default). Newline substitutes are translated to newlines before sending the input to command. With this option, you can call an external editor $RLWRAP_EDITOR on the (expanded) current input with the rlwrap_call_editor key (CTRL-^ by default) The argument is optional; if given, it has to directly follow the option without an intervening space."},{"names":["-M","--multi-line-ext"],"argument":".ext","description":"Call multi-line-editor on temporary files with filename extension .ext (useful for e.g. automatic syntax colouring)"},{"names":["-o","--one-shot"],"argument":"","description":"Send an EOF to command after accepting the first line of input"},{"names":["-O","--only-cook"],"argument":"regexp","description":"Only ever \"cook\" prompts that match regexp"},{"names":["-p","--prompt-colour"],"argument":"[colour_name|Colour_name|colour_spec]","description":"Use one of the colour names black, red, green, yellow, blue, cyan, purple (=magenta) or white, or an ANSI-conformant <colour_spec> to colour any prompt displayed by command. An uppercase colour name (Yellow or YELLOW ) gives a bold prompt. Prompts that already contain (colour) escape sequences or one of the readline \"ignore markers\" (ASCII 0x01 and 0x02) are not coloured. This option implies --ansi-colour-aware. colour spec has the form <attr>;<fg>[;<bg>] Example: -p'1;31' will give a bold red prompt on the current background (this is the default when no argument is given). Google for 'ANSI color' to learn more about colour codes. The argument is optional; if given, it has to directly follow the option without an intervening space."},{"names":["-P","--pre-given"],"argument":"text","description":"Start rlwrap with text in its edit buffer (this will automatically set the --always-readline option)."},{"names":["-q","--quote-characters"],"argument":"list_of_characters","description":"Assume that the given characters act as quotes, e.g. when matching parentheses. Take care to escape the list properly for your shell (example: -q \"\\\"'\", which happens to be the default, or -q \"\\\"\" which will be better for lisp-like input)"},{"names":["-r","--remember"],"argument":"","description":"Put all words seen on in- and output on the completion list."},{"names":["-R","--renice"],"argument":"","description":"Make rlwrap nicer than command (cf nice (1)). This may prevent rlwrap from interrupting command to display a prompt when command is still \"thinking\" about what to output next."},{"names":["-s","--histsize"],"argument":"N","description":"Limit the history list to N entries, truncating the history file (default: 300). A negative size -N (even -0) means the same as N, but treats the history file as read-only."},{"names":["-S","--substitute-prompt"],"argument":"prompt","description":"Substitute the specified prompt for command's own prompt. Mainly useful when command doesn't have a prompt."},{"names":["-t","--set-term-name"],"argument":"name","description":"Set command's TERM to name. Programs that confuse rlwrap with fancy screen control codes can sometimes be tamed by specifying -t dumb"},{"names":["-U","--mirror-arguments"],"argument":"","description":"(linux only) Keep track of command's arguments as seen by the ps (1) command, and mirror them in rlwrap's own arguments This is mainly useful for commands that overwrite command-line password arguments that would be exposed by rlwrap without this option."},{"names":["-v","--version"],"argument":"","description":"Print rlwrap version."},{"names":["-w","--wait-before-prompt"],"argument":"timeout","description":"In order to determine if command's last output is a prompt, rlwrap waits timeout milliseconds after receiving it. Only when no more output has arrived, it is cooked (coloured, filtered and/or replaced by a substitute prompt) and displayed as a prompt. Before this the prompt is displayed \"uncooked\". Most users won't notice, but heavy cookers can prepend the timeout with a minus sign, making rlwrap hold back the prompt until it has been cooked (\"patient mode\"). This will prevent flashing of the prompt, but it will also interfere with long output lines and make switches from direct to readline mode less reliable. Default timeout: 40 ms"},{"names":["-W","--polling"],"argument":"","description":"EXPERIMENTAL: Wake up every timeout millisecs, where timeout is the same as for the -w (--wait-before-prompt) option, 40 ms by default. This is used to sense the slave's interrupt character and ISIG flag and to adjust stdin's terminal settings accordingly, even before you press a key. Try this option e.g. when CTRL-C acts differently on command with, and without, rlwrap."},{"names":["-z","--filter"],"argument":"filter","description":"Use a filter to change rlwrap's behaviour. A filter can be used to keep certain input out of the history, to change the prompt, to implement simple macros or programmable completion.. rlwrap comes with a perl and a Python 3 module to make filter writing easy. (cf. RlwrapFilter(3pm) for the perl module, the python one is very similar) A number of example filters are installed in the directory /usr/share/rlwrap/filters. \"rlwrap -z filter\" displays information about a filter, \"rlwrap -z listing\" lists all currently installed filters. If filter needs arguments, you should quote the whole filter command line:"}],"version":"rlwrap 0.43"}
