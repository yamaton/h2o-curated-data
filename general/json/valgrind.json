{"name":"valgrind","description":"valgrind","usage":"valgrind [options] prog-and-args","options":[{"names":["--tool"],"argument":"<name>","description":"use the Valgrind tool named <name> [memcheck]"},{"names":["-h","--help"],"argument":"","description":"show this message"},{"names":["--help-debug"],"argument":"","description":"show this message, plus debugging options"},{"names":["--help-dyn-options"],"argument":"","description":"show the dynamically changeable options"},{"names":["--version"],"argument":"","description":"show version"},{"names":["-q","--quiet"],"argument":"","description":"run silently; only print error msgs"},{"names":["-v","--verbose"],"argument":"","description":"be more verbose -- show misc extra info"},{"names":["--trace-children"],"argument":"no|yes","description":"Valgrind-ise child processes (follow execve)? [no]"},{"names":["--trace-children-skip"],"argument":"patt1,patt2,...","description":"specifies a list of executables that --trace-children=yes should not trace into"},{"names":["--trace-children-skip-by-arg"],"argument":"patt1,patt2,...","description":"same as --trace-children-skip= but check the argv[] entries for children, rather than the exe name, to make a follow/no-follow decision"},{"names":["--child-silent-after-fork"],"argument":"no|yes","description":"omit child output between fork & exec? [no]"},{"names":["--vgdb"],"argument":"no|yes|full","description":"activate gdbserver? [yes]   full is slower but provides precise watchpoint/step"},{"names":["--vgdb-error"],"argument":"<number>","description":"invoke gdbserver after <number> errors [999999999] to get started quickly, use --vgdb-error=0 and follow the on-screen directions"},{"names":["--vgdb-stop-at"],"argument":"event1,event2,...","description":"invoke gdbserver for given events [none] where event is one of: startup exit abexit valgrindabexit all none"},{"names":["--track-fds"],"argument":"no|yes|all","description":"track open file descriptors? [no] all includes reporting stdin, stdout and stderr"},{"names":["--time-stamp"],"argument":"no|yes","description":"add timestamps to log messages? [no]"},{"names":["--log-fd"],"argument":"<number>","description":"log messages to file descriptor [2=stderr]"},{"names":["--log-file"],"argument":"<file>","description":"log messages to <file>"},{"names":["--log-socket"],"argument":"ipaddr:port","description":"log messages to socket ipaddr:port"},{"names":["--enable-debuginfod"],"argument":"no|yes query","description":"debuginfod servers for missing debuginfo [yes]"},{"names":["--xml"],"argument":"yes","description":"emit error output in XML (some tools only)"},{"names":["--xml-fd"],"argument":"<number>","description":"XML output to file descriptor"},{"names":["--xml-file"],"argument":"<file>","description":"XML output to <file>"},{"names":["--xml-socket"],"argument":"ipaddr:port","description":"XML output to socket ipaddr:port"},{"names":["--xml-user-comment"],"argument":"STR","description":"copy STR verbatim into XML output"},{"names":["--demangle"],"argument":"no|yes","description":"automatically demangle C++ names? [yes]"},{"names":["--num-callers"],"argument":"<number>","description":"show <number> callers in stack traces [12]"},{"names":["--error-limit"],"argument":"no|yes","description":"stop showing new errors if too many? [yes]"},{"names":["--exit-on-first-error"],"argument":"no|yes","description":"exit code on the first error found? [no]"},{"names":["--error-exitcode"],"argument":"<number>","description":"exit code to return if errors found [0=disable]"},{"names":["--error-markers"],"argument":"<begin>,<end>","description":"add lines with begin/end markers before/after each error output in plain text mode [none]"},{"names":["--show-error-list"],"argument":"no|yes","description":"show detected errors list and suppression counts at exit [no]"},{"names":["-s"],"argument":"","description":"same as --show-error-list=yes"},{"names":["--keep-debuginfo"],"argument":"no|yes","description":"Keep symbols etc for unloaded code [no] This allows saved stack traces (e.g. memory leaks) to include file/line info for code that has been dlclose'd (or similar)"},{"names":["--show-below-main"],"argument":"no|yes","description":"continue stack traces below main() [no]"},{"names":["--default-suppressions"],"argument":"yes|no","description":"load default suppressions [yes]"},{"names":["--suppressions"],"argument":"<filename>","description":"suppress errors described in <filename>"},{"names":["--gen-suppressions"],"argument":"no|yes|all","description":"print suppressions for errors? [no]"},{"names":["--input-fd"],"argument":"<number>","description":"file descriptor for input [0=stdin]"},{"names":["--dsymutil"],"argument":"no|yes","description":"run dsymutil on Mac OS X when helpful? [yes]"},{"names":["--max-stackframe"],"argument":"<number>","description":"assume stack switch for SP changes larger than <number> bytes [2000000]"},{"names":["--main-stacksize"],"argument":"<number>","description":"set size of main thread's stack (in bytes) [min(max(current 'ulimit' value,1MB),16MB)]"},{"names":["--alignment"],"argument":"<number>","description":"set minimum alignment of heap allocations [16]"},{"names":["--redzone-size"],"argument":"<number>","description":"set minimum size of redzones added before/after heap blocks (in bytes). [16]"},{"names":["--xtree-memory"],"argument":"none|allocs|full","description":"profile heap memory in an xtree [none] and produces a report at the end of the execution none: no profiling, allocs: current allocated size/blocks, full: profile current and cumulative allocated size/blocks and freed size/blocks."},{"names":["--xtree-memory-file"],"argument":"<file>","description":"xtree memory report file [xtmemory.kcg.%p]"},{"names":["--fullpath-after"],"argument":"","description":"(with nothing after the '=') show full source paths in call stacks"},{"names":["--fullpath-after"],"argument":"string","description":"like --fullpath-after=, but only show the part of the path after 'string'. Allows removal of path prefixes. Use this flag multiple times to specify a set of prefixes to remove."},{"names":["--extra-debuginfo-path"],"argument":"path","description":"absolute path to search for additional debug symbols, in addition to existing default well known search paths."},{"names":["--debuginfo-server"],"argument":"ipaddr:port","description":"also query this server (valgrind-di-server) for debug symbols"},{"names":["--allow-mismatched-debuginfo"],"argument":"no|yes","description":"for the above two flags only, accept debuginfo objects that don't \"match\" the main object [no]"},{"names":["--smc-check"],"argument":"none|stack|all|all-non-file","description":"checks for self-modifying code: none, only for code found in stacks, for all code, or for all code except that from file-backed mappings [all-non-file]"},{"names":["--read-inline-info"],"argument":"yes|no","description":"read debug info about inlined function calls and use it to do better stack traces. [yes] on Linux/Android/Solaris for the tools Memcheck/Massif/Helgrind/DRD only. [no] for all other tools and platforms."},{"names":["--read-var-info"],"argument":"yes|no","description":"read debug info on stack and global variables and use it to print better error messages in tools that make use of it (Memcheck, Helgrind, DRD) [no]"},{"names":["--vgdb-poll"],"argument":"<number>","description":"gdbserver poll max every <number> basic blocks [5000]"},{"names":["--vgdb-shadow-registers"],"argument":"no|yes","description":"let gdb see the shadow registers [no]"},{"names":["--vgdb-prefix"],"argument":"<prefix>","description":"prefix for vgdb FIFOs [/tmp/vgdb-pipe]"},{"names":["--run-libc-freeres"],"argument":"no|yes","description":"free up glibc memory at exit on Linux? [yes]"},{"names":["--run-cxx-freeres"],"argument":"no|yes","description":"free up libstdc++ memory at exit on Linux and Solaris? [yes]"},{"names":["--sim-hints"],"argument":"hint1,hint2,...","description":"activate unusual sim behaviours [none] where hint is one of: lax-ioctls lax-doors fuse-compatible enable-outer no-inner-prefix no-nptl-pthread-stackcache fallback-llsc none"},{"names":["--fair-sched"],"argument":"no|yes|try","description":"schedule threads fairly on multicore systems [no]"},{"names":["--kernel-variant"],"argument":"variant1,variant2,...","description":"handle non-standard kernel variants [none] where variant is one of: bproc android-no-hw-tls android-gpu-sgx5xx android-gpu-adreno3xx none"},{"names":["--merge-recursive-frames"],"argument":"<number>","description":"merge frames between identical program counters in max <number> frames) [0]"},{"names":["--num-transtab-sectors"],"argument":"<number>","description":"size of translated code cache [32] more sectors may increase performance, but use more memory."},{"names":["--avg-transtab-entry-size"],"argument":"<number>","description":"avg size in bytes of a translated basic block [0, meaning use tool provided default]"},{"names":["--aspace-minaddr"],"argument":"0xPP","description":"avoid mapping memory below 0xPP [guessed]"},{"names":["--valgrind-stacksize"],"argument":"<number>","description":"size of valgrind (host) thread's stack (in bytes) [1048576]"},{"names":["--show-emwarns"],"argument":"no|yes","description":"show warnings about emulation limits? [no]"},{"names":["--require-text-symbol"],"argument":":sonamepattern:symbolpattern","description":"abort run if the stated shared object doesn't have the stated text symbol. Patterns can contain ? and *."},{"names":["--soname-synonyms"],"argument":"syn1=pattern1,syn2=pattern2,...","description":"synonym soname specify patterns for function wrapping or replacement."},{"names":["--sigill-diagnostics"],"argument":"yes|no","description":"warn about illegal instructions? [yes]"},{"names":["--unw-stack-scan-thresh"],"argument":"<number>","description":"Enable stack-scan unwind if fewer than <number> good frames found [0, meaning \"disabled\"] NOTE: stack scanning is only available on arm-linux."},{"names":["--unw-stack-scan-frames"],"argument":"<number>","description":"Max number of frames that can be recovered by stack scanning [5]"},{"names":["--resync-filter"],"argument":"no|yes|verbose","description":"attempt to avoid expensive address-space-resync operations [yes on MacOS, no on other OSes]"},{"names":["--max-threads"],"argument":"<number>","description":"maximum number of threads that valgrind can handle [500]"},{"names":["--leak-check"],"argument":"no|summary|full","description":"search for memory leaks at exit? [summary]"},{"names":["--leak-resolution"],"argument":"low|med|high","description":"differentiation of leak stack traces [high]"},{"names":["--show-leak-kinds"],"argument":"kind1,kind2,..","description":"which leak kinds to show? [definite,possible]"},{"names":["--errors-for-leak-kinds"],"argument":"kind1,kind2,..","description":"which leak kinds are errors? [definite,possible] where kind is one of: definite indirect possible reachable all none"},{"names":["--leak-check-heuristics"],"argument":"heur1,heur2,...","description":"which heuristics to use for improving leak search false positive [all] where heur is one of: stdstring length64 newarray multipleinheritance all none"},{"names":["--show-reachable"],"argument":"yes","description":"same as --show-leak-kinds=all"},{"names":["--show-reachable","--show-possibly-lost"],"argument":"no","description":"same as --show-leak-kinds=definite,possible"},{"names":["--show-reachable","--show-possibly-lost"],"argument":"no","description":"same as --show-leak-kinds=definite"},{"names":["--xtree-leak"],"argument":"no|yes","description":"output leak result in xtree format? [no]"},{"names":["--xtree-leak-file"],"argument":"<file>","description":"xtree leak report file [xtleak.kcg.%p]"},{"names":["--undef-value-errors"],"argument":"no|yes","description":"check for undefined value errors [yes]"},{"names":["--track-origins"],"argument":"no|yes","description":"show origins of undefined values? [no]"},{"names":["--partial-loads-ok"],"argument":"no|yes","description":"too hard to explain here; see manual [yes]"},{"names":["--expensive-definedness-checks"],"argument":"no|auto|yes","description":"Use extra-precise definedness tracking [auto]"},{"names":["--freelist-vol"],"argument":"<number>","description":"volume of freed blocks queue [20000000]"},{"names":["--freelist-big-blocks"],"argument":"<number>","description":"releases first blocks with size>= [1000000]"},{"names":["--workaround-gcc296-bugs"],"argument":"no|yes","description":"self explanatory [no]. Deprecated. Use --ignore-range-below-sp instead."},{"names":["--ignore-ranges"],"argument":"0xPP-0xQQ[,0xRR-0xSS]","description":"assume given addresses are OK"},{"names":["--ignore-range-below-sp"],"argument":"<number>-<number>","description":"do not report errors for accesses at the given offsets below SP"},{"names":["--malloc-fill"],"argument":"<hexnumber>","description":"fill malloc'd areas with given value"},{"names":["--free-fill"],"argument":"<hexnumber>","description":"fill free'd areas with given value"},{"names":["--keep-stacktraces"],"argument":"alloc|free|alloc-and-free|alloc-then-free|none","description":"stack trace(s) to keep for malloc'd/free'd areas [alloc-and-free]"},{"names":["--show-mismatched-frees"],"argument":"no|yes","description":"show frees that don't match the allocator? [yes]"}],"version":"valgrind-3.20.0","tldr":"> Wrapper for a set of expert tools for profiling, optimizing and debugging programs.\n> Commonly used tools include `memcheck`, `cachegrind`, `callgrind`, `massif`, `helgrind`, and `drd`.\n> More information: <http://www.valgrind.org>.\n\n- Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`:\n\n`valgrind {{program}}`\n\n- Use Memcheck to report all possible memory leaks of `program` in full detail:\n\n`valgrind --leak-check=full --show-leak-kinds=all {{program}}`\n\n- Use the Cachegrind tool to profile and log CPU cache operations of `program`:\n\n`valgrind --tool=cachegrind {{program}}`\n\n- Use the Massif tool to profile and log heap memory and stack usage of `program`:\n\n`valgrind --tool=massif --stacks=yes {{program}}`\n"}
