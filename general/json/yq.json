{"name":"yq","description":"yq","usage":"yq [flags]\nyq [command]","options":[{"names":["-C","--colors"],"argument":"","description":"force print with colors"},{"names":["-e","--exit-status"],"argument":"","description":"set exit status if there are no matches or null or false is returned"},{"names":["--expression"],"argument":"string","description":"forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file."},{"names":["--from-file"],"argument":"string","description":"Load expression from specified file."},{"names":["-f","--front-matter"],"argument":"string","description":"(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact"},{"names":["--header-preprocess"],"argument":"","description":"Slurp any header comments and separators before processing expression. (default true)"},{"names":["-h","--help"],"argument":"","description":"help for yq"},{"names":["-I","--indent"],"argument":"int","description":"sets indent level for output (default 2)"},{"names":["-i","--inplace"],"argument":"","description":"update the file inplace of first file given."},{"names":["-p","--input-format"],"argument":"string","description":"[yaml|y|props|p|xml|x] parse format for input. Note that json is a subset of yaml. (default \"yaml\")"},{"names":["-M","--no-colors"],"argument":"","description":"force print with no colors"},{"names":["-N","--no-doc"],"argument":"","description":"Don't print document separators (---)"},{"names":["-n","--null-input"],"argument":"","description":"Don't read input, simply evaluate the expression given. Useful for creating docs from scratch."},{"names":["-o","--output-format"],"argument":"string","description":"[yaml|y|json|j|props|p|xml|x] output format type. (default \"yaml\")"},{"names":["-P","--prettyPrint"],"argument":"","description":"pretty print, shorthand for '... style = \"\"'"},{"names":["-s","--split-exp"],"argument":"string","description":"print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter."},{"names":["--split-exp-file"],"argument":"string","description":"Use a file to specify the split-exp expression."},{"names":["-r","--unwrapScalar"],"argument":"","description":"unwrap scalar, print the value with no quotes, colors or comments (default true)"},{"names":["-v","--verbose"],"argument":"","description":"verbose mode"},{"names":["-V","--version"],"argument":"","description":"Print version information and quit"},{"names":["--xml-attribute-prefix"],"argument":"string","description":"prefix for xml attributes (default \"+\")"},{"names":["--xml-content-name"],"argument":"string","description":"name for xml content (if no attribute name is present). (default \"+content\")"},{"names":["--xml-directive-name"],"argument":"string","description":"name for xml directives (e.g. <!DOCTYPE thing cat>) (default \"+directive\")"},{"names":["--xml-keep-namespace"],"argument":"","description":"enables keeping namespace after parsing attributes (default true)"},{"names":["--xml-proc-inst-prefix"],"argument":"string","description":"prefix for xml processing instructions (e.g. <?xml version=\"1\"?>) (default \"+p_\")"},{"names":["--xml-raw-token"],"argument":"","description":"enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)"},{"names":["--xml-skip-directives"],"argument":"","description":"skip over directives (e.g. <!DOCTYPE thing cat>)"},{"names":["--xml-skip-proc-inst"],"argument":"","description":"skip over process instructions (e.g. <?xml version=\"1\"?>)"},{"names":["--xml-strict-mode"],"argument":"","description":"enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details."}],"subcommands":[{"name":"eval","description":"(default) Apply the expression to each document in each yaml file in sequence","usage":"yq eval [expression] [yaml_file1]... [flags]","options":[{"names":["-h","--help"],"argument":"","description":"help for eval"},{"names":["-C","--colors"],"argument":"","description":"force print with colors"},{"names":["-e","--exit-status"],"argument":"","description":"set exit status if there are no matches or null or false is returned"},{"names":["--expression"],"argument":"string","description":"forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file."},{"names":["--from-file"],"argument":"string","description":"Load expression from specified file."},{"names":["-f","--front-matter"],"argument":"string","description":"(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact"},{"names":["--header-preprocess"],"argument":"","description":"Slurp any header comments and separators before processing expression. (default true)"},{"names":["-I","--indent"],"argument":"int","description":"sets indent level for output (default 2)"},{"names":["-i","--inplace"],"argument":"","description":"update the file inplace of first file given."},{"names":["-p","--input-format"],"argument":"string","description":"[yaml|y|props|p|xml|x] parse format for input. Note that json is a subset of yaml. (default \"yaml\")"},{"names":["-M","--no-colors"],"argument":"","description":"force print with no colors"},{"names":["-N","--no-doc"],"argument":"","description":"Don't print document separators (---)"},{"names":["-n","--null-input"],"argument":"","description":"Don't read input, simply evaluate the expression given. Useful for creating docs from scratch."},{"names":["-o","--output-format"],"argument":"string","description":"[yaml|y|json|j|props|p|xml|x] output format type. (default \"yaml\")"},{"names":["-P","--prettyPrint"],"argument":"","description":"pretty print, shorthand for '... style = \"\"'"},{"names":["-s","--split-exp"],"argument":"string","description":"print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter."},{"names":["--split-exp-file"],"argument":"string","description":"Use a file to specify the split-exp expression."},{"names":["-r","--unwrapScalar"],"argument":"","description":"unwrap scalar, print the value with no quotes, colors or comments (default true)"},{"names":["-v","--verbose"],"argument":"","description":"verbose mode"},{"names":["--xml-attribute-prefix"],"argument":"string","description":"prefix for xml attributes (default \"+\")"},{"names":["--xml-content-name"],"argument":"string","description":"name for xml content (if no attribute name is present). (default \"+content\")"},{"names":["--xml-directive-name"],"argument":"string","description":"name for xml directives (e.g. <!DOCTYPE thing cat>) (default \"+directive\")"},{"names":["--xml-keep-namespace"],"argument":"","description":"enables keeping namespace after parsing attributes (default true)"},{"names":["--xml-proc-inst-prefix"],"argument":"string","description":"prefix for xml processing instructions (e.g. <?xml version=\"1\"?>) (default \"+p_\")"},{"names":["--xml-raw-token"],"argument":"","description":"enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)"},{"names":["--xml-skip-directives"],"argument":"","description":"skip over directives (e.g. <!DOCTYPE thing cat>)"},{"names":["--xml-skip-proc-inst"],"argument":"","description":"skip over process instructions (e.g. <?xml version=\"1\"?>)"},{"names":["--xml-strict-mode"],"argument":"","description":"enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details."}]},{"name":"eval-all","description":"Loads _all_ yaml documents of _all_ yaml files and runs expression once","usage":"yq eval-all [expression] [yaml_file1]... [flags]","options":[{"names":["-h","--help"],"argument":"","description":"help for eval-all"},{"names":["-C","--colors"],"argument":"","description":"force print with colors"},{"names":["-e","--exit-status"],"argument":"","description":"set exit status if there are no matches or null or false is returned"},{"names":["--expression"],"argument":"string","description":"forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file."},{"names":["--from-file"],"argument":"string","description":"Load expression from specified file."},{"names":["-f","--front-matter"],"argument":"string","description":"(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact"},{"names":["--header-preprocess"],"argument":"","description":"Slurp any header comments and separators before processing expression. (default true)"},{"names":["-I","--indent"],"argument":"int","description":"sets indent level for output (default 2)"},{"names":["-i","--inplace"],"argument":"","description":"update the file inplace of first file given."},{"names":["-p","--input-format"],"argument":"string","description":"[yaml|y|props|p|xml|x] parse format for input. Note that json is a subset of yaml. (default \"yaml\")"},{"names":["-M","--no-colors"],"argument":"","description":"force print with no colors"},{"names":["-N","--no-doc"],"argument":"","description":"Don't print document separators (---)"},{"names":["-n","--null-input"],"argument":"","description":"Don't read input, simply evaluate the expression given. Useful for creating docs from scratch."},{"names":["-o","--output-format"],"argument":"string","description":"[yaml|y|json|j|props|p|xml|x] output format type. (default \"yaml\")"},{"names":["-P","--prettyPrint"],"argument":"","description":"pretty print, shorthand for '... style = \"\"'"},{"names":["-s","--split-exp"],"argument":"string","description":"print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter."},{"names":["--split-exp-file"],"argument":"string","description":"Use a file to specify the split-exp expression."},{"names":["-r","--unwrapScalar"],"argument":"","description":"unwrap scalar, print the value with no quotes, colors or comments (default true)"},{"names":["-v","--verbose"],"argument":"","description":"verbose mode"},{"names":["--xml-attribute-prefix"],"argument":"string","description":"prefix for xml attributes (default \"+\")"},{"names":["--xml-content-name"],"argument":"string","description":"name for xml content (if no attribute name is present). (default \"+content\")"},{"names":["--xml-directive-name"],"argument":"string","description":"name for xml directives (e.g. <!DOCTYPE thing cat>) (default \"+directive\")"},{"names":["--xml-keep-namespace"],"argument":"","description":"enables keeping namespace after parsing attributes (default true)"},{"names":["--xml-proc-inst-prefix"],"argument":"string","description":"prefix for xml processing instructions (e.g. <?xml version=\"1\"?>) (default \"+p_\")"},{"names":["--xml-raw-token"],"argument":"","description":"enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)"},{"names":["--xml-skip-directives"],"argument":"","description":"skip over directives (e.g. <!DOCTYPE thing cat>)"},{"names":["--xml-skip-proc-inst"],"argument":"","description":"skip over process instructions (e.g. <?xml version=\"1\"?>)"},{"names":["--xml-strict-mode"],"argument":"","description":"enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details."}]},{"name":"shell-completion","description":"Generate completion script","usage":"yq shell-completion [bash|zsh|fish|powershell]","options":[{"names":["-h","--help"],"argument":"","description":"help for shell-completion"},{"names":["-C","--colors"],"argument":"","description":"force print with colors"},{"names":["-e","--exit-status"],"argument":"","description":"set exit status if there are no matches or null or false is returned"},{"names":["--expression"],"argument":"string","description":"forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file."},{"names":["--from-file"],"argument":"string","description":"Load expression from specified file."},{"names":["-f","--front-matter"],"argument":"string","description":"(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact"},{"names":["--header-preprocess"],"argument":"","description":"Slurp any header comments and separators before processing expression. (default true)"},{"names":["-I","--indent"],"argument":"int","description":"sets indent level for output (default 2)"},{"names":["-i","--inplace"],"argument":"","description":"update the file inplace of first file given."},{"names":["-p","--input-format"],"argument":"string","description":"[yaml|y|props|p|xml|x] parse format for input. Note that json is a subset of yaml. (default \"yaml\")"},{"names":["-M","--no-colors"],"argument":"","description":"force print with no colors"},{"names":["-N","--no-doc"],"argument":"","description":"Don't print document separators (---)"},{"names":["-n","--null-input"],"argument":"","description":"Don't read input, simply evaluate the expression given. Useful for creating docs from scratch."},{"names":["-o","--output-format"],"argument":"string","description":"[yaml|y|json|j|props|p|xml|x] output format type. (default \"yaml\")"},{"names":["-P","--prettyPrint"],"argument":"","description":"pretty print, shorthand for '... style = \"\"'"},{"names":["-s","--split-exp"],"argument":"string","description":"print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter."},{"names":["--split-exp-file"],"argument":"string","description":"Use a file to specify the split-exp expression."},{"names":["-r","--unwrapScalar"],"argument":"","description":"unwrap scalar, print the value with no quotes, colors or comments (default true)"},{"names":["-v","--verbose"],"argument":"","description":"verbose mode"},{"names":["--xml-attribute-prefix"],"argument":"string","description":"prefix for xml attributes (default \"+\")"},{"names":["--xml-content-name"],"argument":"string","description":"name for xml content (if no attribute name is present). (default \"+content\")"},{"names":["--xml-directive-name"],"argument":"string","description":"name for xml directives (e.g. <!DOCTYPE thing cat>) (default \"+directive\")"},{"names":["--xml-keep-namespace"],"argument":"","description":"enables keeping namespace after parsing attributes (default true)"},{"names":["--xml-proc-inst-prefix"],"argument":"string","description":"prefix for xml processing instructions (e.g. <?xml version=\"1\"?>) (default \"+p_\")"},{"names":["--xml-raw-token"],"argument":"","description":"enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)"},{"names":["--xml-skip-directives"],"argument":"","description":"skip over directives (e.g. <!DOCTYPE thing cat>)"},{"names":["--xml-skip-proc-inst"],"argument":"","description":"skip over process instructions (e.g. <?xml version=\"1\"?>)"},{"names":["--xml-strict-mode"],"argument":"","description":"enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details."}]}],"version":"yq (https://github.com/mikefarah/yq/) version 4.29.2","tldr":"> A lightweight and portable command-line YAML processor.\n> More information: <https://mikefarah.gitbook.io/yq/>.\n\n- Output a YAML file, in pretty-print format (v4+):\n\n`yq eval {{path/to/file.yaml}}`\n\n- Output a YAML file, in pretty-print format (v3):\n\n`yq read {{path/to/file.yaml}} --colors`\n\n- Output the first element in a YAML file that contains only an array (v4+):\n\n`yq eval '.[0]' {{path/to/file.yaml}}`\n\n- Output the first element in a YAML file that contains only an array (v3):\n\n`yq read {{path/to/file.yaml}} '[0]'`\n\n- Set (or overwrite) a key to a value in a file (v4+):\n\n`yq eval '.{{key}} = \"{{value}}\"' --inplace {{path/to/file.yaml}}`\n\n- Set (or overwrite) a key to a value in a file (v3):\n\n`yq write --inplace {{path/to/file.yaml}} '{{key}}' '{{value}}'`\n\n- Merge two files and print to stdout (v4+):\n\n`yq eval-all 'select(filename == \"{{path/to/file1.yaml}}\") * select(filename == \"{{path/to/file2.yaml}}\")' {{path/to/file1.yaml}} {{path/to/file2.yaml}}`\n\n- Merge two files and print to stdout (v3):\n\n`yq merge {{path/to/file1.yaml}} {{path/to/file2.yaml}} --colors`\n"}
