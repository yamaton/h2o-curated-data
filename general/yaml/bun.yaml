name: bun
description: a fast JavaScript runtime, package manager, bundler and test runner
usage: ""
options:
  - names:
      - -h
      - --help
    argument: ""
    description: Display this help and exit.
  - names:
      - -b
      - --bun
    argument: ""
    description: Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
  - names:
      - --cwd
    argument: <STR>
    description: Absolute path to resolve files & entry points from. This just changes the process' cwd.
  - names:
      - -c
      - --config
    argument: <PATH>?
    description: Config file to load bun from (e.g. -c bunfig.toml
  - names:
      - --extension-order
    argument: <STR>...
    description: 'Defaults to: .tsx,.ts,.jsx,.js,.json'
  - names:
      - --jsx-factory
    argument: <STR>
    description: Changes the function called when compiling JSX elements using the classic JSX runtime
  - names:
      - --jsx-fragment
    argument: <STR>
    description: Changes the function called when compiling JSX fragments
  - names:
      - --jsx-import-source
    argument: <STR>
    description: 'Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"'
  - names:
      - --jsx-runtime
    argument: <STR>
    description: '"automatic" (default) or "classic"'
  - names:
      - -r
      - --preload
    argument: <STR>...
    description: Import a module before other modules are loaded
  - names:
      - --main-fields
    argument: <STR>...
    description: Main fields to lookup in package.json. Defaults to --target dependent
  - names:
      - --no-summary
    argument: ""
    description: Don't print a summary (when generating .bun)
  - names:
      - -v
      - --version
    argument: ""
    description: Print version and exit
  - names:
      - --revision
    argument: ""
    description: Print version with revision and exit
  - names:
      - --tsconfig-override
    argument: <STR>
    description: Load tsconfig from path instead of cwd/tsconfig.json
  - names:
      - -d
      - --define
    argument: <STR>...
    description: Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
  - names:
      - -e
      - --external
    argument: <STR>...
    description: 'Exclude module from transpilation (can use * wildcards). ex: -e react'
  - names:
      - -l
      - --loader
    argument: <STR>...
    description: 'Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi'
  - names:
      - -u
      - --origin
    argument: <STR>
    description: 'Rewrite import URLs to start with --origin. Default: ""'
  - names:
      - -p
      - --port
    argument: <STR>
    description: 'Port to serve bun''s dev server on. Default: "3000"'
  - names:
      - --smol
    argument: ""
    description: Use less memory, but run garbage collection more often
  - names:
      - --minify
    argument: ""
    description: Minify (experimental)
  - names:
      - --minify-syntax
    argument: ""
    description: Minify syntax and inline data (experimental)
  - names:
      - --minify-whitespace
    argument: ""
    description: Minify whitespace (experimental)
  - names:
      - --minify-identifiers
    argument: ""
    description: Minify identifiers
  - names:
      - --no-macros
    argument: ""
    description: Disable macros from being executed in the bundler, transpiler and runtime
  - names:
      - --target
    argument: <STR>
    description: The intended execution environment for the bundle. "browser", "bun" or "node"
  - names:
      - --inspect
    argument: <STR>?
    description: Activate Bun's Debugger
  - names:
      - --inspect-wait
    argument: <STR>?
    description: Activate Bun's Debugger, wait for a connection before executing
  - names:
      - --inspect-brk
    argument: <STR>?
    description: Activate Bun's Debugger, set breakpoint on first line of code and wait
  - names:
      - --hot
    argument: ""
    description: Enable auto reload in bun's JavaScript runtime
  - names:
      - --watch
    argument: ""
    description: Automatically restart bun's JavaScript runtime on file change
  - names:
      - --no-install
    argument: ""
    description: Disable auto install in bun's JavaScript runtime
  - names:
      - -i
    argument: ""
    description: Automatically install dependencies and use global cache in bun's runtime, equivalent to --install=fallback
  - names:
      - --install
    argument: <STR>
    description: 'Install dependencies automatically when no node_modules are present, default: "auto". "force" to ignore node_modules, fallback to install any missing'
  - names:
      - --prefer-offline
    argument: ""
    description: Skip staleness checks for packages in bun's JavaScript runtime and resolve from disk
  - names:
      - --prefer-latest
    argument: ""
    description: Use the latest matching versions of packages in bun's JavaScript runtime, always checking npm
  - names:
      - --silent
    argument: ""
    description: Don't repeat the command for bun run
  - names:
      - --dump-environment-variables
    argument: ""
    description: Dump environment variables from .env and process as JSON and quit. Useful for debugging
  - names:
      - --dump-limits
    argument: ""
    description: Dump system limits. Useful for debugging
subcommands:
  - name: run
    usage: bun run ./my-script.ts
    description: Run JavaScript with Bun, a package.json script, or a bin
    options: []
  - name: test
    usage: bun test
    description: Run unit tests with Bun
    options: []
  - name: x
    usage: bun x <package>
    description: Install and execute a package bin (bunx)
    options: []
  - name: repl
    usage: bun repl
    description: Start a REPL session with Bun
    options: []
  - name: init
    usage: bun init
    description: Start an empty Bun project from a blank template
    options: []
  - name: create
    aliases:
      - c
    usage: bun create <project-name>
    description: Create a new project from a template (bun c)
    options: []
  - name: install
    aliases:
      - i
    usage: bun install
    description: Install dependencies for a package.json (bun i)
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
      - names:
          - -d
          - --dev
        argument: ""
        description: Add dependency to "devDependencies"
      - names:
          - -D
          - --development
          - --optional
        argument: ""
        description: Add dependency to "optionalDependencies"
      - names:
          - --exact
        argument: ""
        description: Add the exact version instead of the ^range
  - name: add
    aliases:
      - a
    usage: bun add <package>
    description: Add a dependency to package.json (bun a)
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
      - names:
          - -d
          - --dev
        argument: ""
        description: Add dependency to "devDependencies"
      - names:
          - -D
          - --development
          - --optional
        argument: ""
        description: Add dependency to "optionalDependencies"
      - names:
          - --exact
        argument: ""
        description: Add the exact version instead of the ^range
  - name: remove
    aliases:
      - rm
    usage: bun remove <package>
    description: Remove a dependency from package.json (bun rm)
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
  - name: update
    usage: bun update <package>
    description: Update outdated dependencies & save to package.json
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
  - name: link
    usage: bun link
    description: Link an npm package globally
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
  - name: unlink
    usage: bun unlink
    description: Globally unlink an npm package
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
  - name: pm
    usage: bun pm
    description: More commands for managing packages
    options:
      - names:
          - -c
          - --config
        argument: <STR>?
        description: Load config (bunfig.toml)
      - names:
          - -y
          - --yarn
        argument: ""
        description: Write a yarn.lock file (yarn v1)
      - names:
          - -p
          - --production
        argument: ""
        description: Don't install devDependencies
      - names:
          - --no-save
        argument: ""
        description: Don't save a lockfile
      - names:
          - --save
        argument: ""
        description: Save to package.json
      - names:
          - --dry-run
        argument: ""
        description: Don't install anything
      - names:
          - --lockfile
        argument: <PATH>
        description: Store & load a lockfile at a specific filepath
      - names:
          - --frozen-lockfile
        argument: ""
        description: Disallow changes to lockfile
      - names:
          - -f
          - --force
        argument: ""
        description: Always request the latest versions from the registry & reinstall all dependencies
      - names:
          - --cache-dir
        argument: <PATH>
        description: Store & load cached data from a specific directory path
      - names:
          - --no-cache
        argument: ""
        description: Ignore manifest cache entirely
      - names:
          - --silent
        argument: ""
        description: Don't log anything
      - names:
          - --verbose
        argument: ""
        description: Excessively verbose logging
      - names:
          - --no-progress
        argument: ""
        description: Disable the progress bar
      - names:
          - --no-summary
        argument: ""
        description: Don't print a summary
      - names:
          - --no-verify
        argument: ""
        description: Skip verifying integrity of newly downloaded packages
      - names:
          - --ignore-scripts
        argument: ""
        description: Skip lifecycle scripts in the project's package.json (dependency scripts are never run)
      - names:
          - -g
          - --global
        argument: ""
        description: Install globally
      - names:
          - --cwd
        argument: <STR>
        description: Set a specific cwd
      - names:
          - --backend
        argument: <STR>
        description: 'Platform-specific optimizations for installing dependencies. Possible values: "hardlink" (default), "symlink", "copyfile"'
      - names:
          - --link-native-bins
        argument: <STR>...
        description: 'Link "bin" from a matching platform-specific "optionalDependencies" instead. Default: esbuild, turbo'
      - names:
          - --help
        argument: ""
        description: Print this help menu
  - name: build
    usage: bun build ./a.ts ./b.jsx
    description: Bundle TypeScript & JavaScript into a single file
    options: []
  - name: upgrade
    usage: bun upgrade <package>
    description: Get the latest version of Bun
    options: []
version: 1.0.0
tldr: |
  > JavaScript runtime and toolkit.
  > Includes a bundler, a test runner, and a package manager.
  > More information: <https://bun.sh>.

  - Run a JavaScript file or a `package.json` script:

  `bun run {{path/to/file|script_name}}`

  - Run unit tests:

  `bun test`

  - Download and install all the packages listed as dependencies in `package.json`:

  `bun install`

  - Add a dependency to `package.json`:

  `bun add {{module_name}}`

  - Remove a dependency from `package.json`:

  `bun remove {{module_name}}`

  - Create a new Bun project in the current directory:

  `bun init`

  - Start a REPL (interactive shell):

  `bun repl`

  - Upgrade Bun to the latest version:

  `bun upgrade`
