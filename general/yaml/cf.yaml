name: cf
description: A command line tool to interact with Cloud Foundry
usage: cf [global options] command [arguments...] [command options]
options:
  - names:
      - --help
      - -h
    argument: ""
    description: Show help
  - names:
      - -v
    argument: ""
    description: Print API request diagnostics to stdout
subcommands:
  - name: help
    description: Show help
    usage: cf help [COMMAND]
    options:
      - names:
          - -a
        argument: ""
        description: All available CLI commands
  - name: version
    description: Print the version
    usage: |-
      cf version

      'cf -v' and 'cf --version' are also accepted.
    options: []
  - name: login
    description: Log user in
    usage: cf login [-a API_URL] [-u USERNAME] [-p PASSWORD] [-o ORG] [-s SPACE] [--sso | --sso-passcode PASSCODE] [--origin ORIGIN]
    options:
      - names:
          - -a
        argument: ""
        description: API endpoint (e.g. https://api.example.com)
      - names:
          - -o
        argument: ""
        description: Org
      - names:
          - -p
        argument: ""
        description: Password
      - names:
          - -s
        argument: ""
        description: Space
      - names:
          - --skip-ssl-validation
        argument: ""
        description: Skip verification of the API endpoint. Not recommended!
      - names:
          - --sso
        argument: ""
        description: Prompt for a one-time passcode to login
      - names:
          - --sso-passcode
        argument: ""
        description: One-time passcode
      - names:
          - -u
        argument: ""
        description: Username
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for login
  - name: logout
    description: Log user out
    usage: cf logout
    options: []
  - name: passwd
    description: Change user password
    usage: cf passwd
    options: []
  - name: target
    description: Set or view the targeted org or space
    usage: cf target [-o ORG] [-s SPACE]
    options:
      - names:
          - -o
        argument: ""
        description: Organization
      - names:
          - -s
        argument: ""
        description: Space
  - name: api
    description: Set or view target api url
    usage: cf api [URL]
    options:
      - names:
          - --skip-ssl-validation
        argument: ""
        description: Skip verification of the API endpoint. Not recommended!
      - names:
          - --unset
        argument: ""
        description: Remove all api endpoint targeting
  - name: auth
    description: Authenticate non-interactively
    usage: |-
      cf auth USERNAME PASSWORD
      cf auth USERNAME PASSWORD --origin ORIGIN
      cf auth CLIENT_ID CLIENT_SECRET --client-credentials
    options:
      - names:
          - --client-credentials
        argument: ""
        description: Use (non-user) service account (also called client credentials)
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for authentication
  - name: apps
    description: List all apps in the target space
    usage: cf apps [--labels SELECTOR]
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter apps by labels
  - name: app
    description: Display health and status for an app
    usage: cf app APP_NAME [--guid]
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given app's guid. All other health and status output for the app is suppressed.
  - name: create-app
    description: Create an Application in the target space
    usage: cf create-app APP_NAME [--app-type (buildpack | docker)]
    options:
      - names:
          - --app-type
        argument: ""
        description: 'App lifecycle type to stage and run the app (Default: buildpack)'
  - name: push
    description: Push a new app or sync changes to an existing app
    usage: |-
      cf push APP_NAME [-b BUILDPACK_NAME]
      [-c COMMAND] [-f MANIFEST_PATH | --no-manifest] [--no-start] [--no-wait] [-i NUM_INSTANCES]
      [-k DISK] [-m MEMORY] [-l LOG_RATE_LIMIT] [-p PATH] [-s STACK] [-t HEALTH_TIMEOUT] [--task TASK]
      [-u (process | port | http)] [--no-route | --random-route]
      [--var KEY=VALUE] [--vars-file VARS_FILE_PATH]...

      cf push APP_NAME --docker-image [REGISTRY_HOST:PORT/]IMAGE[:TAG] [--docker-username USERNAME]
      [-c COMMAND] [-f MANIFEST_PATH | --no-manifest] [--no-start] [--no-wait] [-i NUM_INSTANCES]
      [-k DISK] [-m MEMORY] [-l LOG_RATE_LIMIT] [-p PATH] [-s STACK] [-t HEALTH_TIMEOUT] [--task TASK]
      [-u (process | port | http)] [--no-route | --random-route ]
      [--var KEY=VALUE] [--vars-file VARS_FILE_PATH]...
    options:
      - names:
          - --app-start-timeout
          - -t
        argument: ""
        description: Time (in seconds) allowed to elapse between starting up an app and the first healthy response from the app
      - names:
          - --buildpack
          - -b
        argument: ""
        description: Custom buildpack by name (e.g. my-buildpack) or Git URL (e.g. 'https://github.com/cloudfoundry/java-buildpack.git') or Git URL with a branch or tag (e.g. 'https://github.com/cloudfoundry/java-buildpack.git#v3.3.0' for 'v3.3.0' tag). To use built-in buildpacks only, specify 'default' or 'null'
      - names:
          - --disk
          - -k
        argument: ""
        description: Disk limit (e.g. 256M, 1024M, 1G)
      - names:
          - --docker-image
          - -o
        argument: ""
        description: Docker image to use (e.g. user/docker-image-name)
      - names:
          - --docker-username
        argument: ""
        description: Repository username; used with password from environment variable CF_DOCKER_PASSWORD
      - names:
          - --droplet
        argument: ""
        description: Path to a tgz file with a pre-staged app
      - names:
          - --endpoint
        argument: ""
        description: Valid path on the app for an HTTP health check. Only used when specifying --health-check-type=http
      - names:
          - --health-check-type
          - -u
        argument: ""
        description: Application health check type. Defaults to 'port'. 'http' requires a valid endpoint, for example, '/health'.
      - names:
          - --instances
          - -i
        argument: ""
        description: Number of instances
      - names:
          - --log-rate-limit
          - -l
        argument: ""
        description: Log rate limit per second, in bytes (e.g. 128B, 4K, 1M). -l=-1 represents unlimited
      - names:
          - --manifest
          - -f
        argument: ""
        description: Path to manifest
      - names:
          - --memory
          - -m
        argument: ""
        description: Memory limit (e.g. 256M, 1024M, 1G)
      - names:
          - --no-manifest
        argument: ""
        description: Ignore manifest file
      - names:
          - --no-route
        argument: ""
        description: Do not map a route to this app
      - names:
          - --no-start
        argument: ""
        description: Do not stage and start the app after pushing
      - names:
          - --no-wait
        argument: ""
        description: Exit when the first instance of the web process is healthy
      - names:
          - --path
          - -p
        argument: ""
        description: Path to app directory or to a zip file of the contents of the app directory
      - names:
          - --random-route
        argument: ""
        description: Create a random route for this app (except when no-route is specified in the manifest)
      - names:
          - --stack
          - -s
        argument: ""
        description: Stack to use (a stack is a pre-built file system, including an operating system, that can run apps)
      - names:
          - --start-command
          - -c
        argument: ""
        description: Startup command, set to null to reset to default start command
      - names:
          - --strategy
        argument: ""
        description: Deployment strategy, either rolling or null.
      - names:
          - --task
        argument: ""
        description: Push an app that is used only to execute tasks. The app will be staged, but not started and will have no route assigned.
      - names:
          - --var
        argument: ""
        description: Variable key value pair for variable substitution, (e.g., name=app1); can specify multiple times
      - names:
          - --vars-file
        argument: ""
        description: Path to a variable substitution file for manifest; can specify multiple times
  - name: scale
    description: Change or view the instance count, disk space limit, memory limit, and log rate limit for an app
    usage: |-
      cf scale APP_NAME [--process PROCESS] [-i INSTANCES] [-k DISK] [-m MEMORY] [-l LOG_RATE_LIMIT] [-f]

      Modifying the app's disk, memory, or log rate will cause the app to restart.
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force restart of app without prompt
      - names:
          - --instances
          - -i
        argument: ""
        description: Number of instances
      - names:
          - -k
        argument: ""
        description: Disk limit (e.g. 256M, 1024M, 1G)
      - names:
          - -l
        argument: ""
        description: Log rate limit per second, in bytes (e.g. 128B, 4K, 1M). -l=-1 represents unlimited
      - names:
          - -m
        argument: ""
        description: Memory limit (e.g. 256M, 1024M, 1G)
      - names:
          - --process
        argument: ""
        description: 'App process to scale (Default: web)'
  - name: delete
    description: Delete an app
    usage: cf delete APP_NAME [-r] [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - -r
        argument: ""
        description: Also delete any mapped routes
  - name: rename
    description: Rename an app
    usage: cf rename APP_NAME NEW_APP_NAME
    options: []
  - name: cancel-deployment
    description: Cancel the most recent deployment for an app. Resets the current droplet to the previous deployment's droplet.
    usage: cf cancel-deployment APP_NAME
    options: []
  - name: start
    description: Start an app
    usage: |-
      cf start APP_NAME

      If the app's most recent package is unstaged, starting the app will stage and run that package.
      Otherwise, the app's current droplet will be run.
    options: []
  - name: stop
    description: Stop an app
    usage: cf stop APP_NAME
    options: []
  - name: restart
    description: Stop all instances of the app, then start them again.
    usage: |-
      cf restart APP_NAME

      This command will cause downtime unless you use '--strategy rolling'.

      If the app's most recent package is unstaged, restarting the app will stage and run that package.
      Otherwise, the app's current droplet will be run.
    options:
      - names:
          - --strategy
        argument: ""
        description: Deployment strategy, either rolling or null.
      - names:
          - --no-wait
        argument: ""
        description: Exit when the first instance of the web process is healthy
  - name: stage-package
    description: Stage a package into a droplet
    usage: cf stage-package APP_NAME [--package-guid PACKAGE_GUID]
    options:
      - names:
          - --package-guid
        argument: ""
        description: 'The guid of the package to stage (default: latest ready package)'
  - name: restage
    description: Stage the app's latest package into a droplet and restart the app with this new droplet and updated configuration (environment variables, service bindings, buildpack, stack, etc.).
    usage: |-
      cf restage APP_NAME

      This command will cause downtime unless you use '--strategy rolling'.
    options:
      - names:
          - --strategy
        argument: ""
        description: Deployment strategy, either rolling or null.
      - names:
          - --no-wait
        argument: ""
        description: Exit when the first instance of the web process is healthy
  - name: restart-app-instance
    description: Terminate, then instantiate an app instance
    usage: cf restart-app-instance APP_NAME INDEX [--process PROCESS]
    options:
      - names:
          - --process
        argument: ""
        description: 'Process to restart (Default: web)'
  - name: run-task
    description: Run a one-off task on an app
    usage: cf run-task APP_NAME [--command COMMAND] [-k DISK] [-m MEMORY] [-l LOG_RATE_LIMIT] [--name TASK_NAME] [--process PROCESS_TYPE]
    options:
      - names:
          - --command
          - -c
        argument: ""
        description: The command to execute
      - names:
          - -k
        argument: ""
        description: Disk limit (e.g. 256M, 1024M, 1G)
      - names:
          - -l
        argument: ""
        description: Log rate limit per second, in bytes (e.g. 128B, 4K, 1M). -l=-1 represents unlimited
      - names:
          - -m
        argument: ""
        description: Memory limit (e.g. 256M, 1024M, 1G)
      - names:
          - --name
        argument: ""
        description: Name to give the task (generated if omitted)
      - names:
          - --process
        argument: ""
        description: Process type to use as a template for command, memory, and disk for the created task.
  - name: tasks
    description: List tasks of an app
    usage: cf tasks APP_NAME
    options: []
  - name: terminate-task
    description: Terminate a running task of an app
    usage: cf terminate-task APP_NAME TASK_ID
    options: []
  - name: packages
    description: List packages of an app
    usage: cf packages APP_NAME
    options: []
  - name: create-package
    description: Uploads a Package
    usage: cf create-package APP_NAME [-p APP_PATH | --docker-image [REGISTRY_HOST:PORT/]IMAGE[:TAG]]
    options:
      - names:
          - --docker-image
          - -o
        argument: ""
        description: Docker image to use (e.g. user/docker-image-name)
      - names:
          - -p
        argument: ""
        description: Path to app directory or to a zip file of the contents of the app directory
  - name: droplets
    description: List droplets of an app
    usage: cf droplets APP_NAME
    options: []
  - name: set-droplet
    description: Set the droplet used to run an app
    usage: cf set-droplet APP_NAME DROPLET_GUID
    options: []
  - name: download-droplet
    description: Download an application droplet
    usage: cf download-droplet APP_NAME [--droplet DROPLET_GUID] [--path /path/to/droplet.tgz]
    options:
      - names:
          - --droplet
        argument: ""
        description: 'The guid of the droplet to download (default: app''s current droplet).'
      - names:
          - --path
          - -p
        argument: ""
        description: 'File path to download droplet to (default: current working directory).'
  - name: events
    description: Show recent app events
    usage: cf events APP_NAME
    options: []
  - name: logs
    description: Tail or show recent logs for an app
    usage: cf logs APP_NAME
    options:
      - names:
          - --recent
        argument: ""
        description: Dump recent logs instead of tailing
  - name: env
    description: Show all env variables for an app
    usage: cf env APP_NAME
    options: []
  - name: set-env
    description: Set an env variable for an app
    usage: cf set-env APP_NAME ENV_VAR_NAME ENV_VAR_VALUE
    options: []
  - name: unset-env
    description: Remove an env variable from an app
    usage: cf unset-env APP_NAME ENV_VAR_NAME
    options: []
  - name: stacks
    description: List all stacks (a stack is a pre-built file system, including an operating system, that can run apps)
    usage: cf stacks [--labels SELECTOR]
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter stacks by labels
  - name: stack
    description: Show information for a stack (a stack is a pre-built file system, including an operating system, that can run apps)
    usage: cf stack STACK_NAME
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given stack's guid. All other output for the stack is suppressed.
  - name: copy-source
    description: Copies the source code of an application to another existing application and restages that application
    usage: cf copy-source SOURCE_APP DESTINATION_APP [-s TARGET_SPACE [-o TARGET_ORG]] [--no-restart] [--strategy STRATEGY] [--no-wait]
    options:
      - names:
          - --strategy
        argument: ""
        description: Deployment strategy, either rolling or null
      - names:
          - --no-wait
        argument: ""
        description: Exit when the first instance of the web process is healthy
      - names:
          - --no-restart
        argument: ""
        description: Do not restage the destination application
      - names:
          - --organization
          - -o
        argument: ""
        description: Org that contains the destination application
      - names:
          - --space
          - -s
        argument: ""
        description: Space that contains the destination application
  - name: create-app-manifest
    description: Create an app manifest for an app that has been pushed successfully
    usage: cf create-app-manifest APP_NAME [-p /path/to/<app-name>_manifest.yml]
    options:
      - names:
          - -p
        argument: ""
        description: Specify a path for file creation. If path not specified, manifest file is created in current working directory.
  - name: get-health-check
    description: Show the type of health check performed on an app
    usage: cf get-health-check APP_NAME
    options: []
  - name: set-health-check
    description: Change type of health check performed on an app's process
    usage: cf set-health-check APP_NAME (process | port | http [--endpoint PATH]) [--process PROCESS] [--invocation-timeout INVOCATION_TIMEOUT]
    options:
      - names:
          - --endpoint
        argument: ""
        description: 'Path on the app (Default: /)'
      - names:
          - --invocation-timeout
        argument: ""
        description: Time (in seconds) that controls individual health check invocations
      - names:
          - --process
        argument: ""
        description: 'App process to update (Default: web)'
  - name: enable-ssh
    description: Enable ssh for the application
    usage: cf enable-ssh APP_NAME
    options: []
  - name: disable-ssh
    description: Disable ssh for the application
    usage: cf disable-ssh APP_NAME
    options: []
  - name: ssh-enabled
    description: Reports whether SSH is enabled on an application container instance
    usage: cf ssh-enabled APP_NAME
    options: []
  - name: ssh
    description: SSH to an application container instance
    usage: |-
      cf ssh APP_NAME [--process PROCESS] [-i INDEX] [-c COMMAND]...
      [-L [BIND_ADDRESS:]LOCAL_PORT:REMOTE_HOST:REMOTE_PORT]... [--skip-remote-execution]
      [--disable-pseudo-tty | --force-pseudo-tty | --request-pseudo-tty] [--skip-host-validation]
    options:
      - names:
          - --app-instance-index
          - -i
        argument: ""
        description: 'App process instance index (Default: 0)'
      - names:
          - --command
          - -c
        argument: ""
        description: Command to run
      - names:
          - --disable-pseudo-tty
          - -T
        argument: ""
        description: Disable pseudo-tty allocation
      - names:
          - --force-pseudo-tty
        argument: ""
        description: Force pseudo-tty allocation
      - names:
          - -L
        argument: ""
        description: Local port forward specification
      - names:
          - --process
        argument: ""
        description: 'App process name (Default: web)'
      - names:
          - --request-pseudo-tty
          - -t
        argument: ""
        description: Request pseudo-tty allocation
      - names:
          - --skip-host-validation
          - -k
        argument: ""
        description: Skip host key validation. Not recommended!
      - names:
          - --skip-remote-execution
          - -N
        argument: ""
        description: Do not execute a remote command
  - name: marketplace
    description: List available offerings in the marketplace
    usage: cf marketplace [-e SERVICE_OFFERING] [-b SERVICE_BROKER] [--no-plans]
    options:
      - names:
          - -e
        argument: ""
        description: Show plan details for a particular service offering
      - names:
          - -b
        argument: ""
        description: Only show details for a particular service broker
      - names:
          - --no-plans
        argument: ""
        description: Hide plan information for service offerings
      - names:
          - --show-unavailable
        argument: ""
        description: Show plans that are not available for use
  - name: services
    description: List all service instances in the target space
    usage: cf services
    options:
      - names:
          - --no-apps
        argument: ""
        description: Do not retrieve bound apps information.
  - name: service
    description: Show service instance info
    usage: cf service SERVICE_INSTANCE
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given service instances's guid. All other output is suppressed.
      - names:
          - --params
        argument: ""
        description: Retrieve and display the given service instances's parameters. All other output is suppressed.
  - name: create-service
    description: Create a service instance
    usage: |-
      cf create-service SERVICE_OFFERING PLAN SERVICE_INSTANCE [-b SERVICE_BROKER] [-c PARAMETERS_AS_JSON] [-t TAGS]

      Optionally provide service-specific configuration parameters in a valid JSON object in-line:

      cf create-service SERVICE_OFFERING PLAN SERVICE_INSTANCE -c '{"name":"value","name":"value"}'

      Optionally provide a file containing service-specific configuration parameters in a valid JSON object.
      The path to the parameters file can be an absolute or relative path to a file:

      cf create-service SERVICE_OFFERING PLAN SERVICE_INSTANCE -c PATH_TO_FILE

      Example of valid JSON object:
      {
        "cluster_nodes": {
          "count": 5,
          "memory_mb": 1024
        }
      }

      TIP:
           Use 'cf create-user-provided-service' to make user-provided service instances available to CF apps

      EXAMPLES:
           Linux/Mac:
              cf create-service db-service silver mydb -c '{"ram_gb":4}'

           Windows Command Line:
              cf create-service db-service silver mydb -c "{\"ram_gb\":4}"

           Windows PowerShell:
              cf create-service db-service silver mydb -c '{\"ram_gb\":4}'

              cf create-service db-service silver mydb -c ~/workspace/tmp/instance_config.json

              cf create-service db-service silver mydb -t "list, of, tags"
    options:
      - names:
          - -b
        argument: ""
        description: Create a service instance from a particular broker. Required when service offering name is ambiguous
      - names:
          - -c
        argument: ""
        description: Valid JSON object containing service-specific configuration parameters, provided either in-line or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.
      - names:
          - -t
        argument: ""
        description: User provided tags
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: update-service
    description: Update a service instance
    usage: |-
      cf update-service SERVICE_INSTANCE [-p NEW_PLAN] [-c PARAMETERS_AS_JSON] [-t TAGS]

      Optionally provide service-specific configuration parameters in a valid JSON object in-line:
      cf update-service SERVICE_INSTANCE -c '{"name":"value","name":"value"}'

      Optionally provide a file containing service-specific configuration parameters in a valid JSON object.
      The path to the parameters file can be an absolute or relative path to a file:
      cf update-service SERVICE_INSTANCE -c PATH_TO_FILE

      Example of valid JSON object:
      {
         "cluster_nodes": {
            "count": 5,
            "memory_mb": 1024
         }
      }

      Optionally provide a list of comma-delimited tags that will be written to the VCAP_SERVICES environment variable for any bound applications.
    options:
      - names:
          - -c
        argument: ""
        description: Valid JSON object containing service-specific configuration parameters, provided either in-line or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.
      - names:
          - -p
        argument: ""
        description: Change service plan for a service instance
      - names:
          - -t
        argument: ""
        description: User provided tags
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: upgrade-service
    description: Upgrade a service instance to the latest available version of its current service plan
    usage: cf upgrade-service SERVICE_INSTANCE
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force upgrade without asking for confirmation
  - name: delete-service
    description: Delete a service instance
    usage: cf delete-service SERVICE_INSTANCE [-f] [-w]
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: rename-service
    description: Rename a service instance
    usage: cf rename-service SERVICE_INSTANCE NEW_SERVICE_INSTANCE
    options: []
  - name: create-service-key
    description: Create key for a service instance
    usage: |-
      cf create-service-key SERVICE_INSTANCE SERVICE_KEY [-c PARAMETERS_AS_JSON] [--wait]

      Optionally provide service-specific configuration parameters in a valid JSON object in-line.
      cf create-service-key SERVICE_INSTANCE SERVICE_KEY -c '{"name":"value","name":"value"}'

      Optionally provide a file containing service-specific configuration parameters in a valid JSON object. The path to the parameters file can be an absolute or relative path to a file.
      cf create-service-key SERVICE_INSTANCE SERVICE_KEY -c PATH_TO_FILE

      Example of valid JSON object:
      {
        "permissions": "read-only"
      }
    options:
      - names:
          - -c
        argument: ""
        description: Valid JSON object containing service-specific configuration parameters, provided either in-line or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: service-keys
    description: List keys for a service instance
    usage: cf service-keys SERVICE_INSTANCE
    options: []
  - name: service-key
    description: Show service key info
    usage: cf service-key SERVICE_INSTANCE SERVICE_KEY
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given service-key's guid. All other output is suppressed.
  - name: delete-service-key
    description: Delete a service key
    usage: cf delete-service-key SERVICE_INSTANCE SERVICE_KEY [-f] [--wait]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: bind-service
    description: Bind a service instance to an app
    usage: |-
      cf bind-service APP_NAME SERVICE_INSTANCE [-c PARAMETERS_AS_JSON] [--binding-name BINDING_NAME]

      Optionally provide service-specific configuration parameters in a valid JSON object in-line:

      cf bind-service APP_NAME SERVICE_INSTANCE -c '{"name":"value","name":"value"}'

      Optionally provide a file containing service-specific configuration parameters in a valid JSON object.
      The path to the parameters file can be an absolute or relative path to a file.

      cf bind-service APP_NAME SERVICE_INSTANCE -c PATH_TO_FILE

      Example of valid JSON object:
      {
         "permissions": "read-only"
      }

      Optionally provide a binding name for the association between an app and a service instance:

      cf bind-service APP_NAME SERVICE_INSTANCE --binding-name BINDING_NAME
    options:
      - names:
          - --binding-name
        argument: ""
        description: 'Name to expose service instance to app process with (Default: service instance name)'
      - names:
          - -c
        argument: ""
        description: Valid JSON object containing service-specific configuration parameters, provided either in-line or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: unbind-service
    description: Unbind a service instance from an app
    usage: cf unbind-service APP_NAME SERVICE_INSTANCE
    options:
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: bind-route-service
    description: Bind a service instance to an HTTP route
    usage: cf bind-route-service DOMAIN [--hostname HOSTNAME] [--path PATH] SERVICE_INSTANCE [-c PARAMETERS_AS_JSON]
    options:
      - names:
          - -c
        argument: ""
        description: Valid JSON object containing service-specific configuration parameters, provided inline or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used in combination with DOMAIN to specify the route to bind
      - names:
          - --path
        argument: ""
        description: Path used in combination with HOSTNAME and DOMAIN to specify the route to bind
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: unbind-route-service
    description: Unbind a service instance from an HTTP route
    usage: cf unbind-route-service DOMAIN [--hostname HOSTNAME] [--path PATH] SERVICE_INSTANCE [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force unbinding without confirmation
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used in combination with DOMAIN to specify the route to unbind
      - names:
          - --path
        argument: ""
        description: Path used in combination with HOSTNAME and DOMAIN to specify the route to unbind
      - names:
          - --wait
          - -w
        argument: ""
        description: Wait for the operation to complete
  - name: create-user-provided-service
    description: Make a user-provided service instance available to CF apps
    usage: |-
      cf create-user-provided-service SERVICE_INSTANCE [-p CREDENTIALS] [-l SYSLOG_DRAIN_URL] [-r ROUTE_SERVICE_URL] [-t TAGS]

      Pass comma separated credential parameter names to enable interactive mode:
      cf create-user-provided-service SERVICE_INSTANCE -p "comma, separated, parameter, names"

      Pass credential parameters as JSON to create a service non-interactively:
      cf create-user-provided-service SERVICE_INSTANCE -p '{"key1":"value1","key2":"value2"}'

      Specify a path to a file containing JSON:
      cf create-user-provided-service SERVICE_INSTANCE -p PATH_TO_FILE
    options:
      - names:
          - -l
        argument: ""
        description: URL to which logs for bound applications will be streamed
      - names:
          - -p
        argument: ""
        description: Credentials, provided inline or in a file, to be exposed in the VCAP_SERVICES environment variable for bound applications
      - names:
          - -r
        argument: ""
        description: URL to which requests for bound routes will be forwarded. Scheme for this URL must be https
      - names:
          - -t
        argument: ""
        description: User provided tags
  - name: update-user-provided-service
    description: Update user-provided service instance
    usage: |-
      cf update-user-provided-service SERVICE_INSTANCE [-p CREDENTIALS] [-l SYSLOG_DRAIN_URL] [-r ROUTE_SERVICE_URL] [-t TAGS]

      Pass comma separated credential parameter names to enable interactive mode:
      cf update-user-provided-service SERVICE_INSTANCE -p "comma, separated, parameter, names"

      Pass credential parameters as JSON to create a service non-interactively:
      cf update-user-provided-service SERVICE_INSTANCE -p '{"key1":"value1","key2":"value2"}'

      Specify a path to a file containing JSON:
      cf update-user-provided-service SERVICE_INSTANCE -p PATH_TO_FILE
    options:
      - names:
          - -l
        argument: ""
        description: URL to which logs for bound applications will be streamed
      - names:
          - -p
        argument: ""
        description: Credentials, provided inline or in a file, to be exposed in the VCAP_SERVICES environment variable for bound applications. Provided credentials will override existing credentials.
      - names:
          - -r
        argument: ""
        description: URL to which requests for bound routes will be forwarded. Scheme for this URL must be https
      - names:
          - -t
        argument: ""
        description: User provided tags
  - name: share-service
    description: Share a service instance with another space
    usage: cf share-service SERVICE_INSTANCE -s OTHER_SPACE [-o OTHER_ORG]
    options:
      - names:
          - -s
        argument: ""
        description: The space to share the service instance into
      - names:
          - -o
        argument: ""
        description: 'Org of the other space (Default: targeted org)'
  - name: unshare-service
    description: Unshare a shared service instance from a space
    usage: cf unshare-service SERVICE_INSTANCE -s OTHER_SPACE [-o OTHER_ORG] [-f]
    options:
      - names:
          - -s
        argument: ""
        description: Space to unshare the service instance from
      - names:
          - -o
        argument: ""
        description: 'Org of the other space (Default: targeted org)'
      - names:
          - -f
        argument: ""
        description: Force unshare without confirmation
  - name: orgs
    description: List all orgs
    usage: cf orgs [--labels SELECTOR]
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter orgs by labels
  - name: org
    description: Show org info
    usage: cf org ORG [--guid]
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given org's guid. All other output for the org is suppressed.
  - name: create-org
    description: Create an org
    usage: cf create-org ORG [-q ORG_QUOTA]
    options:
      - names:
          - --quota
          - -q
        argument: ""
        description: Quota to assign to the newly created org
  - name: delete-org
    description: Delete an org
    usage: cf delete-org ORG [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: rename-org
    description: Rename an org
    usage: cf rename-org ORG NEW_ORG_NAME
    options: []
  - name: spaces
    description: List all spaces in an org
    usage: cf spaces [--labels SELECTOR]
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter spaces by labels
  - name: space
    description: Show space info
    usage: cf space SPACE [--guid] [--security-group-rules]
    options:
      - names:
          - --guid
        argument: ""
        description: Retrieve and display the given space's guid. All other output for the space is suppressed.
      - names:
          - --security-group-rules
        argument: ""
        description: Retrieve the rules for all the security groups associated with the space.
  - name: create-space
    description: Create a space
    usage: cf create-space SPACE [-o ORG] [-q QUOTA]
    options:
      - names:
          - -o
        argument: ""
        description: Organization
      - names:
          - --quota
          - -q
        argument: ""
        description: Quota to assign to the newly created space
  - name: delete-space
    description: Delete a space
    usage: cf delete-space SPACE [-o ORG] [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - -o
        argument: ""
        description: Delete space within specified org
  - name: rename-space
    description: Rename a space
    usage: cf rename-space SPACE NEW_SPACE_NAME
    options: []
  - name: apply-manifest
    description: Apply manifest properties to a space
    usage: cf apply-manifest -f APP_MANIFEST_PATH
    options:
      - names:
          - -f
        argument: ""
        description: Path to app manifest
      - names:
          - --var
        argument: ""
        description: Variable key value pair for variable substitution, (e.g., name=app1); can specify multiple times
      - names:
          - --vars-file
        argument: ""
        description: Path to a variable substitution file for manifest; can specify multiple times
  - name: allow-space-ssh
    description: Allow SSH access for the space
    usage: cf allow-space-ssh SPACE_NAME
    options: []
  - name: disallow-space-ssh
    description: Disallow SSH access for the space
    usage: cf disallow-space-ssh SPACE_NAME
    options: []
  - name: space-ssh-allowed
    description: Reports whether SSH is allowed in a space
    usage: cf space-ssh-allowed SPACE_NAME
    options: []
  - name: domains
    description: List domains in the target org
    usage: cf domains
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter domains by labels
  - name: create-private-domain
    description: Create a private domain for a specific org
    usage: cf create-private-domain ORG DOMAIN
    options: []
  - name: delete-private-domain
    description: Delete a private domain
    usage: cf delete-private-domain DOMAIN [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: create-shared-domain
    description: Create a domain that can be used by all orgs (admin-only)
    usage: cf create-shared-domain DOMAIN [--router-group ROUTER_GROUP_NAME | --internal]
    options:
      - names:
          - --router-group
        argument: ""
        description: Routes for this domain will use routers in the specified router group
      - names:
          - --internal
        argument: ""
        description: Applications that use internal routes communicate directly on the container network
  - name: delete-shared-domain
    description: Delete a shared domain
    usage: cf delete-shared-domain DOMAIN [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: router-groups
    description: List router groups
    usage: cf router-groups
    options: []
  - name: routes
    description: List all routes in the current space or the current organization
    usage: cf routes [--org-level]
    options:
      - names:
          - --org-level
        argument: ""
        description: List all the routes for all spaces of current organization
      - names:
          - --labels
        argument: ""
        description: Selector to filter routes by labels
  - name: route
    description: Display route details and mapped destinations
    usage: |-
      Display an HTTP route:
         cf route DOMAIN [--hostname HOSTNAME] [--path PATH]

      Display a TCP route:
         cf route DOMAIN --port PORT
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used to identify the HTTP route
      - names:
          - --path
        argument: ""
        description: Path used to identify the HTTP route
      - names:
          - --port
        argument: ""
        description: Port used to identify the TCP route
  - name: create-route
    description: Create a route for later use
    usage: |-
      Create an HTTP route:
         cf create-route DOMAIN [--hostname HOSTNAME] [--path PATH]

      Create a TCP route:
         cf create-route DOMAIN [--port PORT]
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname for the HTTP route (required for shared domains)
      - names:
          - --path
        argument: ""
        description: Path for the HTTP route
      - names:
          - --port
        argument: ""
        description: 'Port for the TCP route (default: random port)'
  - name: check-route
    description: Perform a check to determine whether a route currently exists or not
    usage: |-
      Check an HTTP route:
         cf check-route DOMAIN [--hostname HOSTNAME] [--path PATH]

      Check a TCP route:
         cf check-route DOMAIN --port PORT
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used to identify the HTTP route
      - names:
          - --path
        argument: ""
        description: Path used to identify the HTTP route
      - names:
          - --port
        argument: ""
        description: Port used to identify the TCP route
  - name: map-route
    description: Map a route to an app
    usage: |-
      Map an HTTP route:
         cf map-route APP_NAME DOMAIN [--hostname HOSTNAME] [--path PATH] [--app-protocol PROTOCOL]

      Map a TCP route:
         cf map-route APP_NAME DOMAIN [--port PORT]
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname for the HTTP route (required for shared domains)
      - names:
          - --path
        argument: ""
        description: Path for the HTTP route
      - names:
          - --port
        argument: ""
        description: 'Port for the TCP route (default: random port)'
      - names:
          - --app-protocol
        argument: ""
        description: '[Beta flag, subject to change] Protocol for the route destination (default: http1). Only applied to HTTP routes'
  - name: unmap-route
    description: Remove a route from an app
    usage: |-
      Unmap an HTTP route:
         cf unmap-route APP_NAME DOMAIN [--hostname HOSTNAME] [--path PATH]

      Unmap a TCP route:
         cf unmap-route APP_NAME DOMAIN --port PORT
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used to identify the HTTP route
      - names:
          - --path
        argument: ""
        description: Path used to identify the HTTP route
      - names:
          - --port
        argument: ""
        description: Port used to identify the TCP route
  - name: delete-route
    description: Delete a route
    usage: |-
      Delete an HTTP route:
         cf delete-route DOMAIN [--hostname HOSTNAME] [--path PATH] [-f]

      Delete a TCP route:
         cf delete-route DOMAIN --port PORT [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname used to identify the HTTP route (required for shared domains)
      - names:
          - --path
        argument: ""
        description: Path used to identify the HTTP route
      - names:
          - --port
        argument: ""
        description: Port used to identify the TCP route
  - name: delete-orphaned-routes
    description: Delete all orphaned routes in the currently targeted space (i.e. those that are not mapped to an app or service instance)
    usage: cf delete-orphaned-routes [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: update-destination
    description: Updates the destination protocol for a route
    usage: |-
      Edit an existing HTTP route:
         cf update-destination APP_NAME DOMAIN [--hostname HOSTNAME] [--app-protocol PROTOCOL] [--path PATH]
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname for the HTTP route (required for shared domains)
      - names:
          - --app-protocol
        argument: ""
        description: New Protocol for the route destination (http1 or http2). Only applied to HTTP routes
      - names:
          - --path
        argument: ""
        description: Path for the HTTP route
  - name: share-route
    description: Share a route in between spaces
    usage: |-
      Share an existing route in between two spaces:
           cf share-route DOMAIN [--hostname HOSTNAME] [--path PATH] -s OTHER_SPACE [-o OTHER_ORG]
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname for the HTTP route (required for shared domains)
      - names:
          - --path
        argument: ""
        description: Path for the HTTP route
      - names:
          - -o
        argument: ""
        description: 'The org of the destination app (Default: targeted org)'
      - names:
          - -s
        argument: ""
        description: 'The space of the destination app (Default: targeted space)'
  - name: move-route
    description: Assign a route to a different space
    usage: |-
      Transfers the ownership of a route to a another space:
           cf move-route DOMAIN [--hostname HOSTNAME] [--path PATH] -s OTHER_SPACE [-o OTHER_ORG]
    options:
      - names:
          - --hostname
          - -n
        argument: ""
        description: Hostname for the HTTP route (required for shared domains)
      - names:
          - --path
        argument: ""
        description: Path for the HTTP route
      - names:
          - -o
        argument: ""
        description: 'The org of the destination app (Default: targeted org)'
      - names:
          - -s
        argument: ""
        description: 'The space of the destination app (Default: targeted space)'
  - name: network-policies
    description: List direct network traffic policies
    usage: cf network-policies [--source SOURCE_APP]
    options:
      - names:
          - --source
        argument: ""
        description: Source app to filter results by
  - name: add-network-policy
    description: Create policy to allow direct network traffic from one app to another
    usage: cf add-network-policy SOURCE_APP DESTINATION_APP [-s DESTINATION_SPACE_NAME [-o DESTINATION_ORG_NAME]] [--protocol (tcp | udp) --port RANGE]
    options:
      - names:
          - --port
        argument: ""
        description: 'Port or range of ports for connection to destination app (Default: 8080)'
      - names:
          - --protocol
        argument: ""
        description: 'Protocol to connect apps with (Default: tcp)'
      - names:
          - -o
        argument: ""
        description: 'The org of the destination app (Default: targeted org)'
      - names:
          - -s
        argument: ""
        description: 'The space of the destination app (Default: targeted space)'
  - name: remove-network-policy
    description: Remove network traffic policy of an app
    usage: cf remove-network-policy SOURCE_APP DESTINATION_APP [-s DESTINATION_SPACE_NAME [-o DESTINATION_ORG_NAME]] --protocol (tcp | udp) --port RANGE
    options:
      - names:
          - --port
        argument: ""
        description: Port or range of ports that destination app is connected with
      - names:
          - --protocol
        argument: ""
        description: Protocol that apps are connected with
      - names:
          - -o
        argument: ""
        description: 'The org of the destination app (Default: targeted org)'
      - names:
          - -s
        argument: ""
        description: 'The space of the destination app (Default: targeted space)'
  - name: buildpacks
    description: List all buildpacks
    usage: cf buildpacks [--labels SELECTOR]
    options:
      - names:
          - --labels
        argument: ""
        description: Selector to filter buildpacks by labels
  - name: create-buildpack
    description: Create a buildpack
    usage: cf create-buildpack BUILDPACK PATH POSITION [--disable]
    options:
      - names:
          - --disable
        argument: ""
        description: Disable the buildpack from being used for staging
  - name: update-buildpack
    description: Update a buildpack
    usage: cf update-buildpack BUILDPACK [-p PATH | -s STACK | --assign-stack NEW_STACK] [-i POSITION] [--rename NEW_NAME] [--enable|--disable] [--lock|--unlock]
    options:
      - names:
          - --assign-stack
        argument: ""
        description: Assign a stack to a buildpack that does not have a stack association
      - names:
          - --disable
        argument: ""
        description: Disable the buildpack from being used for staging
      - names:
          - --enable
        argument: ""
        description: Enable the buildpack to be used for staging
      - names:
          - --lock
        argument: ""
        description: Lock the buildpack to prevent updates
      - names:
          - --path
          - -p
        argument: ""
        description: Path to directory or zip file
      - names:
          - --position
          - -i
        argument: ""
        description: The order in which the buildpacks are checked during buildpack auto-detection
      - names:
          - --rename
        argument: ""
        description: Rename an existing buildpack
      - names:
          - --stack
          - -s
        argument: ""
        description: Specify stack to disambiguate buildpacks with the same name
      - names:
          - --unlock
        argument: ""
        description: Unlock the buildpack to enable updates
  - name: delete-buildpack
    description: Delete a buildpack
    usage: cf delete-buildpack BUILDPACK [-f] [-s STACK]
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
      - names:
          - --stack
          - -s
        argument: ""
        description: Specify stack to disambiguate buildpacks with the same name. Required when buildpack name is ambiguous
  - name: create-user
    description: Create a new user
    usage: |-
      cf create-user USERNAME PASSWORD
      cf create-user USERNAME [--origin ORIGIN]
      cf create-user USERNAME --password-prompt
    options:
      - names:
          - --origin
        argument: ""
        description: Origin for mapping a user account to a user in an external identity provider
      - names:
          - --password-prompt
        argument: ""
        description: Prompt interactively for password
  - name: delete-user
    description: Delete a user
    usage: |-
      cf delete-user USERNAME [-f]
      cf delete-user USERNAME [--origin ORIGIN]
    options:
      - names:
          - -f
        argument: ""
        description: Prompt interactively for password
      - names:
          - --origin
        argument: ""
        description: Origin for mapping a user account to a user in an external identity provider
  - name: org-users
    description: Show org users by role
    usage: cf org-users ORG
    options:
      - names:
          - --all-users
          - -a
        argument: ""
        description: List all users with roles in the org or in spaces within the org
  - name: set-org-role
    description: Assign an org role to a user
    usage: |-
      cf set-org-role USERNAME ORG ROLE
      cf set-org-role USERNAME ORG ROLE [--client]
      cf set-org-role USERNAME ORG ROLE [--origin ORIGIN]
    options:
      - names:
          - --client
        argument: ""
        description: Assign an org role to a client-id of a (non-user) service account
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for authentication
  - name: unset-org-role
    description: Remove an org role from a user
    usage: |-
      cf unset-org-role USERNAME ORG ROLE
      cf unset-org-role USERNAME ORG ROLE [--client]
      cf unset-org-role USERNAME ORG ROLE [--origin ORIGIN]
    options:
      - names:
          - --client
        argument: ""
        description: Unassign an org role for a client-id of a (non-user) service account
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for authentication
  - name: space-users
    description: Show space users by role
    usage: cf space-users ORG SPACE
    options: []
  - name: set-space-role
    description: Assign a space role to a user
    usage: |-
      cf set-space-role USERNAME ORG SPACE ROLE
      cf set-space-role USERNAME ORG SPACE ROLE [--client]
      cf set-space-role USERNAME ORG SPACE ROLE [--origin ORIGIN]
    options:
      - names:
          - --client
        argument: ""
        description: Assign a space role to a client-id of a (non-user) service account
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for authentication
  - name: unset-space-role
    description: Remove a space role from a user
    usage: |-
      cf unset-space-role USERNAME ORG SPACE ROLE
      cf unset-space-role USERNAME ORG SPACE ROLE [--client]
      cf unset-space-role USERNAME ORG SPACE ROLE [--origin ORIGIN]
    options:
      - names:
          - --client
        argument: ""
        description: Remove space role from a client-id of a (non-user) service account
      - names:
          - --origin
        argument: ""
        description: Indicates the identity provider to be used for authentication
  - name: org-quotas
    description: List available organization quotas
    usage: cf org-quotas
    options: []
  - name: org-quota
    description: Show organization quota
    usage: cf org-quota QUOTA
    options: []
  - name: set-org-quota
    description: Assign a quota to an organization
    usage: cf set-org-quota ORG QUOTA
    options: []
  - name: create-org-quota
    description: Define a new quota for an organization
    usage: cf create-org-quota ORG_QUOTA [-m TOTAL_MEMORY] [-i INSTANCE_MEMORY] [-r ROUTES] [-s SERVICE_INSTANCES] [-a APP_INSTANCES] [--allow-paid-service-plans] [--reserved-route-ports RESERVED_ROUTE_PORTS] [-l LOG_VOLUME]
    options:
      - names:
          - -a
        argument: ""
        description: 'Total number of application instances. (Default: unlimited).'
      - names:
          - --allow-paid-service-plans
        argument: ""
        description: 'Allow provisioning instances of paid service plans. (Default: disallowed).'
      - names:
          - -i
        argument: ""
        description: 'Maximum amount of memory a process can have (e.g. 1024M, 1G, 10G). (Default: unlimited).'
      - names:
          - -m
        argument: ""
        description: 'Total amount of memory all processes can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -r
        argument: ""
        description: 'Total number of routes. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - --reserved-route-ports
        argument: ""
        description: 'Maximum number of routes that may be created with ports. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -s
        argument: ""
        description: 'Total number of service instances. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -l
        argument: ""
        description: 'Total log volume per second all processes can have, in bytes (e.g. 128B, 4K, 1M). -1 represents an unlimited amount. (Default: -1).'
  - name: delete-org-quota
    description: Delete an organization quota
    usage: cf delete-org-quota QUOTA [-f]
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: update-org-quota
    description: Update an existing organization quota
    usage: cf update-org-quota QUOTA [-m TOTAL_MEMORY] [-i INSTANCE_MEMORY] [-n NEW_NAME] [-r ROUTES] [-s SERVICE_INSTANCES] [-a APP_INSTANCES] [--allow-paid-service-plans | --disallow-paid-service-plans] [--reserved-route-ports RESERVED_ROUTE_PORTS] [-l LOG_VOLUME]
    options:
      - names:
          - -a
        argument: ""
        description: Total number of application instances. -1 represents an unlimited amount.
      - names:
          - --allow-paid-service-plans
        argument: ""
        description: Allow provisioning instances of paid service plans.
      - names:
          - --disallow-paid-service-plans
        argument: ""
        description: Disallow provisioning instances of paid service plans.
      - names:
          - -i
        argument: ""
        description: Maximum amount of memory a process can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount.
      - names:
          - -m
        argument: ""
        description: Total amount of memory all processes can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount.
      - names:
          - -n
        argument: ""
        description: New name
      - names:
          - -r
        argument: ""
        description: Total number of routes. -1 represents an unlimited amount.
      - names:
          - --reserved-route-ports
        argument: ""
        description: Maximum number of routes that may be created with ports. -1 represents an unlimited amount.
      - names:
          - -s
        argument: ""
        description: Total number of service instances. -1 represents an unlimited amount.
      - names:
          - -l
        argument: ""
        description: Total log volume per second all processes can have, in bytes (e.g. 128B, 4K, 1M). -1 represents an unlimited amount.
  - name: share-private-domain
    description: Share a private domain with a specific org
    usage: cf share-private-domain ORG DOMAIN
    options: []
  - name: unshare-private-domain
    description: Unshare a private domain with a specific org
    usage: cf unshare-private-domain ORG DOMAIN
    options: []
  - name: space-quotas
    description: List available space quotas
    usage: cf space-quotas
    options: []
  - name: space-quota
    description: Show space quota info
    usage: cf space-quota QUOTA
    options: []
  - name: create-space-quota
    description: Define a new quota for a space
    usage: cf create-space-quota QUOTA [-m TOTAL_MEMORY] [-i INSTANCE_MEMORY] [-r ROUTES] [-s SERVICE_INSTANCES] [-a APP_INSTANCES] [--allow-paid-service-plans] [--reserved-route-ports RESERVED_ROUTE_PORTS] [-l LOG_VOLUME]
    options:
      - names:
          - -a
        argument: ""
        description: 'Total number of application instances. (Default: unlimited).'
      - names:
          - --allow-paid-service-plans
        argument: ""
        description: 'Allow provisioning instances of paid service plans. (Default: disallowed).'
      - names:
          - -i
        argument: ""
        description: 'Maximum amount of memory a process can have (e.g. 1024M, 1G, 10G). (Default: unlimited).'
      - names:
          - -m
        argument: ""
        description: 'Total amount of memory all processes can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -r
        argument: ""
        description: 'Total number of routes. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - --reserved-route-ports
        argument: ""
        description: 'Maximum number of routes that may be created with ports. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -s
        argument: ""
        description: 'Total number of service instances. -1 represents an unlimited amount. (Default: 0).'
      - names:
          - -l
        argument: ""
        description: 'Total log volume per second all processes can have, in bytes (e.g. 128B, 4K, 1M). -1 represents an unlimited amount. (Default: -1).'
  - name: update-space-quota
    description: Update an existing space quota
    usage: cf update-space-quota QUOTA [-m TOTAL_MEMORY] [-i INSTANCE_MEMORY] [-n NEW_NAME] [-r ROUTES] [-s SERVICE_INSTANCES] [-a APP_INSTANCES] [--allow-paid-service-plans | --disallow-paid-service-plans] [--reserved-route-ports RESERVED_ROUTE_PORTS] [-l LOG_VOLUME]
    options:
      - names:
          - -a
        argument: ""
        description: Total number of application instances. -1 represents an unlimited amount.
      - names:
          - --allow-paid-service-plans
        argument: ""
        description: Allow provisioning instances of paid service plans.
      - names:
          - --disallow-paid-service-plans
        argument: ""
        description: Disallow provisioning instances of paid service plans.
      - names:
          - -i
        argument: ""
        description: Maximum amount of memory a process can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount.
      - names:
          - -m
        argument: ""
        description: Total amount of memory all processes can have (e.g. 1024M, 1G, 10G). -1 represents an unlimited amount.
      - names:
          - -n
        argument: ""
        description: New name
      - names:
          - -r
        argument: ""
        description: Total number of routes. -1 represents an unlimited amount.
      - names:
          - --reserved-route-ports
        argument: ""
        description: Maximum number of routes that may be created with ports. -1 represents an unlimited amount.
      - names:
          - -s
        argument: ""
        description: Total number of service instances. -1 represents an unlimited amount.
      - names:
          - -l
        argument: ""
        description: Total log volume per second all processes can have, in bytes (e.g. 128B, 4K, 1M). -1 represents an unlimited amount.
  - name: delete-space-quota
    description: Delete a space quota
    usage: cf delete-space-quota QUOTA [-f]
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: set-space-quota
    description: Assign a quota to a space
    usage: cf set-space-quota SPACE QUOTA
    options: []
  - name: unset-space-quota
    description: Unassign a quota from a space
    usage: cf unset-space-quota SPACE SPACE_QUOTA
    options: []
  - name: service-brokers
    description: List service brokers
    usage: cf service-brokers
    options: []
  - name: create-service-broker
    description: Create a service broker
    usage: cf create-service-broker SERVICE_BROKER USERNAME PASSWORD URL [--space-scoped]
    options:
      - names:
          - --space-scoped
        argument: ""
        description: Make the broker's service plans only visible within the targeted space
  - name: update-service-broker
    description: Update a service broker
    usage: cf update-service-broker SERVICE_BROKER USERNAME PASSWORD URL
    options: []
  - name: delete-service-broker
    description: Delete a service broker
    usage: cf delete-service-broker SERVICE_BROKER [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: rename-service-broker
    description: Rename a service broker
    usage: cf rename-service-broker SERVICE_BROKER NEW_SERVICE_BROKER
    options: []
  - name: purge-service-offering
    description: Recursively remove a service offering and child objects from Cloud Foundry database without making requests to a service broker
    usage: cf purge-service-offering SERVICE_OFFERING [-b BROKER] [-f]
    options:
      - names:
          - -b
        argument: ""
        description: Purge a service offering from a particular service broker. Required when service offering name is ambiguous
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: purge-service-instance
    description: Recursively remove a service instance and child objects from Cloud Foundry database without making requests to a service broker
    usage: |-
      cf purge-service-instance SERVICE_INSTANCE [-f]

      WARNING: This operation assumes that the service broker responsible for this service instance is no longer available or is not responding with a 200 or 410, and the service instance has been deleted, leaving orphan records in Cloud Foundry's database. All knowledge of the service instance will be removed from Cloud Foundry, including service bindings and service keys.
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: service-access
    description: List service access settings
    usage: cf service-access [-b BROKER] [-e SERVICE] [-o ORG]
    options:
      - names:
          - -b
        argument: ""
        description: Access for plans of a particular broker
      - names:
          - -e
        argument: ""
        description: Access for plans of a particular service offering
      - names:
          - -o
        argument: ""
        description: Plans accessible by a particular organization
  - name: enable-service-access
    description: Enable access to a service offering or service plan for one or all orgs
    usage: cf enable-service-access SERVICE_OFFERING [-b BROKER] [-p PLAN] [-o ORG]
    options:
      - names:
          - -b
        argument: ""
        description: Enable access to a service offering from a particular service broker. Required when service offering name is ambiguous
      - names:
          - -o
        argument: ""
        description: Enable access for a specified organization
      - names:
          - -p
        argument: ""
        description: Enable access to a specified service plan
  - name: disable-service-access
    description: Disable access to a service offering or service plan for one or all orgs
    usage: cf disable-service-access SERVICE_OFFERING [-b BROKER] [-p PLAN] [-o ORG]
    options:
      - names:
          - -b
        argument: ""
        description: Disable access to a service offering from a particular service broker. Required when service offering name is ambiguous
      - names:
          - -o
        argument: ""
        description: Disable access for a specified organization
      - names:
          - -p
        argument: ""
        description: Disable access to a specified service plan
  - name: security-group
    description: Show a single security group
    usage: cf security-group SECURITY_GROUP
    options: []
  - name: security-groups
    description: List all security groups
    usage: cf security-groups
    options: []
  - name: create-security-group
    description: Create a security group
    usage: |-
      cf create-security-group SECURITY_GROUP PATH_TO_JSON_RULES_FILE

      The provided path can be an absolute or relative path to a file. The file should have
      a single array with JSON objects inside describing the rules. The JSON Base Object is
      omitted and only the square brackets and associated child object are required in the file.

      Valid json file example:
      [
        {
          "protocol": "tcp",
          "destination": "10.0.11.0/24",
          "ports": "80,443",
          "description": "Allow http and https traffic from ZoneA"
        }
      ]
    options: []
  - name: update-security-group
    description: Update a security group
    usage: |-
      cf update-security-group SECURITY_GROUP PATH_TO_JSON_RULES_FILE

      The provided path can be an absolute or relative path to a file. The file should have
      a single array with JSON objects inside describing the rules. The JSON Base Object is
      omitted and only the square brackets and associated child object are required in the file.

      Valid json file example:
      [
        {
          "protocol": "tcp",
          "destination": "10.0.11.0/24",
          "ports": "80,443",
          "description": "Allow http and https traffic from ZoneA"
        }
      ]
    options: []
  - name: delete-security-group
    description: Deletes a security group
    usage: cf delete-security-group SECURITY_GROUP [-f]
    options:
      - names:
          - --force
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: bind-security-group
    description: Bind a security group to a particular space, or all existing spaces of an org
    usage: cf bind-security-group SECURITY_GROUP ORG [--lifecycle (running | staging)] [--space SPACE]
    options:
      - names:
          - --lifecycle
        argument: ""
        description: 'Lifecycle phase the group applies to. (Default: running)'
      - names:
          - --space
        argument: ""
        description: 'Space to bind the security group to. (Default: all existing spaces in org)'
  - name: unbind-security-group
    description: Unbind a security group from a space
    usage: cf unbind-security-group SECURITY_GROUP ORG SPACE [--lifecycle (running | staging)]
    options:
      - names:
          - --lifecycle
        argument: ""
        description: 'Lifecycle phase the group applies to (Default: running)'
  - name: bind-staging-security-group
    description: Bind a security group to the list of security groups to be used for staging applications globally
    usage: cf bind-staging-security-group SECURITY_GROUP
    options: []
  - name: staging-security-groups
    description: List security groups globally configured for staging applications
    usage: cf staging-security-groups
    options: []
  - name: unbind-staging-security-group
    description: Unbind a security group from the set of security groups for staging applications globally
    usage: cf unbind-staging-security-group SECURITY_GROUP
    options: []
  - name: bind-running-security-group
    description: Bind a security group to the list of security groups to be used for running applications
    usage: cf bind-running-security-group SECURITY_GROUP
    options: []
  - name: running-security-groups
    description: List security groups globally configured for running applications
    usage: cf running-security-groups
    options: []
  - name: unbind-running-security-group
    description: Unbind a security group from the set of security groups for running applications globally
    usage: cf unbind-running-security-group SECURITY_GROUP
    options: []
  - name: running-environment-variable-group
    description: Retrieve the contents of the running environment variable group
    usage: cf running-environment-variable-group
    options: []
  - name: staging-environment-variable-group
    description: Retrieve the contents of the staging environment variable group
    usage: cf staging-environment-variable-group
    options: []
  - name: set-staging-environment-variable-group
    description: Pass parameters as JSON to create a staging environment variable group
    usage: cf set-staging-environment-variable-group '{"name":"value","name":"value"}'
    options: []
  - name: set-running-environment-variable-group
    description: Pass parameters as JSON to create a running environment variable group
    usage: cf set-running-environment-variable-group '{"name":"value","name":"value"}'
    options: []
  - name: isolation-segments
    description: List all isolation segments
    usage: cf isolation-segments
    options: []
  - name: create-isolation-segment
    description: Create an isolation segment
    usage: cf create-isolation-segment SEGMENT_NAME
    options: []
  - name: delete-isolation-segment
    description: Delete an isolation segment
    usage: cf delete-isolation-segment SEGMENT_NAME
    options:
      - names:
          - -f
        argument: ""
        description: Force deletion without confirmation
  - name: enable-org-isolation
    description: Entitle an organization to an isolation segment
    usage: cf enable-org-isolation ORG_NAME SEGMENT_NAME
    options: []
  - name: disable-org-isolation
    description: Revoke an organization's entitlement to an isolation segment
    usage: cf disable-org-isolation ORG_NAME SEGMENT_NAME
    options: []
  - name: set-org-default-isolation-segment
    description: Set the default isolation segment used for apps in spaces in an org
    usage: cf set-org-default-isolation-segment ORG_NAME SEGMENT_NAME
    options: []
  - name: reset-org-default-isolation-segment
    description: Reset the default isolation segment used for apps in spaces of an org
    usage: cf reset-org-default-isolation-segment ORG_NAME
    options: []
  - name: set-space-isolation-segment
    description: Assign the isolation segment for a space
    usage: cf set-space-isolation-segment SPACE_NAME SEGMENT_NAME
    options: []
  - name: reset-space-isolation-segment
    description: Reset the space's isolation segment to the org default
    usage: cf reset-space-isolation-segment SPACE_NAME
    options: []
  - name: feature-flags
    description: Retrieve list of feature flags with status
    usage: cf feature-flags
    options: []
  - name: feature-flag
    description: Retrieve an individual feature flag with status
    usage: cf feature-flag FEATURE_FLAG_NAME
    options: []
  - name: enable-feature-flag
    description: Allow use of a feature
    usage: cf enable-feature-flag FEATURE_FLAG_NAME
    options: []
  - name: disable-feature-flag
    description: Prevent use of a feature
    usage: cf disable-feature-flag FEATURE_FLAG_NAME
    options: []
  - name: labels
    description: List all labels (key-value pairs) for an API resource
    usage: cf labels RESOURCE RESOURCE_NAME
    options:
      - names:
          - --stack
          - -s
        argument: ""
        description: Specify stack to disambiguate buildpacks with the same name
      - names:
          - --broker
          - -b
        argument: ""
        description: Specify a service broker to disambiguate service offerings or service plans with the same name.
      - names:
          - --offering
          - -e
        argument: ""
        description: Specify a service offering to disambiguate service plans with the same name.
  - name: set-label
    description: Set a label (key-value pairs) for an API resource
    usage: cf set-label RESOURCE RESOURCE_NAME KEY=VALUE...
    options:
      - names:
          - --stack
          - -s
        argument: ""
        description: Specify stack to disambiguate buildpacks with the same name
      - names:
          - --broker
          - -b
        argument: ""
        description: Specify a service broker to disambiguate service offerings or service plans with the same name.
      - names:
          - --offering
          - -e
        argument: ""
        description: Specify a service offering to disambiguate service plans with the same name.
  - name: unset-label
    description: Unset a label (key-value pairs) for an API resource
    usage: cf unset-label RESOURCE RESOURCE_NAME KEY...
    options:
      - names:
          - --stack
          - -s
        argument: ""
        description: Specify stack to disambiguate buildpacks with the same name
      - names:
          - --broker
          - -b
        argument: ""
        description: Specify a service broker to disambiguate service offerings or service plans with the same name.
      - names:
          - --offering
          - -e
        argument: ""
        description: Specify a service offering to disambiguate service plans with the same name.
  - name: curl
    description: Executes a request to the targeted API endpoint
    usage: |-
      cf curl PATH [-iv] [-X METHOD] [-H HEADER]... [-d DATA] [--output FILE]

      By default 'cf curl' will perform a GET to the specified PATH. If data
      is provided via -d, a POST will be performed instead, and the Content-Type
      will be set to application/json. You may override headers with -H and the
      request method with -X.

      For API documentation, please visit http://apidocs.cloudfoundry.org.
    options:
      - names:
          - -H
        argument: ""
        description: Custom headers to include in the request, flag can be specified multiple times
      - names:
          - -X
        argument: ""
        description: HTTP method (GET,POST,PUT,DELETE,etc)
      - names:
          - -d
        argument: ""
        description: HTTP data to include in the request body, or '@' followed by a file name to read the data from
      - names:
          - --fail
          - -f
        argument: ""
        description: Server errors return exit code 22
      - names:
          - -i
        argument: ""
        description: Include response headers in the output
      - names:
          - --output
        argument: ""
        description: Write curl body to FILE instead of stdout
    subcommands:
      - name: request
        description: method with -X.
        usage: |-
          cf curl PATH [-iv] [-X METHOD] [-H HEADER]... [-d DATA] [--output FILE]

          By default 'cf curl' will perform a GET to the specified PATH. If data
          is provided via -d, a POST will be performed instead, and the Content-Type
          will be set to application/json. You may override headers with -H and the
          request method with -X.

          For API documentation, please visit http://apidocs.cloudfoundry.org.
        options:
          - names:
              - -H
            argument: ""
            description: Custom headers to include in the request, flag can be specified multiple times
          - names:
              - -X
            argument: ""
            description: HTTP method (GET,POST,PUT,DELETE,etc)
          - names:
              - -d
            argument: ""
            description: HTTP data to include in the request body, or '@' followed by a file name to read the data from
          - names:
              - --fail
              - -f
            argument: ""
            description: Server errors return exit code 22
          - names:
              - -i
            argument: ""
            description: Include response headers in the output
          - names:
              - --output
            argument: ""
            description: Write curl body to FILE instead of stdout
  - name: config
    description: Write default values to the config
    usage: cf config [--async-timeout TIMEOUT_IN_MINUTES] [--trace (true | false | path/to/file)] [--color (true | false)] [--locale (LOCALE | CLEAR)]
    options:
      - names:
          - --async-timeout
        argument: ""
        description: Timeout in minutes for async HTTP requests
      - names:
          - --color
        argument: ""
        description: Enable or disable color in CLI output
      - names:
          - --locale
        argument: ""
        description: Set default locale. If LOCALE is 'CLEAR', previous locale is deleted.
      - names:
          - --trace
        argument: ""
        description: Trace HTTP requests by default. If a file path is provided then output will write to the file provided. If the file does not exist it will be created.
  - name: oauth-token
    description: Display the OAuth token for the current session and refresh the token if necessary
    usage: cf oauth-token
    options: []
  - name: ssh-code
    description: Get a one time password for ssh clients
    usage: cf ssh-code
    options: []
  - name: add-plugin-repo
    description: Add a new plugin repository
    usage: cf add-plugin-repo REPO_NAME URL
    options: []
  - name: remove-plugin-repo
    description: Remove a plugin repository
    usage: cf remove-plugin-repo REPO_NAME
    options: []
  - name: list-plugin-repos
    description: List all the added plugin repositories
    usage: cf list-plugin-repos
    options: []
  - name: repo-plugins
    description: List all available plugins in specified repository or in all added repositories
    usage: cf repo-plugins [-r REPO_NAME]
    options:
      - names:
          - -r
        argument: ""
        description: Name of a registered repository
  - name: plugins
    description: List commands of installed plugins
    usage: cf plugins [--checksum | --outdated]
    options:
      - names:
          - --checksum
        argument: ""
        description: Compute and show the sha1 value of the plugin binary file
      - names:
          - --outdated
        argument: ""
        description: Search the plugin repositories for new versions of installed plugins
  - name: install-plugin
    description: Install CLI plugin
    usage: |-
      cf install-plugin PLUGIN_NAME [-r REPO_NAME] [-f]
      cf install-plugin LOCAL-PATH/TO/PLUGIN | URL [-f]
    options:
      - names:
          - -f
        argument: ""
        description: Force install of plugin without confirmation
      - names:
          - -r
        argument: ""
        description: Restrict search for plugin to this registered repository
  - name: uninstall-plugin
    description: Uninstall CLI plugin
    usage: cf uninstall-plugin PLUGIN-NAME
    options: []
version: cf version 8.5.0+73aa161.2022-09-12
tldr: |
  > Command-line tool to manage apps and services on Cloud Foundry.
  > More information: <https://docs.cloudfoundry.org>.

  - Log in to the Cloud Foundry API:

  `cf login -a {{api_url}}`

  - Push an app using the default settings:

  `cf push {{app_name}}`

  - View the services available from your organization:

  `cf marketplace`

  - Create a service instance:

  `cf create-service {{service}} {{plan}} {{service_name}}`

  - Connect an application to a service:

  `cf bind-service {{app_name}} {{service_name}}`

  - Run a script whose code is included in the app, but runs independently:

  `cf run-task {{app_name}} "{{script_command}}" --name {{task_name}}`

  - Start an interactive SSH session with a VM hosting an app:

  `cf ssh {{app_name}}`

  - View a dump of recent app logs:

  `cf logs {{app_name}} --recent`
