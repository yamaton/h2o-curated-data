name: cmake
description: cmake
usage: |-
  Generate a Project Buildsystem
   cmake [<options>] <path-to-source>
   cmake [<options>] <path-to-existing-build>
   cmake [<options>] -S <path-to-source> -B <path-to-build>

  Build a Project
   cmake --build <dir> [<options>] [-- <build-tool-options>]

  Install a Project
   cmake --install <dir> [<options>]

  Open a Project
   cmake --open <dir>

  Run a Script
   cmake [{-D <var>=<value>}...] -P <cmake-script-file>

  Run a Command-Line Tool
   cmake -E <command> [<options>]

  Run the Find-Package Tool
   cmake --find-package [<options>]

  View Help
   cmake --help[-<topic>]
options:
  - names:
      - -S
    argument: <path-to-source>
    description: Path to root directory of the CMake project to build.
  - names:
      - -B
    argument: <path-to-build>
    description: Path to directory which CMake will use as the root of build directory.
  - names:
      - -C
    argument: <initial-cache>
    description: Pre-load a script to populate the cache.
  - names:
      - -D
    argument: <var>:<type>=<value>
    description: Create or update a CMake CACHE entry.
  - names:
      - -U
    argument: <globbing_expr>
    description: Remove matching entries from CMake CACHE.
  - names:
      - -G
    argument: <generator-name>
    description: Specify a build system generator.
  - names:
      - -T
    argument: <toolset-spec>
    description: Toolset specification for the generator, if supported.
  - names:
      - -A
    argument: <platform-name>
    description: Specify platform name if supported by generator.
  - names:
      - --toolchain
    argument: <path-to-file>
    description: Specify the cross compiling toolchain file, equivalent to setting CMAKE_TOOLCHAIN_FILE variable.
  - names:
      - --install-prefix
    argument: <directory>
    description: Specify the installation directory, used by the CMAKE_INSTALL_PREFIX variable. Must be an absolute path.
  - names:
      - -Wno-dev
    argument: ""
    description: Suppress developer warnings.
  - names:
      - -Wdev
    argument: ""
    description: Enable developer warnings.
  - names:
      - -Werror
    argument: dev
    description: Make developer warnings errors.
  - names:
      - -Wno-error
    argument: dev
    description: Make developer warnings not errors.
  - names:
      - -Wdeprecated
    argument: ""
    description: Enable deprecated functionality warnings.
  - names:
      - -Wno-deprecated
    argument: ""
    description: Suppress deprecated functionality warnings.
  - names:
      - -Werror
    argument: deprecated
    description: Make deprecated macro and function warnings errors.
  - names:
      - -Wno-error
    argument: deprecated
    description: Make deprecated macro and function warnings not errors.
  - names:
      - -L
    argument: '[A][H]'
    description: List non-advanced cached variables.
  - names:
      - -N
    argument: ""
    description: View mode only.
  - names:
      - --graphviz
    argument: '[file]'
    description: Generate graphviz of dependencies, see CMakeGraphVizOptions for more.
  - names:
      - --system-information
    argument: '[file]'
    description: Dump information about this system.
  - names:
      - --log-level
    argument: <ERROR|WARNING|NOTICE|STATUS|VERBOSE|DEBUG|TRACE>
    description: Set the log level.
  - names:
      - --log-context
    argument: ""
    description: Enable the message() command outputting context attached to each message.
  - names:
      - --debug-trycompile
    argument: ""
    description: Do not delete the try_compile() build tree. Only useful on one try_compile() at a time.
  - names:
      - --debug-output
    argument: ""
    description: Put cmake in a debug mode.
  - names:
      - --debug-find
    argument: ""
    description: Put cmake find commands in a debug mode.
  - names:
      - --trace
    argument: ""
    description: Put cmake in trace mode.
  - names:
      - --trace-expand
    argument: ""
    description: Put cmake in trace mode.
  - names:
      - --trace-format
    argument: <format>
    description: Put cmake in trace mode and sets the trace output format.
  - names:
      - --trace-source
    argument: <file>
    description: Put cmake in trace mode, but output only lines of a specified file.
  - names:
      - --trace-redirect
    argument: <file>
    description: Put cmake in trace mode and redirect trace output to a file instead of stderr.
  - names:
      - --warn-uninitialized
    argument: ""
    description: Warn about uninitialized values.
  - names:
      - --warn-unused-vars
    argument: ""
    description: Does nothing. In CMake versions 3.2 and below this enabled warnings about unused variables. In CMake versions 3.3 through 3.18 the option was broken. In CMake 3.19 and above the option has been removed.
  - names:
      - --no-warn-unused-cli
    argument: ""
    description: Don't warn about command line options.
  - names:
      - --check-system-vars
    argument: ""
    description: Find problems with variable usage in system files.
  - names:
      - --profiling-output
    argument: <path>
    description: Used in conjunction with --profiling-format to output to a given path.
  - names:
      - --profiling-format
    argument: <file>
    description: Enable the output of profiling data of CMake script in the given format.
  - names:
      - --preset
    argument: <preset>
    description: Reads a preset from <path-to-source>/CMakePresets.json and <path-to-source>/CMakeUserPresets.json. The preset may specify the generator and the build directory, and a list of variables and other arguments to pass to CMake. The current working directory must contain CMake preset files. The CMake GUI can also recognize CMakePresets.json and CMakeUserPresets.json files. For full details on these files, see cmake-presets(7).
  - names:
      - --list-presets
    argument: <[configure | build | test | all]>
    description: Lists the available presets. If no option is specified only configure presets will be listed. The current working directory must contain CMake preset files.
  - names:
      - --build
    argument: <dir>
    description: Project binary directory to be built. This is required (unless a preset is specified) and must be first.
  - names:
      - --preset
    argument: <preset>
    description: Use a build preset to specify build options. The project binary directory is inferred from the configurePreset key. The current working directory must contain CMake preset files. See preset for more details.
  - names:
      - --list-presets
    argument: ""
    description: Lists the available build presets. The current working directory must contain CMake preset files.
  - names:
      - --parallel
      - -j
    argument: '[<jobs>]'
    description: The maximum number of concurrent processes to use when building. If <jobs> is omitted the native build tool's default number is used.
  - names:
      - --target
      - -t
    argument: <tgt>...
    description: Build <tgt> instead of the default target. Multiple targets may be given, separated by spaces.
  - names:
      - --config
    argument: <cfg>
    description: For multi-configuration tools, choose configuration <cfg>.
  - names:
      - --clean-first
    argument: ""
    description: Build target clean first, then build. (To clean only, use --target clean.)
  - names:
      - --use-stderr
    argument: ""
    description: Ignored. Behavior is default in CMake >= 3.0.
  - names:
      - --verbose
      - -v
    argument: ""
    description: Enable verbose output - if supported - including the build commands to be executed.
  - names:
      - --
    argument: ""
    description: Pass remaining options to the native tool.
  - names:
      - --install
    argument: <dir>
    description: Project binary directory to install. This is required and must be first.
  - names:
      - --config
    argument: <cfg>
    description: For multi-configuration generators, choose configuration <cfg>.
  - names:
      - --component
    argument: <comp>
    description: Component-based install. Only install component <comp>.
  - names:
      - --default-directory-permissions
    argument: <permissions>
    description: Default directory install permissions. Permissions in format <u=rwx,g=rx,o=rx>.
  - names:
      - --prefix
    argument: <prefix>
    description: Override the installation prefix, CMAKE_INSTALL_PREFIX.
  - names:
      - --strip
    argument: ""
    description: Strip before installing.
  - names:
      - -v
      - --verbose
    argument: ""
    description: Enable verbose output.
  - names:
      - --zstd
    argument: ""
    description: Compress the resulting archive with Zstandard.
  - names:
      - --files-from
    argument: <file>
    description: Read file names from the given file, one per line. Blank lines are ignored. Lines may not start in - except for --add-file=<name> to add files whose names start in -.
  - names:
      - --format
    argument: <format>
    description: 'Specify the format of the archive to be created. Supported formats are: 7zip, gnutar, pax, paxr (restricted pax, default), and zip.'
  - names:
      - --mtime
    argument: <date>
    description: Specify modification time recorded in tarball entries.
  - names:
      - --help-full
    argument: '[<f>]'
    description: Print all help manuals and exit.
  - names:
      - --help-manual
    argument: <man> [<f>]
    description: Print one help manual and exit.
  - names:
      - --help-manual-list
    argument: '[<f>]'
    description: List help manuals available and exit.
  - names:
      - --help-command
    argument: <cmd> [<f>]
    description: Print help for one command and exit.
  - names:
      - --help-command-list
    argument: '[<f>]'
    description: List commands with help available and exit.
  - names:
      - --help-commands
    argument: '[<f>]'
    description: Print cmake-commands manual and exit.
  - names:
      - --help-module
    argument: <mod> [<f>]
    description: Print help for one module and exit.
  - names:
      - --help-module-list
    argument: '[<f>]'
    description: List modules with help available and exit.
  - names:
      - --help-modules
    argument: '[<f>]'
    description: Print cmake-modules manual and exit.
  - names:
      - --help-policy
    argument: <cmp> [<f>]
    description: Print help for one policy and exit.
  - names:
      - --help-policy-list
    argument: '[<f>]'
    description: List policies with help available and exit.
  - names:
      - --help-policies
    argument: '[<f>]'
    description: Print cmake-policies manual and exit.
  - names:
      - --help-property
    argument: <prop> [<f>]
    description: Print help for one property and exit.
  - names:
      - --help-property-list
    argument: '[<f>]'
    description: List properties with help available and exit.
  - names:
      - --help-properties
    argument: '[<f>]'
    description: Print cmake-properties manual and exit.
  - names:
      - --help-variable
    argument: <var> [<f>]
    description: Print help for one variable and exit.
  - names:
      - --help-variable-list
    argument: '[<f>]'
    description: List variables with help available and exit.
  - names:
      - --help-variables
    argument: '[<f>]'
    description: Print cmake-variables manual and exit.
version: cmake version 3.22.1
tldr: |
  > Cross-platform build automation system, that generates recipes for native build systems.
  > More information: <https://cmake.org/cmake/help/latest/manual/cmake.1.html>.

  - Generate a build recipe in the current directory with `CMakeLists.txt` from a project directory:

  `cmake {{path/to/project_directory}}`

  - Generate a build recipe, with build type set to `Release` with CMake variable:

  `cmake {{path/to/project_directory}} -D {{CMAKE_BUILD_TYPE=Release}}`

  - Use a generated recipe in a given directory to build artifacts:

  `cmake --build {{path/to/build_directory}}`

  - Install the build artifacts into `/usr/local/` and strip debugging symbols:

  `cmake --install {{path/to/build_directory}} --strip`

  - Install the build artifacts using the custom prefix for paths:

  `cmake --install {{path/to/build_directory}} --strip --prefix {{path/to/directory}}`

  - Run a custom build target:

  `cmake --build {{path/to/build_directory}} --target {{target_name}}`
