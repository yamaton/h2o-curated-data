name: curl
description: curl
options:
  - names:
      - --abstract-unix-socket
    argument: <path>
    description: '(HTTP) Connect through an abstract Unix domain socket, instead of using the network. Note: netstat shows the path of an abstract socket prefixed with ''@'', however the <path> argument should not have this leading character.'
  - names:
      - --alt-svc
    argument: <file name>
    description: '(HTTPS) WARNING: this option is experimental. Do not use in production.'
  - names:
      - --anyauth
    argument: ""
    description: (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support. This is done by first doing a request and checking the response-headers, thus possibly inducing an extra network round-trip. This is used instead of setting a specific authentication method, which you can do with --basic, --digest, --ntlm, and --negotiate.
  - names:
      - -a
      - --append
    argument: ""
    description: (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the remote file doesn't exist, it will be created. Note that this flag is ignored by some SFTP servers (including OpenSSH).
  - names:
      - --basic
    argument: ""
    description: (HTTP) Tells curl to use HTTP Basic authentication with the remote host. This is the default and this option is usually pointless, unless you use it to override a previously set option that sets a different authentication method (such as --ntlm, --digest, or --negotiate).
  - names:
      - --cacert
    argument: <file>
    description: (TLS) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.
  - names:
      - --capath
    argument: <dir>
    description: (TLS) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be provided by separating them with ":" (e.g. "path1:path2:path3"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash utility supplied with OpenSSL. Using --capath can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using --cacert if the --cacert file contains many CA certificates.
  - names:
      - --cert-status
    argument: ""
    description: (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
  - names:
      - --cert-type
    argument: <type>
    description: (TLS) Tells curl what type the provided client certificate is using. PEM, DER, ENG and P12 are recognized types. If not specified, PEM is assumed.
  - names:
      - -E
      - --cert
    argument: <certificate[:password]>
    description: (TLS) Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password isn't specified, it will be queried for on the terminal. Note that this option assumes a "certificate" file that is the private key and the client certificate concatenated! See -E, --cert and --key to specify them independently.
  - names:
      - --ciphers
    argument: <list of ciphers>
    description: '(TLS) Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers. Read up on SSL cipher list details on this URL:'
  - names:
      - --compressed-ssh
    argument: ""
    description: (SCP SFTP) Enables built-in SSH compression. This is a request, not an order; the server may or may not do it.
  - names:
      - --compressed
    argument: ""
    description: (HTTP) Request a compressed response using one of the algorithms curl supports, and save the uncompressed document. If this option is used and the server sends an unsupported encoding, curl will report an error.
  - names:
      - -K
      - --config
    argument: <file>
    description: Specify a text file to read curl arguments from. The command line arguments found in the text file will be used as if they were provided on the command line.
  - names:
      - --connect-timeout
    argument: <seconds>
    description: Maximum time in seconds that you allow curl's connection to take. This only limits the connection phase, so if curl connects within the given period it will continue - if not it will exit. Since version 7.32.0, this option accepts decimal values.
  - names:
      - --connect-to
    argument: <HOST1:PORT1:HOST2:PORT2>
    description: For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option is suitable to direct requests at a specific server, e.g. at a specific cluster node in a cluster of servers. This option is only used to establish the network connection. It does NOT affect the hostname/port that is used for TLS/SSL (e.g. SNI, certificate verification) or for the application protocols. "HOST1" and "PORT1" may be the empty string, meaning "any host/port". "HOST2" and "PORT2" may also be the empty string, meaning "use the request's original host/port".
  - names:
      - -C
      - --continue-at
    argument: <offset>
    description: Continue/Resume a previous file transfer at the given offset. The given offset is the exact number of bytes that will be skipped, counting from the beginning of the source file before it is transferred to the destination. If used with uploads, the FTP server command SIZE will not be used by curl.
  - names:
      - -c
      - --cookie-jar
    argument: <filename>
    description: (HTTP) Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cookies from its inmemory cookie storage to the given file at the end of operations. If no cookies are known, no data will be written. The file will be written using the Netscape cookie file format. If you set the file name to a single dash, "-", the cookies will be written to stdout.
  - names:
      - -b
      - --cookie
    argument: <data|filename>
    description: (HTTP) Pass the data to the HTTP server in the Cookie header. It is supposedly the data previously received from the server in a "Set-Cookie:" line. The data should be in the format "NAME1=VALUE1; NAME2=VALUE2".
  - names:
      - --create-dirs
    argument: ""
    description: When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed. This option creates the dirs mentioned with the -o, --output option, nothing else. If the --output file name uses no dir or if the dirs it mentions already exist, no dir will be created.
  - names:
      - --crlf
    argument: ""
    description: (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
  - names:
      - --crlfile
    argument: <file>
    description: (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
  - names:
      - --data-ascii
    argument: <data>
    description: (HTTP) This is just an alias for -d, --data.
  - names:
      - --data-binary
    argument: <data>
    description: (HTTP) This posts data exactly as specified with no extra processing whatsoever.
  - names:
      - --data-raw
    argument: <data>
    description: (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
  - names:
      - --data-urlencode
    argument: <data>
    description: (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
  - names:
      - -d
      - --data
    argument: <data>
    description: (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F, --form.
  - names:
      - --delegation
    argument: <LEVEL>
    description: (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
  - names:
      - --digest
    argument: ""
    description: (HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password from being sent over the wire in clear text. Use this in combination with the normal -u, --user option to set user name and password.
  - names:
      - --disable-eprt
    argument: ""
    description: (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers. Curl will normally always first attempt to use EPRT, then LPRT before using PORT, but with this option, it will use PORT right away. EPRT and LPRT are extensions to the original FTP protocol, and may not work on all servers, but they enable more functionality in a better way than the traditional PORT command.
  - names:
      - --disable-epsv
    argument: ""
    description: (FTP) (FTP) Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to use EPSV before PASV, but with this option, it will not try using EPSV.
  - names:
      - -q
      - --disable
    argument: ""
    description: If used as the first parameter on the command line, the curlrc config file will not be read and used. See the -K, --config for details on the default config file search path.
  - names:
      - --disallow-username-in-url
    argument: ""
    description: (HTTP) This tells curl to exit if passed a url containing a username.
  - names:
      - --dns-interface
    argument: <interface>
    description: (DNS) Tell curl to send outgoing DNS requests through <interface>. This option is a counterpart to --interface (which does not affect DNS). The supplied string must be an interface name (not an address).
  - names:
      - --dns-ipv4-addr
    argument: <address>
    description: (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv4 address.
  - names:
      - --dns-ipv6-addr
    argument: <address>
    description: (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv6 address.
  - names:
      - --dns-servers
    argument: <addresses>
    description: Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be separated with commas. Port numbers may also optionally be given as :<port-number> after each IP address.
  - names:
      - --doh-url
    argument: <URL>
    description: (all) Specifies which DNS-over-HTTPS (DOH) server to use to resolve hostnames, instead of using the default name resolver mechanism. The URL must be HTTPS.
  - names:
      - -D
      - --dump-header
    argument: <filename>
    description: (HTTP FTP) Write the received protocol headers to the specified file.
  - names:
      - --egd-file
    argument: <file>
    description: (TLS) Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for SSL connections.
  - names:
      - --engine
    argument: <name>
    description: (TLS) Select the OpenSSL crypto engine to use for cipher operations. Use --engine list to print a list of build-time supported engines. Note that not all (or none) of the engines may be available at run-time.
  - names:
      - --etag-compare
    argument: <file>
    description: (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-NoneMatch header using the extracted ETag.
  - names:
      - --etag-save
    argument: <file>
    description: (HTTP) This option saves an HTTP ETag to the specified file. Etag is usually part of headers returned by a request. When server sends an ETag, it must be enveloped by a double quote. This option extracts the ETag without the double quotes and saves it into the <file>.
  - names:
      - --expect100-timeout
    argument: <seconds>
    description: '(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request. By default curl will wait one second. This option accepts decimal values! When curl stops waiting, it will continue as if the response has been received.'
  - names:
      - --fail-early
    argument: ""
    description: Fail and exit on the first detected transfer error.
  - names:
      - -f
      - --fail
    argument: ""
    description: (HTTP) Fail silently (no output at all) on server errors. This is mostly done to better enable scripts etc to better deal with failed attempts. In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will prevent curl from outputting that and return error 22.
  - names:
      - --false-start
    argument: ""
    description: (TLS) Tells curl to use false start during the TLS handshake. False start is a mode where a TLS client will start sending application data before verifying the server's Finished message, thus saving a round trip when performing a full handshake.
  - names:
      - --form-string
    argument: <name=string>
    description: (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally. Leading '@' and '<' characters, and the ';type=' string in the value have no special meaning. Use this in preference to -F, --form if there's any possibility that the string value may accidentally trigger the '@' or '<' features of -F, --form.
  - names:
      - -F
      - --form
    argument: <name=content>
    description: (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/form-data according to RFC 2388.
  - names:
      - --ftp-account
    argument: <data>
    description: (FTP) When an FTP server asks for "account data" after user name and password has been provided, this data is sent off using the ACCT command.
  - names:
      - --ftp-alternative-to-user
    argument: <command>
    description: (FTP) If authenticating with the USER and PASS commands fails, send this command. When connecting to Tumbleweed's Secure Transport server over FTPS using a client certificate, using "SITE AUTH" will tell the server to retrieve the username from the certificate.
  - names:
      - --ftp-create-dirs
    argument: ""
    description: (FTP SFTP) When an FTP or SFTP URL/operation uses a path that doesn't currently exist on the server, the standard behavior of curl is to fail. Using this option, curl will instead attempt to create missing directories.
  - names:
      - --ftp-method
    argument: <method>
    description: '(FTP) Control what method curl should use to reach a file on an FTP(S) server. The method argument should be one of the following alternatives:'
  - names:
      - --ftp-pasv
    argument: ""
    description: (FTP) Use passive mode for the data connection. Passive is the internal default behavior, but using this option can be used to override a previous -P, --ftp-port option.
  - names:
      - -P
      - --ftp-port
    argument: <address>
    description: '(FTP) Reverses the default initiator/listener roles when connecting with FTP. This option makes curl use active mode. curl then tells the server to connect back to the client''s specified address and port, while passive mode asks the server to setup an IP address and port for it to connect to. <address> should be one of:'
  - names:
      - --ftp-pret
    argument: ""
    description: (FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP servers, mainly drftpd, require this non-standard command for directory listings as well as up and downloads in PASV mode.
  - names:
      - --ftp-skip-pasv-ip
    argument: ""
    description: (FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-use the same IP address it already uses for the control connection.
  - names:
      - --ftp-ssl-ccc-mode
    argument: <active/passive>
    description: (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the server. The active mode initiates the shutdown and waits for a reply from the server.
  - names:
      - --ftp-ssl-ccc
    argument: ""
    description: (FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the control channel communication will be unencrypted. This allows NAT routers to follow the FTP transaction. The default mode is passive.
  - names:
      - --ftp-ssl-control
    argument: ""
    description: (FTP) Require SSL/TLS for the FTP login, clear for transfer. Allows secure authentication, but non-encrypted data transfers for efficiency. Fails the transfer if the server doesn't support SSL/TLS.
  - names:
      - -G
      - --get
    argument: ""
    description: When used, this option will make all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.
  - names:
      - -g
      - --globoff
    argument: ""
    description: This option switches off the "URL globbing parser". When you set this option, you can specify URLs that contain the letters {}[] without having them being interpreted by curl itself. Note that these letters are not normal legal URL contents but they should be encoded according to the URI standard.
  - names:
      - --happy-eyeballs-timeout-ms
    argument: <milliseconds>
    description: Happy eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts, preferring IPv6 first for the number of milliseconds. If the IPv6 address cannot be connected to within that time then a connection attempt is made to the IPv4 address in parallel. The first connection to be established is the one that is used.
  - names:
      - --haproxy-protocol
    argument: ""
    description: (HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection. This is used by some load balancers and reverse proxies to indicate the client's true IP address and port.
  - names:
      - -I
      - --head
    argument: ""
    description: (HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document. When used on an FTP or FILE file, curl displays the file size and last modification time only.
  - names:
      - -H
      - --header
    argument: <header/@file>
    description: '(HTTP) Extra header to include in the request when sending HTTP to a server. You may specify any number of extra headers. Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your externally set header will be used instead of the internal one. This allows you to make even trickier stuff than curl would normally do. You should not replace internally set headers without knowing perfectly well what you''re doing. Remove an internal header by giving a replacement without content on the right side of the colon, as in: -H "Host:". If you send the custom header with no-value then its header must be terminated with a semicolon, such as -H "X-Custom-Header;" to send "X-Custom-Header:".'
  - names:
      - -h
      - --help
    argument: ""
    description: Usage help. This lists all current command line options with a short description.
  - names:
      - --hostpubmd5
    argument: <md5>
    description: (SFTP SCP) Pass a string containing 32 hexadecimal digits. The string should be the 128 bit MD5 checksum of the remote host's public key, curl will refuse the connection with the host unless the md5sums match.
  - names:
      - --http0.9
    argument: ""
    description: (HTTP) Tells curl to be fine with HTTP version 0.9 response.
  - names:
      - "-0"
      - --http1.0
    argument: ""
    description: (HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred HTTP version.
  - names:
      - --http1.1
    argument: ""
    description: (HTTP) Tells curl to use HTTP version 1.1.
  - names:
      - --http2-prior-knowledge
    argument: ""
    description: (HTTP) Tells curl to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior knowledge that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2 the standard way with negotiated protocol version in the TLS handshake.
  - names:
      - --http2
    argument: ""
    description: (HTTP) Tells curl to use HTTP version 2.
  - names:
      - --http3
    argument: ""
    description: '(HTTP) WARNING: this option is experimental. Do not use in production.'
  - names:
      - --ignore-content-length
    argument: ""
    description: (FTP HTTP) For HTTP, Ignore the Content-Length header. This is particularly useful for servers running Apache 1.x, which will report incorrect Content-Length for files larger than 2 gigabytes.
  - names:
      - -i
      - --include
    argument: ""
    description: Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more...
  - names:
      - -k
      - --insecure
    argument: ""
    description: (TLS) By default, every SSL connection curl makes is verified to be secure. This option allows curl to proceed and operate even for server connections otherwise considered insecure.
  - names:
      - --interface
    argument: <name>
    description: 'Perform an operation using a specified interface. You can enter interface name, IP address or host name. An example could look like:'
  - names:
      - "-4"
      - --ipv4
    argument: ""
    description: This option tells curl to resolve names to IPv4 addresses only, and not for example try IPv6.
  - names:
      - "-6"
      - --ipv6
    argument: ""
    description: This option tells curl to resolve names to IPv6 addresses only, and not for example try IPv4.
  - names:
      - -j
      - --junk-session-cookies
    argument: ""
    description: (HTTP) When curl is told to read cookies from a given file, this option will make it discard all "session cookies". This will basically have the same effect as if a new session is started. Typical browsers always discard session cookies when they're closed down.
  - names:
      - --keepalive-time
    argument: <seconds>
    description: This option sets the time a connection needs to remain idle before sending keepalive probes and the time between individual keepalive probes. It is currently effective on operating systems offering the TCP_KEEPIDLE and TCP_KEEPINTVL socket options (meaning Linux, recent AIX, HP-UX and more). This option has no effect if --no-keepalive is used.
  - names:
      - --key-type
    argument: <type>
    description: (TLS) Private key file type. Specify which type your --key provided private key is. DER, PEM, and ENG are supported. If not specified, PEM is assumed.
  - names:
      - --key
    argument: <key>
    description: '(TLS SSH) Private key file name. Allows you to provide your private key in this separate file. For SSH, if not specified, curl tries the following candidates in order: ''~/.ssh/id_rsa'', ''~/.ssh/id_dsa'', ''./id_rsa'', ''./id_dsa''.'
  - names:
      - --krb
    argument: <level>
    description: (FTP) Enable Kerberos authentication and use. The level must be entered and should be one of 'clear', 'safe', 'confidential', or 'private'. Should you use a level that is not one of these, 'private' will instead be used.
  - names:
      - --libcurl
    argument: <file>
    description: Append this option to any ordinary curl command line, and you will get a libcurl-using C source code written to the file that does the equivalent of what your command-line operation does!
  - names:
      - --limit-rate
    argument: <speed>
    description: Specify the maximum transfer rate you want curl to use - for both downloads and uploads. This feature is useful if you have a limited pipe and you'd like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.
  - names:
      - -l
      - --list-only
    argument: ""
    description: (FTP POP3) (FTP) When listing an FTP directory, this switch forces a name-only view. This is especially useful if the user wants to machine-parse the contents of an FTP directory since the normal directory view doesn't use a standard look or format. When used like this, the option causes a NLST command to be sent to the server instead of LIST.
  - names:
      - --local-port
    argument: <num/range>
    description: Set a preferred single number or range (FROM-TO) of local port numbers to use for the connection(s). Note that port numbers by nature are a scarce resource that will be busy at times so setting this range to something too narrow might cause unnecessary connection setup failures.
  - names:
      - --location-trusted
    argument: ""
    description: (HTTP) Like -L, --location, but will allow sending the name + password to all hosts that the site may redirect to. This may or may not introduce a security breach if the site redirects you to a site to which you'll send your authentication info (which is plaintext in the case of HTTP Basic authentication).
  - names:
      - -L
      - --location
    argument: ""
    description: '(HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response code), this option will make curl redo the request on the new place. If used together with -i, --include or -I, --head, headers from all requested pages will be shown. When authentication is used, curl only sends its credentials to the initial host. If a redirect takes curl to a different host, it won''t be able to intercept the user+password. See also --location-trusted on how to change this. You can limit the amount of redirects to follow by using the --max-redirs option.'
  - names:
      - --login-options
    argument: <options>
    description: (IMAP POP3 SMTP) Specify the login options to use during server authentication.
  - names:
      - --mail-auth
    argument: <address>
    description: (SMTP) Specify a single address. This will be used to specify the authentication address (identity) of a submitted message that is being relayed to another server.
  - names:
      - --mail-from
    argument: <address>
    description: (SMTP) Specify a single address that the given mail should get sent from.
  - names:
      - --mail-rcpt
    argument: <address>
    description: (SMTP) Specify a single address, user name or mailing list name. Repeat this option several times to send to multiple recipients.
  - names:
      - -M
      - --manual
    argument: ""
    description: Manual. Display the huge help text.
  - names:
      - --max-filesize
    argument: <bytes>
    description: Specify the maximum size (in bytes) of a file to download. If the file requested is larger than this value, the transfer will not start and curl will return with exit code 63.
  - names:
      - --max-redirs
    argument: <num>
    description: (HTTP) Set maximum number of redirection-followings allowed. When -L, --location is used, is used to prevent curl from following redirections too much. By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.
  - names:
      - -m
      - --max-time
    argument: <seconds>
    description: Maximum time in seconds that you allow the whole operation to take. This is useful for preventing your batch jobs from hanging for hours due to slow networks or links going down. Since 7.32.0, this option accepts decimal values, but the actual timeout will decrease in accuracy as the specified timeout increases in decimal precision.
  - names:
      - --metalink
    argument: ""
    description: This option can tell curl to parse and process a given URI as Metalink file (both version 3 and 4 (RFC 5854) are supported) and make use of the mirrors listed within for failover if there are errors (such as the file or server not being available). It will also verify the hash of the file after the download completes. The Metalink file itself is downloaded and processed in memory and not stored in the local file system.
  - names:
      - --negotiate
    argument: ""
    description: (HTTP) Enables Negotiate (SPNEGO) authentication.
  - names:
      - --netrc-file
    argument: <filename>
    description: This option is similar to -n, --netrc, except that you provide the path (absolute or relative) to the netrc file that curl should use. You can only specify one netrc file per invocation. If several --netrc-file options are provided, the last one will be used.
  - names:
      - --netrc-optional
    argument: ""
    description: Very similar to -n, --netrc, but this option makes the .netrc usage optional and not mandatory as the -n, --netrc option does.
  - names:
      - -n
      - --netrc
    argument: ""
    description: Makes curl scan the .netrc (_netrc on Windows) file in the user's home directory for login name and password. This is typically used for FTP on Unix. If used with HTTP, curl will enable user authentication. See netrc(5) ftp(1) for details on the file format. Curl will not complain if that file doesn't have the right permissions (it should not be either world- or group-readable). The environment variable "HOME" is used to find the home directory.
  - names:
      - '-:'
      - --next
    argument: ""
    description: Tells curl to use a separate operation for the following URL and associated options. This allows you to send several URL requests, each with their own specific options, for example, such as different user names or custom requests for each.
  - names:
      - --no-alpn
    argument: ""
    description: (HTTPS) Disable the ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library that supports ALPN. ALPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.
  - names:
      - -N
      - --no-buffer
    argument: ""
    description: Disables the buffering of the output stream. In normal work situations, curl will use a standard buffered output stream that will have the effect that it will output the data in chunks, not necessarily exactly when the data arrives. Using this option will disable that buffering.
  - names:
      - --no-keepalive
    argument: ""
    description: Disables the use of keepalive messages on the TCP connection. curl otherwise enables them by default.
  - names:
      - --no-npn
    argument: ""
    description: (HTTPS) Disable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that supports NPN. NPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.
  - names:
      - --no-progress-meter
    argument: ""
    description: Option to switch off the progress meter output without muting or otherwise affecting warning and informational messages like -s, --silent does.
  - names:
      - --no-sessionid
    argument: ""
    description: (TLS) Disable curl's use of SSL session-ID caching. By default all transfers are done using the cache. Note that while nothing should ever get hurt by attempting to reuse SSL session-IDs, there seem to be broken SSL implementations in the wild that may require you to disable this in order for you to succeed.
  - names:
      - --noproxy
    argument: <no-proxy-list>
    description: Comma-separated list of hosts which do not use a proxy, if one is specified. The only wildcard is a single * character, which matches all hosts, and effectively disables the proxy. Each name in this list is matched as either a domain which contains the hostname, or the hostname itself. For example, local.com would match local.com, local.com:80, and www.local.com, but not www.notlocal.com.
  - names:
      - --ntlm-wb
    argument: ""
    description: (HTTP) Enables NTLM much in the style --ntlm does, but hand over the authentication to the separate binary ntlmauth application that is executed when needed.
  - names:
      - --ntlm
    argument: ""
    description: (HTTP) Enables NTLM authentication. The NTLM authentication method was designed by Microsoft and is used by IIS web servers. It is a proprietary protocol, reverse-engineered by clever people and implemented in curl based on their efforts. This kind of behavior should not be endorsed, you should encourage everyone who uses NTLM to switch to a public and documented authentication method instead, such as Digest.
  - names:
      - --oauth2-bearer
    argument: <token>
    description: (IMAP POP3 SMTP) Specify the Bearer Token for OAUTH 2.0 server authentication. The Bearer Token is used in conjunction with the user name which can be specified as part of the --url or -u, --user options.
  - names:
      - -o
      - --output
    argument: <file>
    description: 'Write output to <file> instead of stdout. If you are using {} or [] to fetch multiple documents, you can use ''#'' followed by a number in the <file> specifier. That variable will be replaced with the current string for the URL being fetched. Like in:'
  - names:
      - --parallel-immediate
    argument: ""
    description: When doing parallel transfers, this option will instruct curl that it should rather prefer opening up more connections in parallel at once rather than waiting to see if new transfers can be added as multiplexed streams on another connection.
  - names:
      - --parallel-max
    argument: ""
    description: When asked to do parallel transfers, using -Z, --parallel, this option controls the maximum amount of transfers to do simultaneously.
  - names:
      - -Z
      - --parallel
    argument: ""
    description: Makes curl perform its transfers in parallel as compared to the regular serial manner.
  - names:
      - --pass
    argument: <phrase>
    description: (SSH TLS) Passphrase for the private key
  - names:
      - --path-as-is
    argument: ""
    description: Tell curl to not handle sequences of /../ or /./ in the given URL path. Normally curl will squash or merge them according to standards but with this option set you tell it not to do that.
  - names:
      - --pinnedpubkey
    argument: <hashes>
    description: (TLS) Tells curl to use the specified public key file (or hashes) to verify the peer. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by ´sha256//´ and separated by ´;´
  - names:
      - --post301
    argument: ""
    description: (HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST requests into GET requests when following a 301 redirection. The non-RFC behaviour is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location.
  - names:
      - --post302
    argument: ""
    description: (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST requests into GET requests when following a 302 redirection. The non-RFC behaviour is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location.
  - names:
      - --post303
    argument: ""
    description: (HTTP) Tells curl to violate RFC 7231/6.4.4 and not convert POST requests into GET requests when following 303 redirections. A server may require a POST to remain a POST after a 303 redirection. This option is meaningful only when using -L, --location.
  - names:
      - --preproxy
    argument: '[protocol://]host[:port]'
    description: Use the specified SOCKS proxy before connecting to an HTTP or HTTPS -x, --proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy. Hence pre proxy.
  - names:
      - -#
      - --progress-bar
    argument: ""
    description: Make curl display transfer progress as a simple progress bar instead of the standard, more informational, meter.
  - names:
      - --proto-default
    argument: <protocol>
    description: Tells curl to use protocol for any URL missing a scheme name.
  - names:
      - --proto-redir
    argument: <protocols>
    description: Tells curl to limit what protocols it may use on redirect. Protocols denied by --proto are not overridden by this option. See --proto for how protocols are represented.
  - names:
      - --proto
    argument: <protocols>
    description: 'Tells curl to limit what protocols it may use in the transfer. Protocols are evaluated left to right, are comma separated, and are each a protocol name or ''all'', optionally prefixed by zero or more modifiers. Available modifiers are:'
  - names:
      - --proxy-anyauth
    argument: ""
    description: Tells curl to pick a suitable authentication method when communicating with the given HTTP proxy. This might cause an extra request/response round-trip.
  - names:
      - --proxy-basic
    argument: ""
    description: Tells curl to use HTTP Basic authentication when communicating with the given proxy. Use --basic for enabling HTTP Basic with a remote host. Basic is the default authentication method curl uses with proxies.
  - names:
      - --proxy-cacert
    argument: <file>
    description: Same as --cacert but used in HTTPS proxy context.
  - names:
      - --proxy-capath
    argument: <dir>
    description: Same as --capath but used in HTTPS proxy context.
  - names:
      - --proxy-cert-type
    argument: <type>
    description: Same as --cert-type but used in HTTPS proxy context.
  - names:
      - --proxy-cert
    argument: <cert[:passwd]>
    description: Same as -E, --cert but used in HTTPS proxy context.
  - names:
      - --proxy-ciphers
    argument: <list>
    description: Same as --ciphers but used in HTTPS proxy context.
  - names:
      - --proxy-crlfile
    argument: <file>
    description: Same as --crlfile but used in HTTPS proxy context.
  - names:
      - --proxy-digest
    argument: ""
    description: Tells curl to use HTTP Digest authentication when communicating with the given proxy. Use --digest for enabling HTTP Digest with a remote host.
  - names:
      - --proxy-header
    argument: <header/@file>
    description: (HTTP) Extra header to include in the request when sending HTTP to a proxy. You may specify any number of extra headers. This is the equivalent option to -H, --header but is for proxy communication only like in CONNECT requests when you want a separate header sent to the proxy to what is sent to the actual remote host.
  - names:
      - --proxy-insecure
    argument: ""
    description: Same as -k, --insecure but used in HTTPS proxy context.
  - names:
      - --proxy-key-type
    argument: <type>
    description: Same as --key-type but used in HTTPS proxy context.
  - names:
      - --proxy-key
    argument: <key>
    description: Same as --key but used in HTTPS proxy context.
  - names:
      - --proxy-negotiate
    argument: ""
    description: Tells curl to use HTTP Negotiate (SPNEGO) authentication when communicating with the given proxy. Use --negotiate for enabling HTTP Negotiate (SPNEGO) with a remote host.
  - names:
      - --proxy-ntlm
    argument: ""
    description: Tells curl to use HTTP NTLM authentication when communicating with the given proxy. Use --ntlm for enabling NTLM with a remote host.
  - names:
      - --proxy-pass
    argument: <phrase>
    description: Same as --pass but used in HTTPS proxy context.
  - names:
      - --proxy-pinnedpubkey
    argument: <hashes>
    description: (TLS) Tells curl to use the specified public key file (or hashes) to verify the proxy. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by ´sha256//´ and separated by ´;´
  - names:
      - --proxy-service-name
    argument: <name>
    description: This option allows you to change the service name for proxy negotiation.
  - names:
      - --proxy-ssl-allow-beast
    argument: ""
    description: Same as --ssl-allow-beast but used in HTTPS proxy context.
  - names:
      - --proxy-tls13-ciphers
    argument: <ciphersuite list>
    description: '(TLS) Specifies which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:'
  - names:
      - --proxy-tlsauthtype
    argument: <type>
    description: Same as --tlsauthtype but used in HTTPS proxy context.
  - names:
      - --proxy-tlspassword
    argument: <string>
    description: Same as --tlspassword but used in HTTPS proxy context.
  - names:
      - --proxy-tlsuser
    argument: <name>
    description: Same as --tlsuser but used in HTTPS proxy context.
  - names:
      - --proxy-tlsv1
    argument: ""
    description: Same as -1, --tlsv1 but used in HTTPS proxy context.
  - names:
      - -U
      - --proxy-user
    argument: <user:password>
    description: Specify the user name and password to use for proxy authentication.
  - names:
      - -x
      - --proxy
    argument: '[protocol://]host[:port]'
    description: Use the specified proxy.
  - names:
      - --proxy1.0
    argument: <host[:port]>
    description: Use the specified HTTP 1.0 proxy. If the port number is not specified, it is assumed at port 1080.
  - names:
      - -p
      - --proxytunnel
    argument: ""
    description: When an HTTP proxy is used -x, --proxy, this option will make curl tunnel through the proxy. The tunnel approach is made with the HTTP proxy CONNECT request and requires that the proxy allows direct connect to the remote port number curl wants to tunnel through to.
  - names:
      - --pubkey
    argument: <key>
    description: (SFTP SCP) Public key file name. Allows you to provide your public key in this separate file.
  - names:
      - -Q
      - --quote
    argument: ""
    description: (FTP SFTP) Send an arbitrary command to the remote FTP or SFTP server. Quote commands are sent BEFORE the transfer takes place (just after the initial PWD command in an FTP transfer, to be exact). To make commands take place after a successful transfer, prefix them with a dash '-'. To make commands be sent after curl has changed the working directory, just before the transfer command(s), prefix the command with a '+' (this is only supported for FTP). You may specify any number of commands.
  - names:
      - --random-file
    argument: <file>
    description: Specify the path name to file containing what will be considered as random data. The data may be used to seed the random engine for SSL connections. See also the --egd-file option.
  - names:
      - -r
      - --range
    argument: <range>
    description: (HTTP FTP SFTP FILE) Retrieve a byte range (i.e. a partial document) from an HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified in a number of ways.
  - names:
      - --raw
    argument: ""
    description: (HTTP) When used, it disables all internal HTTP decoding of content or transfer encodings and instead makes them passed on unaltered, raw.
  - names:
      - -e
      - --referer
    argument: <URL>
    description: '(HTTP) Sends the "Referrer Page" information to the HTTP server. This can also be set with the -H, --header flag of course. When used with -L, --location you can append ";auto" to the -e, --referer URL to make curl automatically set the previous URL when it follows a Location: header. The ";auto" string can be used alone, even if you don''t set an initial -e, --referer.'
  - names:
      - -J
      - --remote-header-name
    argument: ""
    description: (HTTP) This option tells the -O, --remote-name option to use the server-specified Content-Disposition filename instead of extracting a filename from the URL.
  - names:
      - --remote-name-all
    argument: ""
    description: This option changes the default action for all given URLs to be dealt with as if -O, --remote-name were used for each one. So if you want to disable that for a specific URL after --remote-name-all has been used, you must use "-o -" or --no-remote-name.
  - names:
      - -O
      - --remote-name
    argument: ""
    description: Write output to a local file named like the remote file we get. (Only the file part of the remote file is used, the path is cut off.)
  - names:
      - -R
      - --remote-time
    argument: ""
    description: When used, this will make curl attempt to figure out the timestamp of the remote file, and if that is available make the local file get that same timestamp.
  - names:
      - --request-target
    argument: ""
    description: (HTTP) Tells curl to use an alternative "target" (path) instead of using the path as provided in the URL. Particularly useful when wanting to issue HTTP requests without leading slash or other data that doesn't follow the regular URL pattern, like "OPTIONS *".
  - names:
      - -X
      - --request
    argument: <command>
    description: (HTTP) Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the method otherwise used (which defaults to GET). Read the HTTP 1.1 specification for details and explanations. Common additional HTTP requests include PUT and DELETE, but related technologies like WebDAV offers PROPFIND, COPY, MOVE and more.
  - names:
      - --resolve
    argument: <host:port:address[,address]...>
    description: Provide a custom address for a specific host and port pair. Using this, you can make the curl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line. The port number should be the number used for the specific protocol the host will be used for. It means you need several entries if you want to provide address for the same host but different ports.
  - names:
      - --retry-connrefused
    argument: ""
    description: In addition to the other conditions, consider ECONNREFUSED as a transient error too for --retry. This option is used together with --retry.
  - names:
      - --retry-delay
    argument: <seconds>
    description: Make curl sleep this amount of time before each retry when a transfer has failed with a transient error (it changes the default backoff time algorithm between retries). This option is only interesting if --retry is also used. Setting this delay to zero will make curl use the default backoff time.
  - names:
      - --retry-max-time
    argument: <seconds>
    description: The retry timer is reset before the first transfer attempt. Retries will be done as usual (see --retry) as long as the timer hasn't reached this given limit. Notice that if the timer hasn't reached the limit, the request will be made and while performing, it may take longer than this given time period. To limit a single request´s maximum time, use -m, --max-time. Set this option to zero to not timeout retries.
  - names:
      - --retry
    argument: <num>
    description: 'If a transient error is returned when curl tries to perform a transfer, it will retry this number of times before giving up. Setting the number to 0 makes curl do no retries (which is the default). Transient error means either: a timeout, an FTP 4xx response code or an HTTP 408 or 5xx response code.'
  - names:
      - --sasl-authzid
    argument: ""
    description: Use this authorisation identity (authzid), during SASL PLAIN authentication, in addition to the authentication identity (authcid) as specified by -u, --user.
  - names:
      - --sasl-ir
    argument: ""
    description: Enable initial response in SASL authentication.
  - names:
      - --service-name
    argument: <name>
    description: This option allows you to change the service name for SPNEGO.
  - names:
      - -S
      - --show-error
    argument: ""
    description: When used with -s, --silent, it makes curl show an error message if it fails.
  - names:
      - -s
      - --silent
    argument: ""
    description: Silent or quiet mode. Don't show progress meter or error messages. Makes Curl mute. It will still output the data you ask for, potentially even to the terminal/stdout unless you redirect it.
  - names:
      - --socks4
    argument: <host[:port]>
    description: Use the specified SOCKS4 proxy. If the port number is not specified, it is assumed at port 1080.
  - names:
      - --socks4a
    argument: <host[:port]>
    description: Use the specified SOCKS4a proxy. If the port number is not specified, it is assumed at port 1080.
  - names:
      - --socks5-basic
    argument: ""
    description: Tells curl to use username/password authentication when connecting to a SOCKS5 proxy. The username/password authentication is enabled by default. Use --socks5-gssapi to force GSS-API authentication to SOCKS5 proxies.
  - names:
      - --socks5-gssapi-nec
    argument: ""
    description: As part of the GSS-API negotiation a protection mode is negotiated. RFC 1961 says in section 4.3/4.4 it should be protected, but the NEC reference implementation does not. The option --socks5-gssapi-nec allows the unprotected exchange of the protection mode negotiation.
  - names:
      - --socks5-gssapi-service
    argument: <name>
    description: The default service name for a socks server is rcmd/server-fqdn. This option allows you to change it.
  - names:
      - --socks5-gssapi
    argument: ""
    description: Tells curl to use GSS-API authentication when connecting to a SOCKS5 proxy. The GSS-API authentication is enabled by default (if curl is compiled with GSS-API support). Use --socks5-basic to force username/password authentication to SOCKS5 proxies.
  - names:
      - --socks5-hostname
    argument: <host[:port]>
    description: Use the specified SOCKS5 proxy (and let the proxy resolve the host name). If the port number is not specified, it is assumed at port 1080.
  - names:
      - --socks5
    argument: <host[:port]>
    description: Use the specified SOCKS5 proxy - but resolve the host name locally. If the port number is not specified, it is assumed at port 1080.
  - names:
      - -Y
      - --speed-limit
    argument: <speed>
    description: If a download is slower than this given speed (in bytes per second) for speed-time seconds it gets aborted. speed-time is set with -y, --speed-time and is 30 if not set.
  - names:
      - -y
      - --speed-time
    argument: <seconds>
    description: If a download is slower than speed-limit bytes per second during a speed-time period, the download gets aborted. If speed-time is used, the default speed-limit will be 1 unless set with -Y, --speed-limit.
  - names:
      - --ssl-allow-beast
    argument: ""
    description: 'This option tells curl to not work around a security flaw in the SSL3 and TLS1.0 protocols known as BEAST. If this option isn''t used, the SSL layer may use workarounds known to cause interoperability problems with some older SSL implementations. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.'
  - names:
      - --ssl-no-revoke
    argument: ""
    description: '(Schannel) This option tells curl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.'
  - names:
      - --ssl-reqd
    argument: ""
    description: (FTP IMAP POP3 SMTP) Require SSL/TLS for the connection. Terminates the connection if the server doesn't support SSL/TLS.
  - names:
      - --ssl
    argument: ""
    description: (FTP IMAP POP3 SMTP) Try to use SSL/TLS for the connection. Reverts to a non-secure connection if the server doesn't support SSL/TLS. See also --ftp-ssl-control and --ssl-reqd for different levels of encryption required.
  - names:
      - "-2"
      - --sslv2
    argument: ""
    description: (SSL) Forces curl to use SSL version 2 when negotiating with a remote SSL server. Sometimes curl is built without SSLv2 support. SSLv2 is widely considered insecure (see RFC 6176).
  - names:
      - "-3"
      - --sslv3
    argument: ""
    description: (SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server. Sometimes curl is built without SSLv3 support. SSLv3 is widely considered insecure (see RFC 7568).
  - names:
      - --stderr
    argument: ""
    description: Redirect all writes to stderr to the specified file instead. If the file name is a plain '-', it is instead written to stdout.
  - names:
      - --styled-output
    argument: ""
    description: Enables the automatic use of bold font styles when writing HTTP headers to the terminal. Use --no-styled-output to switch them off.
  - names:
      - --suppress-connect-headers
    argument: ""
    description: When -p, --proxytunnel is used and a CONNECT request is made don't output proxy CONNECT response headers. This option is meant to be used with -D, --dump-header or -i, --include which are used to show protocol headers in the output. It has no effect on debug options such as -v, --verbose or --trace, or any statistics.
  - names:
      - --tcp-fastopen
    argument: ""
    description: Enable use of TCP Fast Open (RFC7413).
  - names:
      - --tcp-nodelay
    argument: ""
    description: Turn on the TCP_NODELAY option. See the curl_easy_setopt(3) man page for details about this option.
  - names:
      - -t
      - --telnet-option
    argument: <opt=val>
    description: 'Pass options to the telnet protocol. Supported options are:'
  - names:
      - --tftp-blksize
    argument: <value>
    description: (TFTP) Set TFTP BLKSIZE option (must be >512). This is the block size that curl will try to use when transferring data to or from a TFTP server. By default 512 bytes will be used.
  - names:
      - --tftp-no-options
    argument: ""
    description: (TFTP) Tells curl not to send TFTP options requests.
  - names:
      - -z
      - --time-cond
    argument: <time>
    description: (HTTP FTP) Request a file that has been modified later than the given time and date, or one that has been modified before that time. The <date expression> can be all sorts of date strings or if it doesn't match any internal ones, it is taken as a filename and tries to get the modification date (mtime) from <file> instead. See the curl_getdate(3) man pages for date expression details.
  - names:
      - --tls-max
    argument: <VERSION>
    description: (SSL) VERSION defines maximum supported TLS version. The minimum acceptable version is set by tlsv1.0, tlsv1.1, tlsv1.2 or tlsv1.3.
  - names:
      - --tls13-ciphers
    argument: <list of TLS 1.3 ciphersuites>
    description: '(TLS) Specifies which cipher suites to use in the connection if it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:'
  - names:
      - --tlsauthtype
    argument: <type>
    description: Set TLS authentication type. Currently, the only supported option is "SRP", for TLS-SRP (RFC 5054). If --tlsuser and --tlspassword are specified but --tlsauthtype is not, then this option defaults to "SRP". This option works only if the underlying libcurl is built with TLS-SRP support, which requires OpenSSL or GnuTLS with TLS-SRP support.
  - names:
      - --tlspassword
    argument: ""
    description: Set password for use with the TLS authentication method specified with --tlsauthtype. Requires that --tlsuser also be set.
  - names:
      - --tlsuser
    argument: <name>
    description: Set username for use with the TLS authentication method specified with --tlsauthtype. Requires that --tlspassword also is set.
  - names:
      - --tlsv1.0
    argument: ""
    description: (TLS) Forces curl to use TLS version 1.0 or later when connecting to a remote TLS server.
  - names:
      - --tlsv1.1
    argument: ""
    description: (TLS) Forces curl to use TLS version 1.1 or later when connecting to a remote TLS server.
  - names:
      - --tlsv1.2
    argument: ""
    description: (TLS) Forces curl to use TLS version 1.2 or later when connecting to a remote TLS server.
  - names:
      - --tlsv1.3
    argument: ""
    description: (TLS) Forces curl to use TLS version 1.3 or later when connecting to a remote TLS server.
  - names:
      - "-1"
      - --tlsv1
    argument: ""
    description: (SSL) Tells curl to use at least TLS version 1.x when negotiating with a remote TLS server. That means TLS version 1.0 or higher
  - names:
      - --tr-encoding
    argument: ""
    description: (HTTP) Request a compressed Transfer-Encoding response using one of the algorithms curl supports, and uncompress the data while receiving it.
  - names:
      - --trace-ascii
    argument: <file>
    description: Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as filename to have the output sent to stdout.
  - names:
      - --trace-time
    argument: ""
    description: Prepends a time stamp to each trace or verbose line that curl displays.
  - names:
      - --trace
    argument: <file>
    description: Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as filename to have the output sent to stdout. Use "%" as filename to have the output sent to stderr.
  - names:
      - --unix-socket
    argument: <path>
    description: (HTTP) Connect through this Unix domain socket, instead of using the network.
  - names:
      - -T
      - --upload-file
    argument: <file>
    description: This transfers the specified local file to the remote URL. If there is no file part in the specified URL, curl will append the local file name. NOTE that you must use a trailing / on the last directory to really prove to Curl that there is no file name or curl will think that your last directory name is the remote file name to use. That will most likely cause the upload operation to fail. If this is used on an HTTP(S) server, the PUT command will be used.
  - names:
      - --url
    argument: <url>
    description: Specify a URL to fetch. This option is mostly handy when you want to specify URL(s) in a config file.
  - names:
      - -B
      - --use-ascii
    argument: ""
    description: (FTP LDAP) Enable ASCII transfer. For FTP, this can also be enforced by using a URL that ends with ";type=A". This option causes data sent to stdout to be in text mode for win32 systems.
  - names:
      - -A
      - --user-agent
    argument: <name>
    description: (HTTP) Specify the User-Agent string to send to the HTTP server. To encode blanks in the string, surround the string with single quote marks. This header can also be set with the -H, --header or the --proxy-header options.
  - names:
      - -u
      - --user
    argument: <user:password>
    description: Specify the user name and password to use for server authentication. Overrides -n, --netrc and --netrc-optional.
  - names:
      - -v
      - --verbose
    argument: ""
    description: Makes curl verbose during the operation. Useful for debugging and seeing what's going on "under the hood". A line starting with '>' means "header data" sent by curl, '<' means "header data" received by curl that is hidden in normal cases, and a line starting with '*' means additional info provided by curl.
  - names:
      - -V
      - --version
    argument: ""
    description: Displays information about curl and the libcurl version it uses.
  - names:
      - -w
      - --write-out
    argument: <format>
    description: Make curl display information on stdout after a completed transfer. The format is a string that may contain plain text mixed with any number of variables. The format can be specified as a literal "string", or you can have curl read the format from a file with "@filename" and to tell curl to read the format from stdin you write "@-".
  - names:
      - --xattr
    argument: ""
    description: When saving output to a file, this option tells curl to store certain file metadata in extended file attributes. Currently, the URL is stored in the xdg.origin.url attribute and, for HTTP, the content type is stored in the mime_type attribute. If the file system does not support extended attributes, a warning is issued.
version: curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3
tldr: |
  > Transfers data from or to a server.
  > Supports most protocols, including HTTP, FTP, and POP3.
  > More information: <https://curl.se>.

  - Download the contents of a URL to a file:

  `curl {{http://example.com}} --output {{filename}}`

  - Download a file, saving the output under the filename indicated by the URL:

  `curl --remote-name {{http://example.com/filename}}`

  - Download a file, following location redirects, and automatically continuing (resuming) a previous file transfer and return an error on server error:

  `curl --fail --remote-name --location --continue-at - {{http://example.com/filename}}`

  - Send form-encoded data (POST request of type `application/x-www-form-urlencoded`). Use `--data @file_name` or `--data @'-'` to read from STDIN:

  `curl --data {{'name=bob'}} {{http://example.com/form}}`

  - Send a request with an extra header, using a custom HTTP method:

  `curl --header {{'X-My-Header: 123'}} --request {{PUT}} {{http://example.com}}`

  - Send data in JSON format, specifying the appropriate content-type header:

  `curl --data {{'{"name":"bob"}'}} --header {{'Content-Type: application/json'}} {{http://example.com/users/1234}}`

  - Pass a username and password for server authentication:

  `curl --user myusername:mypassword {{http://example.com}}`

  - Pass client certificate and key for a resource, skipping certificate validation:

  `curl --cert {{client.pem}} --key {{key.pem}} --insecure {{https://example.com}}`
