name: pdm
description: A modern Python package and dependency manager supporting the latest PEP standards
usage: pdm [-h] [-V] [-c CONFIG] [-v] [-I] [--pep582 [SHELL]] ...
options:
  - names:
      - -h
      - --help
    argument: ""
    description: Show this help message and exit.
  - names:
      - -V
      - --version
    argument: ""
    description: Show the version and exit
  - names:
      - -c
      - --config
    argument: CONFIG
    description: 'Specify another config file path [env var: PDM_CONFIG_FILE]'
  - names:
      - -v
      - --verbose
    argument: ""
    description: Use `-v` for detailed output and `-vv` for more detailed
  - names:
      - -I
      - --ignore-python
    argument: ""
    description: 'Ignore the Python path saved in .pdm-python. [env var: PDM_IGNORE_SAVED_PYTHON]'
  - names:
      - --pep582
    argument: '[SHELL]'
    description: Print the command line to be eval'd by the shell
subcommands:
  - name: add
    description: Add package(s) to pyproject.toml and install them
    usage: pdm add [-h] [-v] [-g] [-p PROJECT_PATH] [-L LOCKFILE] [--save-compatible | --save-wildcard | --save-exact | --save-minimum] [--update-reuse | --update-eager | --update-all] [--pre] [-u] [-e EDITABLES] [--no-editable] [--no-self] [--fail-fast] [--no-isolation] [--dry-run] [--venv [NAME]] [-k SKIP] [-d] [-G GROUP] [--no-sync] [packages ...]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - --save-compatible
        argument: ""
        description: Save compatible version specifiers
      - names:
          - --save-wildcard
        argument: ""
        description: Save wildcard version specifiers
      - names:
          - --save-exact
        argument: ""
        description: Save exact version specifiers
      - names:
          - --save-minimum
        argument: ""
        description: Save minimum version specifiers
      - names:
          - --update-reuse
        argument: ""
        description: Reuse pinned versions already present in lock file if possible
      - names:
          - --update-eager
        argument: ""
        description: Try to update the packages and their dependencies recursively
      - names:
          - --update-all
        argument: ""
        description: Update all dependencies and sub-dependencies
      - names:
          - --pre
          - --prerelease
        argument: ""
        description: Allow prereleases to be pinned
      - names:
          - -u
          - --unconstrained
        argument: ""
        description: Ignore the version constraint of packages
      - names:
          - --dry-run
        argument: ""
        description: Show the difference only and don't perform any action
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - -d
          - --dev
        argument: ""
        description: Add packages into dev dependencies
      - names:
          - -G
          - --group
        argument: GROUP
        description: Specify the target dependency group to add into
      - names:
          - --no-sync
        argument: ""
        description: Only write pyproject.toml and do not sync the working set
      - names:
          - -e
          - --editable
        argument: EDITABLES
        description: Specify editable packages
      - names:
          - --no-editable
        argument: ""
        description: Install non-editable versions for all packages
      - names:
          - --no-self
        argument: ""
        description: 'Don''t install the project itself. [env var: PDM_NO_SELF]'
      - names:
          - --fail-fast
          - -x
        argument: ""
        description: Abort on first installation error
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
  - name: build
    description: Build artifacts for distribution
    usage: pdm build [-h] [-v] [-p PROJECT_PATH] [--no-isolation] [-k SKIP] [--no-sdist] [--no-wheel] [-d DEST] [--no-clean] [--config-setting CONFIG_SETTING]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --no-sdist
        argument: ""
        description: Don't build source tarballs
      - names:
          - --no-wheel
        argument: ""
        description: Don't build wheels
      - names:
          - -d
          - --dest
        argument: DEST
        description: Target directory to put artifacts
      - names:
          - --no-clean
        argument: ""
        description: Do not clean the target directory
      - names:
          - --config-setting
          - -C
        argument: CONFIG_SETTING
        description: 'Pass options to the backend. options with a value must be specified after "=": `--config-setting=--opt(=value)` or `-C--opt(=value)`'
  - name: cache
    description: Control the caches of PDM
    usage: pdm cache [-h] [-v] ...
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
  - name: completion
    description: Generate completion scripts for the given shell
    usage: pdm completion [-h] [shell]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
  - name: config
    description: Display the current configuration
    usage: pdm config [-h] [-v] [-g] [-p PROJECT_PATH] [-l] [-d] [-e] [key] [value]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -l
          - --local
        argument: ""
        description: Set config in the project's local configuration file
      - names:
          - -d
          - --delete
        argument: ""
        description: Unset a configuration key
      - names:
          - -e
          - --edit
        argument: ""
        description: Edit the configuration file in the default editor(defined by EDITOR env var)
  - name: export
    description: Export the locked packages set to other formats
    usage: pdm export [-h] [-v] [-g] [-p PROJECT_PATH] [-L LOCKFILE] [-f {pipfile,poetry,flit,setuppy,requirements}] [-G GROUP] [--no-default] [-d | --prod] [--without-hashes] [-o OUTPUT] [--pyproject] [--expandvars]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - -f
          - --format
        argument: '{pipfile,poetry,flit,setuppy,requirements}'
        description: Specify the export file format
      - names:
          - --without-hashes
        argument: ""
        description: Don't include artifact hashes
      - names:
          - -o
          - --output
        argument: OUTPUT
        description: Write output to the given file, or print to stdout if not given
      - names:
          - --pyproject
        argument: ""
        description: Read the list of packages from pyproject.toml
      - names:
          - --expandvars
        argument: ""
        description: Expand environment variables in requirements
      - names:
          - -G
          - --group
        argument: GROUP
        description: Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.
      - names:
          - --no-default
        argument: ""
        description: Don't include dependencies from the default group
      - names:
          - -d
          - --dev
        argument: ""
        description: Select dev dependencies
      - names:
          - --prod
          - --production
        argument: ""
        description: Unselect dev dependencies
  - name: fix
    description: Fix the project problems according to the latest version of PDM
    usage: pdm fix [-h] [-v] [-g] [-p PROJECT_PATH] [--dry-run] [problem]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --dry-run
        argument: ""
        description: Only show the problems
  - name: import
    description: Import project metadata from other formats
    usage: pdm import [-h] [-v] [-g] [-p PROJECT_PATH] [-d] [-G GROUP] [-f {pipfile,poetry,flit,setuppy,requirements}] filename
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -d
          - --dev
        argument: ""
        description: import packages into dev dependencies
      - names:
          - -G
          - --group
        argument: GROUP
        description: Specify the target dependency group to import into
      - names:
          - -f
          - --format
        argument: '{pipfile,poetry,flit,setuppy,requirements}'
        description: Specify the file format explicitly
  - name: info
    description: Show the project information
    usage: pdm info [-h] [-v] [-g] [-p PROJECT_PATH] [--venv [NAME]] [--python | --where | --packages | --env | --json]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - --python
        argument: ""
        description: Show the interpreter path
      - names:
          - --where
        argument: ""
        description: Show the project root path
      - names:
          - --packages
        argument: ""
        description: Show the local packages root
      - names:
          - --env
        argument: ""
        description: Show PEP 508 environment markers
      - names:
          - --json
        argument: ""
        description: Dump the information in JSON
  - name: init
    description: Initialize a pyproject.toml for PDM
    usage: pdm init [-h] [-v] [-g] [-p PROJECT_PATH] [-k SKIP] [--copier | --cookiecutter] [-n] [--python PYTHON] [--backend {pdm-backend,setuptools,flit-core,hatchling,pdm-pep517}] [--lib] [template] ...
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --copier
        argument: ""
        description: Use Copier to generate project [not installed]
      - names:
          - --cookiecutter
        argument: ""
        description: Use Cookiecutter to generate project [not installed]
      - names:
          - -n
          - --non-interactive
        argument: ""
        description: Don't ask questions but use default values
      - names:
          - --python
        argument: PYTHON
        description: Specify the Python version/path to use
      - names:
          - --backend
        argument: '{pdm-backend,setuptools,flit-core,hatchling,pdm-pep517}'
        description: Specify the build backend
      - names:
          - --lib
        argument: ""
        description: Create a library project
  - name: install
    description: Install dependencies from lock file
    usage: pdm install [-h] [-v] [-g] [-p PROJECT_PATH] [-G GROUP] [--no-default] [-d | --prod] [--no-editable] [--no-self] [--fail-fast] [--no-isolation] [--dry-run] [-L LOCKFILE] [-k SKIP] [--venv [NAME]] [--no-lock] [--check] [--plugins]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --dry-run
        argument: ""
        description: Show the difference only and don't perform any action
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - --no-lock
        argument: ""
        description: Don't do lock if the lock file is not found or outdated
      - names:
          - --check
        argument: ""
        description: Check if the lock file is up to date and fail otherwise
      - names:
          - --plugins
        argument: ""
        description: Install the plugins specified in pyproject.toml
      - names:
          - -G
          - --group
        argument: GROUP
        description: Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.
      - names:
          - --no-default
        argument: ""
        description: Don't include dependencies from the default group
      - names:
          - -d
          - --dev
        argument: ""
        description: Select dev dependencies
      - names:
          - --prod
          - --production
        argument: ""
        description: Unselect dev dependencies
      - names:
          - --no-editable
        argument: ""
        description: Install non-editable versions for all packages
      - names:
          - --no-self
        argument: ""
        description: 'Don''t install the project itself. [env var: PDM_NO_SELF]'
      - names:
          - --fail-fast
          - -x
        argument: ""
        description: Abort on first installation error
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
  - name: list
    description: List packages installed in the current working set
    usage: pdm list [-h] [-v] [-g] [-p PROJECT_PATH] [--venv [NAME]] [--freeze] [--graph] [-r] [--resolve] [--fields FIELDS] [--sort SORT] [--csv | --json | --markdown] [--include INCLUDE] [--exclude EXCLUDE]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - --freeze
        argument: ""
        description: Show the installed dependencies in pip's requirements.txt format
      - names:
          - --graph
        argument: ""
        description: Display a graph of dependencies
      - names:
          - -r
          - --reverse
        argument: ""
        description: Reverse the dependency graph
      - names:
          - --resolve
        argument: ""
        description: Resolve all requirements to output licenses (instead of just showing those currently installed)
      - names:
          - --fields
        argument: FIELDS
        description: 'Select information to output as a comma separated string. For example: name,version,homepage,licenses,groups.'
      - names:
          - --sort
        argument: SORT
        description: Sort the output using a given field name. If nothing is set, no sort is applied. Multiple fields can be combined with ','.
      - names:
          - --csv
        argument: ""
        description: Output dependencies in CSV document format
      - names:
          - --json
        argument: ""
        description: Output dependencies in JSON document format
      - names:
          - --markdown
        argument: ""
        description: Output dependencies and legal notices in markdown document format - best effort basis
      - names:
          - --include
        argument: INCLUDE
        description: Dependency groups to include in the output. By default all are included
      - names:
          - --exclude
        argument: EXCLUDE
        description: Exclude dependency groups from the output
  - name: lock
    description: Resolve and lock dependencies
    usage: pdm lock [-h] [-v] [-g] [-p PROJECT_PATH] [-L LOCKFILE] [--no-isolation] [-k SKIP] [-G GROUP] [--no-default] [-d | --prod] [--refresh] [--check] [--no-cross-platform] [--static-urls | --no-static-urls]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --refresh
        argument: ""
        description: Don't update pinned versions, only refresh the lock file
      - names:
          - --check
        argument: ""
        description: Check if the lock file is up to date and quit
      - names:
          - --no-cross-platform
        argument: ""
        description: Only lock packages for the current platform
      - names:
          - --static-urls
        argument: ""
        description: Store static file URLs in the lockfile
      - names:
          - --no-static-urls
        argument: ""
        description: Do not store static file URLs in the lockfile
      - names:
          - -G
          - --group
        argument: GROUP
        description: Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.
      - names:
          - --no-default
        argument: ""
        description: Don't include dependencies from the default group
      - names:
          - -d
          - --dev
        argument: ""
        description: Select dev dependencies
      - names:
          - --prod
          - --production
        argument: ""
        description: Unselect dev dependencies
  - name: publish
    description: Build and publish the project to PyPI
    usage: pdm publish [-h] [-v] [-p PROJECT_PATH] [-k SKIP] [-r REPOSITORY] [-u USERNAME] [-P PASSWORD] [-S] [-i IDENTITY] [-c COMMENT] [--no-build] [--no-very-ssl | --ca-certs CA_CERTS]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - -r
          - --repository
        argument: REPOSITORY
        description: 'The repository name or url to publish the package to [env var: PDM_PUBLISH_REPO]'
      - names:
          - -u
          - --username
        argument: USERNAME
        description: 'The username to access the repository [env var: PDM_PUBLISH_USERNAME]'
      - names:
          - -P
          - --password
        argument: PASSWORD
        description: 'The password to access the repository [env var: PDM_PUBLISH_PASSWORD]'
      - names:
          - -S
          - --sign
        argument: ""
        description: Upload the package with PGP signature
      - names:
          - -i
          - --identity
        argument: IDENTITY
        description: GPG identity used to sign files.
      - names:
          - -c
          - --comment
        argument: COMMENT
        description: The comment to include with the distribution file.
      - names:
          - --no-build
        argument: ""
        description: Don't build the package before publishing
      - names:
          - --no-very-ssl
        argument: ""
        description: Disable SSL verification
      - names:
          - --ca-certs
        argument: CA_CERTS
        description: 'The path to a PEM-encoded Certificate Authority bundle to use for publish server validation [env var: PDM_PUBLISH_CA_CERTS]'
  - name: remove
    description: Remove packages from pyproject.toml
    usage: pdm remove [-h] [-v] [-g] [-p PROJECT_PATH] [--no-editable] [--no-self] [--fail-fast] [--no-isolation] [--dry-run] [-L LOCKFILE] [-k SKIP] [--venv [NAME]] [-d] [-G GROUP] [--no-sync] packages [packages ...]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --dry-run
        argument: ""
        description: Show the difference only and don't perform any action
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - -d
          - --dev
        argument: ""
        description: Remove packages from dev dependencies
      - names:
          - -G
          - --group
        argument: GROUP
        description: Specify the target dependency group to remove from
      - names:
          - --no-sync
        argument: ""
        description: Only write pyproject.toml and do not uninstall packages
      - names:
          - --no-editable
        argument: ""
        description: Install non-editable versions for all packages
      - names:
          - --no-self
        argument: ""
        description: 'Don''t install the project itself. [env var: PDM_NO_SELF]'
      - names:
          - --fail-fast
          - -x
        argument: ""
        description: Abort on first installation error
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
  - name: run
    description: Run commands or scripts with local packages loaded
    usage: pdm run [-h] [-v] [-g] [-p PROJECT_PATH] [-k SKIP] [--venv [NAME]] [-l | -j] [-s] [script] ...
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - -l
          - --list
        argument: ""
        description: Show all available scripts defined in pyproject.toml
      - names:
          - -j
          - --json
        argument: ""
        description: Output all scripts infos in JSON
      - names:
          - -s
          - --site-packages
        argument: ""
        description: Load site-packages from the selected interpreter
  - name: search
    description: Search for PyPI packages
    usage: pdm search [-h] [-v] query
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
  - name: show
    description: Show the package information
    usage: pdm show [-h] [-v] [-g] [-p PROJECT_PATH] [--venv [NAME]] [--name] [--version] [--summary] [--license] [--platform] [--keywords] [package]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - --name
        argument: ""
        description: Show name
      - names:
          - --version
        argument: ""
        description: Show version
      - names:
          - --summary
        argument: ""
        description: Show summary
      - names:
          - --license
        argument: ""
        description: Show license
      - names:
          - --platform
        argument: ""
        description: Show platform
      - names:
          - --keywords
        argument: ""
        description: Show keywords
  - name: sync
    description: Synchronize the current working set with lock file
    usage: pdm sync [-h] [-v] [-g] [-p PROJECT_PATH] [-G GROUP] [--no-default] [-d | --prod] [--dry-run] [-L LOCKFILE] [-k SKIP] [--clean | --only-keep] [--no-editable] [--no-self] [--fail-fast] [--no-isolation] [--venv [NAME]] [-r]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --dry-run
        argument: ""
        description: Show the difference only and don't perform any action
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --clean
        argument: ""
        description: Clean packages not in the lockfile
      - names:
          - --only-keep
        argument: ""
        description: Only keep the selected packages
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - -r
          - --reinstall
        argument: ""
        description: Force reinstall existing dependencies
      - names:
          - -G
          - --group
        argument: GROUP
        description: Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.
      - names:
          - --no-default
        argument: ""
        description: Don't include dependencies from the default group
      - names:
          - -d
          - --dev
        argument: ""
        description: Select dev dependencies
      - names:
          - --prod
          - --production
        argument: ""
        description: Unselect dev dependencies
      - names:
          - --no-editable
        argument: ""
        description: Install non-editable versions for all packages
      - names:
          - --no-self
        argument: ""
        description: 'Don''t install the project itself. [env var: PDM_NO_SELF]'
      - names:
          - --fail-fast
          - -x
        argument: ""
        description: Abort on first installation error
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
  - name: update
    description: Update package(s) in pyproject.toml
    usage: pdm update [-h] [-v] [-g] [-p PROJECT_PATH] [-G GROUP] [--no-default] [-d | --prod] [--no-editable] [--no-self] [--fail-fast] [--no-isolation] [-L LOCKFILE] [--save-compatible | --save-wildcard | --save-exact | --save-minimum] [--update-reuse | --update-eager | --update-all] [--pre] [-u] [-k SKIP] [--venv [NAME]] [-t] [--dry-run] [--no-sync] [packages ...]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -L
          - --lockfile
        argument: LOCKFILE
        description: 'Specify another lockfile path. Default: pdm.lock. [env var: PDM_LOCKFILE]'
      - names:
          - --save-compatible
        argument: ""
        description: Save compatible version specifiers
      - names:
          - --save-wildcard
        argument: ""
        description: Save wildcard version specifiers
      - names:
          - --save-exact
        argument: ""
        description: Save exact version specifiers
      - names:
          - --save-minimum
        argument: ""
        description: Save minimum version specifiers
      - names:
          - --update-reuse
        argument: ""
        description: Reuse pinned versions already present in lock file if possible
      - names:
          - --update-eager
        argument: ""
        description: Try to update the packages and their dependencies recursively
      - names:
          - --update-all
        argument: ""
        description: Update all dependencies and sub-dependencies
      - names:
          - --pre
          - --prerelease
        argument: ""
        description: Allow prereleases to be pinned
      - names:
          - -u
          - --unconstrained
        argument: ""
        description: Ignore the version constraint of packages
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - --venv
        argument: '[NAME]'
        description: 'Run the command in the virtual environment with the given key. [env var: PDM_IN_VENV]'
      - names:
          - -t
          - --top
        argument: ""
        description: Only update those listed in pyproject.toml
      - names:
          - --dry-run
          - --outdated
        argument: ""
        description: Show the difference only without modifying the lockfile content
      - names:
          - --no-sync
        argument: ""
        description: Only update lock file but do not sync packages
      - names:
          - -G
          - --group
        argument: GROUP
        description: Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.
      - names:
          - --no-default
        argument: ""
        description: Don't include dependencies from the default group
      - names:
          - -d
          - --dev
        argument: ""
        description: Select dev dependencies
      - names:
          - --prod
          - --production
        argument: ""
        description: Unselect dev dependencies
      - names:
          - --no-editable
        argument: ""
        description: Install non-editable versions for all packages
      - names:
          - --no-self
        argument: ""
        description: 'Don''t install the project itself. [env var: PDM_NO_SELF]'
      - names:
          - --fail-fast
          - -x
        argument: ""
        description: Abort on first installation error
      - names:
          - --no-isolation
        argument: ""
        description: Do not isolate the build in a clean environment
  - name: use
    description: Use the given python version or path as base interpreter
    usage: pdm use [-h] [-v] [-g] [-p PROJECT_PATH] [-k SKIP] [-f] [-i] [--venv VENV] [python]
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -v
          - --verbose
        argument: ""
        description: Use `-v` for detailed output and `-vv` for more detailed
      - names:
          - -g
          - --global
        argument: ""
        description: Use the global project, supply the project root with `-p` option
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - -k
          - --skip
        argument: SKIP
        description: Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.
      - names:
          - -f
          - --first
        argument: ""
        description: Select the first matched interpreter
      - names:
          - -i
          - --ignore-remembered
        argument: ""
        description: Ignore the remembered selection
      - names:
          - --venv
        argument: VENV
        description: Use the interpreter in the virtual environment with the given name
  - name: venv
    description: Virtualenv management
    usage: pdm venv [-h] [-p PROJECT_PATH] [--path PATH | --python PYTHON] ...
    options:
      - names:
          - -h
          - --help
        argument: ""
        description: Show this help message and exit.
      - names:
          - -p
          - --project
        argument: PROJECT_PATH
        description: Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__
      - names:
          - --path
        argument: PATH
        description: Show the path to the given virtualenv
      - names:
          - --python
        argument: PYTHON
        description: Show the python interpreter path for the given virtualenv
version: PDM, version 2.8.0
