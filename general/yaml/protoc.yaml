name: protoc
description: protoc
options:
  - names:
      - -I
      - --proto_path
    argument: PATH
    description: Specify the directory in which to search for imports. May be specified multiple times; directories will be searched in order. If not given, the current working directory is used. If not found in any of the these directories, the --descriptor_set_in descriptors will be checked for required proto file.
  - names:
      - --version
    argument: ""
    description: Show version info and exit.
  - names:
      - -h
      - --help
    argument: ""
    description: Show this text and exit.
  - names:
      - --encode
    argument: MESSAGE_TYPE
    description: Read a text-format message of the given type from standard input and write it in binary to standard output. The message type must be defined in PROTO_FILES or their imports.
  - names:
      - --deterministic_output
    argument: ""
    description: When using --encode, ensure map fields are deterministically ordered. Note that this order is not canonical, and changes across builds or releases of protoc.
  - names:
      - --decode
    argument: MESSAGE_TYPE
    description: Read a binary message of the given type from standard input and write it in text format to standard output. The message type must be defined in PROTO_FILES or their imports.
  - names:
      - --decode_raw
    argument: ""
    description: Read an arbitrary protocol message from standard input and write the raw tag/value pairs in text format to standard output. No PROTO_FILES should be given when using this flag.
  - names:
      - --descriptor_set_in
    argument: FILES
    description: Specifies a delimited list of FILES each containing a FileDescriptorSet (a protocol buffer defined in descriptor.proto). The FileDescriptor for each of the PROTO_FILES provided will be loaded from these FileDescriptorSets. If a FileDescriptor appears multiple times, the first occurrence will be used.
  - names:
      - -o
      - --descriptor_set_out
    argument: FILE
    description: Writes a FileDescriptorSet (a protocol buffer, defined in descriptor.proto) containing all of the input files to FILE.
  - names:
      - --include_imports
    argument: ""
    description: When using --descriptor_set_out, also include all dependencies of the input files in the set, so that the set is self-contained.
  - names:
      - --include_source_info
    argument: ""
    description: When using --descriptor_set_out, do not strip SourceCodeInfo from the FileDescriptorProto. This results in vastly larger descriptors that include information about the original location of each decl in the source file as well as surrounding comments.
  - names:
      - --dependency_out
    argument: FILE
    description: Write a dependency output file in the format expected by make. This writes the transitive set of input file paths to FILE
  - names:
      - --error_format
    argument: FORMAT
    description: Set the format in which to print errors. FORMAT may be 'gcc' (the default) or 'msvs' (Microsoft Visual Studio format).
  - names:
      - --fatal_warnings
    argument: ""
    description: Make warnings be fatal (similar to -Werr in gcc). This flag will make protoc return with a non-zero exit code if any warnings are generated.
  - names:
      - --print_free_field_numbers
    argument: ""
    description: Print the free field numbers of the messages defined in the given proto files. Groups share the same field number space with the parent message. Extension ranges are counted as occupied fields numbers.
  - names:
      - --plugin
    argument: EXECUTABLE
    description: Specifies a plugin executable to use. Normally, protoc searches the PATH for plugins, but you may specify additional executables not in the path using this flag. Additionally, EXECUTABLE may be of the form NAME=PATH, in which case the given plugin name is mapped to the given executable even if the executable's own name differs.
  - names:
      - --cpp_out
    argument: OUT_DIR
    description: Generate C++ header and source.
  - names:
      - --csharp_out
    argument: OUT_DIR
    description: Generate C# source file.
  - names:
      - --java_out
    argument: OUT_DIR
    description: Generate Java source file.
  - names:
      - --js_out
    argument: OUT_DIR
    description: Generate JavaScript source.
  - names:
      - --kotlin_out
    argument: OUT_DIR
    description: Generate Kotlin file.
  - names:
      - --objc_out
    argument: OUT_DIR
    description: Generate Objective-C header and source.
  - names:
      - --php_out
    argument: OUT_DIR
    description: Generate PHP source file.
  - names:
      - --python_out
    argument: OUT_DIR
    description: Generate Python source file.
  - names:
      - --ruby_out
    argument: OUT_DIR
    description: Generate Ruby source file.
tldr: |
  > Parse Google Protobuf `.proto` files and generate output in the specified language.
  > More information: <https://developers.google.com/protocol-buffers>.

  - Generate Python code from a `.proto` file:

  `protoc --python_out={{path/to/output_directory}} {{input_file.proto}}`

  - Generate Java code from a `.proto` file that imports other `.proto` files:

  `protoc --java_out={{path/to/output_directory}} --proto_path={{path/to/import_search_path}} {{input_file.proto}}`

  - Generate code for multiple languages:

  `protoc --csharp_out={{path/to/c#_output_directory}} --js_out={{path/to/js_output_directory}} {{input_file.proto}}`
