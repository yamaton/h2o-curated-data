name: python
description: python
options:
  - names:
      - -B
    argument: ""
    description: Don't write .pyc files on import. See also PYTHONDONTWRITEBYTECODE.
  - names:
      - -b
    argument: ""
    description: 'Issue warnings about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str. (-bb: issue errors)'
  - names:
      - -c
    argument: command
    description: Specify the command to execute (see next section). This terminates the option list (following options are passed as arguments to the command).
  - names:
      - --check-hash-based-pycs
    argument: mode
    description: Configure how Python evaluates the up-to-dateness of hash-based .pyc files.
  - names:
      - -d
    argument: ""
    description: Turn on parser debugging output (for expert only, depending on compilation options).
  - names:
      - -E
    argument: ""
    description: Ignore environment variables like PYTHONPATH and PYTHONHOME that modify the behavior of the interpreter.
  - names:
      - -h
      - -?
      - --help
    argument: ""
    description: Prints the usage for the interpreter executable and exits.
  - names:
      - -i
    argument: ""
    description: When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command. It does not read the $PYTHONSTARTUP file. This can be useful to inspect global variables or a stack trace when a script raises an exception.
  - names:
      - -I
    argument: ""
    description: Run Python in isolated mode. This also implies -E and -s. In isolated mode sys.path contains neither the script's directory nor the user's site-packages directory. All PYTHON* environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code.
  - names:
      - -m
    argument: module-name
    description: Searches sys.path for the named module and runs the corresponding .py file as a script.
  - names:
      - -O
    argument: ""
    description: Remove assert statements and any code conditional on the value of __debug__; augment the filename for compiled (bytecode) files by adding .opt-1 before the .pyc extension.
  - names:
      - -OO
    argument: ""
    description: Do -O and also discard docstrings; change the filename for compiled (bytecode) files by adding .opt-2 before the .pyc extension.
  - names:
      - -q
    argument: ""
    description: Do not print the version and copyright messages. These messages are also suppressed in non-interactive mode.
  - names:
      - -s
    argument: ""
    description: Don't add user site directory to sys.path.
  - names:
      - -S
    argument: ""
    description: Disable the import of the module site and the site-dependent manipulations of sys.path that it entails. Also disable these manipulations if site is explicitly imported later.
  - names:
      - -u
    argument: ""
    description: Force the stdout and stderr streams to be unbuffered. This option has no effect on the stdin stream.
  - names:
      - -v
    argument: ""
    description: Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded. When given twice, print a message for each file that is checked for when searching for a module. Also provides information on module cleanup at exit.
  - names:
      - -V
      - --version
    argument: ""
    description: Prints the Python version number of the executable and exits. When given twice, print more information about the build.
  - names:
      - -W
    argument: argument
    description: 'Warning control. Python sometimes prints warning message to sys.stderr. A typical warning message has the following form: file:line: category: message. By default, each warning is printed once for each source line where it occurs. This option controls how often warnings are printed. Multiple -W options may be given; when a warning matches more than one option, the action for the last matching option is performed. Invalid -W options are ignored (a warning message is printed about invalid options when the first warning is issued). Warnings can also be controlled from within a Python program using the warnings module.'
  - names:
      - -X
    argument: option
    description: 'Set implementation specific option. The following options are available:'
  - names:
      - -x
    argument: ""
    description: 'Skip the first line of the source. This is intended for a DOS specific hack only. Warning: the line numbers in error messages will be off by one!'
version: Python 3.10.5
tldr: |
  > Python language interpreter.
  > More information: <https://www.python.org>.

  - Start a REPL (interactive shell):

  `python`

  - Execute a specific Python file:

  `python {{path/to/file.py}}`

  - Execute a specific Python file and start a REPL:

  `python -i {{path/to/file.py}}`

  - Execute a Python expression:

  `python -c "{{expression}}"`

  - Run the script of the specified library module:

  `python -m {{module}} {{arguments}}`

  - Install a package using `pip`:

  `python -m {{pip}} install {{package_name}}`

  - Interactively debug a Python script:

  `python -m {{pdb}} {{path/to/file.py}}`

  - Start the built-in HTTP server on port 8000 in the current directory:

  `python -m {{http.server}}`
