name: robot
description: Robot Framework report and log generator
options:
  - names:
      - --rpa
    argument: ""
    description: Turn on the generic automation mode. Mainly affects terminology so that "test" is replaced with "task" in logs and reports. By default the mode is got from test/task header in data files. New in RF 3.1.
  - names:
      - -F
      - --extension
    argument: value
    description: 'Parse only files with this extension when executing a directory. Has no effect when running individual files or when using resource files. If more than one extension is needed, separate them with a colon. Examples: `--extension txt`, `--extension robot:txt` Starting from RF 3.2 only `*.robot` files are parsed by default.'
  - names:
      - -N
      - --name
    argument: name
    description: Set the name of the top level suite. By default the name is created based on the executed file or directory.
  - names:
      - -D
      - --doc
    argument: documentation
    description: 'Set the documentation of the top level suite. Simple formatting is supported (e.g. *bold*). If the documentation contains spaces, it must be quoted. If the value is path to an existing file, actual documentation is read from that file. Examples: --doc "Very *good* example" --doc doc_from_file.txt'
  - names:
      - -M
      - --metadata
    argument: name:value *
    description: 'Set metadata of the top level suite. Value can contain formatting and be read from a file similarly as --doc. Example: --metadata Version:1.2'
  - names:
      - -G
      - --settag
    argument: tag *
    description: Sets given tag(s) to all executed tests.
  - names:
      - -t
      - --test
    argument: name *
    description: Select tests by name or by long name containing also parent suite name like `Parent.Test`. Name is case and space insensitive and it can also be a simple pattern where `*` matches anything, `?` matches any single character, and `[chars]` matches one character in brackets.
  - names:
      - --task
    argument: name *
    description: Alias to --test. Especially applicable with --rpa.
  - names:
      - -s
      - --suite
    argument: name *
    description: Select suites by name. When this option is used with --test, --include or --exclude, only tests in matching suites and also matching other filtering criteria are selected. Name can be a simple pattern similarly as with --test and it can contain parent name separated with a dot. For example, `-s X.Y` selects suite `Y` only if its parent is `X`.
  - names:
      - -i
      - --include
    argument: tag *
    description: 'Select tests by tag. Similarly as name with --test, tag is case and space insensitive and it is possible to use patterns with `*`, `?` and `[]` as wildcards. Tags and patterns can also be combined together with `AND`, `OR`, and `NOT` operators. Examples: --include foo --include bar* --include fooANDbar*'
  - names:
      - -e
      - --exclude
    argument: tag *
    description: Select test cases not to run by tag. These tests are not run even if included with --include. Tags are matched using same rules as with --include.
  - names:
      - -R
      - --rerunfailed
    argument: output
    description: Select failed tests from an earlier output file to be re-executed. Equivalent to selecting same tests individually using --test.
  - names:
      - -S
      - --rerunfailedsuites
    argument: output
    description: Select failed suites from an earlier output file to be re-executed.
  - names:
      - --runemptysuite
    argument: ""
    description: Executes suite even if it contains no tests. Useful e.g. with --include/--exclude when it is not an error that no test matches the condition.
  - names:
      - --skip
    argument: tag *
    description: Tests having given tag will be skipped. Tag can be a pattern. New in RF 4.0.
  - names:
      - --skiponfailure
    argument: tag *
    description: Tests having given tag will be skipped if they fail. Tag can be a pattern. New in RF 4.0.
  - names:
      - -n
      - --noncritical
    argument: tag *
    description: Alias for --skiponfailure. Deprecated since RF 4.0.
  - names:
      - -c
      - --critical
    argument: tag *
    description: Opposite of --noncritical. Deprecated since RF 4.0.
  - names:
      - -v
      - --variable
    argument: name:value *
    description: 'Set variables in the test data. Only scalar variables with string value are supported and name is given without `${}`. See --variablefile for a more powerful variable setting mechanism. Examples: --variable str:Hello => ${str} = `Hello` -v hi:Hi_World -E space:_ => ${hi} = `Hi World` -v x: -v y:42 => ${x} = ``, ${y} = `42`'
  - names:
      - -V
      - --variablefile
    argument: path *
    description: Python or YAML file file to read variables from. Possible arguments to the variable file can be given after the path using colon or semicolon as separator.
  - names:
      - -d
      - --outputdir
    argument: dir
    description: Where to create output files. The default is the directory where tests are run from and the given path is considered relative to that unless it is absolute.
  - names:
      - -o
      - --output
    argument: file
    description: 'XML output file. Given path, similarly as paths given to --log, --report, --xunit, and --debugfile, is relative to --outputdir unless given as an absolute path. Other output files are created based on XML output files after the test execution and XML outputs can also be further processed with Rebot tool. Can be disabled by giving a special value `NONE`. Default: output.xml'
  - names:
      - -l
      - --log
    argument: file
    description: 'HTML log file. Can be disabled by giving a special value `NONE`. Default: log.html Examples: `--log mylog.html`, `-l NONE`'
  - names:
      - -r
      - --report
    argument: file
    description: 'HTML report file. Can be disabled with `NONE` similarly as --log. Default: report.html'
  - names:
      - -x
      - --xunit
    argument: file
    description: xUnit compatible result file. Not created unless this option is specified.
  - names:
      - --xunitskipnoncritical
    argument: ""
    description: Deprecated since RF 4.0 and has no effect anymore.
  - names:
      - -b
      - --debugfile
    argument: file
    description: Debug file written during execution. Not created unless this option is specified.
  - names:
      - -T
      - --timestampoutputs
    argument: ""
    description: When this option is used, timestamp in a format `YYYYMMDD-hhmmss` is added to all generated output files between their basename and extension. For example `-T -o output.xml -r report.html -l none` creates files like `output-20070503-154410.xml` and `report-20070503-154410.html`.
  - names:
      - --splitlog
    argument: ""
    description: Split the log file into smaller pieces that open in browsers transparently.
  - names:
      - --logtitle
    argument: title
    description: Title for the generated log file. The default title is `<SuiteName> Test Log`.
  - names:
      - --reporttitle
    argument: title
    description: Title for the generated report file. The default title is `<SuiteName> Test Report`.
  - names:
      - --reportbackground
    argument: colors
    description: Background colors to use in the report file. Order is `passed:failed:skipped`. Both color names and codes work. `skipped` can be omitted.
  - names:
      - --maxerrorlines
    argument: lines
    description: Maximum number of error message lines to show in report when tests fail. Default is 40, minimum is 10 and `NONE` can be used to show the full message.
  - names:
      - -L
      - --loglevel
    argument: level
    description: 'Threshold level for logging. Available levels: TRACE, DEBUG, INFO (default), WARN, NONE (no logging). Use syntax `LOGLEVEL:DEFAULT` to define the default visible log level in log files.'
  - names:
      - --suitestatlevel
    argument: level
    description: 'How many levels to show in `Statistics by Suite` in log and report. By default all suite levels are shown. Example: --suitestatlevel 3'
  - names:
      - --tagstatinclude
    argument: tag *
    description: Include only matching tags in `Statistics by Tag` in log and report. By default all tags are shown. Given tag can be a pattern like with --include.
  - names:
      - --tagstatexclude
    argument: tag *
    description: Exclude matching tags from `Statistics by Tag`. This option can be used with --tagstatinclude similarly as --exclude is used with --include.
  - names:
      - --tagstatcombine
    argument: tags:name *
    description: Create combined statistics based on tags. These statistics are added into `Statistics by Tag`. If the optional `name` is not given, name of the combined tag is got from the specified tags. Tags are matched using the same rules as with --include.
  - names:
      - --tagdoc
    argument: pattern:doc *
    description: Add documentation to tags matching the given pattern. Documentation is shown in `Test Details` and also as a tooltip in `Statistics by Tag`. Pattern can use `*`, `?` and `[]` as wildcards like --test. Documentation can contain formatting like --doc.
  - names:
      - --tagstatlink
    argument: pattern:link:title *
    description: Add external links into `Statistics by Tag`. Pattern can use `*`, `?` and `[]` as wildcards like --test. Characters matching to `*` and `?` wildcards can be used in link and title with syntax %N, where N is index of the match (starting from 1).
  - names:
      - --expandkeywords
    argument: name:<pattern>|tag:<pattern> *
    description: Matching keywords will be automatically expanded in the log file. Matching against keyword name or tags work using same rules as with --removekeywords. New in RF 3.2.
  - names:
      - --removekeywords
    argument: '{all|passed|for|wuks|name:<pattern>|tag:<pattern>} *'
    description: 'Remove keyword data from the generated log file. Keywords containing warnings are not removed except in the `all` mode. all: remove data from all keywords passed: remove data only from keywords in passed test cases and suites for: remove passed iterations from for loops wuks: remove all but the last failing keyword inside `BuiltIn.Wait Until Keyword Succeeds` name:<pattern>: remove data from keywords that match the given pattern. The pattern is matched against the full name of the keyword (e.g. ''MyLib.Keyword'', ''resource.Second Keyword''), is case, space, and underscore insensitive, and may contain `*`, `?` and `[]` wildcards. Examples: --removekeywords name:Lib.HugeKw --removekeywords name:myresource.* tag:<pattern>: remove data from keywords that match the given pattern. Tags are case and space insensitive and patterns can contain `*`, `?` and `[]` wildcards. Tags and patterns can also be combined together with `AND`, `OR`, and `NOT` operators. Examples: --removekeywords foo --removekeywords fooANDbar*'
  - names:
      - --flattenkeywords
    argument: '{for|foritem|name:<pattern>|tag:<pattern>} *'
    description: 'Flattens matching keywords in the generated log file. Matching keywords get all log messages from their child keywords and children are discarded otherwise. for: flatten for loops fully foritem: flatten individual for loop iterations name:<pattern>: flatten matched keywords using same matching rules as with `--removekeywords name:<pattern>` tag:<pattern>: flatten matched keywords using same matching rules as with `--removekeywords tag:<pattern>`'
  - names:
      - --listener
    argument: class *
    description: 'A class for monitoring test execution. Gets notifications e.g. when tests start and end. Arguments to the listener class can be given after the name using a colon or a semicolon as a separator. Examples: --listener MyListenerClass --listener path/to/Listener.py:arg1:arg2'
  - names:
      - --nostatusrc
    argument: ""
    description: Sets the return code to zero regardless of failures in test cases. Error codes are returned normally.
  - names:
      - --dryrun
    argument: ""
    description: Verifies test data and runs tests so that library keywords are not executed.
  - names:
      - -X
      - --exitonfailure
    argument: ""
    description: Stops test execution if any critical test fails.
  - names:
      - --exitonerror
    argument: ""
    description: Stops test execution if any error occurs when parsing test data, importing libraries, and so on.
  - names:
      - --skipteardownonexit
    argument: ""
    description: Causes teardowns to be skipped if test execution is stopped prematurely.
  - names:
      - --randomize
    argument: '{all|suites|tests|none}'
    description: 'Randomizes the test execution order. all: randomizes both suites and tests suites: randomizes suites tests: randomizes tests none: no randomization (default) Use syntax `VALUE:SEED` to give a custom random seed. The seed must be an integer. Examples: --randomize all --randomize tests:1234'
  - names:
      - --prerunmodifier
    argument: class *
    description: Class to programmatically modify the test suite structure before execution.
  - names:
      - --prerebotmodifier
    argument: class *
    description: Class to programmatically modify the result model before creating reports and logs.
  - names:
      - --console
    argument: type
    description: 'How to report execution on the console. verbose: report every suite and test (default) dotted: only show `.` for passed test, `f` for failed non-critical tests, and `F` for failed critical tests quiet: no output except for errors and warnings none: no output whatsoever'
  - names:
      - -.
      - --dotted
    argument: ""
    description: Shortcut for `--console dotted`.
  - names:
      - --quiet
    argument: ""
    description: Shortcut for `--console quiet`.
  - names:
      - -W
      - --consolewidth
    argument: chars
    description: Width of the console output. Default is 78.
  - names:
      - -C
      - --consolecolors
    argument: auto|on|ansi|off
    description: 'Use colors on console output or not. auto: use colors when output not redirected (default) on: always use colors ansi: like `on` but use ANSI colors also on Windows off: disable colors altogether Note that colors do not work with Jython on Windows.'
  - names:
      - -K
      - --consolemarkers
    argument: auto|on|off
    description: Show markers on the console when top level keywords in a test case end. Values have same semantics as with --consolecolors.
  - names:
      - -P
      - --pythonpath
    argument: path *
    description: 'Additional locations (directories, ZIPs, JARs) where to search test libraries and other extensions when they are imported. Multiple paths can be given by separating them with a colon (`:`) or by using this option several times. Given path can also be a glob pattern matching multiple paths. Examples: --pythonpath libs/ --pythonpath resources/*.jar --pythonpath /opt/testlibs:mylibs.zip:yourlibs'
  - names:
      - -A
      - --argumentfile
    argument: path *
    description: 'Text file to read more arguments from. Use special path `STDIN` to read contents from the standard input stream. File can have both options and input files or directories, one per line. Contents do not need to be escaped but spaces in the beginning and end of lines are removed. Empty lines and lines starting with a hash character (#) are ignored. Example file: | --include regression | --name Regression Tests | # This is a comment line | my_tests.robot | path/to/test/directory/ Examples: --argumentfile argfile.txt --argumentfile STDIN'
  - names:
      - -h
      - -?
      - --help
    argument: ""
    description: Print usage instructions.
  - names:
      - --version
    argument: ""
    description: Print version information.
version: 4.1.3
tldr: |
  > Robot Framework -- A generic automation framework
  > More information: <https://robotframework.org/>.

  - Simple test run using `robot` command without options.

  `robot {{tests.robot}}`

  - Using options.

  `robot --include {{smoke}} --name {{"Smoke Tests"}} {{path/to/tests.robot}}`

  - Executing `robot` module using Python.

  `python -m robot {{path/to/tests}}`

  - Running `robot` directory with Jython.

  `jython {{/opt/robot}} {{tests.robot}}`

  - Executing multiple test case files and using case-insensitive long options.

  `robot --SuiteStatLevel {{2}} --Metadata {{Version:3}} {{tests/*.robot}} {{more/tests.robot}}`

  - Setting default options and syslog file before running tests.

  `export ROBOT_OPTIONS={{"--outputdir results --suitestatlevel 2"}}`
  `export ROBOT_SYSLOG_FILE={{/tmp/syslog.txt}}`
  `robot {{tests.robot}}`
