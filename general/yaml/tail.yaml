name: tail
description: output the last part of files
usage: tail [OPTION]... [FILE]...
options:
  - names:
      - -c
      - --bytes
    argument: '[+]NUM'
    description: output the last NUM bytes; or use -c +NUM to output starting with byte NUM of each file
  - names:
      - -f
      - --follow
    argument: '[={name|descriptor}]'
    description: output appended data as the file grows;
  - names:
      - -F
    argument: ""
    description: same as --follow=name --retry
  - names:
      - -n
      - --lines
    argument: '[+]NUM'
    description: output the last NUM lines, instead of the last 10; or use -n +NUM to output starting with line NUM
  - names:
      - --max-unchanged-stats
    argument: "N"
    description: with --follow=name, reopen a FILE which has not
  - names:
      - --pid
    argument: PID
    description: with -f, terminate after process ID, PID dies
  - names:
      - -q
      - --quiet
      - --silent
    argument: ""
    description: never output headers giving file names
  - names:
      - --retry
    argument: ""
    description: keep trying to open a file if it is inaccessible
  - names:
      - -s
      - --sleep-interval
    argument: "N"
    description: with -f, sleep for approximately N seconds (default 1.0) between iterations; with inotify and --pid=P, check process P at least once every N seconds
  - names:
      - -v
      - --verbose
    argument: ""
    description: always output headers giving file names
  - names:
      - -z
      - --zero-terminated
    argument: ""
    description: line delimiter is NUL, not newline
  - names:
      - --help
    argument: ""
    description: display this help and exit
  - names:
      - --version
    argument: ""
    description: output version information and exit
version: tail (GNU coreutils) 8.32
tldr: |
  > Display the last part of a file.
  > See also: `head`.
  > More information: <https://www.gnu.org/software/coreutils/tail>.

  - Show last 'count' lines in file:

  `tail --lines {{count}} {{path/to/file}}`

  - Print a file from a specific line number:

  `tail --lines +{{count}} {{path/to/file}}`

  - Print a specific count of bytes from the end of a given file:

  `tail --bytes {{count}} {{path/to/file}}`

  - Print the last lines of a given file and keep reading file until `Ctrl + C`:

  `tail --follow {{path/to/file}}`

  - Keep reading file until `Ctrl + C`, even if the file is inaccessible:

  `tail --retry --follow {{path/to/file}}`

  - Show last 'num' lines in 'file' and refresh every 'n' seconds:

  `tail --lines {{count}} --sleep-interval {{seconds}} --follow {{path/to/file}}`
