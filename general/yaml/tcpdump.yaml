name: tcpdump
description: tcpdump
options:
  - names:
      - -A
    argument: ""
    description: Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.
  - names:
      - -b
    argument: ""
    description: Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.
  - names:
      - -B
      - --buffer-size
    argument: buffer_size
    description: Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).
  - names:
      - -c
    argument: count
    description: Exit after receiving count packets.
  - names:
      - -C
    argument: file_size
    description: Before  writing  a  raw  packet  to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one. Savefiles after the first savefile will have the name specified with the -w flag, with a number after it, starting  at  1  and  continuing  upward.   The  units  of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).
  - names:
      - -d
    argument: ""
    description: Dump the compiled packet-matching code in a human readable form to standard output and stop.
  - names:
      - -dd
    argument: ""
    description: Dump packet-matching code as a C program fragment.
  - names:
      - -ddd
    argument: ""
    description: Dump packet-matching code as decimal numbers (preceded with a count).
  - names:
      - -D
      - --list-interfaces
    argument: ""
    description: Print  the  list  of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.
  - names:
      - -e
    argument: ""
    description: Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.
  - names:
      - -E
    argument: ""
    description: Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may  be  repeated with comma or newline separation.
  - names:
      - -f
    argument: ""
    description: Print `foreign' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun's NIS  server  â€”  usually  it hangs forever translating non-local internet numbers).
  - names:
      - -F
    argument: file
    description: Use file as input for the filter expression.  An additional expression given on the command line is ignored.
  - names:
      - -G
    argument: rotate_seconds
    description: If  specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time format is specified, each new file will overwrite the previous.
  - names:
      - -h
      - --help
    argument: ""
    description: Print the tcpdump and libpcap version strings, print a usage message, and exit.
  - names:
      - --version
    argument: ""
    description: Print the tcpdump and libpcap version strings and exit.
  - names:
      - -H
    argument: ""
    description: Attempt to detect 802.11s draft mesh headers.
  - names:
      - -i
      - --interface
    argument: interface
    description: Listen on interface.  If unspecified, tcpdump searches the system interface list for the lowest numbered, configured up interface (excluding  loopback),  which  may turn out to be, for example, ``eth0''.
  - names:
      - -I
      - --monitor-mode
    argument: ""
    description: Put the interface in "monitor mode"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.
  - names:
      - --immediate-mode
    argument: ""
    description: Capture in "immediate mode".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets to a ``savefile'' if the packets are being printed to a terminal rather than to a file or pipe.
  - names:
      - -j
      - --time-stamp-type
    argument: tstamp_type
    description: Set  the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.
  - names:
      - -J
      - --list-time-stamp-types
    argument: ""
    description: List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.
  - names:
      - --time-stamp-precision
    argument: tstamp_precision
    description: When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their  actual  accuracy  is  platform  and hardware dependent.  Also note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.
  - names:
      - -K
      - --dont-verify-checksums
    argument: ""
    description: Don't attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.
  - names:
      - -l
    argument: ""
    description: Make stdout line buffered.  Useful if you want to see the data while capturing it.
  - names:
      - -L
      - --list-data-link-types
    argument: ""
    description: List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the  specified  mode;  for example,  on  some  platforms, a Wi-Fi interface might support one set of data link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and another set of data link types when in monitor mode  (for  example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).
  - names:
      - -m
    argument: module
    description: Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.
  - names:
      - -M
    argument: secret
    description: Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.
  - names:
      - -n
    argument: ""
    description: Don't convert addresses (i.e., host addresses, port numbers, etc.) to names.
  - names:
      - -N
    argument: ""
    description: Don't print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic'' instead of ``nic.ddn.mil''.
  - names:
      - -#
      - --number
    argument: ""
    description: Print an optional packet number at the beginning of the line.
  - names:
      - -O
      - --no-optimize
    argument: ""
    description: Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.
  - names:
      - -p
      - --no-promiscuous-mode
    argument: ""
    description: Don't  put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p' cannot be used as an abbreviation for `ether host {local-hw-addr} or ether broadcast'.
  - names:
      - -Q
      - --direction
    argument: direction
    description: Choose send/receive direction direction for which packets should be captured. Possible values are `in', `out' and `inout'. Not available on all platforms.
  - names:
      - -q
    argument: ""
    description: Quick (quiet?) output.  Print less protocol information so output lines are shorter.
  - names:
      - -r
    argument: file
    description: Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-''.
  - names:
      - -S
      - --absolute-tcp-sequence-numbers
    argument: ""
    description: Print absolute, rather than relative, TCP sequence numbers.
  - names:
      - -s
      - --snapshot-length
    argument: snaplen
    description: Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in  the  output with  ``[|proto]'', where proto is the name of the protocol level at which the truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.  This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you're interested in.  Setting snaplen to 0 sets it to the default of 262144, for backwards compatibility with recent older versions of tcpdump.
  - names:
      - -T
    argument: type
    description: Force packets selected by "expression" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common  Address  Redundancy  Protocol),  cnfp  (Cisco  NetFlow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP/1.0 inside PGM/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-Time Applications protocol),  rtcp  (Real-Time  Applications control  protocol),  snmp  (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board), zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).
  - names:
      - -t
    argument: ""
    description: Don't print a timestamp on each dump line.
  - names:
      - -tt
    argument: ""
    description: Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.
  - names:
      - -ttt
    argument: ""
    description: Print a delta (micro-second resolution) between current and previous line on each dump line.
  - names:
      - -tttt
    argument: ""
    description: Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.
  - names:
      - -ttttt
    argument: ""
    description: Print a delta (micro-second resolution) between current and first line on each dump line.
  - names:
      - -u
    argument: ""
    description: Print undecoded NFS handles.
  - names:
      - -U
      - --packet-buffered
    argument: ""
    description: If  the  -w option is not specified, make the printed packet output ``packet-buffered''; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than, when not writing to a terminal, being written only when the output buffer fills.
  - names:
      - -v
    argument: ""
    description: When  parsing  and  printing,  produce  (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity checks such as verifying the IP and ICMP header checksum.
  - names:
      - -vv
    argument: ""
    description: Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.
  - names:
      - -vvv
    argument: ""
    description: Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.
  - names:
      - -V
    argument: file
    description: Read a list of filenames from file. Standard input is used if file is ``-''.
  - names:
      - -w
    argument: file
    description: Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-''.
  - names:
      - -W
    argument: ""
    description: Used  in  conjunction  with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a 'rotating' buffer.  In addition, it will name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.
  - names:
      - -x
    argument: ""
    description: When  parsing  and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.  Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding  bytes will also be printed when the higher layer packet is shorter than the required padding.
  - names:
      - -xx
    argument: ""
    description: When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.
  - names:
      - -X
    argument: ""
    description: When  parsing  and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.
  - names:
      - -XX
    argument: ""
    description: When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.
  - names:
      - -y
      - --linktype
    argument: datalinktype
    description: Set the data link type to use while capturing packets to datalinktype.
  - names:
      - -z
    argument: postrotate-command
    description: Used in conjunction with the -C or -G options, this will make tcpdump run " postrotate-command file " where file is the savefile being closed after  each  rotation. For example, specifying -z gzip or -z bzip2 will compress each savefile using gzip or bzip2.
  - names:
      - -Z
      - --relinquish-privileges
    argument: user
    description: If tcpdump is running as root, after opening the capture device or input savefile, change the user ID to user and the group ID to the primary group of user.
