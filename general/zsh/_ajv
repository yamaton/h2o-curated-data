#compdef _ajv ajv

# Auto-generated with h2o

    function _ajv_validate {
        _arguments \
            '-s[JSON schema to validate against (required)]':file:_files \
            '-d[to be validated (required)]':file:_files \
            '-r[referenced schema(s)]':file:_files \
            '-m[meta schema(s)]':file:_files \
            '-c[custom keywords/formats definitions]':file:_files \
            '--spec[JSON schema specification to use]' \
            '--errors[error reporting format ("js" by default)]' \
            '--changes[log changes in data after validation ("no" by default)]' \
            '--strict[disable strict mode]' \
            '--strict-tuples[unconstrained tuples]' \
            '--strict-types[union or unspecified types]' \
            '--allow-matching-properties[allow "properties" matching patterns in "patternProperties"]' \
            '--allow-union-types[allow union type keyword]' \
            '--validate-formats[disable format validation]' \
            '--data[use $data references]' \
            '--all-errors[collect all errors]' \
            '--verbose[include schema and data in errors]' \
            '--comment[log schema "$comment"s]' \
            '--inline-refs[referenced schemas compilation mode]' \
            '--remove-additional[remove additional properties]' \
            '--use-defaults[replace missing properties/items with the values from default keyword]' \
            '--coerce-types[change type of data to match type keyword]' \
            '--multiple-of-precision[pass integer number]' \
            '--messages[do not include text messages in errors]' \
            '--loop-required[max size of "required to compile to expression (rather than to loop)]' \
            '--loop-enum[max size of "enum" to compile to expression (rather than to loop)]' \
            '--own-properties[only validate own properties (not relevant for JSON, but can have effect for JavaScript objects)]' \
            '--code.es5[generate ES5 code]' \
            '--code.lines[generate multi-line code]' \
            '--code.optimize[code optimization]' \
            "*: :_files"

    }

    function _ajv_compile {
        _arguments \
            '-s[JSON schema to validate against (required)]':file:_files \
            '-r[referenced schema(s)]':file:_files \
            '-m[meta schema(s)]':file:_files \
            '-c[custom keywords/formats definitions]':file:_files \
            '-o[output file for compiled validation function]':file:_files \
            '--spec[JSON schema specification to use]' \
            '--strict[disable strict mode]' \
            '--strict-tuples[unconstrained tuples]' \
            '--strict-types[union or unspecified types]' \
            '--allow-matching-properties[allow "properties" matching patterns in "patternProperties"]' \
            '--allow-union-types[allow union type keyword]' \
            '--validate-formats[disable format validation]' \
            '--data[use $data references]' \
            '--all-errors[collect all errors]' \
            '--verbose[include schema and data in errors]' \
            '--comment[log schema "$comment"s]' \
            '--inline-refs[referenced schemas compilation mode]' \
            '--remove-additional[remove additional properties]' \
            '--use-defaults[replace missing properties/items with the values from default keyword]' \
            '--coerce-types[change type of data to match type keyword]' \
            '--multiple-of-precision[pass integer number]' \
            '--messages[do not include text messages in errors]' \
            '--loop-required[max size of "required to compile to expression (rather than to loop)]' \
            '--loop-enum[max size of "enum" to compile to expression (rather than to loop)]' \
            '--own-properties[only validate own properties (not relevant for JSON, but can have effect for JavaScript objects)]' \
            '--code.es5[generate ES5 code]' \
            '--code.lines[generate multi-line code]' \
            '--code.optimize[code optimization]' \
            "*: :_files"

    }

    function _ajv_migrate {
        _arguments \
            '-s[JSON schema(s) to migrate to draft-07 or draft-2019-09]':file:_files \
            '-o[output file for migrated schema (only allowed for a single schema)]':file:_files \
            '--spec[JSON schema specification to use]' \
            '--indent[indentation in migrated schema JSON file, 4 by default]' \
            '--validate-schema[skip schema validation]' \
            "*: :_files"

    }

    function _ajv_test {
        _arguments \
            '-s[JSON schema to validate against (required)]':file:_files \
            '-d[to be validated (required)]':file:_files \
            '-r[referenced schema(s)]':file:_files \
            '-m[meta schema(s)]':file:_files \
            '-c[custom keywords/formats definitions]':file:_files \
            {--valid,--invalid}'[data file(s) must be valid/invalid for this command to succeed]' \
            '--spec[JSON schema specification to use]' \
            '--errors[js JavaScript object (default) json JSON format line JSON single line text text message]' \
            '--strict[disable strict mode]' \
            '--strict-tuples[unconstrained tuples]' \
            '--strict-types[union or unspecified types]' \
            '--allow-matching-properties[allow "properties" matching patterns in "patternProperties"]' \
            '--allow-union-types[allow union type keyword]' \
            '--validate-formats[disable format validation]' \
            '--data[use $data references]' \
            '--all-errors[collect all errors]' \
            '--verbose[include schema and data in errors]' \
            '--comment[log schema "$comment"s]' \
            '--inline-refs[referenced schemas compilation mode]' \
            '--remove-additional[remove additional properties]' \
            '--use-defaults[replace missing properties/items with the values from default keyword]' \
            '--coerce-types[change type of data to match type keyword]' \
            '--multiple-of-precision[pass integer number]' \
            '--messages[do not include text messages in errors]' \
            '--loop-required[max size of "required to compile to expression (rather than to loop)]' \
            '--loop-enum[max size of "enum" to compile to expression (rather than to loop)]' \
            '--own-properties[only validate own properties (not relevant for JSON, but can have effect for JavaScript objects)]' \
            '--code.es5[generate ES5 code]' \
            '--code.lines[generate multi-line code]' \
            '--code.optimize[code optimization]' \
            "*: :_files"

    }

    function _ajv_help {
        _arguments \
            "*: :_files"

    }


function _ajv {
    local line state

    function _commands {
        local -a commands
        commands=(
            'validate:Validate data file(s) against schema'
            'compile:Compile schema(s)'
            'migrate:Migrate schema(s) to draft-07 or draft-2019-09'
            'test:Test data validation result'
            'help:Show help'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--spec[JSON schema specification to use]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (validate)
            _ajv_validate
            ;;

        (compile)
            _ajv_compile
            ;;

        (migrate)
            _ajv_migrate
            ;;

        (test)
            _ajv_test
            ;;

        (help)
            _ajv_help
            ;;

        esac
        ;;
     esac

}

