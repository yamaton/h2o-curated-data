#compdef _ansible-test ansible-test

# Auto-generated with h2o

    function _ansible-test_coverage {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            "*: :_files"

    }

    function _ansible-test_env {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--show[show environment on stdout]' \
            '--dump[dump environment to disk]' \
            '--list-files[list files on stdout]' \
            '--timeout[timeout for future ansible-test commands (0 clears)]' \
            "*: :_files"

    }

    function _ansible-test_shell {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--raw[direct to shell with no setup]' \
            '--export[export inventory instead of opening a shell]':file:_files \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--controller[configuration for the controller]' \
            '--target-posix[configuration for the target]' \
            "*: :_files"

    }

    function _ansible-test_integration {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--include[include the specified target]' \
            '--exclude[exclude the specified target]' \
            '--require[require the specified target]' \
            '--coverage[analyze code coverage when running tests]' \
            '--coverage-check[only verify code coverage can be enabled]' \
            '--base-branch[base branch used for change detection]' \
            '--changed[limit targets based on changes]' \
            '--untracked[include untracked files]' \
            '--ignore-committed[exclude committed files]' \
            '--ignore-staged[exclude staged files]' \
            '--ignore-unstaged[exclude unstaged files]' \
            '--start-at[start at the specified target]' \
            '--start-at-task[start at the specified task]' \
            '--tags[only run plays and tasks tagged with these values]' \
            '--skip-tags[only run plays and tasks whose tags do not match these values]' \
            '--diff[show diff output]' \
            '--allow-destructive[allow destructive tests]' \
            '--allow-root[allow tests requiring root when not root]' \
            '--allow-disabled[allow tests which have been marked as disabled]' \
            '--allow-unstable[allow tests which have been marked as unstable]' \
            '--allow-unstable-changed[allow tests which have been marked as unstable when focused changes are detected]' \
            '--allow-unsupported[allow tests which have been marked as unsupported]' \
            '--retry-on-error[retry failed test with increased verbosity]' \
            '--continue-on-error[continue after failed test]' \
            '--debug-strategy[run test playbooks using the debug strategy]' \
            '--changed-all-target[target to run when all tests are needed]' \
            '--changed-all-mode[include/exclude behavior with --changed-all-target: default, include, exclude]' \
            '--list-targets[list matching targets instead of running tests]' \
            '--no-temp-workdir[do not run tests from a temporary directory (use only for verifying broken tests)]' \
            '--no-temp-unicode[avoid unicode characters in temporary directory (use only for verifying broken tests)]' \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--controller[configuration for the controller]' \
            '--target[configuration for the target]' \
            "*: :_files"

    }

    function _ansible-test_network-integration {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--include[include the specified target]' \
            '--exclude[exclude the specified target]' \
            '--require[require the specified target]' \
            '--coverage[analyze code coverage when running tests]' \
            '--coverage-check[only verify code coverage can be enabled]' \
            '--base-branch[base branch used for change detection]' \
            '--changed[limit targets based on changes]' \
            '--untracked[include untracked files]' \
            '--ignore-committed[exclude committed files]' \
            '--ignore-staged[exclude staged files]' \
            '--ignore-unstaged[exclude unstaged files]' \
            '--start-at[start at the specified target]' \
            '--start-at-task[start at the specified task]' \
            '--tags[only run plays and tasks tagged with these values]' \
            '--skip-tags[only run plays and tasks whose tags do not match these values]' \
            '--diff[show diff output]' \
            '--allow-destructive[allow destructive tests]' \
            '--allow-root[allow tests requiring root when not root]' \
            '--allow-disabled[allow tests which have been marked as disabled]' \
            '--allow-unstable[allow tests which have been marked as unstable]' \
            '--allow-unstable-changed[allow tests which have been marked as unstable when focused changes are detected]' \
            '--allow-unsupported[allow tests which have been marked as unsupported]' \
            '--retry-on-error[retry failed test with increased verbosity]' \
            '--continue-on-error[continue after failed test]' \
            '--debug-strategy[run test playbooks using the debug strategy]' \
            '--changed-all-target[target to run when all tests are needed]' \
            '--changed-all-mode[include/exclude behavior with --changed-all-target: default, include, exclude]' \
            '--list-targets[list matching targets instead of running tests]' \
            '--no-temp-workdir[do not run tests from a temporary directory (use only for verifying broken tests)]' \
            '--no-temp-unicode[avoid unicode characters in temporary directory (use only for verifying broken tests)]' \
            '--testcase[limit a test to a specified testcase]' \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--platform[network platform/version]' \
            '--platform-collection[collection used to test platform]' \
            '--platform-connection[connection used to test platform]' \
            '--inventory[path to inventory used for tests]':file:_files \
            '--controller[configuration for the controller]' \
            '--target[configuration for the target(s)]' \
            "*: :_files"

    }

    function _ansible-test_windows-integration {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--include[include the specified target]' \
            '--exclude[exclude the specified target]' \
            '--require[require the specified target]' \
            '--coverage[analyze code coverage when running tests]' \
            '--coverage-check[only verify code coverage can be enabled]' \
            '--base-branch[base branch used for change detection]' \
            '--changed[limit targets based on changes]' \
            '--untracked[include untracked files]' \
            '--ignore-committed[exclude committed files]' \
            '--ignore-staged[exclude staged files]' \
            '--ignore-unstaged[exclude unstaged files]' \
            '--start-at[start at the specified target]' \
            '--start-at-task[start at the specified task]' \
            '--tags[only run plays and tasks tagged with these values]' \
            '--skip-tags[only run plays and tasks whose tags do not match these values]' \
            '--diff[show diff output]' \
            '--allow-destructive[allow destructive tests]' \
            '--allow-root[allow tests requiring root when not root]' \
            '--allow-disabled[allow tests which have been marked as disabled]' \
            '--allow-unstable[allow tests which have been marked as unstable]' \
            '--allow-unstable-changed[allow tests which have been marked as unstable when focused changes are detected]' \
            '--allow-unsupported[allow tests which have been marked as unsupported]' \
            '--retry-on-error[retry failed test with increased verbosity]' \
            '--continue-on-error[continue after failed test]' \
            '--debug-strategy[run test playbooks using the debug strategy]' \
            '--changed-all-target[target to run when all tests are needed]' \
            '--changed-all-mode[include/exclude behavior with --changed-all-target: default, include, exclude]' \
            '--list-targets[list matching targets instead of running tests]' \
            '--no-temp-workdir[do not run tests from a temporary directory (use only for verifying broken tests)]' \
            '--no-temp-unicode[avoid unicode characters in temporary directory (use only for verifying broken tests)]' \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--windows[windows version]' \
            '--inventory[path to inventory used for tests]':file:_files \
            '--controller[configuration for the controller]' \
            '--target[configuration for the target(s)]' \
            "*: :_files"

    }

    function _ansible-test_sanity {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--include[include the specified target]' \
            '--exclude[exclude the specified target]' \
            '--require[require the specified target]' \
            '--coverage[analyze code coverage when running tests]' \
            '--coverage-check[only verify code coverage can be enabled]' \
            '--base-branch[base branch used for change detection]' \
            '--changed[limit targets based on changes]' \
            '--untracked[include untracked files]' \
            '--ignore-committed[exclude committed files]' \
            '--ignore-staged[exclude staged files]' \
            '--ignore-unstaged[exclude unstaged files]' \
            '--test[tests to run]' \
            '--skip-test[tests to skip]' \
            '--allow-disabled[allow tests to run which are disabled by default]' \
            '--list-tests[list available tests]' \
            '--enable-optional-errors[enable optional errors]' \
            '--lint[write lint output to stdout, everything else stderr]' \
            '--junit[write test failures to junit xml files]' \
            '--failure-ok[exit successfully on failed tests after saving results]' \
            '--prime-venvs[prepare virtual environments without running tests]' \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--controller[configuration for the controller]' \
            '--target-python[configuration for the target python interpreter(s)]' \
            "*: :_files"

    }

    function _ansible-test_units {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-e,--explain}'[explain commands that would be executed]' \
            {-v,--verbose}'[display more output]' \
            '--color[generate color output: yes, no, auto]' \
            '--debug[run ansible commands in debug mode]' \
            '--truncate[truncate some long output (0=disabled) (default: auto)]' \
            '--no-redact[show sensitive values in output]' \
            '--include[include the specified target]' \
            '--exclude[exclude the specified target]' \
            '--require[require the specified target]' \
            '--coverage[analyze code coverage when running tests]' \
            '--coverage-check[only verify code coverage can be enabled]' \
            '--base-branch[base branch used for change detection]' \
            '--changed[limit targets based on changes]' \
            '--untracked[include untracked files]' \
            '--ignore-committed[exclude committed files]' \
            '--ignore-staged[exclude staged files]' \
            '--ignore-unstaged[exclude unstaged files]' \
            '--collect-only[collect tests but do not execute them]' \
            '--num-workers[number of workers to use (default: auto)]' \
            '--requirements[install command requirements]' \
            '--docker-network[run using the specified network]' \
            '--docker-terminate[terminate the container: always, never, success (default: always)]' \
            '--prime-containers[download containers without running tests]' \
            '--python[python version: 2.7, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11]' \
            '--python-interpreter[path to the python interpreter]':file:_files \
            '--local[run from the local environment]' \
            '--venv[run from a virtual environment]' \
            '--venv-system-site-packages[enable system site packages]' \
            '--docker[run from a docker container]' \
            '--docker-privileged[run docker container in privileged mode]' \
            '--docker-seccomp[set seccomp confinement for the test container: default, unconfined]' \
            '--docker-memory[memory limit for docker in bytes]' \
            '--controller[configuration for the controller]' \
            '--target-python[configuration for the target python interpreter(s)]' \
            "*: :_files"

    }


function _ansible-test {
    local line state

    function _commands {
        local -a commands
        commands=(
            'coverage:code coverage management and reporting'
            'env:show information about the test environment'
            'shell:open an interactive shell'
            'integration:posix integration tests'
            'network-integration:network integration tests'
            'windows-integration:windows integration tests'
            'sanity:sanity tests'
            'units:unit tests'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        '--version[show program'\''s version number and exit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (coverage)
            _ansible-test_coverage
            ;;

        (env)
            _ansible-test_env
            ;;

        (shell)
            _ansible-test_shell
            ;;

        (integration)
            _ansible-test_integration
            ;;

        (network-integration)
            _ansible-test_network-integration
            ;;

        (windows-integration)
            _ansible-test_windows-integration
            ;;

        (sanity)
            _ansible-test_sanity
            ;;

        (units)
            _ansible-test_units
            ;;

        esac
        ;;
     esac

}

