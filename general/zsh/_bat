#compdef _bat bat

# Generated with h2o 0.1.18


function _bat {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '(-A --show-all)'{-A,--show-all}'[Show non-printable characters like space, tab or newline. This option can also be used to print binary files. Use '\''--tabs'\'' to control the width of the tab-placeholders.]' \
        '(-p --plain)'{-p,--plain}'[Only show plain style, no decorations. This is an alias for '\''--style=plain'\''. When '\''-p'\'' is used twice ('\''-pp'\''), it also disables automatic paging (alias for '\''--style=plain --pager=never'\'').]' \
        '(-l --language)'{-l,--language}'[Explicitly set the language for syntax highlighting. The language can be specified as a name (like '\''C++'\'' or '\''LaTeX'\'') or possible file extension (like '\''cpp'\'', '\''hpp'\'' or '\''md'\''). Use '\''--list-languages'\'' to show all supported language names and file extensions.]' \
        '(-H --highlight-line)'{-H,--highlight-line}'[Highlight the specified line ranges with a different background color For example:]' \
        '--file-name[Specify the name to display for a file. Useful when piping data to bat from STDIN when bat does not otherwise know the filename. Note that the provided file name is also used for syntax detection.]' \
        '(-d --diff)'{-d,--diff}'[Only show lines that have been added/removed/modified with respect to the Git index. Use --diff-context=N to control how much context you want to see.]' \
        '--diff-context[Include N lines of context around added/removed/modified lines when using '\''--diff'\''.]' \
        '--tabs[Set the tab width to T spaces. Use a width of 0 to pass tabs through directly]' \
        '--wrap[Specify the text-wrapping mode (*auto*, never, character). The '\''--terminal-width'\'' option can be used in addition to control the output width.]' \
        '--terminal-width[Explicitly set the width of the terminal instead of determining it automatically. If prefixed with '\''+'\'' or '\''-'\'', the value will be treated as an offset to the actual terminal width. See also: '\''--wrap'\''.]' \
        '(-n --number)'{-n,--number}'[Only show line numbers, no other decorations. This is an alias for '\''--style=numbers'\'']' \
        '--color[Specify when to use colored output. The automatic mode only enables colors if an interactive terminal is detected - colors are automatically disabled if the output goes to a pipe. Possible values: *auto*, never, always.]' \
        '--italic-text[Specify when to use ANSI sequences for italic text in the output. Possible values: always, *never*.]' \
        '--decorations[Specify when to use the decorations that have been specified via '\''--style'\''. The automatic mode only enables decorations if an interactive terminal is detected. Possible values: *auto*, never, always.]' \
        '(-f --force-colorization)'{-f,--force-colorization}'[Alias for '\''--decorations=always --color=always'\''. This is useful if the output of bat is piped to another program, but you want to keep the colorization/decorations.]' \
        '--paging[Specify when to use the pager. To disable the pager, use --paging=never'\'' or its alias,'\''-P'\''. To disable the pager permanently, set BAT_PAGER to an empty string. To control which pager is used, see the '\''--pager'\'' option. Possible values: *auto*, never, always.]' \
        '--pager[Determine which pager is used. This option will override the PAGER and BAT_PAGER environment variables. The default pager is '\''less'\''. To control when the pager is used, see the '\''--paging'\'' option. Example: '\''--pager "less -RF"'\''.]' \
        '(-m --map-syntax)'{-m,--map-syntax}'[Map a glob pattern to an existing syntax name. The glob pattern is matched on the full path and the filename. For example, to highlight *.build files with the Python syntax, use -m '\''*.build:Python'\''. To highlight files named '\''.myignore'\'' with the Git Ignore syntax, use -m '\''.myignore:Git Ignore'\''. Note that the right-hand side is the *name* of the syntax, not a file extension.]' \
        '--theme[Set the theme for syntax highlighting. Use '\''--list-themes'\'' to see all available themes. To set a default theme, add the '\''--theme="..."'\'' option to the configuration file or export the BAT_THEME environment variable (e.g.: export BAT_THEME="...").]' \
        '--list-themes[Display a list of supported themes for syntax highlighting.]' \
        '--style[Configure which elements (line numbers, file headers, grid borders, Git modifications, ..) to display in addition to the file contents. The argument is a comma-separated list of components to display (e.g. '\''numbers,changes,grid'\'') or a pre-defined style ('\''full'\''). To set a default style, add the '\''--style=".."'\'' option to the configuration file or export the BAT_STYLE environment variable (e.g.: export BAT_STYLE="..").]' \
        '(-r --line-range)'{-r,--line-range}'[Only print the specified range of lines for each file. For example:]' \
        '(-L --list-languages)'{-L,--list-languages}'[Display a list of supported languages for syntax highlighting.]' \
        '(-u --unbuffered)'{-u,--unbuffered}'[This option exists for POSIX-compliance reasons ('\''u'\'' is for '\''unbuffered'\''). The output is always unbuffered - this option is simply ignored.]' \
        '--diagnostic[Show diagnostic information for bug reports.]' \
        '(-h --help)'{-h,--help}'[Print this help message.]' \
        '(-V --version)'{-V,--version}'[Show version information.]' \
        '1: :_commands' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

