#compdef _bazel bazel

# Generated with h2o 0.1.18

    function _bazel_analyze-profile {
        _arguments \
            '--profile[By default, a summary of the analysis is printed. For post-processing]:file:_files' \
            '--distdir[--\[no\]experimental_repository_cache_hardlinks (a boolean; default: "false")]:file:_files' \
            '--repo_env[Options that affect how strictly Bazel enforces valid build inputs (rule definitions, flag combinations, etc.):]' \
            '--experimental_verify_repository_rules[This option affects semantics of the Starlark language or the build API accessible to BUILD files, .bzl files, or WORKSPACE files.:]' \
            '--bes_keywords[--\[no\]bes_lifecycle_events (a boolean; default: "true")]' \
            '--dump[(text or raw; default: see description)]' \
            '(--dump -d)'{--dump,-d}'[(text or raw; default: see description)]' \
            '--dump[(text or raw; default   see description)]' \
            '--experimental_profile_additional_tasks[--\[no\]experimental_profile_cpu_usage (a boolean; default: "false")]:file:_files' \
            '--ui_event_filters[Options specifying or altering a generic input to a Bazel command that does not fall into other categories.:]' \
            '--all_incompatible_changes[--build_metadata (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--config[--curses (yes, no or auto; default: "auto")]' \
            '--override_repository[--\[no\]progress_in_terminal_title (a boolean; default: "false")]:file:_files' \
            "*: :_files"

    }

    function _bazel_aquery {
        _arguments \
            "*: :_files"

    }

    function _bazel_build {
        _arguments \
            "*: :_files"

    }

    function _bazel_canonicalize-flags {
        _arguments \
            '--distdir[--\[no\]experimental_repository_cache_hardlinks (a boolean; default: "false")]:file:_files' \
            '--loading_phase_threads[eg. "auto", "HOST_CPUS*.5"; default: "auto")]' \
            '--loading_phase_threads[eg. "auto", "HOST_CPUS*.5"; default   "auto")]' \
            '--remote_download_minimal[--remote_download_outputs (all, minimal or toplevel; default: "all")]' \
            '--remote_download_toplevel[--repo_env (a '\''name=value'\'' assignment with an optional value part; may be used multiple times)]' \
            '--noorder_results[--null]' \
            '--order_results[--output (a string; default: "label")]' \
            '--bes_keywords[--\[no\]bes_lifecycle_events (a boolean; default: "true")]' \
            '--experimental_profile_additional_tasks[--\[no\]experimental_profile_cpu_usage (a boolean; default: "false")]:file:_files' \
            '--remote_cache_header[--remote_default_exec_properties (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--remote_downloader_header[--remote_exec_header (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--remote_header[--remote_instance_name (a string; default: "")]' \
            '--all_incompatible_changes[--build_metadata (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--config[--curses (yes, no or auto; default: "auto")]' \
            '--override_repository[--package_path (colon-separated list of options; default: "%workspace%")]:file:_files' \
            "*: :_files"

    }

    function _bazel_clean {
        _arguments \
            "*: :_files"

    }

    function _bazel_coverage {
        _arguments \
            "*: :_files"

    }

    function _bazel_cquery {
        _arguments \
            "*: :_files"

    }

    function _bazel_dump {
        _arguments \
            '--distdir[--\[no\]experimental_repository_cache_hardlinks (a boolean; default: "false")]:file:_files' \
            '--bes_keywords[--\[no\]bes_lifecycle_events (a boolean; default: "true")]' \
            '--experimental_profile_additional_tasks[--\[no\]experimental_profile_cpu_usage (a boolean; default: "false")]:file:_files' \
            '--all_incompatible_changes[--build_metadata (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--config[--curses (yes, no or auto; default: "auto")]' \
            '--override_repository[--\[no\]progress_in_terminal_title (a boolean; default: "false")]:file:_files' \
            "*: :_files"

    }

    function _bazel_fetch {
        _arguments \
            "*: :_files"

    }

    function _bazel_help {
        _arguments \
            '--distdir[--\[no\]experimental_repository_cache_hardlinks (a boolean; default: "false")]:file:_files' \
            '--bes_keywords[--\[no\]bes_lifecycle_events (a boolean; default: "true")]' \
            '--experimental_profile_additional_tasks[--\[no\]experimental_profile_cpu_usage (a boolean; default: "false")]:file:_files' \
            '--long[--memory_profile_stable_heap_parameters (two integers, separated by a comma; default: "1,0")]' \
            '(--long -l)'{--long,-l}'[--memory_profile_stable_heap_parameters (two integers, separated by a comma; default: "1,0")]' \
            '--short[--\[no\]slim_profile (a boolean; default: "true")]' \
            '--all_incompatible_changes[--build_metadata (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--config[--curses (yes, no or auto; default: "auto")]' \
            '--override_repository[--\[no\]progress_in_terminal_title (a boolean; default: "false")]:file:_files' \
            "*: :_files"

    }

    function _bazel_info {
        _arguments \
            "*: :_files"

    }

    function _bazel_license {
        _arguments \
            '--distdir[--\[no\]experimental_repository_cache_hardlinks (a boolean; default: "false")]:file:_files' \
            '--bes_keywords[--\[no\]bes_lifecycle_events (a boolean; default: "true")]' \
            '--experimental_profile_additional_tasks[--\[no\]experimental_profile_cpu_usage (a boolean; default: "false")]:file:_files' \
            '--all_incompatible_changes[--build_metadata (a '\''name=value'\'' assignment; may be used multiple times)]' \
            '--config[--curses (yes, no or auto; default: "auto")]' \
            '--override_repository[--\[no\]progress_in_terminal_title (a boolean; default: "false")]:file:_files' \
            "*: :_files"

    }

    function _bazel_mobile-install {
        _arguments \
            "*: :_files"

    }

    function _bazel_query {
        _arguments \
            "*: :_files"

    }

    function _bazel_run {
        _arguments \
            "*: :_files"

    }

    function _bazel_shutdown {
        _arguments \
            "*: :_files"

    }

    function _bazel_sync {
        _arguments \
            "*: :_files"

    }

    function _bazel_test {
        _arguments \
            "*: :_files"

    }

    function _bazel_version {
        _arguments \
            "*: :_files"

    }


function _bazel {
    local line state

    function _commands {
        local -a commands
        commands=(
            'analyze-profile:Analyzes build profile data.'
            'aquery:Analyzes the given targets and queries the action graph.'
            'build:Builds the specified targets.'
            'canonicalize-flags:Canonicalizes a list of bazel options.'
            'clean:Removes output files and optionally stops the server.'
            'coverage:Generates code coverage report for specified test targets.'
            'cquery:Loads, analyzes, and queries the specified targets w/ configurations.'
            'dump:Dumps the internal state of the bazel server process.'
            'fetch:Fetches external repositories that are prerequisites to the targets.'
            'help:Prints help for commands, or the index.'
            'info:Displays runtime info about the bazel server.'
            'license:Prints the license of this software.'
            'mobile-install:Installs targets to mobile devices.'
            'query:Executes a dependency graph query.'
            'run:Runs the specified target.'
            'shutdown:Stops the bazel server.'
            'sync:Syncs all repositories specified in the workspace file'
            'test:Builds and runs the specified test targets.'
            'version:Prints version information for bazel.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (analyze-profile)
            _bazel_analyze-profile
            ;;

        (aquery)
            _bazel_aquery
            ;;

        (build)
            _bazel_build
            ;;

        (canonicalize-flags)
            _bazel_canonicalize-flags
            ;;

        (clean)
            _bazel_clean
            ;;

        (coverage)
            _bazel_coverage
            ;;

        (cquery)
            _bazel_cquery
            ;;

        (dump)
            _bazel_dump
            ;;

        (fetch)
            _bazel_fetch
            ;;

        (help)
            _bazel_help
            ;;

        (info)
            _bazel_info
            ;;

        (license)
            _bazel_license
            ;;

        (mobile-install)
            _bazel_mobile-install
            ;;

        (query)
            _bazel_query
            ;;

        (run)
            _bazel_run
            ;;

        (shutdown)
            _bazel_shutdown
            ;;

        (sync)
            _bazel_sync
            ;;

        (test)
            _bazel_test
            ;;

        (version)
            _bazel_version
            ;;

        esac
        ;;
     esac

}

