#compdef _bikeshed bikeshed

# Auto-generated with h2o

    function _bikeshed_spec {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--debug[Switches on some debugging tools. Don'\''t use for production!]' \
            '--gh-token[GitHub access token. Useful to avoid API rate limits. Generate tokens: https://github.com/settings/tokens.]' \
            '--byos[Bring-Your-Own-Spec: turns off all the Bikeshed auto-niceties, so you can piecemeal its features into your existing doc instead. Experimental, let me know if things get crashy or weird.]' \
            {-l,--line-numbers}'[Hacky support for outputting line numbers on all error messages. Disables output, as this is hacky and might mess up your source.]' \
            "*: :_files"

    }

    function _bikeshed_echidna {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--gh-token[GitHub access token. Useful to avoid API rate limits. Generate tokens: https://github.com/settings/tokens.]' \
            '--u[W3C username.]' \
            '--p[W3C password.]' \
            '--decision[URL recording the decision to publish.]' \
            '--editorial[Flags update as editorial.]' \
            '--cc[Comma-separated list of email addresses to ping with the publication status when complete.]' \
            '--additional-directories[Directories to bundle in the tar file. Defaults to examples/, diagrams/, and images/.]':file:_files \
            '--self-contained[The spec is self-contained, do not bundle any extra directories in the tar file.]' \
            "*: :_files"

    }

    function _bikeshed_watch {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--gh-token[GitHub access token. Useful to avoid API rate limits. Generate tokens: https://github.com/settings/tokens.]' \
            '--gh-token[GitHub access token. Useful to avoid API rate limits. Generate tokens: https://github.com/settings/tokens.]' \
            '--byos[Bring-Your-Own-Spec: turns off all the Bikeshed auto-niceties, so you can piecemeal its features into your existing doc instead. Experimental, let me know if things get crashy or weird.]' \
            "*: :_files"

    }

    function _bikeshed_serve {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--port[Specify the port to serve it over.]' \
            '--localhost[Only allow connections from localhost.]' \
            '--gh-token[GitHub access token. Useful to avoid API rate limits. Generate tokens: https://github.com/settings/tokens.]' \
            '--byos[Bring-Your-Own-Spec: turns off all the Bikeshed auto-niceties, so you can piecemeal its features into your existing doc instead. Experimental, let me know if things get crashy or weird.]' \
            "*: :_files"

    }

    function _bikeshed_update {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--skip-manifest[Forces Bikeshed to do a full update manually, rather than using the manifest to get the preprocessed update (which can be several minutes old).]' \
            '--anchors[Download crossref anchor data.]' \
            '--backrefs[Download link backref data.]' \
            '--biblio[Download biblio data.]' \
            '--boilerplate[Download boilerplate files.]' \
            '--caniuse[Download Can I Use... data.]' \
            '--mdn[Download MDN Spec Links... data.]' \
            '--link-defaults[Download link default data.]' \
            '--test-suites[Download test suite data.]' \
            '--languages[Download language/translation data.]' \
            '--wpt[Download web-platform-tests data.]' \
            "*: :_files"

    }

    function _bikeshed_issues-list {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '-t[Output example Issues List template.]' \
            "*: :_files"

    }

    function _bikeshed_debug {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--print-exports[Prints those terms that will be exported for cross-ref purposes.]' \
            '--print-refs-for[Prints the ref data for a given link text.]' \
            '--print[Runs the specified code and prints it.]' \
            '--print-json[Runs the specified code and prints it as formatted JSON.]' \
            '--refresh-data[Clobbers the readonly data files with the mutable ones.]' \
            '--print-metadata[Prints all the metadata parsed for the spec as JSON. Top-level keys are presented in increasing order of importance; second-level keys are in order of first appearance in each context.]' \
            "*: :_files"

    }

    function _bikeshed_refs {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--text[--type LINKTYPE]' \
            '--for[--spec SPEC]' \
            '--status[--exact Only search for the exact text provided; don'\''t apply Bikeshed'\''s automatic conjugation help for plurals/etc.]' \
            '--latest-only[Apply Bikeshed'\''s logic for only returning the latest version of a given ref when it exists in multiple levels of a spec.]' \
            "*: :_files"

    }

    function _bikeshed_source {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--big-text[Finds HTML comments containing '\''Big Text: foo'\'' and turns them into comments containing '\''foo'\'' in big text.]' \
            "*: :_files"

    }

    function _bikeshed_test {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--rebase[Rebase the specified files.]' \
            '--manual-only[Skip testing the real-world files in the repo, and only run the manually-written ones.]' \
            "*: :_files"

    }

    function _bikeshed_profile {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--root[Prune the graph to start with the specified root node.]' \
            '--leaf[Prune the graph to only show ancestors of the specified leaf node.]' \
            '--svg[Save the graph to a specified SVG file, rather than outputting with xdot immediately.]':file:_files \
            "*: :_files"

    }

    function _bikeshed_wpt {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--template[Outputs a skeleton WPT file for you to start with.]' \
            "*: :_files"

    }


function _bikeshed {
    local line state

    function _commands {
        local -a commands
        commands=(
            'spec:Process a spec source file into a valid output file.'
            'echidna:Process a spec source file into a valid output file and publish it according to certain automatic protocols.'
            'watch:Process a spec source file into a valid output file, automatically rebuilding when it changes.'
            'serve:Identical to '\''watch'\'', but also serves the folder on localhost.'
            'update:Update supporting files (those in /spec-data).'
            'issues-list:Process a plain-text issues file into HTML. Call with no args to see an example input text.'
            'debug:Run various debugging commands.'
            'refs:Search Bikeshed'\''s ref database.'
            'source:Tools for formatting the *source* document.'
            'test:Tools for running Bikeshed'\''s testsuite.'
            'profile:Profiling Bikeshed. Needs graphviz, gprof2dot, and xdot installed.'
            'wpt:Tools for writing Web Platform Tests.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        '--version[show program'\''s version number and exit]' \
        {-q,--quiet}'[Silences one level of message, least-important first.]' \
        {-s,--silent}'[Shorthand for '\''as many -q as you need to shut it up'\'']' \
        {-f,--force}'[Force the preprocessor to run to completion; fatal errors don'\''t stop processing.]' \
        {-d,--dry-run}'[Prevents the processor from actually saving anything to disk, but otherwise fully runs.]' \
        {-a,--ascii-only}'[Force all Bikeshed messages to be ASCII-only.]' \
        '--print[Print mode. Options are '\''plain'\'' (just text), '\''console'\'' (colored with console color codes), '\''markup'\'', and '\''json'\''. Defaults to '\''console'\''.]' \
        '--die-on[Determines what sorts of errors cause Bikeshed to die (quit immediately with an error status code). Default is '\''fatal'\''; the -f flag is a shorthand for '\''nothing'\'']' \
        '--allow-nonlocal-files[Allows Bikeshed to see/include files from folders higher than the one your source document is in.]' \
        '--allow-execute[Allow some features to execute arbitrary code from outside the Bikeshed codebase.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (spec)
            _bikeshed_spec
            ;;

        (echidna)
            _bikeshed_echidna
            ;;

        (watch)
            _bikeshed_watch
            ;;

        (serve)
            _bikeshed_serve
            ;;

        (update)
            _bikeshed_update
            ;;

        (issues-list)
            _bikeshed_issues-list
            ;;

        (debug)
            _bikeshed_debug
            ;;

        (refs)
            _bikeshed_refs
            ;;

        (source)
            _bikeshed_source
            ;;

        (test)
            _bikeshed_test
            ;;

        (profile)
            _bikeshed_profile
            ;;

        (wpt)
            _bikeshed_wpt
            ;;

        esac
        ;;
     esac

}

