#compdef _borg borg

# Auto-generated with h2o

    function _borg_benchmark {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_break-lock {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_check {
        _arguments \
            '--repository-only[only perform repository checks]' \
            '--archives-only[only perform archives checks]' \
            '--verify-data[perform cryptographic archive data integrity verification (conflicts with ``--repository-only``)]' \
            '--repair[attempt to repair any inconsistencies found]' \
            '--save-space[work slower, but using less space]' \
            '--max-duration[do only a partial repo check for max. SECONDS seconds (Default: unlimited)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            '--sort-by[Comma-separated list of sorting keys; valid keys are: timestamp, name, id; default is: timestamp]' \
            '--first[consider first N archives after other filters were applied]' \
            '--last[consider last N archives after other filters were applied]' \
            "*: :_files"

    }

    function _borg_compact {
        _arguments \
            '--cleanup-commits[cleanup commit-only 17-byte segment files]' \
            '--threshold[set minimum threshold for saved space in PERCENT (Default: 10)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_config {
        _arguments \
            {-c,--cache}'[get and set values from the repo cache]' \
            {-d,--delete}'[delete the key from the config file]' \
            {-l,--list}'[list the configuration of the repo]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_create {
        _arguments \
            {-n,--dry-run}'[do not create a backup archive]' \
            {-s,--stats}'[print statistics for the created archive]' \
            '--list[output verbose list of items (files, dirs, ...)]' \
            '--filter[only display items with the given status characters (see description)]' \
            '--json[output stats as JSON. Implies ``--stats``.]' \
            '--no-cache-sync[experimental: do not synchronize the cache. Implies not using the files cache.]' \
            '--stdin-name[use NAME in archive for stdin data (default: '\''stdin'\'')]' \
            '--stdin-user[set user USER in archive for stdin data (default: '\''root'\'')]' \
            '--stdin-group[set group GROUP in archive for stdin data (default: '\''root'\'')]' \
            '--stdin-mode[set mode to M in archive for stdin data (default: 0660)]' \
            '--content-from-command[interpret PATH as command and store its stdout. See also section Reading from stdin below.]' \
            '--paths-from-stdin[read DELIM-separated list of paths to backup from stdin. Will not recurse into directories.]' \
            '--paths-from-command[interpret PATH as command and treat its output as ``--paths-from-stdin``]' \
            '--paths-delimiter[set path delimiter for ``--paths-from-stdin`` and ``--paths-from-command`` (default: \n)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            '--exclude-caches[exclude directories that contain a CACHEDIR.TAG file (http://www.bford.info/cachedir/spec.html)]' \
            '--exclude-if-present[exclude directories that are tagged by containing a filesystem object with the given NAME]' \
            '--keep-exclude-tags[if tag objects are specified with ``--exclude-if-present``, don'\''t omit the tag objects themselves from the backup archive]' \
            '--exclude-nodump[exclude files flagged NODUMP]' \
            {-x,--one-file-system}'[stay in the same file system and do not store mount points of other file systems. This might behave different from your expectations, see the docs.]' \
            '--numeric-owner[deprecated, use ``--numeric-ids`` instead]' \
            '--numeric-ids[only store numeric user and group identifiers]' \
            '--noatime[do not store atime into archive]' \
            '--atime[do store atime into archive]' \
            '--noctime[do not store ctime into archive]' \
            '--nobirthtime[do not store birthtime (creation date) into archive]' \
            '--nobsdflags[deprecated, use ``--noflags`` instead]' \
            '--noflags[do not read and store flags (e.g. NODUMP, IMMUTABLE) into archive]' \
            '--noacls[do not read and store ACLs into archive]' \
            '--noxattrs[do not read and store xattrs into archive]' \
            '--sparse[detect sparse holes in input (supported only by fixed chunker)]' \
            '--files-cache[operate files cache in MODE. default: ctime,size,inode]' \
            '--read-special[open and read block and char device files as well as FIFOs as if they were regular files. Also follows symlinks pointing to these kinds of files.]' \
            '--comment[add a comment text to the archive]' \
            '--timestamp[manually specify the archive creation date/time (UTC, yyyy-mm-ddThh:mm:ss format). Alternatively, give a reference file/directory.]' \
            {-c,--checkpoint-interval}'[write checkpoint every SECONDS seconds (Default: 1800)]' \
            '--chunker-params[specify the chunker parameters (ALGO, CHUNK_MIN_EXP, CHUNK_MAX_EXP, HASH_MASK_BITS, HASH_WINDOW_SIZE). default: buzhash,19,23,21,4095]' \
            {-C,--compression}'[select compression algorithm, see the output of the "borg help compression" command for details.]' \
            "*: :_files"

    }

    function _borg_debug {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_delete {
        _arguments \
            {-n,--dry-run}'[do not change repository]' \
            '--list[output verbose list of archives]' \
            {-s,--stats}'[print statistics for the deleted archive]' \
            '--cache-only[delete only the local cache for the given repository]' \
            '--force[force deletion of corrupted archives, use ``--force --force`` in case ``--force`` does not work.]' \
            '--keep-security-info[keep the local security info when deleting a repository]' \
            '--save-space[work slower, but using less space]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            '--sort-by[Comma-separated list of sorting keys; valid keys are: timestamp, name, id; default is: timestamp]' \
            '--first[consider first N archives after other filters were applied]' \
            '--last[consider last N archives after other filters were applied]' \
            "*: :_files"

    }

    function _borg_diff {
        _arguments \
            '--numeric-owner[deprecated, use ``--numeric-ids`` instead]' \
            '--numeric-ids[only consider numeric user and group identifiers]' \
            '--same-chunker-params[Override check of chunker parameters.]' \
            '--sort[Sort the output lines by file path.]' \
            '--json-lines[Format output as JSON Lines.]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            "*: :_files"

    }

    function _borg_export-tar {
        _arguments \
            '--tar-filter[filter program to pipe data through]' \
            '--list[output verbose list of items (files, dirs, ...)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            '--strip-components[Remove the specified number of leading path elements. Paths with fewer elements will be silently skipped.]' \
            "*: :_files"

    }

    function _borg_extract {
        _arguments \
            '--list[output verbose list of items (files, dirs, ...)]' \
            {-n,--dry-run}'[do not actually change any files]' \
            '--numeric-owner[deprecated, use ``--numeric-ids`` instead]' \
            '--numeric-ids[only obey numeric user and group identifiers]' \
            '--nobsdflags[deprecated, use ``--noflags`` instead]' \
            '--noflags[do not extract/set flags (e.g. NODUMP, IMMUTABLE)]' \
            '--noacls[do not extract/set ACLs]' \
            '--noxattrs[do not extract/set xattrs]' \
            '--stdout[write all extracted data to stdout]' \
            '--sparse[create holes in output sparse file from all-zero chunks]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            '--strip-components[Remove the specified number of leading path elements. Paths with fewer elements will be silently skipped.]' \
            "*: :_files"

    }

    function _borg_info {
        _arguments \
            '--json[format output as JSON]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            '--sort-by[Comma-separated list of sorting keys; valid keys are: timestamp, name, id; default is: timestamp]' \
            '--first[consider first N archives after other filters were applied]' \
            '--last[consider last N archives after other filters were applied]' \
            "*: :_files"

    }

    function _borg_init {
        _arguments \
            {-e,--encryption}'[select encryption key mode **(required)**]' \
            '--append-only[create an append-only mode repository. Note that this only affects the low level structure of the repository, and running `delete` or `prune` will still be allowed. See :ref:`append_only_mode` in Additional Notes for more details.]' \
            '--storage-quota[Set storage quota of the new repository (e.g. 5G, 1.5T). Default: no quota.]' \
            '--make-parent-dirs[create the parent directories of the repository directory, if they are missing.]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_key {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_list {
        _arguments \
            '--consider-checkpoints[Show checkpoint archives in the repository contents list (default: hidden).]' \
            '--short[only print file/directory names, nothing else]' \
            '--format[specify format for file or archive listing (default for files: "{mode} {user:6} {group:6} {size:8} {mtime} {path}{extra}{NL}"; for archives: "{archive:<36} {time} \[{id}\]{NL}")]' \
            '--json[Only valid for listing repository contents. Format output as JSON. The form of ``--format`` is ignored, but keys used in it are added to the JSON output. Some keys are always present. Note: JSON can only represent text. A "barchive" key is therefore not available.]' \
            '--json-lines[Only valid for listing archive contents. Format output as JSON Lines. The form of ``--format`` is ignored, but keys used in it are added to the JSON output. Some keys are always present. Note: JSON can only represent text. A "bpath" key is therefore not available.]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            '--sort-by[Comma-separated list of sorting keys; valid keys are: timestamp, name, id; default is: timestamp]' \
            '--first[consider first N archives after other filters were applied]' \
            '--last[consider last N archives after other filters were applied]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            "*: :_files"

    }

    function _borg_mount {
        _arguments \
            '--consider-checkpoints[Show checkpoint archives in the repository contents list (default: hidden).]' \
            {-f,--foreground}'[stay in foreground, do not daemonize]' \
            '-o[Extra mount options]' \
            '--numeric-owner[deprecated, use ``--numeric-ids`` instead]' \
            '--numeric-ids[use numeric user and group identifiers from archive(s)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            '--sort-by[Comma-separated list of sorting keys; valid keys are: timestamp, name, id; default is: timestamp]' \
            '--first[consider first N archives after other filters were applied]' \
            '--last[consider last N archives after other filters were applied]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            '--strip-components[Remove the specified number of leading path elements. Paths with fewer elements will be silently skipped.]' \
            "*: :_files"

    }

    function _borg_prune {
        _arguments \
            {-n,--dry-run}'[do not change repository]' \
            '--force[force pruning of corrupted archives, use ``--force --force`` in case ``--force`` does not work.]' \
            {-s,--stats}'[print statistics for the deleted archive]' \
            '--list[output verbose list of archives it keeps/prunes]' \
            '--keep-within[keep all archives within this time interval]' \
            {--keep-last,--keep-secondly}'[number of secondly archives to keep]' \
            '--keep-minutely[number of minutely archives to keep]' \
            {-H,--keep-hourly}'[number of hourly archives to keep]' \
            {-d,--keep-daily}'[number of daily archives to keep]' \
            {-w,--keep-weekly}'[number of weekly archives to keep]' \
            {-m,--keep-monthly}'[number of monthly archives to keep]' \
            {-y,--keep-yearly}'[number of yearly archives to keep]' \
            '--save-space[work slower, but using less space]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-P,--prefix}'[only consider archive names starting with this prefix.]' \
            {-a,--glob-archives}'[only consider archive names matching the glob. sh: rules apply, see "borg help patterns". ``--prefix`` and ``--glob-archives`` are mutually exclusive.]' \
            "*: :_files"

    }

    function _borg_recreate {
        _arguments \
            '--list[output verbose list of items (files, dirs, ...)]' \
            '--filter[only display items with the given status characters (listed in borg create --help)]' \
            {-n,--dry-run}'[do not change anything]' \
            {-s,--stats}'[print statistics at end]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            {-e,--exclude}'[exclude paths matching PATTERN]' \
            '--exclude-from[read exclude patterns from EXCLUDEFILE, one per line]':file:_files \
            '--pattern[include/exclude paths matching PATTERN]' \
            '--patterns-from[read include/exclude patterns from PATTERNFILE, one per line]':file:_files \
            '--exclude-caches[exclude directories that contain a CACHEDIR.TAG file (http://www.bford.info/cachedir/spec.html)]' \
            '--exclude-if-present[exclude directories that are tagged by containing a filesystem object with the given NAME]' \
            '--keep-exclude-tags[if tag objects are specified with ``--exclude-if-present``, don'\''t omit the tag objects themselves from the backup archive]' \
            '--target[create a new archive with the name ARCHIVE, do not replace existing archive (only applies for a single archive)]' \
            {-c,--checkpoint-interval}'[write checkpoint every SECONDS seconds (Default: 1800)]' \
            '--comment[add a comment text to the archive]' \
            '--timestamp[manually specify the archive creation date/time (UTC, yyyy-mm-ddThh:mm:ss format). alternatively, give a reference file/directory.]' \
            {-C,--compression}'[select compression algorithm, see the output of the "borg help compression" command for details.]' \
            '--recompress[recompress data chunks according to `MODE` and ``--compression``. Possible modes are `if-different`: recompress if current compression is with a different compression algorithm (the level is not considered); `always`: recompress even if current compression is with the same compression algorithm (use this to change the compression level); and `never`: do not recompress (use this option to explicitly prevent recompression). If no MODE is given, `if-different` will be used. Not passing --recompress is equivalent to "--recompress never".]' \
            '--chunker-params[specify the chunker parameters (ALGO, CHUNK_MIN_EXP, CHUNK_MAX_EXP, HASH_MASK_BITS, HASH_WINDOW_SIZE) or `default` to use the current defaults. default: buzhash,19,23,21,4095]' \
            "*: :_files"

    }

    function _borg_rename {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_serve {
        _arguments \
            '--restrict-to-path[restrict repository access to PATH. Can be specified multiple times to allow the client access to several directories. Access to all sub-directories is granted implicitly; PATH doesn'\''t need to directly point to a repository.]':file:_files \
            '--restrict-to-repository[restrict repository access. Only the repository located at PATH (no sub-directories are considered) is accessible. Can be specified multiple times to allow the client access to several repositories. Unlike ``--restrict-to-path`` sub-directories are not accessible; PATH needs to directly point at a repository location. PATH may be an empty directory or the last element of PATH may not exist, in which case the client may initialize a repository there.]':file:_files \
            '--append-only[only allow appending to repository segment files. Note that this only affects the low level structure of the repository, and running `delete` or `prune` will still be allowed. See :ref:`append_only_mode` in Additional Notes for more details.]' \
            '--storage-quota[Override storage quota of the repository (e.g. 5G, 1.5T). When a new repository is initialized, sets the storage quota on the new repository as well. Default: no quota.]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_umount {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_upgrade {
        _arguments \
            {-n,--dry-run}'[do not change repository]' \
            '--inplace[rewrite repository in place, with no chance of going back to older versions of the repository.]' \
            '--force[Force upgrade]' \
            '--tam[Enable manifest authentication (in key and cache) (Borg 1.0.9 and later).]' \
            '--disable-tam[Disable manifest authentication (in key and cache).]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_with-lock {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            "*: :_files"

    }

    function _borg_import-tar {
        _arguments \
            '--tar-filter[filter program to pipe data through]' \
            {-s,--stats}'[print statistics for the created archive]' \
            '--list[output verbose list of items (files, dirs, ...)]' \
            '--filter[only display items with the given status characters]' \
            '--json[output stats as JSON (implies --stats)]' \
            {-h,--help}'[show this help message and exit]' \
            '--critical[work on log level CRITICAL]' \
            '--error[work on log level ERROR]' \
            '--warning[work on log level WARNING (default)]' \
            {--info,-v,--verbose}'[work on log level INFO]' \
            '--debug[enable debug output, work on log level DEBUG]' \
            '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
            {-p,--progress}'[show progress information]' \
            '--iec[format using IEC units (1KiB = 1024B)]' \
            '--log-json[Output one JSON object per log line instead of formatted text.]' \
            '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
            '--bypass-lock[Bypass locking mechanism]' \
            '--show-version[show/log the borg version]' \
            '--show-rc[show/log the return code (rc)]' \
            '--umask[set umask to M (local only, default: 0077)]' \
            '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
            '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
            '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
            '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
            '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
            '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
            '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
            '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
            '--comment[add a comment text to the archive]' \
            '--timestamp[manually specify the archive creation date/time (UTC, yyyy-mm-ddThh:mm:ss format). alternatively, give a reference file/directory.]' \
            {-c,--checkpoint-interval}'[write checkpoint every SECONDS seconds (Default: 1800)]' \
            '--chunker-params[specify the chunker parameters (ALGO, CHUNK_MIN_EXP, CHUNK_MAX_EXP, HASH_MASK_BITS, HASH_WINDOW_SIZE). default: buzhash,19,23,21,4095]' \
            {-C,--compression}'[select compression algorithm, see the output of the "borg help compression" command for details.]' \
            "*: :_files"

    }


function _borg {
    local line state

    function _commands {
        local -a commands
        commands=(
            'benchmark:benchmark command'
            'break-lock:break repository and cache locks'
            'check:verify repository'
            'compact:compact segment files / free space in repo'
            'config:get and set configuration values'
            'create:create backup'
            'debug:debugging command (not intended for normal use)'
            'delete:delete archive'
            'diff:find differences in archive contents'
            'export-tar:create tarball from archive'
            'extract:extract archive contents'
            'info:show repository or archive information'
            'init:initialize empty repository'
            'key:manage repository key'
            'list:list archive or repository contents'
            'mount:mount repository'
            'prune:prune archives'
            'recreate:Re-create archives'
            'rename:rename archive'
            'serve:start repository server process'
            'umount:umount repository'
            'upgrade:upgrade repository format'
            'with-lock:run user command with lock held'
            'import-tar:Create a backup archive from a tarball'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-V,--version}'[show version number and exit]' \
        {-h,--help}'[show this help message and exit]' \
        '--critical[work on log level CRITICAL]' \
        '--error[work on log level ERROR]' \
        '--warning[work on log level WARNING (default)]' \
        {--info,-v,--verbose}'[work on log level INFO]' \
        '--debug[enable debug output, work on log level DEBUG]' \
        '--debug-topic[enable TOPIC debugging (can be specified multiple times). The logger path is borg.debug.<TOPIC> if TOPIC is not fully qualified.]' \
        {-p,--progress}'[show progress information]' \
        '--iec[format using IEC units (1KiB = 1024B)]' \
        '--log-json[Output one JSON object per log line instead of formatted text.]' \
        '--lock-wait[wait at most SECONDS for acquiring a repository/cache lock (default: 1).]' \
        '--bypass-lock[Bypass locking mechanism]' \
        '--show-version[show/log the borg version]' \
        '--show-rc[show/log the return code (rc)]' \
        '--umask[set umask to M (local only, default: 0077)]' \
        '--remote-path[use PATH as borg executable on the remote (default: "borg")]':file:_files \
        '--remote-ratelimit[deprecated, use ``--upload-ratelimit`` instead]' \
        '--upload-ratelimit[set network upload rate limit in kiByte/s (default: 0=unlimited)]' \
        '--remote-buffer[deprecated, use ``--upload-buffer`` instead]' \
        '--upload-buffer[set network upload buffer size in MiB. (default: 0=no buffer)]' \
        '--consider-part-files[treat part files like normal files (e.g. to list/extract them)]' \
        '--debug-profile[Write execution profile in Borg format into FILE. For local use a Python-compatible file can be generated by suffixing FILE with ".pyprof".]':file:_files \
        '--rsh[Use this command to connect to the '\''borg serve'\'' process (default: '\''ssh'\'')]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (benchmark)
            _borg_benchmark
            ;;

        (break-lock)
            _borg_break-lock
            ;;

        (check)
            _borg_check
            ;;

        (compact)
            _borg_compact
            ;;

        (config)
            _borg_config
            ;;

        (create)
            _borg_create
            ;;

        (debug)
            _borg_debug
            ;;

        (delete)
            _borg_delete
            ;;

        (diff)
            _borg_diff
            ;;

        (export-tar)
            _borg_export-tar
            ;;

        (extract)
            _borg_extract
            ;;

        (info)
            _borg_info
            ;;

        (init)
            _borg_init
            ;;

        (key)
            _borg_key
            ;;

        (list)
            _borg_list
            ;;

        (mount)
            _borg_mount
            ;;

        (prune)
            _borg_prune
            ;;

        (recreate)
            _borg_recreate
            ;;

        (rename)
            _borg_rename
            ;;

        (serve)
            _borg_serve
            ;;

        (umount)
            _borg_umount
            ;;

        (upgrade)
            _borg_upgrade
            ;;

        (with-lock)
            _borg_with-lock
            ;;

        (import-tar)
            _borg_import-tar
            ;;

        esac
        ;;
     esac

}

