#compdef _brew brew

# Auto-generated with h2o

    function _brew_install {
        _arguments \
            {-d,--debug}'[If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.]' \
            {-f,--force}'[Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).]' \
            {-v,--verbose}'[Print the verification and postinstall steps.]' \
            '--formula[Treat all named arguments as formulae.]' \
            '--env[Disabled other than for internal Homebrew use.]' \
            '--ignore-dependencies[An unsupported Homebrew development flag to skip installing any dependencies of any kind. If the dependencies are not already present, the formula will have issues. If you´re not developing Homebrew, consider adjusting your PATH rather than using this flag.]' \
            '--only-dependencies[Install the dependencies with specified options but do not install the formula itself.]' \
            '--cc[Attempt to compile using the specified compiler, which should be the name of the compiler´s executable, e.g. gcc-7 for GCC 7. In order to use LLVM´s clang, specify llvm_clang. To use the Apple-provided clang, specify clang. This option will only accept compilers that are provided by Homebrew or bundled with macOS. Please do not file issues if you encounter errors while using this option.]' \
            {-s,--build-from-source}'[Compile formula from source even if a bottle is provided. Dependencies will still be installed from bottles if they are available.]' \
            '--force-bottle[Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.]' \
            '--include-test[Install testing dependencies required to run brew test formula.]' \
            '--HEAD[If formula defines it, install the HEAD version, aka. main, trunk, unstable, master.]' \
            '--fetch-HEAD[Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository´s HEAD will only be checked for updates when a new stable or development version has been released.]' \
            '--keep-tmp[Retain the temporary files created during installation.]' \
            '--build-bottle[Prepare the formula for eventual bottling during installation, skipping any post-install steps.]' \
            '--bottle-arch[Optimise bottles for the specified architecture rather than the oldest architecture supported by the version of macOS the bottles are built on.]' \
            '--display-times[Print install times for each formula at the end of the run.]' \
            {-i,--interactive}'[Download and patch formula, then open a shell. This allows the user to run ./configure --help and otherwise determine how to turn the software package into a Homebrew package.]' \
            {-g,--git}'[Create a Git repository, useful for creating patches to the software.]' \
            '--cask[Treat all named arguments as casks.]' \
            '--binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--no-binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--require-sha[Require all casks to have a checksum.]' \
            '--quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--no-quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--skip-cask-deps[Skip installing cask dependencies.]' \
            "*: :_files"

    }

    function _brew_uninstall {
        _arguments \
            {-f,--force}'[Delete all installed versions of formula. Uninstall even if cask is not installed, overwrite existing files and ignore errors when removing files.]' \
            '--zap[Remove all files associated with a cask. May remove files which are shared between applications.]' \
            '--ignore-dependencies[Don´t fail uninstall, even if formula is a dependency of any installed formulae.]' \
            '--formula[Treat all named arguments as formulae.]' \
            '--cask[Treat all named arguments as casks.]' \
            "*: :_files"

    }

    function _brew_list {
        _arguments \
            '--formula[List only formulae, or treat all named arguments as formulae.]' \
            '--cask[List only casks, or treat all named arguments as casks.]' \
            '--full-name[Print formulae with fully-qualified names. Unless --full-name, --versions or --pinned are passed, other options (i.e. -1, -l, -r and -t) are passed to ls(1) which produces the actual output.]' \
            '--versions[Show the version number for installed formulae, or only the specified formulae if formula are provided.]' \
            '--multiple[Only show formulae with multiple versions installed.]' \
            '--pinned[List only pinned formulae, or only the specified (pinned) formulae if formula are provided. See also pin, unpin.]' \
            '-1[Force output to be one entry per line. This is the default when output is not to a terminal.]' \
            '-l[List formulae and/or casks in long format. Has no effect when a formula or cask name is passed as an argument.]' \
            '-r[Reverse the order of the formulae and/or casks sort to list the oldest entries first. Has no effect when a formula or cask name is passed as an argument.]' \
            '-t[Sort formulae and/or casks by time modified, listing most recently modified first. Has no effect when a formula or cask name is passed as an argument.]' \
            "*: :_files"

    }

    function _brew_search {
        _arguments \
            '--formula[Search online and locally for formulae.]' \
            '--cask[Search online and locally for casks.]' \
            '--desc[Search for formulae with a description matching text and casks with a name matching text.]' \
            '--pull-request[Search for GitHub pull requests containing text.]' \
            '--open[Search for only open GitHub pull requests.]' \
            '--closed[Search for only closed GitHub pull requests.]' \
            '--macports[Search for text in the given package manager´s list.]' \
            '--fink[Search for text in the given package manager´s list.]' \
            '--opensuse[Search for text in the given package manager´s list.]' \
            '--fedora[Search for text in the given package manager´s list.]' \
            '--debian[Search for text in the given package manager´s list.]' \
            '--ubuntu[Search for text in the given package manager´s list.]' \
            "*: :_files"

    }

    function _brew_analytics {
        _arguments \
            "*: :_files"

    }

    function _brew_autoremove {
        _arguments \
            {-n,--dry-run}'[List what would be uninstalled, but do not actually uninstall anything.]' \
            "*: :_files"

    }

    function _brew_cask {
        _arguments \
            "*: :_files"

    }

    function _brew_cleanup {
        _arguments \
            '--prune[Remove all cache files older than specified days. If you want to remove everything, use --prune=all.]' \
            {-n,--dry-run}'[Show what would be removed, but do not actually remove anything.]' \
            '-s[Scrub the cache, including downloads for even the latest versions. Note downloads for any installed formulae or casks will still not be deleted. If you want to delete those too: rm -rf "$(brew --cache)"]' \
            '--prune-prefix[Only prune the symlinks and directories from the prefix and remove no other files.]' \
            "*: :_files"

    }

    function _brew_commands {
        _arguments \
            {-q,--quiet}'[List only the names of commands without category headers.]' \
            '--include-aliases[Include aliases of internal commands.]' \
            "*: :_files"

    }

    function _brew_completions {
        _arguments \
            "*: :_files"

    }

    function _brew_config {
        _arguments \
            "*: :_files"

    }

    function _brew_deps {
        _arguments \
            '-n[Sort dependencies in topological order.]' \
            '--1[Only show dependencies one level down, instead of recursing.]' \
            '--union[Show the union of dependencies for multiple formula, instead of the intersection.]' \
            '--full-name[List dependencies by their full name.]' \
            '--include-build[Include :build dependencies for formula.]' \
            '--include-optional[Include :optional dependencies for formula.]' \
            '--include-test[Include :test dependencies for formula (non-recursive).]' \
            '--skip-recommended[Skip :recommended dependencies for formula.]' \
            '--include-requirements[Include requirements in addition to dependencies for formula.]' \
            '--tree[Show dependencies as a tree. When given multiple formula arguments, show individual trees for each formula.]' \
            '--annotate[Mark any build, test, optional, or recommended dependencies as such in the output.]' \
            '--installed[List dependencies for formulae that are currently installed. If formula is specified, list only its dependencies that are currently installed.]' \
            '--all[List dependencies for all available formulae.]' \
            '--for-each[Switch into the mode used by the --all option, but only list dependencies for each provided formula, one formula per line. This is used for debugging the --installed/--all display mode.]' \
            '--formula[Treat all named arguments as formulae.]' \
            '--cask[Treat all named arguments as casks.]' \
            "*: :_files"

    }

    function _brew_desc {
        _arguments \
            {-s,--search}'[Search both names and descriptions for text. If text is flanked by slashes, it is interpreted as a regular expression.]' \
            {-n,--name}'[Search just names for text. If text is flanked by slashes, it is interpreted as a regular expression.]' \
            {-d,--description}'[Search just descriptions for text. If text is flanked by slashes, it is interpreted as a regular expression.]' \
            "*: :_files"

    }

    function _brew_doctor {
        _arguments \
            '--list-checks[List all audit methods, which can be run individually if provided as arguments.]' \
            {-D,--audit-debug}'[Enable debugging and profiling of audit methods.]' \
            "*: :_files"

    }

    function _brew_fetch {
        _arguments \
            '--HEAD[Fetch HEAD version instead of stable version.]' \
            {-f,--force}'[Remove a previously cached version and re-fetch.]' \
            {-v,--verbose}'[Do a verbose VCS checkout, if the URL represents a VCS. This is useful for seeing if an existing VCS cache has been updated.]' \
            '--retry[Retry if downloading fails or re-download if the checksum of a previously cached version no longer matches.]' \
            '--deps[Also download dependencies for any listed formula.]' \
            {-s,--build-from-source}'[Download source packages rather than a bottle.]' \
            '--build-bottle[Download source packages (for eventual bottling) rather than a bottle.]' \
            '--force-bottle[Download a bottle if it exists for the current or newest version of macOS, even if it would not be used during installation.]' \
            '--quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--no-quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--formula[Treat all named arguments as formulae.]' \
            '--cask[Treat all named arguments as casks.]' \
            "*: :_files"

    }

    function _brew_formulae {
        _arguments \
            "*: :_files"

    }

    function _brew_gist-logs {
        _arguments \
            '--with-hostname[Include the hostname in the Gist.]' \
            {-n,--new-issue}'[Automatically create a new issue in the appropriate GitHub repository after creating the Gist.]' \
            {-p,--private}'[The Gist will be marked private and will not appear in listings but will be accessible with its link.]' \
            "*: :_files"

    }

    function _brew_homepage {
        _arguments \
            '--formula[Treat all named arguments as formulae.]' \
            '--cask[Treat all named arguments as casks.]' \
            "*: :_files"

    }

    function _brew_info {
        _arguments \
            '--analytics[List global Homebrew analytics data or, if specified, installation and build error data for formula (provided neither HOMEBREW_NO_ANALYTICS nor HOMEBREW_NO_GITHUB_API are set).]' \
            '--days[How many days of analytics data to retrieve. The value for days must be 30, 90 or 365. The default is 30.]' \
            '--category[Which type of analytics data to retrieve. The value for category must be install, install-on-request or build-error; cask-install or os-version may be specified if formula is not. The default is install.]' \
            '--github[Open the GitHub source page for formula in a browser. To view formula history locally: brew log -p formula]' \
            '--json[Print a JSON representation. Currently the default value for version is v1 for formula. For formula and cask use v2. See the docs for examples of using the JSON output: https://docs.brew.sh/Querying-Brew]' \
            '--installed[Print JSON of formulae that are currently installed.]' \
            '--all[Print JSON of all available formulae.]' \
            {-v,--verbose}'[Show more verbose analytics data for formula.]' \
            '--formula[Treat all named arguments as formulae.]' \
            '--cask[Treat all named arguments as casks.]' \
            "*: :_files"

    }

    function _brew_leaves {
        _arguments \
            {-r,--installed-on-request}'[Only list leaves that were manually installed.]' \
            {-p,--installed-as-dependency}'[Only list leaves that were installed as dependencies.]' \
            "*: :_files"

    }

    function _brew_link {
        _arguments \
            '--overwrite[Delete files that already exist in the prefix while linking.]' \
            {-n,--dry-run}'[List files which would be linked or deleted by brew link --overwrite without actually linking or deleting any files.]' \
            {-f,--force}'[Allow keg-only formulae to be linked.]' \
            '--HEAD[Link the HEAD version of the formula if it is installed.]' \
            "*: :_files"

    }

    function _brew_log {
        _arguments \
            {-p,--patch}'[Also print patch from commit.]' \
            '--stat[Also print diffstat from commit.]' \
            '--oneline[Print only one line per commit.]' \
            '-1[Print only one commit.]' \
            {-n,--max-count}'[Print only a specified number of commits.]' \
            "*: :_files"

    }

    function _brew_migrate {
        _arguments \
            {-f,--force}'[Treat installed formula and provided formula as if they are from the same taps and migrate them anyway.]' \
            "*: :_files"

    }

    function _brew_missing {
        _arguments \
            '--hide[Act as if none of the specified hidden are installed. hidden should be a comma-separated list of formulae.]' \
            "*: :_files"

    }

    function _brew_options {
        _arguments \
            '--compact[Show all options on a single line separated by spaces.]' \
            '--installed[Show options for formulae that are currently installed.]' \
            '--all[Show options for all available formulae.]' \
            '--command[Show options for the specified command.]' \
            "*: :_files"

    }

    function _brew_outdated {
        _arguments \
            {-q,--quiet}'[List only the names of outdated kegs (takes precedence over --verbose).]' \
            {-v,--verbose}'[Include detailed version information.]' \
            '--formula[List only outdated formulae.]' \
            '--cask[List only outdated casks.]' \
            '--json[Print output in JSON format. There are two versions: v1 and v2. v1 is deprecated and is currently the default if no version is specified. v2 prints outdated formulae and casks.]' \
            '--fetch-HEAD[Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository´s HEAD will only be checked for updates when a new stable or development version has been released.]' \
            '--greedy[Print outdated casks with auto_updates or version :latest.]' \
            "*: :_files"

    }

    function _brew_pin {
        _arguments \
            "*: :_files"

    }

    function _brew_pin {
        _arguments \
            "*: :_files"

    }

    function _brew_readall {
        _arguments \
            '--aliases[Verify any alias symlinks in each tap.]' \
            '--syntax[Syntax-check all of Homebrew´s Ruby files (if no <tap> is passed).]' \
            "*: :_files"

    }

    function _brew_reinstall {
        _arguments \
            {-d,--debug}'[If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.]' \
            {-f,--force}'[Install without checking for previously installed keg-only or non-migrated versions.]' \
            {-v,--verbose}'[Print the verification and postinstall steps.]' \
            '--formula[Treat all named arguments as formulae.]' \
            {-s,--build-from-source}'[Compile formula from source even if a bottle is available.]' \
            {-i,--interactive}'[Download and patch formula, then open a shell. This allows the user to run ./configure --help and otherwise determine how to turn the software package into a Homebrew package.]' \
            '--force-bottle[Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.]' \
            '--keep-tmp[Retain the temporary files created during installation.]' \
            '--display-times[Print install times for each formula at the end of the run.]' \
            {-g,--git}'[Create a Git repository, useful for creating patches to the software.]' \
            '--cask[Treat all named arguments as casks.]' \
            '--binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--no-binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--require-sha[Require all casks to have a checksum.]' \
            '--quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--no-quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--skip-cask-deps[Skip installing cask dependencies.]' \
            "*: :_files"

    }

    function _brew_shellenv {
        _arguments \
            "*: :_files"

    }

    function _brew_tap-info {
        _arguments \
            '--installed[Show information on each installed tap.]' \
            '--json[Print a JSON representation of tap. Currently the default and only accepted value for version is v1. See the docs for examples of using the JSON output: https://docs.brew.sh/Querying-Brew]' \
            "*: :_files"

    }

    function _brew_tap {
        _arguments \
            '--full[Convert a shallow clone to a full clone without untapping. Taps are only cloned as shallow clones if --shallow was originally passed.]' \
            '--shallow[Fetch tap as a shallow clone rather than a full clone. Useful for continuous integration.]' \
            '--force-auto-update[Auto-update tap even if it is not hosted on GitHub. By default, only taps hosted on GitHub are auto-updated (for performance reasons).]' \
            '--repair[Migrate tapped formulae from symlink-based to directory-based structure.]' \
            '--list-pinned[List all pinned taps.]' \
            "*: :_files"

    }

    function _brew_unlink {
        _arguments \
            {-n,--dry-run}'[List files which would be unlinked without actually unlinking or deleting any files.]' \
            "*: :_files"

    }

    function _brew_unpin {
        _arguments \
            "*: :_files"

    }

    function _brew_untap {
        _arguments \
            {-f,--force}'[Untap even if formulae or casks from this tap are currently installed.]' \
            "*: :_files"

    }

    function _brew_update-reset {
        _arguments \
            "*: :_files"

    }

    function _brew_update {
        _arguments \
            '--merge[Use git merge to apply updates (rather than git rebase).]' \
            '--preinstall[Run on auto-updates (e.g. before brew install). Skips some slower steps.]' \
            {-f,--force}'[Always do a slower, full update check (even if unnecessary).]' \
            "*: :_files"

    }

    function _brew_upgrade {
        _arguments \
            {-d,--debug}'[If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.]' \
            {-f,--force}'[Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).]' \
            {-v,--verbose}'[Print the verification and postinstall steps.]' \
            {-n,--dry-run}'[Show what would be upgraded, but do not actually upgrade anything.]' \
            '--formula[Treat all named arguments as formulae. If no named arguments are specified, upgrade only outdated formulae.]' \
            {-s,--build-from-source}'[Compile formula from source even if a bottle is available.]' \
            {-i,--interactive}'[Download and patch formula, then open a shell. This allows the user to run ./configure --help and otherwise determine how to turn the software package into a Homebrew package.]' \
            '--force-bottle[Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.]' \
            '--fetch-HEAD[Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository´s HEAD will only be checked for updates when a new stable or development version has been released.]' \
            '--ignore-pinned[Set a successful exit status even if pinned formulae are not upgraded.]' \
            '--keep-tmp[Retain the temporary files created during installation.]' \
            '--display-times[Print install times for each formula at the end of the run.]' \
            '--cask[Treat all named arguments as casks. If no named arguments are specified, upgrade only outdated casks.]' \
            '--binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--no-binaries[Disable/enable linking of helper executables (default: enabled).]' \
            '--require-sha[Require all casks to have a checksum.]' \
            '--quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--no-quarantine[Disable/enable quarantining of downloads (default: enabled).]' \
            '--skip-cask-deps[Skip installing cask dependencies.]' \
            '--greedy[Also include casks with auto_updates true or version :latest.]' \
            "*: :_files"

    }

    function _brew_uses {
        _arguments \
            '--recursive[Resolve more than one level of dependencies.]' \
            '--installed[Only list formulae and casks that are currently installed.]' \
            '--include-build[Include all formulae that specify formula as :build type dependency.]' \
            '--include-test[Include all formulae that specify formula as :test type dependency.]' \
            '--include-optional[Include all formulae that specify formula as :optional type dependency.]' \
            '--skip-recommended[Skip all formulae that specify formula as :recommended type dependency.]' \
            '--formula[Include only formulae.]' \
            '--cask[Include only casks.]' \
            "*: :_files"

    }


function _brew {
    local line state

    function _commands {
        local -a commands
        commands=(
            'install:Install a formula or cask. Additional options specific to a formula may be appended to the command.'
            'uninstall:Uninstall a formula or cask.'
            'list:List all installed formulae and casks.'
            'search:Perform a substring search of cask tokens and formula names for text. If text is flanked by slashes, it is interpreted as a regular expression. The search for text is extended online to homebrew/core and homebrew/cask.'
            'analytics:Control Homebrew´s anonymous aggregate user behaviour analytics. Read more at https://docs.brew.sh/Analytics.'
            'autoremove:Uninstall formulae that were only installed as a dependency of another formula and are now no longer needed.'
            'cask:List only casks, or treat all named arguments as casks.'
            'cleanup:Remove stale lock files and outdated downloads for all formulae and casks, and remove old versions of installed formulae. If arguments are specified, only do this for the given formulae and casks. Removes all downloads more than 120 days old. This can be adjusted with HOMEBREW_CLEANUP_MAX_AGE_DAYS.'
            'commands:Show lists of built-in and external commands.'
            'completions:Control whether Homebrew automatically links external tap shell completion files. Read more at https://docs.brew.sh/Shell-Completion .'
            'config:Show Homebrew and system configuration info useful for debugging. If you file a bug report, you will be required to provide this information.'
            'deps:Show dependencies for formula. Additional options specific to formula may be appended to the command. When given multiple formula arguments, show the intersection of dependencies for each formula.'
            'desc:Display formula´s name and one-line description. Formula descriptions are cached; the cache is created on the first search, making that search slower than subsequent ones.'
            'doctor:Check your system for potential problems. Will exit with a non-zero status if any potential problems are found. Please note that these warnings are just used to help the Homebrew maintainers with debugging if you file an issue. If everything you use Homebrew for is working fine: please don´t worry or file an issue; just ignore this.'
            'fetch:Download a bottle (if available) or source packages for formulae and binaries for casks. For files, also print SHA-256 checksums.'
            'formulae:List all locally installable formulae including short names.'
            'gist-logs:Upload logs for a failed build of formula to a new Gist. Presents an error message if no logs are found.'
            'homepage:Open a formula or cask´s homepage in a browser, or open Homebrew´s own homepage if no argument is provided.'
            'info:Display brief statistics for your Homebrew installation.'
            'leaves:List installed formulae that are not dependencies of another installed formula.'
            'link:Symlink all of formula´s installed files into Homebrew´s prefix. This is done automatically when you install formulae but can be useful for DIY installations.'
            'log:Show the git log for formula, or show the log for the Homebrew repository if no formula is provided.'
            'migrate:Migrate renamed packages to new names, where formula are old names of packages.'
            'missing:Check the given formula kegs for missing dependencies. If no formula are provided, check all kegs. Will exit with a non-zero status if any kegs are found to be missing dependencies.'
            'options:Show install options specific to formula.'
            'outdated:List installed casks and formulae that have an updated version available. By default, version information is displayed in interactive shells, and suppressed otherwise.'
            'pin:Pin the specified formula, preventing them from being upgraded when issuing the brew upgrade formula command. See also unpin.'
            'pin:Rerun the post-install steps for formula.'
            'readall:Import all items from the specified tap, or from all installed taps if none is provided. This can be useful for debugging issues across all items when making significant changes to formula.rb, testing the performance of loading all items or checking if any current formulae/casks have Ruby issues.'
            'reinstall:Uninstall and then reinstall a formula or cask using the same options it was originally installed with, plus any appended options specific to a formula.'
            'shellenv:Print export statements. When run in a shell, this installation of Homebrew will be added to your PATH, MANPATH, and INFOPATH.'
            'tap-info:Show detailed information about one or more taps.'
            'tap:Tap a formula repository.'
            'unlink:Remove symlinks for formula from Homebrew´s prefix. This can be useful for temporarily disabling a formula: brew unlink formula && commands && brew link formula'
            'unpin:Unpin formula, allowing them to be upgraded by brew upgrade formula. See also pin.'
            'untap:Remove a tapped formula repository.'
            'update-reset:Fetch and reset Homebrew and all tap repositories (or any specified repository) using git(1) to their latest origin/HEAD.'
            'update:Fetch the newest version of Homebrew and all formulae from GitHub using git(1) and perform any necessary migrations.'
            'upgrade:Upgrade outdated casks and outdated, unpinned formulae using the same options they were originally installed with, plus any appended brew formula options. If cask or formula are specified, upgrade only the given cask or formula kegs (unless they are pinned; see pin, unpin)'
            'uses:Show formulae and casks that specify formula as a dependency; that is, show dependents of formula. When given multiple formula arguments, show the intersection of formulae that use formula. By default, uses shows all formulae and casks that specify formula as a required or recommended dependency for their stable builds.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cache[Display Homebrew´s download cache. See also HOMEBREW_CACHE.]' \
        '--caskroom[Display Homebrew´s Caskroom path.]' \
        '--cellar[Display Homebrew´s Cellar path. Default: $(brew --prefix)/Cellar, or if that directory doesn´t exist, $(brew --repository)/Cellar.]' \
        '--env[Summarise Homebrew´s build environment as a plain list.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (install)
            _brew_install
            ;;

        (uninstall)
            _brew_uninstall
            ;;

        (list)
            _brew_list
            ;;

        (search)
            _brew_search
            ;;

        (analytics)
            _brew_analytics
            ;;

        (autoremove)
            _brew_autoremove
            ;;

        (cask)
            _brew_cask
            ;;

        (cleanup)
            _brew_cleanup
            ;;

        (commands)
            _brew_commands
            ;;

        (completions)
            _brew_completions
            ;;

        (config)
            _brew_config
            ;;

        (deps)
            _brew_deps
            ;;

        (desc)
            _brew_desc
            ;;

        (doctor)
            _brew_doctor
            ;;

        (fetch)
            _brew_fetch
            ;;

        (formulae)
            _brew_formulae
            ;;

        (gist-logs)
            _brew_gist-logs
            ;;

        (homepage)
            _brew_homepage
            ;;

        (info)
            _brew_info
            ;;

        (leaves)
            _brew_leaves
            ;;

        (link)
            _brew_link
            ;;

        (log)
            _brew_log
            ;;

        (migrate)
            _brew_migrate
            ;;

        (missing)
            _brew_missing
            ;;

        (options)
            _brew_options
            ;;

        (outdated)
            _brew_outdated
            ;;

        (pin)
            _brew_pin
            ;;

        (pin)
            _brew_pin
            ;;

        (readall)
            _brew_readall
            ;;

        (reinstall)
            _brew_reinstall
            ;;

        (shellenv)
            _brew_shellenv
            ;;

        (tap-info)
            _brew_tap-info
            ;;

        (tap)
            _brew_tap
            ;;

        (unlink)
            _brew_unlink
            ;;

        (unpin)
            _brew_unpin
            ;;

        (untap)
            _brew_untap
            ;;

        (update-reset)
            _brew_update-reset
            ;;

        (update)
            _brew_update
            ;;

        (upgrade)
            _brew_upgrade
            ;;

        (uses)
            _brew_uses
            ;;

        esac
        ;;
     esac

}

