#compdef _buildah buildah

# Auto-generated with h2o

    function _buildah_add {
        _arguments \
            '--add-history[add an entry for this operation to the image'\''s history. Use BUILDAH_HISTORY environment variable to override. (default false)]' \
            '--chmod[set the access permissions of the destination content]' \
            '--chown[set the user and group ownership of the destination content]' \
            '--contextdir[context directory path]' \
            '--from[use the specified container'\''s or image'\''s root directory as the source root directory]' \
            {-h,--help}'[help for add]' \
            '--ignorefile[path to .dockerignore file]' \
            {-q,--quiet}'[don'\''t output a digest of the newly-added/copied content]' \
            "*: :_files"

    }

    function _buildah_bud {
        _arguments \
            '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
            '--annotation[Set metadata for an image (default \[\])]' \
            '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
            '--authfile[path of the authentication file.]' \
            '--build-arg[argument=value to supply to the builder]' \
            '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
            '--cap-add[add the specified capability when running (default \[\])]' \
            '--cap-drop[drop the specified capability when running (default \[\])]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--cgroup-parent[optional parent cgroup for the container]' \
            '--cni-config-dir[directory of CNI configuration files (default "/etc/cni/net.d")]':file:_files \
            '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
            '--compress[This is legacy option, which has no effect on the image]' \
            '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            '--decryption-key[key needed to decrypt the image]' \
            '--device[Additional devices to be used within containers (default \[\])]' \
            {-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '--dns-option[Set custom DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            {-f,--file}'[pathname or URL of a Dockerfile]':file:_files \
            '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful.]' \
            '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
            '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
            {-h,--help}'[help for bud]' \
            '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
            '--ignorefile[path to an alternate .dockerignore file]' \
            '--iidfile[file to write the image ID to]':file:_files \
            '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
            '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
            '--jobs[how many stages to run in parallel (default 1)]' \
            '--label[Set metadata for an image (default \[\])]' \
            '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override.]' \
            '--logfile[log to file instead of stdout/stderr]':file:_files \
            '--manifest[add the image to the specified manifest list. Creates manifest if it does not exist]' \
            {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
            '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
            '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
            '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
            '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
            '--platform[set the OS/ARCH to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default "linux/amd64")]' \
            '--pull[pull the image from the registry if newer or not present in store, if false, only pull the image if not present (default true)]' \
            '--pull-always[pull the image even if the named image is present in store]' \
            '--pull-never[do not pull the image, use the image present in store if available]' \
            {-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
            '--rm[Remove intermediate containers after a successful build (default true)]' \
            '--runtime[path to an alternate runtime. Use BUILDAH_RUNTIME environment variable to override. (default "crun")]':file:_files \
            '--runtime-flag[add global flags for the container runtime]' \
            '--secret[secret file to expose to the build]' \
            '--security-opt[security options (default \[\])]' \
            '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
            '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
            '--squash[squash newly built layers into a single new layer]' \
            '--stdin[pass stdin into containers]' \
            {-t,--tag}'[tagged name to apply to the built image]' \
            '--target[set the target build stage to build]' \
            '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
            '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
            '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
            '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
            '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
            '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
            '--variant[override the variant of the specified image]' \
            {-v,--volume}'[bind mount a volume into the container]' \
            "*: :_files"

    }

    function _buildah_commit {
        _arguments \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            {-D,--disable-compression}'[don'\''t compress layers (default true)]' \
            '--encrypt-layer[layers to encrypt, 0-indexed layer indices with support for negative indexing (e.g. 0 is the first layer, -1 is the last layer). If not defined, will encrypt all layers if encryption-key flag is specified]' \
            '--encryption-key[key with the encryption protocol to use needed to encrypt the image (e.g. jwe:/path/to/key.pem)]' \
            {-f,--format}'[format of the image manifest and metadata (default "oci")]' \
            {-h,--help}'[help for commit]' \
            '--iidfile[Write the image ID to the file]' \
            '--manifest[create image with as part of the specified manifest list. Creates manifest if it does not exist]' \
            {-q,--quiet}'[don'\''t output progress information when writing images]' \
            '--rm[remove the container and its content after committing it to an image. Default leaves the container and its content in place.]' \
            '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
            '--squash[produce an image with only one layer]' \
            '--timestamp[set created timestamp to epoch seconds to allow for deterministic builds, defaults to current time]' \
            '--tls-verify[Require HTTPS and verify certificates when accessing the registry. TLS verification cannot be used when talking to an insecure registry. (default true)]' \
            "*: :_files"

    }

    function _buildah_config {
        _arguments \
            '--add-history[add an entry for this operation to the image'\''s history. Use BUILDAH_HISTORY environment variable to override. (default false)]' \
            {-a,--annotation}'[add annotation e.g. annotation=value, for the target image (default \[\])]' \
            '--arch[set architecture of the target image]' \
            '--author[set image author contact information]' \
            '--cmd[set the default command to run for containers based on the image]' \
            '--comment[set a comment in the target image]' \
            '--created-by[set description of how the image was created]' \
            '--domainname[set a domain name for containers based on image]' \
            '--entrypoint[set entry point for containers based on image]' \
            {-e,--env}'[add environment variable to be set when running containers based on image (default \[\])]' \
            '--healthcheck[set a healthcheck command for the target image]' \
            '--healthcheck-interval[set the interval between runs of the `healthcheck` command for the target image]' \
            '--healthcheck-retries[set the number of times the `healthcheck` command has to fail]' \
            '--healthcheck-start-period[set the amount of time to wait after starting a container before a failed `healthcheck` command will count as a failure]' \
            '--healthcheck-timeout[set the maximum amount of time to wait for a `healthcheck` command for the target image]' \
            {-h,--help}'[help for config]' \
            '--history-comment[set a comment for the history of the target image]' \
            '--hostname[set a hostname for containers based on image]' \
            {-l,--label}'[add image configuration label e.g. label=value]' \
            '--onbuild[add onbuild command to be run on images based on this image. Only supported on '\''docker'\'' formatted images]' \
            '--os[set operating system of the target image]' \
            {-p,--port}'[add port to expose when running containers based on image (default \[\])]' \
            '--shell[add shell to run in containers]' \
            '--stop-signal[set stop signal for containers based on image]' \
            {-u,--user}'[set default user to run inside containers based on image]' \
            {-v,--volume}'[add default volume path to be created for containers based on image (default \[\])]' \
            '--workingdir[set working directory for containers based on image]':file:_files \
            "*: :_files"

    }

    function _buildah_containers {
        _arguments \
            {-a,--all}'[also list non-buildah containers]' \
            {-f,--filter}'[filter output based on conditions provided]' \
            '--format[pretty-print containers using a Go template]' \
            {-h,--help}'[help for containers]' \
            '--json[output in JSON format]' \
            {-n,--noheading}'[do not print column headings]' \
            '--notruncate[do not truncate output]' \
            {-q,--quiet}'[display only container IDs]' \
            "*: :_files"

    }

    function _buildah_copy {
        _arguments \
            '--add-history[add an entry for this operation to the image'\''s history. Use BUILDAH_HISTORY environment variable to override. (default false)]' \
            '--chmod[set the access permissions of the destination content]' \
            '--chown[set the user and group ownership of the destination content]' \
            '--contextdir[context directory path]' \
            '--from[use the specified container'\''s or image'\''s root directory as the source root directory]' \
            {-h,--help}'[help for copy]' \
            '--ignorefile[path to .dockerignore file]' \
            {-q,--quiet}'[don'\''t output a digest of the newly-added/copied content]' \
            "*: :_files"

    }

    function _buildah_from {
        _arguments \
            '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
            '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cap-add[add the specified capability when running (default \[\])]' \
            '--cap-drop[drop the specified capability when running (default \[\])]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--cgroup-parent[optional parent cgroup for the container]' \
            '--cidfile[write the container ID to the file]' \
            '--cni-config-dir[directory of CNI configuration files (default "/etc/cni/net.d")]':file:_files \
            '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
            '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            '--decryption-key[key needed to decrypt the image]' \
            '--device[Additional devices to be used within containers (default \[\])]' \
            '--dns-option[Set custom DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            {-f,--format}'[format of the image manifest and metadata (default "oci")]' \
            {-h,--help}'[help for from]' \
            '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
            '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
            '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
            {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
            '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--name[name for the working container]' \
            '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
            '--os[prefer OS instead of the running OS when pulling images (default "linux")]' \
            '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
            '--pull[pull the image from the registry if newer or not present in store, if false, only pull the image if not present (default true)]' \
            '--pull-always[pull the image even if the named image is present in store]' \
            '--pull-never[do not pull the image, use the image present in store if available]' \
            {-q,--quiet}'[don'\''t output progress information when pulling images]' \
            '--security-opt[security options (default \[\])]' \
            '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry. TLS verification cannot be used when talking to an insecure registry. (default true)]' \
            '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
            '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
            '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
            '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
            '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
            '--variant[override the variant of the specified image]' \
            {-v,--volume}'[bind mount a volume into the container]' \
            "*: :_files"

    }

    function _buildah_images {
        _arguments \
            {-a,--all}'[show all images, including intermediate images from a build]' \
            '--digests[show digests]' \
            {-f,--filter}'[filter output based on conditions provided]' \
            '--format[pretty-print images using a Go template]' \
            {-h,--help}'[help for images]' \
            '--history[display the image name history]' \
            '--json[output in JSON format]' \
            '--no-trunc[do not truncate output]' \
            {-n,--noheading}'[do not print column headings]' \
            {-q,--quiet}'[display only image IDs]' \
            "*: :_files"

    }

    function _buildah_info {
        _arguments \
            '--format[use format as a Go template to format the output]' \
            {-h,--help}'[help for info]' \
            "*: :_files"

    }

    function _buildah_inspect {
        _arguments \
            {-f,--format}'[use format as a Go template to format the output]' \
            {-h,--help}'[help for inspect]' \
            {-t,--type}'[look at the item of the specified type (container or image) and name (default "container")]' \
            "*: :_files"

    }

    function _buildah_login {
        _arguments \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--get-login[Return the current login user for the registry (default true)]' \
            {-h,--help}'[help for login]' \
            {-p,--password}'[Password for registry]' \
            '--password-stdin[Take the password from stdin]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry. TLS verification cannot be used when talking to an insecure registry. (default true)]' \
            {-u,--username}'[Username for registry]' \
            "*: :_files"

    }

    function _buildah_logout {
        _arguments \
            {-a,--all}'[Remove the cached credentials for all registries in the auth file]' \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            {-h,--help}'[help for logout]' \
            "*: :_files"

    }

    function _buildah_manifest {
        _arguments \
            {-h,--help}'[help for manifest]' \
            "*: :_files"

    }

    function _buildah_mount {
        _arguments \
            {-h,--help}'[help for mount]' \
            "*: :_files"

    }

    function _buildah_pull {
        _arguments \
            {-a,--all-tags}'[download all tagged images in the repository]' \
            '--arch[prefer ARCH instead of the architecture of the machine for choosing images (default "amd64")]' \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            '--decryption-key[key needed to decrypt the image]' \
            {-h,--help}'[help for pull]' \
            '--os[prefer OS instead of the running OS for choosing images (default "linux")]' \
            '--policy[missing, always, or never. (default "missing")]' \
            {-q,--quiet}'[don'\''t output progress information when pulling images]' \
            '--remove-signatures[don'\''t copy signatures when pulling image]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry. TLS verification cannot be used when talking to an insecure registry. (default true)]' \
            '--variant[override the variant of the specified image]' \
            "*: :_files"

    }

    function _buildah_push {
        _arguments \
            '--all[push all of the images referenced by the manifest list]' \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            '--digestfile[after copying the image, write the digest of the resulting image to the file]' \
            {-D,--disable-compression}'[don'\''t compress layers]' \
            '--encrypt-layer[layers to encrypt, 0-indexed layer indices with support for negative indexing (e.g. 0 is the first layer, -1 is the last layer). If not defined, will encrypt all layers if encryption-key flag is specified]' \
            '--encryption-key[key with the encryption protocol to use needed to encrypt the image (e.g. jwe:/path/to/key.pem)]' \
            {-f,--format}'[manifest type (oci, v2s1, or v2s2) to use when saving image using the '\''dir:'\'' transport (default is manifest type of source)]' \
            {-h,--help}'[help for push]' \
            {-q,--quiet}'[don'\''t output progress information when pushing images]' \
            '--remove-signatures[don'\''t copy signatures when pushing image]' \
            '--rm[remove the manifest list if push succeeds]' \
            '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry. TLS verification cannot be used when talking to an insecure registry. (default true)]' \
            "*: :_files"

    }

    function _buildah_rename {
        _arguments \
            {-h,--help}'[help for rename]' \
            "*: :_files"

    }

    function _buildah_rm {
        _arguments \
            {-a,--all}'[remove all containers]' \
            {-h,--help}'[help for rm]' \
            "*: :_files"

    }

    function _buildah_rmi {
        _arguments \
            {-a,--all}'[remove all images]' \
            {-f,--force}'[force removal of the image and any containers using the image]' \
            {-h,--help}'[help for rmi]' \
            {-p,--prune}'[prune dangling images]' \
            "*: :_files"

    }

    function _buildah_run {
        _arguments \
            '--add-history[add an entry for this operation to the image'\''s history. Use BUILDAH_HISTORY environment variable to override. (default false)]' \
            '--cap-add[add the specified capability (default \[\])]' \
            '--cap-drop[drop the specified capability (default \[\])]' \
            '--cni-config-dir[directory of CNI configuration files (default "/etc/cni/net.d")]':file:_files \
            '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
            {-h,--help}'[help for run]' \
            '--hostname[set the hostname inside of the container]' \
            '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
            '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override.]' \
            '--mount[Attach a filesystem mount to the container (default \[\])]' \
            '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
            '--no-pivot[do not use pivot root to jail process inside rootfs]' \
            '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
            '--runtime[path to an alternate OCI runtime (default "crun")]':file:_files \
            '--runtime-flag[add global flags for the container runtime]' \
            {-t,--terminal}'[allocate a pseudo-TTY in the container]' \
            '--user[user\[:group\] to run the command as]' \
            '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
            {-v,--volume}'[bind mount a host location into the container while running the command]' \
            "*: :_files"

    }

    function _buildah_tag {
        _arguments \
            {-h,--help}'[help for tag]' \
            "*: :_files"

    }

    function _buildah_umount {
        _arguments \
            {-a,--all}'[umount all of the currently mounted containers]' \
            {-h,--help}'[help for umount]' \
            "*: :_files"

    }

    function _buildah_unshare {
        _arguments \
            {-h,--help}'[help for unshare]' \
            '--mount[mount the specified containers (default \[\])]' \
            "*: :_files"

    }

    function _buildah_version {
        _arguments \
            {-h,--help}'[help for version]' \
            "*: :_files"

    }


function _buildah {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add content to the container'
            'bud:Build an image using instructions in a Dockerfile'
            'commit:Create an image from a working container'
            'config:Update image configuration settings'
            'containers:List working containers and their base images'
            'copy:Copy content into the container'
            'from:Create a working container based on an image'
            'images:List images in local storage'
            'info:Display Buildah system information'
            'inspect:Inspect the configuration of a container or image'
            'login:Login to a container registry'
            'logout:Logout of a container registry'
            'manifest:Manipulate manifest lists and image indexes'
            'mount:Mount a working container'\''s root filesystem'
            'pull:Pull an image from the specified location'
            'push:Push an image to a specified destination'
            'rename:Rename a container'
            'rm:Remove one or more working containers'
            'rmi:Remove one or more images from local storage'
            'run:Run a command inside of the container'
            'tag:Add an additional name to a local image'
            'umount:Unmount the root file system of the specified working containers'
            'unshare:Run a command in a modified user namespace'
            'version:Display the Buildah version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for buildah]' \
        '--log-level[The log level to be used. Either "trace", "debug", "info", "warn", "error", "fatal", or "panic". (default "warn")]' \
        '--registries-conf[path to registries.conf file (not usually used)]' \
        '--registries-conf-dir[path to registries.conf.d directory (not usually used)]' \
        '--root[storage root dir (default "/var/lib/containers/storage")]' \
        '--runroot[storage state dir (default "/run/containers/storage")]' \
        '--storage-driver[storage-driver (default "overlay")]' \
        '--storage-opt[storage driver option (default \["overlay.mountopt=nodev,metacopy=on"\])]' \
        '--userns-gid-map[default ctrID:hostID:length GID mapping to use]' \
        '--userns-uid-map[default ctrID:hostID:length UID mapping to use]' \
        {-v,--version}'[version for buildah]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _buildah_add
            ;;

        (bud)
            _buildah_bud
            ;;

        (commit)
            _buildah_commit
            ;;

        (config)
            _buildah_config
            ;;

        (containers)
            _buildah_containers
            ;;

        (copy)
            _buildah_copy
            ;;

        (from)
            _buildah_from
            ;;

        (images)
            _buildah_images
            ;;

        (info)
            _buildah_info
            ;;

        (inspect)
            _buildah_inspect
            ;;

        (login)
            _buildah_login
            ;;

        (logout)
            _buildah_logout
            ;;

        (manifest)
            _buildah_manifest
            ;;

        (mount)
            _buildah_mount
            ;;

        (pull)
            _buildah_pull
            ;;

        (push)
            _buildah_push
            ;;

        (rename)
            _buildah_rename
            ;;

        (rm)
            _buildah_rm
            ;;

        (rmi)
            _buildah_rmi
            ;;

        (run)
            _buildah_run
            ;;

        (tag)
            _buildah_tag
            ;;

        (umount)
            _buildah_umount
            ;;

        (unshare)
            _buildah_unshare
            ;;

        (version)
            _buildah_version
            ;;

        esac
        ;;
     esac

}

