#compdef _bwrap bwrap

# Auto-generated with h2o


function _bwrap {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Print this help]' \
        '--version[Print version]' \
        '--args[Parse NUL-separated args from FD]' \
        '--unshare-all[Unshare every namespace we support by default]' \
        '--share-net[Retain the network namespace (can only combine with --unshare-all)]' \
        '--unshare-user[Create new user namespace (may be automatically implied if not setuid)]' \
        '--unshare-user-try[Create new user namespace if possible else continue by skipping it]' \
        '--unshare-ipc[Create new ipc namespace]' \
        '--unshare-pid[Create new pid namespace]' \
        '--unshare-net[Create new network namespace]' \
        '--unshare-uts[Create new uts namespace]' \
        '--unshare-cgroup[Create new cgroup namespace]' \
        '--unshare-cgroup-try[Create new cgroup namespace if possible else continue by skipping it]' \
        '--userns[Use this user namespace (cannot combine with --unshare-user)]' \
        '--userns2[After setup switch to this user namespace, only useful with --userns]' \
        '--pidns[Use this pid namespace (as parent namespace if using --unshare-pid)]' \
        '--uid[Custom uid in the sandbox (requires --unshare-user or --userns)]' \
        '--gid[Custom gid in the sandbox (requires --unshare-user or --userns)]' \
        '--hostname[Custom hostname in the sandbox (requires --unshare-uts)]' \
        '--chdir[Change directory to DIR]':file:_files \
        '--clearenv[Unset all environment variables]' \
        '--setenv[Set an environment variable]' \
        '--unsetenv[Unset an environment variable]' \
        '--lock-file[Take a lock on DEST while sandbox is running]' \
        '--sync-fd[Keep this fd open while sandbox is running]' \
        '--bind[Bind mount the host path SRC on DEST]' \
        '--bind-try[Equal to --bind but ignores non-existent SRC]' \
        '--dev-bind[Bind mount the host path SRC on DEST, allowing device access]' \
        '--dev-bind-try[Equal to --dev-bind but ignores non-existent SRC]' \
        '--ro-bind[Bind mount the host path SRC readonly on DEST]' \
        '--ro-bind-try[Equal to --ro-bind but ignores non-existent SRC]' \
        '--remount-ro[Remount DEST as readonly; does not recursively remount]' \
        '--exec-label[Exec label for the sandbox]' \
        '--file-label[File label for temporary sandbox content]' \
        '--proc[Mount new procfs on DEST]' \
        '--dev[Mount new dev on DEST]' \
        '--tmpfs[Mount new tmpfs on DEST]' \
        '--mqueue[Mount new mqueue on DEST]' \
        '--dir[Create dir at DEST]' \
        '--file[Copy from FD to destination DEST]' \
        '--bind-data[Copy from FD to file which is bind-mounted on DEST]' \
        '--ro-bind-data[Copy from FD to file which is readonly bind-mounted on DEST]' \
        '--symlink[Create symlink at DEST with target SRC]' \
        '--seccomp[Load and use seccomp rules from FD (not repeatable)]' \
        '--add-seccomp-fd[Load and use seccomp rules from FD (repeatable)]' \
        '--block-fd[Block on FD until some data to read is available]' \
        '--userns-block-fd[Block on FD until the user namespace is ready]' \
        '--info-fd[Write information about the running container to FD]' \
        '--json-status-fd[Write container status to FD as multiple JSON documents]' \
        '--new-session[Create a new terminal session]' \
        '--die-with-parent[Kills with SIGKILL child process (COMMAND) when bwrap or bwrap'\''s parent dies.]' \
        '--as-pid-1[Do not install a reaper process with PID=1]' \
        '--cap-add[Add cap CAP when running as privileged user]' \
        '--cap-drop[Drop cap CAP when running as privileged user]' \
        '--perms[Set permissions of next argument (--bind-data, --file, etc.)]' \
        '--size[Set size of next argument (only for --tmpfs)]' \
        '--chmod[Change permissions of PATH (must already exist)]':file:_files \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

