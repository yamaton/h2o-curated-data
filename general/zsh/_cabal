#compdef _cabal cabal

# Auto-generated with h2o

    function _cabal_update {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_install {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            '--lib[Install libraries rather than executables from the target package (provisional, see https://github.com/haskell/cabal/issues/6481 for more information).]' \
            '--package-env[Set the environment file that may be modified.]' \
            '--overwrite-policy[How to handle already existing symlinks.]' \
            '--install-method[How to install the executables.]' \
            '--installdir[Where to install (by symlinking or copying) the executables in.]':file:_files \
            "*: :_files"

    }

    function _cabal_info {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            "*: :_files"

    }

    function _cabal_list {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--installed[Only print installed packages]' \
            '--simple-output[Print in a easy-to-parse format]' \
            {-i,--ignore-case}'[Enable Ignore case destictions]' \
            {-I,--strict-case}'[Disable Ignore case destictions]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            "*: :_files"

    }

    function _cabal_fetch {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--dependencies[Resolve and fetch dependencies (default)]' \
            '--no-dependencies[Ignore dependencies]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            "*: :_files"

    }

    function _cabal_user-config {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            {-f,--force}'[Overwrite the config file if it already exists.]' \
            {-a,--augment}'[Additional setting to augment the config file (replacing a previous setting if it existed).]' \
            "*: :_files"

    }

    function _cabal_get {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            {-d,--destdir}'[Where to place the package source, defaults to the current directory.]':file:_files \
            {-s,--source-repository}'[Copy the package'\''s source repository (ie git clone, darcs get, etc as appropriate).]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\''). This determines which package versions are available as well as .cabal file revision is selected (unless --pristine is used).]' \
            '--pristine[Unpack the original pristine tarball, rather than updating the .cabal file with the latest revision from the package archive.]' \
            "*: :_files"

    }

    function _cabal_init {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-i,--interactive}'[Enable interactive mode.]' \
            {-n,--non-interactive}'[Disable interactive mode.]' \
            {-q,--quiet}'[Do not generate log messages to stdout.]' \
            '--no-comments[Do not generate explanatory comments in the .cabal file.]' \
            {-m,--minimal}'[Generate a minimal .cabal file, that is, do not include extra empty fields. Also implies --no-comments.]' \
            '--overwrite[Overwrite any existing .cabal, LICENSE, or Setup.hs files without warning.]' \
            '--package-dir[Root directory of the package (default = current directory).]':file:_files \
            {-p,--package-name}'[Name of the Cabal package to create.]' \
            '--version[Initial version of the package.]' \
            '--cabal-version[Version of the Cabal specification.]' \
            {-l,--license}'[Project license.]' \
            {-a,--author}'[Name of the project'\''s author.]' \
            {-e,--email}'[Email address of the maintainer.]' \
            {-u,--homepage}'[Project homepage and/or repository.]' \
            {-s,--synopsis}'[Short project synopsis.]' \
            {-c,--category}'[Project category.]' \
            {-x,--extra-source-file}'[Extra source file to be distributed with tarball.]':file:_files \
            '--lib[Build a library.]' \
            '--exe[Build an executable.]' \
            '--libandexe[Build a library and an executable.]' \
            '--tests[Generate a test suite for the library.]' \
            '--test-dir[Directory containing tests.]':file:_files \
            '--simple[Create a simple project with sensible defaults.]' \
            '--main-is[Specify the main module.]':file:_files \
            '--language[Specify the default language.]' \
            {-o,--expose-module}'[Export a module from the package.]' \
            '--extension[Use a LANGUAGE extension (in the other-extensions field).]' \
            {-d,--dependency}'[Package dependency.]' \
            '--application-dir[Directory containing package application executable.]':file:_files \
            '--source-dir[Directory containing package library source.]':file:_files \
            '--build-tool[Required external build tool.]' \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            "*: :_files"

    }

    function _cabal_configure {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            "*: :_files"

    }

    function _cabal_build {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            '--only-configure[Instead of performing a full build just run the configure step]' \
            "*: :_files"

    }

    function _cabal_clean {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-s,--save-config}'[Save configuration, only remove build artifacts]' \
            "*: :_files"

    }

    function _cabal_run {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_repl {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            '--repl-options[use this option for the repl]' \
            {-b,--build-depends}'[Include additional packages in the environment presented to GHCi.]' \
            '--no-transitive-deps[Don'\''t automatically include transitive dependencies of requested packages.]' \
            "*: :_files"

    }

    function _cabal_test {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_bench {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_check {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            "*: :_files"

    }

    function _cabal_sdist {
        _arguments \
            {-h,--help}'[Show this help text]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-l,--list-only}'[Just list the sources, do not make a tarball]' \
            '--null-sep[Separate the source files with NUL bytes rather than newlines.]' \
            {-o,--output-directory}'[Choose the output directory of this command. '\''-'\'' sends all output to stdout]':file:_files \
            "*: :_files"

    }

    function _cabal_upload {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--publish[Publish the package instead of uploading it as a candidate.]' \
            {-d,--documentation}'[Upload documentation instead of a source package. By default, this uploads documentation for a package candidate. To upload documentation for a published package, combine with --publish.]' \
            {-u,--username}'[Hackage username.]' \
            {-p,--password}'[Hackage password.]' \
            {-P,--password-command}'[Command to get Hackage password.]' \
            "*: :_files"

    }

    function _cabal_report {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            {-u,--username}'[Hackage username.]' \
            {-p,--password}'[Hackage password.]' \
            "*: :_files"

    }

    function _cabal_freeze {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_gen-bounds {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            "*: :_files"

    }

    function _cabal_outdated {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--freeze-file[Act on the freeze file]' \
            '--v2-freeze-file[Act on the new-style freeze file (default: cabal.project.freeze)]' \
            '--project-file[Act on the new-style freeze file named PROJECTFILE.freeze rather than the default cabal.project.freeze]':file:_files \
            '--simple-output[Only print names of outdated dependencies, one per line]' \
            '--exit-code[Exit with non-zero when there are outdated dependencies]' \
            {-q,--quiet}'[Don'\''t print any output. Implies '\''--exit-code'\'' and '\''-v0'\'']' \
            '--ignore[Packages to ignore]' \
            '--minor[Ignore major version bumps for these packages]' \
            "*: :_files"

    }

    function _cabal_haddock {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_hscolour {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--executables[Run hscolour for Executables targets]' \
            '--tests[Run hscolour for Test Suite targets]' \
            '--benchmarks[Run hscolour for Benchmark targets]' \
            '--foreign-libraries[Run hscolour for Foreign Library targets]' \
            '--all[Run hscolour for all targets]' \
            '--css[Use a cascading style sheet]':file:_files \
            "*: :_files"

    }

    function _cabal_exec {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            "*: :_files"

    }

    function _cabal_list-bin {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-build {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            '--only-configure[Instead of performing a full build just run the configure step]' \
            "*: :_files"

    }

    function _cabal_v2-configure {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            "*: :_files"

    }

    function _cabal_v2-repl {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            '--repl-options[use this option for the repl]' \
            {-b,--build-depends}'[Include additional packages in the environment presented to GHCi.]' \
            '--no-transitive-deps[Don'\''t automatically include transitive dependencies of requested packages.]' \
            "*: :_files"

    }

    function _cabal_v2-run {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-test {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-bench {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-freeze {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-haddock {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-exec {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            "*: :_files"

    }

    function _cabal_v2-update {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            "*: :_files"

    }

    function _cabal_v2-install {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            '--lib[Install libraries rather than executables from the target package (provisional, see https://github.com/haskell/cabal/issues/6481 for more information).]' \
            '--package-env[Set the environment file that may be modified.]' \
            '--overwrite-policy[How to handle already existing symlinks.]' \
            '--install-method[How to install the executables.]' \
            '--installdir[Where to install (by symlinking or copying) the executables in.]':file:_files \
            "*: :_files"

    }

    function _cabal_v2-clean {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-s,--save-config}'[Save configuration, only remove build artifacts]' \
            "*: :_files"

    }

    function _cabal_v2-sdist {
        _arguments \
            {-h,--help}'[Show this help text]' \
            '--project-file[Set the name of the cabal.project file to search for in parent directories]':file:_files \
            {-z,--ignore-project}'[Ignore local project configuration]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-l,--list-only}'[Just list the sources, do not make a tarball]' \
            '--null-sep[Separate the source files with NUL bytes rather than newlines.]' \
            {-o,--output-directory}'[Choose the output directory of this command. '\''-'\'' sends all output to stdout]':file:_files \
            "*: :_files"

    }

    function _cabal_v1-build {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            "*: :_files"

    }

    function _cabal_v1-configure {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            "*: :_files"

    }

    function _cabal_v1-repl {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--repl-options[use this option for the repl]' \
            "*: :_files"

    }

    function _cabal_v1-run {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            "*: :_files"

    }

    function _cabal_v1-test {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            "*: :_files"

    }

    function _cabal_v1-bench {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            "*: :_files"

    }

    function _cabal_v1-freeze {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--dry-run[Do not freeze anything, only print what would be frozen]' \
            '--enable-tests[Enable freezing of the dependencies of any tests suites in the package description file.]' \
            '--disable-tests[Disable freezing of the dependencies of any tests suites in the package description file.]' \
            '--enable-benchmarks[Enable freezing of the dependencies of any benchmarks suites in the package description file.]' \
            '--disable-benchmarks[Disable freezing of the dependencies of any benchmarks suites in the package description file.]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            "*: :_files"

    }

    function _cabal_v1-haddock {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--keep-temp-files[Keep temporary files]' \
            '--hoogle[Generate a hoogle database]' \
            '--html[Generate HTML documentation (the default)]' \
            '--html-location[Location of HTML documentation for pre-requisite packages]' \
            '--for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--executables[Run haddock for Executables targets]' \
            '--tests[Run haddock for Test Suite targets]' \
            '--benchmarks[Run haddock for Benchmark targets]' \
            '--foreign-libraries[Run haddock for Foreign Library targets]' \
            '--all[Run haddock for all targets]' \
            '--internal[Run haddock for internal modules and include all symbols]' \
            '--css[Use PATH as the haddock stylesheet]':file:_files \
            '--hyperlink-source[Hyperlink the documentation to the source code]' \
            '--quickjump[Generate an index for interactive documentation navigation]' \
            '--hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--contents-location[Bake URL in as the location for the contents page]' \
            '--with-ghc[give the path to ghc]':file:_files \
            '--with-haddock[give the path to haddock]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--ghc-options[give extra options to ghc]' \
            '--haddock-options[give extra options to haddock]' \
            "*: :_files"

    }

    function _cabal_v1-install {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            '--enable-documentation[Enable building of documentation]' \
            '--disable-documentation[Disable building of documentation]' \
            '--doc-index-file[A central index of haddock API documentation (template cannot use $pkgid)]' \
            '--dry-run[Do not install anything, only print what would be installed.]' \
            '--only-download[Do not build anything, only fetch the packages.]' \
            '--max-backjumps[Maximum number of backjumps allowed while solving (default: 4000). Use a negative number to enable unlimited backtracking. Use 0 to disable backtracking completely.]' \
            '--reorder-goals[Try to reorder goals according to certain heuristics. Slows things down on average, but may make backtracking faster for some packages.]' \
            '--count-conflicts[Try to speed up solving by preferring goals that are involved in a lot of conflicts (default).]' \
            '--fine-grained-conflicts[Skip a version of a package if it does not resolve the conflicts encountered in the last version, as a solver optimization (default).]' \
            '--minimize-conflict-set[When there is no solution, try to improve the error message by finding a minimal conflict set (default: false). May increase run time significantly.]' \
            '--independent-goals[Treat several goals on the command line as independent. If several goals depend on the same package, different versions can be chosen.]' \
            '--shadow-installed-packages[If multiple package instances of the same version are installed, treat all but one as shadowed.]' \
            '--strong-flags[Do not defer flag choices (this used to be the default in cabal-install <= 1.20).]' \
            '--allow-boot-library-installs[Allow cabal to install base, ghc-prim, integer-simple, integer-gmp, and template-haskell.]' \
            '--reject-unconstrained-dependencies[Require these packages to have constraints on them if they are to be selected (default: none).]' \
            '--reinstall[Install even if it means installing the same version again.]' \
            '--avoid-reinstalls[Do not select versions that would destructively overwrite installed packages.]' \
            '--force-reinstalls[Reinstall packages even if they will most likely break other installed packages.]' \
            '--upgrade-dependencies[Pick the latest version for all dependencies, rather than trying to pick an installed version.]' \
            '--only-dependencies[Install only the dependencies necessary to build the given packages]' \
            '--dependencies-only[A synonym for --only-dependencies]' \
            '--index-state[Use source package index state as it existed at a previous time. Accepts unix-timestamps (e.g. '\''@1474732068'\''), ISO8601 UTC timestamps (e.g. '\''2016-09-24T17:47:48Z'\''), or '\''HEAD'\'' (default: '\''HEAD'\'').]' \
            '--root-cmd[(No longer supported, do not use.)]' \
            '--symlink-bindir[Add symlinks to installed executables into this directory.]':file:_files \
            '--build-summary[Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--build-log[Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)]' \
            '--remote-build-reporting[Generate build reports to send to a remote server (none, anonymous or detailed).]' \
            '--report-planning-failure[Generate build reports when the dependency solver fails. This is used by the Hackage build bot.]' \
            '--enable-per-component[Enable Per-component builds when possible]' \
            '--disable-per-component[Disable Per-component builds when possible]' \
            '--one-shot[Do not record the packages in the world file.]' \
            '--run-tests[Run package test suites during installation.]' \
            {-j,--jobs}'[Run NUM jobs simultaneously (or '\''$ncpus'\'' if no NUM is given).]' \
            '--keep-going[After a build failure, continue to build other unaffected packages.]' \
            '--offline[Don'\''t download packages from the Internet.]' \
            '--haddock-hoogle[Generate a hoogle database]' \
            '--haddock-html[Generate HTML documentation (the default)]' \
            '--haddock-html-location[Location of HTML documentation for pre-requisite packages]' \
            '--haddock-for-hackage[Collection of flags to generate documentation suitable for upload to hackage]' \
            '--haddock-executables[Run haddock for Executables targets]' \
            '--haddock-tests[Run haddock for Test Suite targets]' \
            '--haddock-benchmarks[Run haddock for Benchmark targets]' \
            '--haddock-all[Run haddock for all targets]' \
            '--haddock-internal[Run haddock for internal modules and include all symbols]' \
            '--haddock-css[Use PATH as the haddock stylesheet]':file:_files \
            '--haddock-hyperlink-source[Hyperlink the documentation to the source code]' \
            '--haddock-quickjump[Generate an index for interactive documentation navigation]' \
            '--haddock-hscolour-css[Use PATH as the HsColour stylesheet]':file:_files \
            '--haddock-contents-location[Bake URL in as the location for the contents page]' \
            '--test-log[Log all test suite results to file (name template can use $pkgid, $compiler, $os, $arch, $test-suite, $result)]' \
            '--test-machine-log[Produce a machine-readable log file (name template can use $pkgid, $compiler, $os, $arch, $result)]' \
            '--test-show-details['\''always'\'': always show results of individual test cases. '\''never'\'': never show results of individual test cases. '\''failures'\'': show results of failing test cases. '\''streaming'\'': show results of test cases in real time.'\''direct'\'': send results of test cases in real time; no log file.]' \
            '--test-keep-tix-files[keep .tix files for HPC between test runs]' \
            '--test-wrapper[Run test through a wrapper.]':file:_files \
            '--test-fail-when-no-test-suites[Exit with failure when no test suites are found.]' \
            '--test-options[give extra options to test executables (name templates can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--test-option[give extra option to test executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $test-suite)]' \
            '--benchmark-options[give extra options to benchmark executables (name templates can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            '--benchmark-option[give extra option to benchmark executables (no need to quote options containing spaces, name template can use $pkgid, $compiler, $os, $arch, $benchmark)]' \
            "*: :_files"

    }

    function _cabal_v1-clean {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-s,--save-configure}'[Do not remove the configuration file (dist/setup-config) during cleaning. Saves need to reconfigure.]' \
            "*: :_files"

    }

    function _cabal_v1-copy {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--destdir[directory to copy files to, prepended to installation directories]':file:_files \
            "*: :_files"

    }

    function _cabal_v1-register {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            '--user[upon registration, register this package in the user'\''s local package database]' \
            '--global[(default)upon registration, register this package in the system-wide package database]' \
            '--inplace[register the package in the build location, so it can be used without being installed]' \
            '--gen-script[instead of registering, generate a script to register later]' \
            '--gen-pkg-config[instead of registering, generate a package registration file/directory]' \
            '--print-ipid[print the installed package ID calculated for this package]' \
            "*: :_files"

    }

    function _cabal_v1-reconfigure {
        _arguments \
            {-h,--help}'[Show this help text]' \
            {-v,--verbose}'[Control verbosity (n is 0--3, default verbosity level is 1)]' \
            '--builddir[The directory where Cabal puts generated build files (default dist)]':file:_files \
            {-g,--ghc}'[compile with GHC]' \
            '--ghcjs[compile with GHCJS]' \
            '--uhc[compile with UHC]' \
            '--haskell-suite[compile with a haskell-suite compiler]' \
            '--cabal-file[use this Cabal file]':file:_files \
            {-w,--with-compiler}'[give the path to a particular compiler]':file:_files \
            '--with-hc-pkg[give the path to the package tool]':file:_files \
            '--prefix[bake this prefix in preparation of installation]':file:_files \
            '--bindir[installation directory for executables]':file:_files \
            '--libdir[installation directory for libraries]':file:_files \
            '--libsubdir[subdirectory of libdir in which libs are installed]':file:_files \
            '--dynlibdir[installation directory for dynamic libraries]':file:_files \
            '--libexecdir[installation directory for program executables]':file:_files \
            '--libexecsubdir[subdirectory of libexecdir in which private executables are installed]':file:_files \
            '--datadir[installation directory for read-only data]':file:_files \
            '--datasubdir[subdirectory of datadir in which data files are installed]':file:_files \
            '--docdir[installation directory for documentation]':file:_files \
            '--htmldir[installation directory for HTML documentation]':file:_files \
            '--haddockdir[installation directory for haddock interfaces]':file:_files \
            '--sysconfdir[installation directory for configuration files]':file:_files \
            '--program-prefix[prefix to be applied to installed executables]' \
            '--program-suffix[suffix to be applied to installed executables]' \
            '--enable-library-vanilla[Enable Vanilla libraries]' \
            '--disable-library-vanilla[Disable Vanilla libraries]' \
            {-p,--enable-library-profiling}'[Enable Library profiling]' \
            '--disable-library-profiling[Disable Library profiling]' \
            '--enable-shared[Enable Shared library]' \
            '--disable-shared[Disable Shared library]' \
            '--enable-static[Enable Static library]' \
            '--disable-static[Disable Static library]' \
            '--enable-executable-dynamic[Enable Executable dynamic linking]' \
            '--disable-executable-dynamic[Disable Executable dynamic linking]' \
            '--enable-executable-static[Enable Executable fully static linking]' \
            '--disable-executable-static[Disable Executable fully static linking]' \
            '--enable-profiling[Enable Executable and library profiling]' \
            '--disable-profiling[Disable Executable and library profiling]' \
            '--enable-executable-profiling[Enable Executable profiling (DEPRECATED)]' \
            '--disable-executable-profiling[Disable Executable profiling (DEPRECATED)]' \
            '--profiling-detail[Profiling detail level for executable and library (default, none, exported-functions, toplevel-functions, all-functions).]' \
            '--library-profiling-detail[Profiling detail level for libraries only.]' \
            {-O,--enable-optimization}'[Build with optimization (n is 0--2, default is 1)]' \
            '--disable-optimization[Build without optimization]' \
            '--enable-debug-info[Emit debug info (n is 0--3, default is 0)]' \
            '--disable-debug-info[Don'\''t emit debug info]' \
            '--enable-library-for-ghci[Enable compile library for use with GHCi]' \
            '--disable-library-for-ghci[Disable compile library for use with GHCi]' \
            '--enable-split-sections[Enable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--disable-split-sections[Disable compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)]' \
            '--enable-split-objs[Enable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--disable-split-objs[Disable split library into smaller objects to reduce binary sizes (GHC 6.6+)]' \
            '--enable-executable-stripping[Enable strip executables upon installation to reduce binary sizes]' \
            '--disable-executable-stripping[Disable strip executables upon installation to reduce binary sizes]' \
            '--enable-library-stripping[Enable strip libraries upon installation to reduce binary sizes]' \
            '--disable-library-stripping[Disable strip libraries upon installation to reduce binary sizes]' \
            '--configure-option[Extra option for configure]' \
            '--user[Enable doing a per-user installation]' \
            '--global[Disable doing a per-user installation]' \
            '--package-db[Append the given package database to the list of package databases used (to satisfy dependencies and register into). May be a specific file, '\''global'\'' or '\''user'\''. The initial list is \['\''global'\''\], \['\''global'\'', '\''user'\''\], or \['\''global'\'', $sandbox\], depending on context. Use '\''clear'\'' to reset the list to empty. See the user guide for details.]' \
            {-f,--flags}'[Force values for the given flags in Cabal conditionals in the .cabal file. E.g., --flags="debug -usebytestrings" forces the flag "debug" to true and "usebytestrings" to false.]' \
            '--extra-include-dirs[A list of directories to search for header files]':file:_files \
            '--enable-deterministic[Enable Try to be as deterministic as possible (used by the test suite)]' \
            '--disable-deterministic[Disable Try to be as deterministic as possible (used by the test suite)]' \
            '--ipid[Installed package ID to compile this package as]' \
            '--cid[Installed component ID to compile this component as]' \
            '--extra-lib-dirs[A list of directories to search for external libraries]':file:_files \
            '--extra-framework-dirs[A list of directories to search for external frameworks (OS X only)]':file:_files \
            '--extra-prog-path[A list of directories to search for required programs (in addition to the normal search locations)]':file:_files \
            '--instantiate-with[A mapping of signature names to concrete module instantiations.]' \
            '--enable-tests[Enable dependency checking and compilation for test suites listed in the package description file.]' \
            '--disable-tests[Disable dependency checking and compilation for test suites listed in the package description file.]' \
            '--enable-coverage[Enable build package with Haskell Program Coverage. (GHC only)]' \
            '--disable-coverage[Disable build package with Haskell Program Coverage. (GHC only)]' \
            '--enable-library-coverage[Enable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--disable-library-coverage[Disable build package with Haskell Program Coverage. (GHC only) (DEPRECATED)]' \
            '--enable-benchmarks[Enable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--disable-benchmarks[Disable dependency checking and compilation for benchmarks listed in the package description file.]' \
            '--enable-relocatable[Enable building a package that is relocatable. (GHC only)]' \
            '--disable-relocatable[Disable building a package that is relocatable. (GHC only)]' \
            '--disable-response-files[enable workaround for old versions of programs like "ar" that do not support @file arguments]' \
            '--allow-depending-on-private-libs[Allow depending on private libraries. If set, the library visibility check MUST be done externally.]' \
            '--with-PROG[give the path to PROG]':file:_files \
            '--PROG-option[give an extra option to PROG (no need to quote options containing spaces)]' \
            '--PROG-options[give extra options to PROG]' \
            '--cabal-lib-version[Select which version of the Cabal lib to use to build packages (useful for testing).]' \
            '--constraint[Specify constraints on a package (version, installed/source, flags)]' \
            '--preference[Specify preferences (soft constraints) on the version of a package]' \
            '--solver[Select dependency solver to use (default: modular). Choices: modular.]' \
            '--allow-older[Ignore lower bounds in all dependencies or DEPS]' \
            '--allow-newer[Ignore upper bounds in all dependencies or DEPS]' \
            '--write-ghc-environment-files[Whether to create a .ghc.environment file after a successful build (v2-build only)]' \
            "*: :_files"

    }


function _cabal {
    local line state

    function _commands {
        local -a commands
        commands=(
            'update:Updates list of known packages.'
            'install:Install packages.'
            'info:Display detailed information about a particular package.'
            'list:List packages matching a search string.'
            'fetch:Downloads packages for later installation.'
            'user-config:Display and update the user'\''s global cabal configuration.'
            'get:Download/Extract a package'\''s source code (repository).'
            'init:Create a new .cabal package file.'
            'configure:Add extra project configuration'
            'build:Compile targets within the project.'
            'clean:Clean the package store and remove temporary files.'
            'run:Run an executable.'
            'repl:Open an interactive session for the given component.'
            'test:Run test-suites'
            'bench:Run benchmarks'
            'check:Check the package for common mistakes.'
            'sdist:Generate a source distribution file (.tar.gz).'
            'upload:Uploads source packages or documentation to Hackage.'
            'report:Upload build reports to a remote server.'
            'freeze:Freeze dependencies.'
            'gen-bounds:Generate dependency bounds.'
            'outdated:Check for outdated dependencies'
            'haddock:Build Haddock documentation'
            'hscolour:Generate HsColour colourised code, in HTML format.'
            'exec:Give a command access to the store.'
            'list-bin:list path to a single executable.'
            'v2-build:Compile targets within the project.'
            'v2-configure:Add extra project configuration'
            'v2-repl:Open an interactive session for the given component.'
            'v2-run:Run an executable.'
            'v2-test:Run test-suites'
            'v2-bench:Run benchmarks'
            'v2-freeze:Freeze dependencies.'
            'v2-haddock:Build Haddock documentation'
            'v2-exec:Give a command access to the store.'
            'v2-update:Updates list of known packages.'
            'v2-install:Install packages.'
            'v2-clean:Clean the package store and remove temporary files.'
            'v2-sdist:Generate a source distribution file (.tar.gz).'
            'v1-build:Compile all/specific components.'
            'v1-configure:Prepare to build the package.'
            'v1-repl:Open an interpreter session for the given component.'
            'v1-run:Builds and runs an executable.'
            'v1-test:Run all/specific tests in the test suite.'
            'v1-bench:Run all/specific benchmarks.'
            'v1-freeze:Freeze dependencies.'
            'v1-haddock:Generate Haddock HTML documentation.'
            'v1-install:Install packages.'
            'v1-clean:Clean up after a build.'
            'v1-copy:Copy the files of all/specific components to install locations.'
            'v1-register:Register this package with the compiler.'
            'v1-reconfigure:Reconfigure the package if necessary.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (update)
            _cabal_update
            ;;

        (install)
            _cabal_install
            ;;

        (info)
            _cabal_info
            ;;

        (list)
            _cabal_list
            ;;

        (fetch)
            _cabal_fetch
            ;;

        (user-config)
            _cabal_user-config
            ;;

        (get)
            _cabal_get
            ;;

        (init)
            _cabal_init
            ;;

        (configure)
            _cabal_configure
            ;;

        (build)
            _cabal_build
            ;;

        (clean)
            _cabal_clean
            ;;

        (run)
            _cabal_run
            ;;

        (repl)
            _cabal_repl
            ;;

        (test)
            _cabal_test
            ;;

        (bench)
            _cabal_bench
            ;;

        (check)
            _cabal_check
            ;;

        (sdist)
            _cabal_sdist
            ;;

        (upload)
            _cabal_upload
            ;;

        (report)
            _cabal_report
            ;;

        (freeze)
            _cabal_freeze
            ;;

        (gen-bounds)
            _cabal_gen-bounds
            ;;

        (outdated)
            _cabal_outdated
            ;;

        (haddock)
            _cabal_haddock
            ;;

        (hscolour)
            _cabal_hscolour
            ;;

        (exec)
            _cabal_exec
            ;;

        (list-bin)
            _cabal_list-bin
            ;;

        (v2-build)
            _cabal_v2-build
            ;;

        (v2-configure)
            _cabal_v2-configure
            ;;

        (v2-repl)
            _cabal_v2-repl
            ;;

        (v2-run)
            _cabal_v2-run
            ;;

        (v2-test)
            _cabal_v2-test
            ;;

        (v2-bench)
            _cabal_v2-bench
            ;;

        (v2-freeze)
            _cabal_v2-freeze
            ;;

        (v2-haddock)
            _cabal_v2-haddock
            ;;

        (v2-exec)
            _cabal_v2-exec
            ;;

        (v2-update)
            _cabal_v2-update
            ;;

        (v2-install)
            _cabal_v2-install
            ;;

        (v2-clean)
            _cabal_v2-clean
            ;;

        (v2-sdist)
            _cabal_v2-sdist
            ;;

        (v1-build)
            _cabal_v1-build
            ;;

        (v1-configure)
            _cabal_v1-configure
            ;;

        (v1-repl)
            _cabal_v1-repl
            ;;

        (v1-run)
            _cabal_v1-run
            ;;

        (v1-test)
            _cabal_v1-test
            ;;

        (v1-bench)
            _cabal_v1-bench
            ;;

        (v1-freeze)
            _cabal_v1-freeze
            ;;

        (v1-haddock)
            _cabal_v1-haddock
            ;;

        (v1-install)
            _cabal_v1-install
            ;;

        (v1-clean)
            _cabal_v1-clean
            ;;

        (v1-copy)
            _cabal_v1-copy
            ;;

        (v1-register)
            _cabal_v1-register
            ;;

        (v1-reconfigure)
            _cabal_v1-reconfigure
            ;;

        esac
        ;;
     esac

}

