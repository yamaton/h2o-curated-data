#compdef _cargo cargo

# Auto-generated with h2o

    function _cargo_build {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            {-p,--package}'[Package to build (see `cargo help pkgid`)]' \
            '--all[Alias for --workspace (deprecated)]' \
            '--workspace[Build all packages in the workspace]' \
            '--exclude[Exclude packages from the build]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--lib[Build only this package'\''s library]' \
            '--bin[Build only the specified binary]' \
            '--bins[Build all binaries]' \
            '--example[Build only the specified example]' \
            '--examples[Build all examples]' \
            '--test[Build only the specified test target]' \
            '--tests[Build all tests]' \
            '--bench[Build only the specified bench target]' \
            '--benches[Build all benches]' \
            '--all-targets[Build all targets]' \
            '--release[Build artifacts in release mode, with optimizations]' \
            '--profile[Build artifacts with the specified profile]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--out-dir[Copy final artifacts to this directory (unstable)]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            '--message-format[Error format]' \
            '--build-plan[Output the build plan in JSON (unstable)]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            '--future-incompat-report[Ouputs a future incompatibility report at the end of the build (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_check {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            {-p,--package}'[Package(s) to check]' \
            '--all[Alias for --workspace (deprecated)]' \
            '--workspace[Check all packages in the workspace]' \
            '--exclude[Exclude packages from the check]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--lib[Check only this package'\''s library]' \
            '--bin[Check only the specified binary]' \
            '--bins[Check all binaries]' \
            '--example[Check only the specified example]' \
            '--examples[Check all examples]' \
            '--test[Check only the specified test target]' \
            '--tests[Check all tests]' \
            '--bench[Check only the specified bench target]' \
            '--benches[Check all benches]' \
            '--all-targets[Check all targets]' \
            '--release[Check artifacts in release mode, with optimizations]' \
            '--profile[Check artifacts with the specified profile]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Check for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            '--message-format[Error format]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            '--future-incompat-report[Ouputs a future incompatibility report at the end of the build (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_clean {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            {-p,--package}'[Package to clean artifacts for]' \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--target[Target triple to clean output for]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--release[Whether or not to clean release artifacts]' \
            '--profile[Clean artifacts of the specified profile]':file:_files \
            '--doc[Whether or not to clean just the documentation directory]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_doc {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--open[Opens the docs in a browser after the operation]' \
            {-p,--package}'[Package to document]' \
            '--all[Alias for --workspace (deprecated)]' \
            '--workspace[Document all packages in the workspace]' \
            '--exclude[Exclude packages from the build]' \
            '--no-deps[Don'\''t build documentation for dependencies]' \
            '--document-private-items[Document private items]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--lib[Document only this package'\''s library]' \
            '--bin[Document only the specified binary]' \
            '--bins[Document all binaries]' \
            '--release[Build artifacts in release mode, with optimizations]' \
            '--profile[Build artifacts with the specified profile]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--message-format[Error format]' \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_new {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--registry[Registry to use]' \
            '--vcs[Initialize a new repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none), overriding a global configuration. \[possible values: git, hg, pijul, fossil, none\]]' \
            '--bin[Use a binary (application) template \[default\]]' \
            '--lib[Use a library template]' \
            '--edition[Edition to set for the crate generated \[possible values: 2015, 2018, 2021\]]' \
            '--name[Set the resulting package name, defaults to the directory name]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_init {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--registry[Registry to use]' \
            '--vcs[Initialize a new repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none), overriding a global configuration. \[possible values: git, hg, pijul, fossil, none\]]' \
            '--bin[Use a binary (application) template \[default\]]' \
            '--lib[Use a library template]' \
            '--edition[Edition to set for the crate generated \[possible values: 2015, 2018, 2021\]]' \
            '--name[Set the resulting package name, defaults to the directory name]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_run {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--bin[Name of the bin target to run]' \
            '--example[Name of the example target to run]' \
            {-p,--package}'[Package with the target to run]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--release[Build artifacts in release mode, with optimizations]' \
            '--profile[Build artifacts with the specified profile]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--message-format[Error format]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_test {
        _arguments \
            {-q,--quiet}'[Display one character per test instead of one line]' \
            '--lib[Test only this package'\''s library unit tests]' \
            '--bin[Test only the specified binary]' \
            '--bins[Test all binaries]' \
            '--example[Test only the specified example]' \
            '--examples[Test all examples]' \
            '--test[Test only the specified test target]' \
            '--tests[Test all tests]' \
            '--bench[Test only the specified bench target]' \
            '--benches[Test all benches]' \
            '--all-targets[Test all targets]' \
            '--doc[Test only this library'\''s documentation]' \
            '--no-run[Compile, but don'\''t run tests]' \
            '--no-fail-fast[Run all tests regardless of failure]' \
            {-p,--package}'[Package to run tests for]' \
            '--all[Alias for --workspace (deprecated)]' \
            '--workspace[Test all packages in the workspace]' \
            '--exclude[Exclude packages from the test]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--release[Build artifacts in release mode, with optimizations]' \
            '--profile[Build artifacts with the specified profile]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            '--message-format[Error format]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            '--future-incompat-report[Ouputs a future incompatibility report at the end of the build (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_bench {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--lib[Benchmark only this package'\''s library]' \
            '--bin[Benchmark only the specified binary]' \
            '--bins[Benchmark all binaries]' \
            '--example[Benchmark only the specified example]' \
            '--examples[Benchmark all examples]' \
            '--test[Benchmark only the specified test target]' \
            '--tests[Benchmark all tests]' \
            '--bench[Benchmark only the specified bench target]' \
            '--benches[Benchmark all benches]' \
            '--all-targets[Benchmark all targets]' \
            '--no-run[Compile, but don'\''t run benchmarks]' \
            {-p,--package}'[Package to run benchmarks for]' \
            '--all[Alias for --workspace (deprecated)]' \
            '--workspace[Benchmark all packages in the workspace]' \
            '--exclude[Exclude packages from the benchmark]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--ignore-rust-version[Ignore `rust-version` specification in packages (unstable)]' \
            '--message-format[Error format]' \
            '--no-fail-fast[Run all benchmarks regardless of failure]' \
            '--unit-graph[Output build graph in JSON (unstable)]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_update {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            {-w,--workspace}'[Only update the workspace packages]' \
            {-p,--package}'[Package to update]' \
            '--aggressive[Force updating all dependencies of SPEC as well when used with -p]' \
            '--dry-run[Don'\''t actually write the lockfile]' \
            '--precise[Update a single dependency to exactly PRECISE when used with -p]' \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_search {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--index[Registry index URL to upload the package to]' \
            '--limit[Limit the number of results (default: 10, max: 100)]' \
            '--registry[Registry to use]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_publish {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--index[Registry index URL to upload the package to]' \
            '--token[Token to use when uploading]' \
            '--no-verify[Don'\''t verify the contents by building them]' \
            '--allow-dirty[Allow dirty working directories to be packaged]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--manifest-path[Path to Cargo.toml]':file:_files \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            '--dry-run[Perform all checks without uploading]' \
            '--registry[Registry to publish to]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_install {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            '--version[Specify a version to install]' \
            '--git[Git URL to install the specified crate from]' \
            '--branch[Branch to use when installing from git]' \
            '--tag[Tag to use when installing from git]' \
            '--rev[Specific commit to use when installing from git]' \
            '--path[Filesystem path to local crate to install]':file:_files \
            '--list[list all installed packages and their versions]' \
            {-j,--jobs}'[Number of parallel jobs, defaults to # of CPUs]' \
            {-f,--force}'[Force overwriting existing crates or binaries]' \
            '--no-track[Do not save tracking information]' \
            '--features[Space or comma separated list of features to activate]' \
            '--all-features[Activate all available features]' \
            '--no-default-features[Do not activate the `default` feature]' \
            '--profile[Install artifacts with the specified profile]':file:_files \
            '--debug[Build in debug mode instead of release mode]' \
            '--bin[Install only the specified binary]' \
            '--bins[Install all binaries]' \
            '--example[Install only the specified example]' \
            '--examples[Install all examples]' \
            '--target[Build for the target triple]' \
            '--target-dir[Directory for all generated artifacts]':file:_files \
            '--root[Directory to install packages into]':file:_files \
            '--index[Registry index to install from]' \
            '--registry[Registry to use]' \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _cargo_uninstall {
        _arguments \
            {-q,--quiet}'[No output printed to stdout]' \
            {-p,--package}'[Package to uninstall]' \
            '--bin[Only uninstall the binary NAME]' \
            '--root[Directory to uninstall packages from]':file:_files \
            {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
            '--color[Coloring: auto, always, never]' \
            '--frozen[Require Cargo.lock and cache are up to date]' \
            '--locked[Require Cargo.lock is up to date]' \
            '--offline[Run without accessing the network]' \
            '--config[Override a configuration value (unstable)]' \
            '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }


function _cargo {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Compile the current package'
            'check:Analyze the current package and report errors, but don'\''t build object files'
            'clean:Remove the target directory'
            'doc:Build this package'\''s and its dependencies'\'' documentation'
            'new:Create a new cargo package'
            'init:Create a new cargo package in an existing directory'
            'run:Run a binary or example of the local package'
            'test:Run the tests'
            'bench:Run the benchmarks'
            'update:Update dependencies listed in Cargo.lock'
            'search:Search registry for crates'
            'publish:Package and upload this package to the registry'
            'install:Install a Rust binary. Default location is $HOME/.cargo/bin'
            'uninstall:Uninstall a Rust binary'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-V,--version}'[Print version info and exit]' \
        '--list[List installed commands]' \
        '--explain[Run `rustc --explain CODE`]' \
        {-v,--verbose}'[Use verbose output (-vv very verbose/build.rs output)]' \
        {-q,--quiet}'[No output printed to stdout]' \
        '--color[Coloring: auto, always, never]' \
        '--frozen[Require Cargo.lock and cache are up to date]' \
        '--locked[Require Cargo.lock is up to date]' \
        '--offline[Run without accessing the network]' \
        '--config[Override a configuration value (unstable)]' \
        '-Z[Unstable (nightly-only) flags to Cargo, see '\''cargo -Z help'\'' for details]' \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _cargo_build
            ;;

        (check)
            _cargo_check
            ;;

        (clean)
            _cargo_clean
            ;;

        (doc)
            _cargo_doc
            ;;

        (new)
            _cargo_new
            ;;

        (init)
            _cargo_init
            ;;

        (run)
            _cargo_run
            ;;

        (test)
            _cargo_test
            ;;

        (bench)
            _cargo_bench
            ;;

        (update)
            _cargo_update
            ;;

        (search)
            _cargo_search
            ;;

        (publish)
            _cargo_publish
            ;;

        (install)
            _cargo_install
            ;;

        (uninstall)
            _cargo_uninstall
            ;;

        esac
        ;;
     esac

}

