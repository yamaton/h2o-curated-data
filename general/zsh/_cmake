#compdef _cmake cmake

# Auto-generated with h2o


function _cmake {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-S[Path to root directory of the CMake project to build.]':file:_files \
        '-B[Path to directory which CMake will use as the root of build directory.]':file:_files \
        '-C[Pre-load a script to populate the cache.]' \
        '-D[Create or update a CMake CACHE entry.]' \
        '-U[Remove matching entries from CMake CACHE.]' \
        '-G[Specify a build system generator.]' \
        '-T[Toolset specification for the generator, if supported.]' \
        '-A[Specify platform name if supported by generator.]' \
        '--toolchain[Specify the cross compiling toolchain file, equivalent to setting CMAKE_TOOLCHAIN_FILE variable.]':file:_files \
        '--install-prefix[Specify the installation directory, used by the CMAKE_INSTALL_PREFIX variable. Must be an absolute path.]':file:_files \
        '-Wno-dev[Suppress developer warnings.]' \
        '-Wdev[Enable developer warnings.]' \
        '-Werror[Make developer warnings errors.]' \
        '-Wno-error[Make developer warnings not errors.]' \
        '-Wdeprecated[Enable deprecated functionality warnings.]' \
        '-Wno-deprecated[Suppress deprecated functionality warnings.]' \
        '-Werror[Make deprecated macro and function warnings errors.]' \
        '-Wno-error[Make deprecated macro and function warnings not errors.]' \
        '-L[List non-advanced cached variables.]' \
        '-N[View mode only.]' \
        '--graphviz[Generate graphviz of dependencies, see CMakeGraphVizOptions for more.]':file:_files \
        '--system-information[Dump information about this system.]':file:_files \
        '--log-level[Set the log level.]' \
        '--log-context[Enable the message() command outputting context attached to each message.]' \
        '--debug-trycompile[Do not delete the try_compile() build tree. Only useful on one try_compile() at a time.]' \
        '--debug-output[Put cmake in a debug mode.]' \
        '--debug-find[Put cmake find commands in a debug mode.]' \
        '--trace[Put cmake in trace mode.]' \
        '--trace-expand[Put cmake in trace mode.]' \
        '--trace-format[Put cmake in trace mode and sets the trace output format.]' \
        '--trace-source[Put cmake in trace mode, but output only lines of a specified file.]':file:_files \
        '--trace-redirect[Put cmake in trace mode and redirect trace output to a file instead of stderr.]':file:_files \
        '--warn-uninitialized[Warn about uninitialized values.]' \
        '--warn-unused-vars[Does nothing. In CMake versions 3.2 and below this enabled warnings about unused variables. In CMake versions 3.3 through 3.18 the option was broken. In CMake 3.19 and above the option has been removed.]' \
        '--no-warn-unused-cli[Don'\''t warn about command line options.]' \
        '--check-system-vars[Find problems with variable usage in system files.]' \
        '--profiling-output[Used in conjunction with --profiling-format to output to a given path.]':file:_files \
        '--profiling-format[Enable the output of profiling data of CMake script in the given format.]':file:_files \
        '--preset[Reads a preset from <path-to-source>/CMakePresets.json and <path-to-source>/CMakeUserPresets.json. The preset may specify the generator and the build directory, and a list of variables and other arguments to pass to CMake. The current working directory must contain CMake preset files. The CMake GUI can also recognize CMakePresets.json and CMakeUserPresets.json files. For full details on these files, see cmake-presets(7).]' \
        '--list-presets[Lists the available presets. If no option is specified only configure presets will be listed. The current working directory must contain CMake preset files.]' \
        '--build[Project binary directory to be built. This is required (unless a preset is specified) and must be first.]':file:_files \
        '--preset[Use a build preset to specify build options. The project binary directory is inferred from the configurePreset key. The current working directory must contain CMake preset files. See preset for more details.]' \
        '--list-presets[Lists the available build presets. The current working directory must contain CMake preset files.]' \
        {--parallel,-j}'[The maximum number of concurrent processes to use when building. If <jobs> is omitted the native build tool'\''s default number is used.]' \
        {--target,-t}'[Build <tgt> instead of the default target. Multiple targets may be given, separated by spaces.]' \
        '--config[For multi-configuration tools, choose configuration <cfg>.]' \
        '--clean-first[Build target clean first, then build. (To clean only, use --target clean.)]' \
        '--use-stderr[Ignored. Behavior is default in CMake >= 3.0.]' \
        {--verbose,-v}'[Enable verbose output - if supported - including the build commands to be executed.]' \
        '--[Pass remaining options to the native tool.]' \
        '--install[Project binary directory to install. This is required and must be first.]':file:_files \
        '--config[For multi-configuration generators, choose configuration <cfg>.]' \
        '--component[Component-based install. Only install component <comp>.]' \
        '--default-directory-permissions[Default directory install permissions. Permissions in format <u=rwx,g=rx,o=rx>.]' \
        '--prefix[Override the installation prefix, CMAKE_INSTALL_PREFIX.]' \
        '--strip[Strip before installing.]' \
        {-v,--verbose}'[Enable verbose output.]' \
        '--zstd[Compress the resulting archive with Zstandard.]' \
        '--files-from[Read file names from the given file, one per line. Blank lines are ignored. Lines may not start in - except for --add-file=<name> to add files whose names start in -.]':file:_files \
        '--format[Specify the format of the archive to be created. Supported formats are: 7zip, gnutar, pax, paxr (restricted pax, default), and zip.]' \
        '--mtime[Specify modification time recorded in tarball entries.]' \
        '--help-full[Print all help manuals and exit.]' \
        '--help-manual[Print one help manual and exit.]' \
        '--help-manual-list[List help manuals available and exit.]' \
        '--help-command[Print help for one command and exit.]' \
        '--help-command-list[List commands with help available and exit.]' \
        '--help-commands[Print cmake-commands manual and exit.]' \
        '--help-module[Print help for one module and exit.]' \
        '--help-module-list[List modules with help available and exit.]' \
        '--help-modules[Print cmake-modules manual and exit.]' \
        '--help-policy[Print help for one policy and exit.]' \
        '--help-policy-list[List policies with help available and exit.]' \
        '--help-policies[Print cmake-policies manual and exit.]' \
        '--help-property[Print help for one property and exit.]' \
        '--help-property-list[List properties with help available and exit.]' \
        '--help-properties[Print cmake-properties manual and exit.]' \
        '--help-variable[Print help for one variable and exit.]' \
        '--help-variable-list[List variables with help available and exit.]' \
        '--help-variables[Print cmake-variables manual and exit.]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

