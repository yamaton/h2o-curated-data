#compdef conda

# Auto-generated with h2o


function _conda {
    local line state

    function _commands {
        local -a commands
        commands=(
            'activate:Activate a conda environment'
            'deactivate:Dectivate a conda environment'
            'clean:Remove unused packages and caches.'
            'compare:Compare packages between conda environments.'
            'config:Modify configuration values in .condarc. This is modeled'
            'create:Create a new conda environment from a list of specified'
            'info:Display information about current conda install.'
            'init:Initialize conda for shell interaction.'
            'install:Installs a list of packages into a specified conda'
            'list:List installed packages in a conda environment.'
            'package:Low-level conda package utility. (EXPERIMENTAL)'
            'remove:Remove a list of packages from a specified conda'
            'rename:Renames an existing environment.'
            'run:Run an executable in a conda environment.'
            'search:Search for packages and display associated'
            'update:Updates conda packages to the latest compatible version.'
            'notices:Retrieves latest channel notifications.'
            'doctor:A subcommand that displays environment health report'
            'env:conda env available from other packages (legacy)'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        {-V,--version}'[Show the conda version number and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (activate)
            _conda_activate
            ;;

        (deactivate)
            _conda_deactivate
            ;;

        (clean)
            _conda_clean
            ;;

        (compare)
            _conda_compare
            ;;

        (config)
            _conda_config
            ;;

        (create)
            _conda_create
            ;;

        (info)
            _conda_info
            ;;

        (init)
            _conda_init
            ;;

        (install)
            _conda_install
            ;;

        (list)
            _conda_list
            ;;

        (package)
            _conda_package
            ;;

        (remove)
            _conda_remove
            ;;

        (rename)
            _conda_rename
            ;;

        (run)
            _conda_run
            ;;

        (search)
            _conda_search
            ;;

        (update)
            _conda_update
            ;;

        (notices)
            _conda_notices
            ;;

        (doctor)
            _conda_doctor
            ;;

        (env)
            _conda_env
            ;;

        esac
        ;;
     esac

}

function _conda_activate {
    _arguments \
        "*: :_files"

}

function _conda_deactivate {
    _arguments \
        "*: :_files"

}

function _conda_clean {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-a,--all}'[Remove index cache, lock files, unused cache packages, tarballs, and logfiles.]' \
        {-i,--index-cache}'[Remove index cache.]' \
        {-p,--packages}'[Remove unused packages from writable package caches. WARNING: This does not check for packages installed using symlinks back to the package cache.]' \
        {-t,--tarballs}'[Remove cached package tarballs.]' \
        {-f,--force-pkgs-dirs}'[Remove *all* writable package caches. This option is not included with the --all flag. WARNING: This will break environments with packages installed using symlinks back to the package cache.]' \
        {-c,--tempfiles}'[Remove temporary files that could not be deleted earlier due to being in-use. The argument for the --tempfiles flag is a path (or list of paths) to the environment(s) where the tempfiles should be found and removed.]':file:_files \
        {-l,--logfiles}'[Remove log files.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        "*: :_files"

}

function _conda_compare {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

function _conda_config {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        '--system[Write to the system .condarc file at '\''$CONDA_PREFIX/.condarc'\''.]' \
        '--env[Write to the active conda environment .condarc file ($CONDA_PREFIX). If no environment is active, write to the user config file (~/.condarc).]' \
        '--file[Write to the given file.]':file:_files \
        '--show[Display configuration values as calculated and compiled. If no arguments given, show information for all configuration values.]' \
        '--show-sources[Display all identified configuration sources.]' \
        '--validate[Validate all configuration sources. Iterates over all .condarc files and checks for parsing errors.]' \
        '--describe[Describe given configuration parameters. If no arguments given, show information for all configuration parameters.]' \
        '--write-default[Write the default configuration to a file. Equivalent to `conda config --describe > ~/.condarc`.]' \
        '--get[Get a configuration value.]' \
        '--append[Add one configuration value to the end of a list key.]' \
        {--prepend,--add}'[Add one configuration value to the beginning of a list key.]' \
        '--set[Set a boolean or string key.]' \
        '--remove[Remove a configuration value from a list key. This removes all instances of the value.]' \
        '--remove-key[Remove a configuration key (and all its values).]' \
        '--stdin[Apply configuration information given in yaml format piped through stdin.]' \
        "*: :_files"

}

function _conda_create {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--clone[Create a new environment as a copy of an existing local environment.]' \
        '--file[Read package versions from the given file. Repeated file specifications can be passed (e.g. --file=file1 --file=file2).]':file:_files \
        '--dev[Use `sys.executable -m conda` in wrapper scripts instead of CONDA_EXE. This is mainly for use during tests where we test new conda sources against old Python versions.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        '--strict-channel-priority[Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.]' \
        '--no-channel-priority[Package version takes precedence over channel priority. Overrides the value given by `conda config --show channel_priority`.]' \
        '--no-deps[Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.]' \
        '--only-deps[Only install dependencies.]' \
        '--no-pin[Ignore pinned file.]' \
        '--no-default-packages[Ignore create_default_packages in the .condarc file.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        '--copy[Install all packages using copies instead of hard- or soft-linking.]' \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        '--download-only[Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.]' \
        '--show-channel-urls[Show channel urls. Overrides the value given by `conda config --show show_channel_urls`.]' \
        "*: :_files"

}

function _conda_info {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-a,--all}'[Show all information.]' \
        '--base[Display base environment path.]' \
        {-e,--envs}'[List all known conda environments.]' \
        {-s,--system}'[List environment variables.]' \
        '--unsafe-channels[Display list of channels with tokens exposed.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_init {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--all[Initialize all currently available shells.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--user[Initialize conda for the current user (default).]' \
        '--no-user[Don'\''t initialize conda for the current user.]' \
        '--system[Initialize conda for all users on the system.]' \
        '--reverse[Undo effects of last conda init.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_install {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--revision[Revert to the specified REVISION.]' \
        '--file[Read package versions from the given file. Repeated file specifications can be passed (e.g. --file=file1 --file=file2).]':file:_files \
        '--dev[Use `sys.executable -m conda` in wrapper scripts instead of CONDA_EXE. This is mainly for use during tests where we test new conda sources against old Python versions.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        '--strict-channel-priority[Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.]' \
        '--no-channel-priority[Package version takes precedence over channel priority. Overrides the value given by `conda config --show channel_priority`.]' \
        '--no-deps[Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.]' \
        '--only-deps[Only install dependencies.]' \
        '--no-pin[Ignore pinned file.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        '--force-reinstall[Ensure that any user-requested package for the current operation is uninstalled and reinstalled, even if that package already exists in the environment.]' \
        {--freeze-installed,--no-update-deps}'[Do not update or change already-installed dependencies.]' \
        '--update-deps[Update dependencies that have available updates.]' \
        {-S,--satisfied-skip-solve}'[Exit early and do not run the solver if the requested specs are satisfied. Also skips aggressive updates as configured by the '\''aggressive_update_packages'\'' config setting. Use '\''conda info --describe aggressive_update_packages'\'' to view your setting. --satisfied-skip-solve is similar to the default behavior of '\''pip install'\''.]' \
        {--update-all,--all}'[Update all installed packages in the environment.]' \
        '--update-specs[Update based on provided specifications.]' \
        '--copy[Install all packages using copies instead of hard- or soft-linking.]' \
        {-m,--mkdir}'[Create the environment directory, if necessary.]' \
        '--clobber[Allow clobbering (i.e. overwriting) of overlapping file paths within packages and suppress related warnings.]' \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        '--download-only[Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.]' \
        '--show-channel-urls[Show channel urls. Overrides the value given by `conda config --show show_channel_urls`.]' \
        "*: :_files"

}

function _conda_list {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--show-channel-urls[Show channel urls. Overrides the value given by `conda config --show show_channel_urls`.]' \
        '--reverse[List installed packages in reverse order.]' \
        {-c,--canonical}'[Output canonical names of packages only.]' \
        {-f,--full-name}'[Only search for full names, i.e., ^<regex>$. --full-name NAME is identical to regex '\''^NAME$'\''.]' \
        '--explicit[List explicitly all installed conda packages with URL (output may be used by conda create --file).]' \
        '--md5[Add MD5 hashsum when using --explicit.]' \
        {-e,--export}'[Output explicit, machine-readable requirement strings instead of human-readable lists of packages. This output may be used by conda create --file.]' \
        {-r,--revisions}'[List the revision history.]' \
        '--no-pip[Do not include pip-only installed packages.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_package {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-w,--which}'[Given some file'\''s PATH, print which conda package the file came from.]':file:_files \
        {-r,--reset}'[Remove all untracked files and exit.]' \
        {-u,--untracked}'[Display all untracked files and exit.]' \
        '--pkg-name[Designate package name of the package being created.]' \
        '--pkg-version[Designate package version of the package being created.]' \
        '--pkg-build[Designate package build number of the package being created.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

function _conda_remove {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--dev[Use `sys.executable -m conda` in wrapper scripts instead of CONDA_EXE. This is mainly for use during tests where we test new conda sources against old Python versions.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        '--all[Remove all packages, i.e., the entire environment.]' \
        '--features[Remove features (instead of packages).]' \
        {--force-remove,--force}'[Forces removal of a package without removing packages that depend on it. Using this option will usually leave your environment in a broken and inconsistent state.]' \
        '--no-pin[Ignore pinned package(s) that apply to the current operation. These pinned packages might come from a .condarc file or a file in <TARGET_ENVIRONMENT>/conda-meta/pinned.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        "*: :_files"

}

function _conda_rename {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--force[Force rename of an environment.]' \
        {-d,--dry-run}'[Only display what would have been done by the current command, arguments, and other flags.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

function _conda_run {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        '--dev[Sets `CONDA_EXE` to `python -m conda`, assuming the current working directory contains the root of conda development sources. This is mainly for use during tests where we test new conda sources against old Python versions.]' \
        '--debug-wrapper-scripts[When this is set, where implemented, the shell wrapper scriptswill use the echo command to print debugging information to stderr (standard error).]' \
        '--cwd[Current working directory for command to run in. Defaults to the user'\''s current working directory if no directory is specified.]' \
        {--no-capture-output,--live-stream}'[Don'\''t capture stdout/stderr (standard out/standard error).]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

function _conda_search {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--envs[Search all of the current user'\''s environments. If run as Administrator (on Windows) or UID 0 (on unix), search all known environments on the system.]' \
        {-i,--info}'[Provide detailed information about each package.]' \
        {--subdir,--platform}'[Search the given subdir. Should be formatted like '\''osx-64'\'', '\''linux-32'\'', '\''win-64'\'', and so on. The default is to search the current platform.]':file:_files \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_update {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--file[Read package versions from the given file. Repeated file specifications can be passed (e.g. --file=file1 --file=file2).]':file:_files \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        '--strict-channel-priority[Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.]' \
        '--no-channel-priority[Package version takes precedence over channel priority. Overrides the value given by `conda config --show channel_priority`.]' \
        '--no-deps[Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.]' \
        '--only-deps[Only install dependencies.]' \
        '--no-pin[Ignore pinned file.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        '--force-reinstall[Ensure that any user-requested package for the current operation is uninstalled and reinstalled, even if that package already exists in the environment.]' \
        {--freeze-installed,--no-update-deps}'[Do not update or change already-installed dependencies.]' \
        '--update-deps[Update dependencies that have available updates.]' \
        {-S,--satisfied-skip-solve}'[Exit early and do not run the solver if the requested specs are satisfied. Also skips aggressive updates as configured by the '\''aggressive_update_packages'\'' config setting. Use '\''conda info --describe aggressive_update_packages'\'' to view your setting. --satisfied-skip-solve is similar to the default behavior of '\''pip install'\''.]' \
        {--update-all,--all}'[Update all installed packages in the environment.]' \
        '--update-specs[Update based on provided specifications.]' \
        '--copy[Install all packages using copies instead of hard- or soft-linking.]' \
        '--clobber[Allow clobbering of overlapping file paths within packages, and suppress related warnings.]' \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        '--download-only[Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.]' \
        '--show-channel-urls[Show channel urls. Overrides the value given by `conda config --show show_channel_urls`.]' \
        "*: :_files"

}

function _conda_notices {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-c,--channel}'[Additional channel to search for packages. These are URLs searched in the order they are given (including local directories using the '\''file://'\'' syntax or simply a path like '\''/home/conda/mychan'\'' or '\''../mychan'\''). Then, the defaults or channels from .condarc are searched (unless --override-channels is given). You can use '\''defaults'\'' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is https://conda.anaconda.org/.]' \
        '--use-local[Use locally built packages. Identical to '\''-c local'\''.]' \
        '--override-channels[Do not search default or .condarc channels. Requires --channel.]' \
        '--repodata-fn[Specify file name of repodata on the remote server where your channels are configured or within local backups. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is smaller and reduced in time scope. You may pass this flag more than once. Leftmost entries are tried first, and the fallback to repodata.json is added for you automatically. For more information, see conda config --describe repodata_fns.]' \
        '--experimental[jlap: Download incremental package index data from repodata.jlap; implies '\''lock'\''. lock: use locking when reading, updating index (repodata.json) cache.]' \
        "*: :_files"

}

function _conda_doctor {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-v,--verbose}'[generate a detailed environment health report]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}


function _conda_env {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create an environment based on an environment definition file. If using an environment.yml file (the default), you can name the environment in the first line of the file with '\''name: envname'\'' or you can specify the environment name in the CLI command using the -n/--name argument. The name specified in the CLI will override the name specified in the environment.yml file. Unless you are in the directory containing the environment definition file, use -f to specify the file path of the environment definition file you want to use.'
            'export:Export a given environment'
            'list:List the Conda environments'
            'remove:Remove an environment'
            'update:Update the current environment based on environment file'
            'config:Configure a conda environment'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _conda_env_create
            ;;

        (export)
            _conda_env_export
            ;;

        (list)
            _conda_env_list
            ;;

        (remove)
            _conda_env_remove
            ;;

        (update)
            _conda_env_update
            ;;

        (config)
            _conda_env_config
            ;;

        esac
        ;;
     esac

}

function _conda_env_create {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-f,--file}'[Environment definition file (default: environment.yml)]':file:_files \
        '--force[Force creation of environment (removing a previously-existing environment of the same name).]' \
        {-d,--dry-run}'[Only display what can be done with the current command, arguments, and other flags. Remove this flag to actually run the command.]' \
        '--no-default-packages[Ignore create_default_packages in the .condarc file.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired. This is useful if you don'\''t want conda to check whether a new version of the repodata file exists, which will save bandwidth.]' \
        {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
        '--offline[Offline mode. Don'\''t connect to the Internet.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_env_export {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-c,--channel}'[Additional channel to include in the export]' \
        '--override-channels[Do not include .condarc channels]' \
        {-f,--file}'[File name or path for the exported environment. Note: This will silently overwrite any existing file of the same name in the current directory.]':file:_files \
        '--no-builds[Remove build specification from dependencies]' \
        '--ignore-channels[Do not include channel names with package names.]' \
        '--from-history[Build environment spec from explicit specs in history]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_env_list {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_env_remove {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        {-d,--dry-run}'[Only display what would have been done.]' \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
        {-y,--yes}'[Sets any confirmation values to '\''yes'\'' automatically. Users will not be asked to confirm any adding, deleting, backups, etc.]' \
        "*: :_files"

}

function _conda_env_update {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-f,--file}'[environment definition (default: environment.yml)]':file:_files \
        '--prune[remove installed packages not defined in environment.yml]' \
        '--solver[Choose which solver backend to use.]' \
        '--experimental-solver[DEPRECATED. Please use '\''--solver'\'' instead.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}


function _conda_env_config {
    local line state

    function _commands {
        local -a commands
        commands=(
            'vars:Interact with environment variables associated with Conda environments'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (vars)
            _conda_env_config_vars
            ;;

        esac
        ;;
     esac

}


function _conda_env_config_vars {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List environment variables for a conda environment'
            'set:Set environment variables for a conda environment'
            'unset:Unset environment variables for a conda environment'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _conda_env_config_vars_list
            ;;

        (set)
            _conda_env_config_vars_set
            ;;

        (unset)
            _conda_env_config_vars_unset
            ;;

        esac
        ;;
     esac

}

function _conda_env_config_vars_list {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        '--json[Report all output as json. Suitable for using conda programmatically.]' \
        {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
        {-q,--quiet}'[Do not display progress bar.]' \
        "*: :_files"

}

function _conda_env_config_vars_set {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

function _conda_env_config_vars_unset {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-n,--name}'[Name of environment.]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
        "*: :_files"

}

_conda "$@"

