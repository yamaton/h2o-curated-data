#compdef _conda-env conda-env

# Auto-generated with h2o

    function _conda-env_create {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            {-f,--file}'[environment definition file (default: environment.yml)]':file:_files \
            '--force[force creation of environment (removing a previously existing environment of the same name).]' \
            {-d,--dry-run}'[Only display what would have been done.]' \
            '--no-default-packages[Ignore create_default_packages in the .condarc file.]' \
            '--experimental-solver[EXPERIMENTAL. Choose which solver backend to use.]' \
            {-n,--name}'[Name of environment.]' \
            {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
            {-C,--use-index-cache}'[Use cache of channel index files, even if it has expired.]' \
            {-k,--insecure}'[Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting '\''ssl_verify'\'' to '\''false'\''.]' \
            '--offline[Offline mode. Don'\''t connect to the Internet.]' \
            '--json[Report all output as json. Suitable for using conda programmatically.]' \
            {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
            {-q,--quiet}'[Do not display progress bar.]' \
            "*: :_files"

    }

    function _conda-env_export {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            {-c,--channel}'[Additional channel to include in the export]' \
            '--override-channels[Do not include .condarc channels]' \
            {-f,--file,--no-builds}'[Remove build specification from dependencies]':file:_files \
            '--ignore-channels[Do not include channel names with package names.]' \
            '--from-history[Build environment spec from explicit specs in history]' \
            {-n,--name}'[Name of environment.]' \
            {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
            '--json[Report all output as json. Suitable for using conda programmatically.]' \
            {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
            {-q,--quiet}'[Do not display progress bar.]' \
            "*: :_files"

    }

    function _conda-env_list {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            '--json[Report all output as json. Suitable for using conda programmatically.]' \
            {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
            {-q,--quiet}'[Do not display progress bar.]' \
            "*: :_files"

    }

    function _conda-env_remove {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            '--experimental-solver[EXPERIMENTAL. Choose which solver backend to use.]' \
            {-n,--name}'[Name of environment.]' \
            {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
            {-d,--dry-run}'[Only display what would have been done.]' \
            '--json[Report all output as json. Suitable for using conda programmatically.]' \
            {-q,--quiet}'[Do not display progress bar.]' \
            {-v,--verbose}'[Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.]' \
            {-y,--yes}'[Do not ask for confirmation.]' \
            "*: :_files"

    }

    function _conda-env_update {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            {-f,--file}'[environment definition (default: environment.yml)]':file:_files \
            '--prune[remove installed packages not defined in environment.yml]' \
            '--experimental-solver[EXPERIMENTAL. Choose which solver backend to use.]' \
            {-n,--name}'[Name of environment.]' \
            {-p,--prefix}'[Full path to environment location (i.e. prefix).]':file:_files \
            '--json[Report all output as json. Suitable for using conda programmatically.]' \
            {-v,--verbose}'[Use once for info, twice for debug, three times for trace.]' \
            {-q,--quiet}'[Do not display progress bar.]' \
            "*: :_files"

    }

    function _conda-env_config {
        _arguments \
            {-h,--help}'[Show this help message and exit.]' \
            "*: :_files"

    }


function _conda-env {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create an environment based on an environment file'
            'export:Export a given environment'
            'list:List the Conda environments'
            'remove:Remove an environment'
            'update:Update the current environment based on environment file'
            'config:Configure a conda environment'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _conda-env_create
            ;;

        (export)
            _conda-env_export
            ;;

        (list)
            _conda-env_list
            ;;

        (remove)
            _conda-env_remove
            ;;

        (update)
            _conda-env_update
            ;;

        (config)
            _conda-env_config
            ;;

        esac
        ;;
     esac

}

