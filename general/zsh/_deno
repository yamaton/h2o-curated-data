#compdef _deno deno

# Auto-generated with h2o

    function _deno_bench {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-sys[Allow access to system info]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            '--filter[Run benchmarks with this string or pattern in the bench name]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore files]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            '--watch[Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_bundle {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_cache {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_check {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--remote[Type-check all modules, including remote]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_compile {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-sys[Allow access to system info]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-o,--output}'[Output file (defaults to $PWD/<inferred-name>)]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--target[Target OS architecture]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            "*: :_files"

    }

    function _deno_completions {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_coverage {
        _arguments \
            '--exclude[Exclude source files from the report]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore coverage files]' \
            '--include[Include source files in the report]' \
            '--lcov[Output coverage report in lcov format]' \
            '--output[Exports the coverage report in lcov format to the given file. Filename should be passed along with '\''='\'' For example '\''--output=foo.lcov'\'' If no --output arg is specified then the report is written to stdout.]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_doc {
        _arguments \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--json[Output documentation in JSON format]' \
            '--private[Output private documentation]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript)]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript)]' \
            '--reload[Reload everything]' \
            '--reload[Reload only standard modules]' \
            '--reload[Reloads specific modules]' \
            '--reload[Reload all npm modules]' \
            '--reload[Reload specific npm module]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_eval {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            '--ext[Set standard input (stdin) content type]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-p,--print}'[print result to stdout]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            "*: :_files"

    }

    function _deno_fmt {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--check[Check if the source files are formatted]' \
            '--ext[Set standard input (stdin) content type]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore formatting particular source files]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--options-indent-width[Define indentation width. Defaults to 2.]' \
            '--options-line-width[Define maximum line width. Defaults to 80.]' \
            '--options-prose-wrap[Define how prose should be wrapped. Defaults to always.]' \
            '--options-single-quote[Use single quotes. Defaults to false.]' \
            '--options-use-tabs[Use tabs instead of spaces for indentation. Defaults to false.]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_help {
        _arguments \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_info {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--json[UNSTABLE: Outputs the information in JSON format]' \
            '--location[Show files used for origin bound APIs like the Web Storage API when running a script with '\''--location=<HREF>'\'']' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_init {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_install {
        _arguments \
            '-[Attempt to take the file stem of the URL path. The above example would become '\''file_server'\''.]' \
            '-[If the resulting name has an '\''@...'\'' suffix, strip it.]' \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-sys[Allow access to system info]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            {-f,--force}'[Forcefully overwrite existing installation]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            {-n,--name}'[Executable file name]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--root[Installation root]' \
            '--seed[Set the random number generator seed]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            "*: :_files"

    }

    function _deno_lint {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--compact[Output lint result in compact format]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore linting particular source files]' \
            '--json[Output lint result in JSON format]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--rules[List available rules]' \
            '--rules-exclude[Exclude lint rules]' \
            '--rules-include[Include lint rules]' \
            '--rules-tags[Use set of rules with a tag]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_lsp {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_repl {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            '--eval[Evaluates the provided code when the REPL starts.]' \
            '--eval-file[Evaluates the provided file(s) as scripts when the REPL starts. Accepts file paths and URLs.]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            "*: :_files"

    }

    function _deno_run {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-sys[Allow access to system info]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            '--watch[Watch for file changes and restart process automatically. Local files from entry point module graph are watched by default. Additional paths might be watched by passing them as arguments to this flag.]':file:_files \
            "*: :_files"

    }

    function _deno_task {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cwd[Specify the directory to run the task in]':file:_files \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_test {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-none[Don'\''t return error code if no test files are found]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-sys[Allow access to system info]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--check[Type-check modules.]' \
            '--coverage[UNSTABLE: Collect coverage profile data into DIR]':file:_files \
            '--doc[UNSTABLE: type-check code blocks]' \
            '--fail-fast[Stop after N errors. Defaults to stopping after first failure.]' \
            '--filter[Run tests with this string or pattern in the test name]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore files]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--lock-write[Force overwriting the lock file.]' \
            '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--no-lock[Disable auto discovery of the lock file.]' \
            '--no-npm[Do not resolve npm modules]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--no-run[Cache test modules, but don'\''t run tests]' \
            '--node-modules-dir[Creates a local node_modules folder]' \
            '--parallel[Run test modules in parallel. Parallelism defaults to the number of available CPUs or the value in the DENO_JOBS environment variable.]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Set the random number generator seed]' \
            '--shuffle[(UNSTABLE): Shuffle the order in which the tests are run]' \
            '--trace-ops[Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
            '--watch[Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_types {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_uninstall {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--root[Installation root]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_upgrade {
        _arguments \
            '--canary[Upgrade to canary builds]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--dry-run[Perform all checks without replacing old exe]' \
            {-f,--force}'[Replace current exe even if not out-of-date]' \
            {-h,--help}'[Print help information]' \
            '--output[The path to output the updated version to]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            '--unstable[Enable unstable features and APIs]' \
            '--version[The version to upgrade to]' \
            "*: :_files"

    }

    function _deno_vendor {
        _arguments \
            {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.27.2/getting_started/configuration_file]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-f,--force}'[Forcefully overwrite conflicting files in existing output directory]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL.]':file:_files \
            '--lock[Check the specified lock file. If value is not provided, defaults to "deno.lock" in the current working directory.]':file:_files \
            '--no-config[Disable automatic loading of the configuration file.]' \
            '--output[The directory to output the vendored modules to]' \
            {-q,--quiet}'[Suppress diagnostic output]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }


function _deno {
    local line state

    function _commands {
        local -a commands
        commands=(
            'bench:Run benchmarks'
            'bundle:Bundle module and dependencies into single file'
            'cache:Cache the dependencies'
            'check:Type-check the dependencies'
            'compile:UNSTABLE: Compile the script into a self contained executable'
            'completions:Generate shell completions'
            'coverage:Print coverage reports'
            'doc:Show documentation for a module'
            'eval:Eval script'
            'fmt:Format source files'
            'help:Print this message or the help of the given subcommand(s)'
            'info:Show info about cache or info related to source file'
            'init:Initialize a new project'
            'install:Install script as an executable'
            'lint:Lint source files'
            'lsp:Start the language server'
            'repl:Read Eval Print Loop'
            'run:Run a JavaScript or TypeScript program'
            'task:Run a task defined in the configuration file'
            'test:Run tests'
            'types:Print runtime TypeScript declarations'
            'uninstall:Uninstall a script previously installed with deno install'
            'upgrade:Upgrade deno executable to given version'
            'vendor:Vendor remote modules into a local directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print help information]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--unstable[Enable unstable features and APIs]' \
        {-V,--version}'[Print version information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (bench)
            _deno_bench
            ;;

        (bundle)
            _deno_bundle
            ;;

        (cache)
            _deno_cache
            ;;

        (check)
            _deno_check
            ;;

        (compile)
            _deno_compile
            ;;

        (completions)
            _deno_completions
            ;;

        (coverage)
            _deno_coverage
            ;;

        (doc)
            _deno_doc
            ;;

        (eval)
            _deno_eval
            ;;

        (fmt)
            _deno_fmt
            ;;

        (help)
            _deno_help
            ;;

        (info)
            _deno_info
            ;;

        (init)
            _deno_init
            ;;

        (install)
            _deno_install
            ;;

        (lint)
            _deno_lint
            ;;

        (lsp)
            _deno_lsp
            ;;

        (repl)
            _deno_repl
            ;;

        (run)
            _deno_run
            ;;

        (task)
            _deno_task
            ;;

        (test)
            _deno_test
            ;;

        (types)
            _deno_types
            ;;

        (uninstall)
            _deno_uninstall
            ;;

        (upgrade)
            _deno_upgrade
            ;;

        (vendor)
            _deno_vendor
            ;;

        esac
        ;;
     esac

}

