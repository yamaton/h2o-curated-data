#compdef _deno deno

# Auto-generated with h2o

    function _deno_bundle {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            {-L,--log-level}'[Set log level]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-remote[Do not resolve remote modules]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[UNSTABLE: Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_cache {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            {-L,--log-level}'[Set log level]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-remote[Do not resolve remote modules]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_compile {
        _arguments \
            '-[Attempt to take the file stem of the URL path. The above example would become '\''file_server'\''.]' \
            '-[If the resulting name has an '\''@...'\'' suffix, strip it.]' \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            {-o,--output}'[Output file (defaults to $PWD/<inferred-name>)]' \
            '--prompt[deprecated: Fallback to prompt if required permission wasn'\''t passed]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Seed Math.random()]' \
            '--target[Target OS architecture]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            "*: :_files"

    }

    function _deno_completions {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-L,--log-level}'[Set log level]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_coverage {
        _arguments \
            '--exclude[Exclude source files from the report]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore coverage files]' \
            '--include[Include source files in the report]' \
            {-L,--log-level}'[Set log level]' \
            '--lcov[Output coverage report in lcov format]' \
            '--output[Exports the coverage report in lcov format to the given file. Filename should be passed along with '\''='\'' For example '\''--output=foo.lcov'\'' If no --output arg is specified then the report is written to stdout.]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_doc {
        _arguments \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--json[Output documentation in JSON format]' \
            {-L,--log-level}'[Set log level]' \
            '--private[Output private documentation]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_eval {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            '--ext[Set standard input (stdin) content type]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-remote[Do not resolve remote modules]' \
            {-p,--print}'[print result to stdout]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Seed Math.random()]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            "*: :_files"

    }

    function _deno_fmt {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--check[Check if the source files are formatted]' \
            '--ext[Set standard input (stdin) content type]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore formatting particular source files]' \
            {-L,--log-level}'[Set log level]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--options-indent-width[Define indentation width. Defaults to 2.]' \
            '--options-line-width[Define maximum line width. Defaults to 80.]' \
            '--options-prose-wrap[Define how prose should be wrapped. Defaults to always.]' \
            '--options-single-quote[Use single quotes. Defaults to false.]' \
            '--options-use-tabs[Use tabs instead of spaces for indentation. Defaults to false.]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[UNSTABLE: Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_info {
        _arguments \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--json[UNSTABLE: Outputs the information in JSON format]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Show files used for origin bound APIs like the Web Storage API when running a script with '\''--location=<HREF>'\'']' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_install {
        _arguments \
            '-[Attempt to take the file stem of the URL path. The above example would become '\''file_server'\''.]' \
            '-[If the resulting name has an '\''@...'\'' suffix, strip it.]' \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            {-f,--force}'[Forcefully overwrite existing installation]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            {-n,--name}'[Executable file name]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--prompt[deprecated: Fallback to prompt if required permission wasn'\''t passed]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--root[Installation root]' \
            '--seed[Seed Math.random()]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            "*: :_files"

    }

    function _deno_lint {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore linting particular source files]' \
            '--json[Output lint result in JSON format]' \
            {-L,--log-level}'[Set log level]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--rules[List available rules]' \
            '--rules-exclude[Exclude lint rules]' \
            '--rules-include[Include lint rules]' \
            '--rules-tags[Use set of rules with a tag]' \
            '--unstable[Enable unstable features and APIs]' \
            '--watch[UNSTABLE: Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_lsp {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-L,--log-level}'[Set log level]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_repl {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            '--eval[Evaluates the provided code when the REPL starts.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-remote[Do not resolve remote modules]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Seed Math.random()]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            "*: :_files"

    }

    function _deno_run {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--prompt[deprecated: Fallback to prompt if required permission wasn'\''t passed]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Seed Math.random()]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            '--watch[UNSTABLE: Watch for file changes and restart process automatically. Local files from entry point module graph are watched by default. Additional paths might be watched by passing them as arguments to this flag.]':file:_files \
            "*: :_files"

    }

    function _deno_test {
        _arguments \
            {-A,--allow-all}'[Allow all permissions]' \
            '--allow-env[Allow environment access]' \
            '--allow-ffi[Allow loading dynamic libraries]' \
            '--allow-hrtime[Allow high resolution time measurement]' \
            '--allow-net[Allow network access]' \
            '--allow-none[Don'\''t return error code if no test files are found]' \
            '--allow-read[Allow file system read access]' \
            '--allow-run[Allow running subprocesses]' \
            '--allow-write[Allow file system write access]' \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cached-only[Require that remote dependencies are already cached]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--compat[Node compatibility mode. Currently only enables built-in node modules like '\''fs'\'' and globals like '\''process'\''.]' \
            '--coverage[UNSTABLE: Collect coverage profile data into DIR]':file:_files \
            '--doc[UNSTABLE: type check code blocks]' \
            '--fail-fast[Stop after N errors. Defaults to stopping after first failure.]' \
            '--filter[Run tests with this string or pattern in the test name]' \
            {-h,--help}'[Print help information]' \
            '--ignore[Ignore files]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
            '--inspect-brk[Activate inspector on host:port and break at start of user script]' \
            {-j,--jobs}'[Number of parallel workers, defaults to # of CPUs when no value is provided. Defaults to 1 when the option is not present.]' \
            {-L,--log-level}'[Set log level]' \
            '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
            '--lock[Check the specified lock file]':file:_files \
            '--lock-write[Write lock file (use with --lock)]' \
            '--no-check[Skip type checking of modules. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
            '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
            '--no-prompt[Always throw if required permission wasn'\''t passed]' \
            '--no-remote[Do not resolve remote modules]' \
            '--no-run[Cache test modules, but don'\''t run tests]' \
            '--prompt[deprecated: Fallback to prompt if required permission wasn'\''t passed]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--seed[Seed Math.random()]' \
            '--shuffle[(UNSTABLE): Shuffle the order in which the tests are run]' \
            '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
            '--unstable[Enable unstable features and APIs]' \
            '--v8-flags[Set V8 command line options (for help: --v8-flags=--help)]' \
            '--watch[UNSTABLE: Watch for file changes and restart process automatically. Only local files from entry point module graph are watched.]' \
            "*: :_files"

    }

    function _deno_types {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-L,--log-level}'[Set log level]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_uninstall {
        _arguments \
            {-h,--help}'[Print help information]' \
            {-L,--log-level}'[Set log level]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--root[Installation root]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }

    function _deno_upgrade {
        _arguments \
            '--canary[Upgrade to canary builds]' \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            '--dry-run[Perform all checks without replacing old exe]' \
            {-f,--force}'[Replace current exe even if not out-of-date]' \
            {-h,--help}'[Print help information]' \
            {-L,--log-level}'[Set log level]' \
            '--output[The path to output the updated version to]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            '--unstable[Enable unstable features and APIs]' \
            '--version[The version to upgrade to]' \
            "*: :_files"

    }

    function _deno_vendor {
        _arguments \
            {-c,--config}'[Load configuration file. Before 1.14 Deno only supported loading tsconfig.json that allowed to customise TypeScript compiler settings.]':file:_files \
            '--cert[Load certificate authority from PEM encoded file]':file:_files \
            {-f,--force}'[Forcefully overwrite conflicting files in existing output directory]' \
            {-h,--help}'[Print help information]' \
            '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
            {-L,--log-level}'[Set log level]' \
            '--lock[Check the specified lock file]':file:_files \
            '--output[The directory to output the vendored modules to]' \
            {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
            {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
            '--unstable[Enable unstable features and APIs]' \
            "*: :_files"

    }


function _deno {
    local line state

    function _commands {
        local -a commands
        commands=(
            'bundle:Bundle module and dependencies into single file'
            'cache:Cache the dependencies'
            'compile:UNSTABLE: Compile the script into a self contained executable'
            'completions:Generate shell completions'
            'coverage:Print coverage reports'
            'doc:Show documentation for a module'
            'eval:Eval script'
            'fmt:Format source files'
            'info:Show info about cache or info related to source file'
            'install:Install script as an executable'
            'lint:Lint source files'
            'lsp:Start the language server'
            'repl:Read Eval Print Loop'
            'run:Run a JavaScript or TypeScript program'
            'test:Run tests'
            'types:Print runtime TypeScript declarations'
            'uninstall:Uninstall a script previously installed with deno install'
            'upgrade:Upgrade deno executable to given version'
            'vendor:Vendor remote modules into a local directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print help information]' \
        {-L,--log-level}'[Set log level]' \
        {-q,--quiet}'[Suppress diagnostic output By default, subcommands print human-readable diagnostic messages to stderr. If the flag is set, restrict these messages to errors.]' \
        '--unstable[Enable unstable features and APIs]' \
        {-V,--version}'[Print version information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (bundle)
            _deno_bundle
            ;;

        (cache)
            _deno_cache
            ;;

        (compile)
            _deno_compile
            ;;

        (completions)
            _deno_completions
            ;;

        (coverage)
            _deno_coverage
            ;;

        (doc)
            _deno_doc
            ;;

        (eval)
            _deno_eval
            ;;

        (fmt)
            _deno_fmt
            ;;

        (info)
            _deno_info
            ;;

        (install)
            _deno_install
            ;;

        (lint)
            _deno_lint
            ;;

        (lsp)
            _deno_lsp
            ;;

        (repl)
            _deno_repl
            ;;

        (run)
            _deno_run
            ;;

        (test)
            _deno_test
            ;;

        (types)
            _deno_types
            ;;

        (uninstall)
            _deno_uninstall
            ;;

        (upgrade)
            _deno_upgrade
            ;;

        (vendor)
            _deno_vendor
            ;;

        esac
        ;;
     esac

}

