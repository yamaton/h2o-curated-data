#compdef _docker docker

# Auto-generated with h2o

    function _docker_attach {
        _arguments \
            '--detach-keys[Override the key sequence for detaching a container]' \
            '--no-stdin[Do not attach STDIN]' \
            '--sig-proxy[Proxy all received signals to the process (default true)]' \
            "*: :_files"

    }

    function _docker_build {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
            '--build-arg[Set build-time variables]' \
            '--cache-from[Images to consider as cache sources]' \
            '--cgroup-parent[Optional parent cgroup for the container]' \
            '--compress[Compress the build context using gzip]' \
            '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
            '--disable-content-trust[Skip image verification (default true)]' \
            {-f,--file}'[Name of the Dockerfile (Default is '\''PATH/Dockerfile'\'')]' \
            '--force-rm[Always remove intermediate containers]' \
            '--iidfile[Write the image ID to the file]' \
            '--isolation[Container isolation technology]' \
            '--label[Set metadata for an image]' \
            {-m,--memory}'[Memory limit]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--network[Set the networking mode for the RUN instructions during build (default "default")]' \
            '--no-cache[Do not use cache when building the image]' \
            '--pull[Always attempt to pull a newer version of the image]' \
            {-q,--quiet}'[Suppress the build output and print image ID on success]' \
            '--rm[Remove intermediate containers after a successful build (default true)]' \
            '--security-opt[Security options]' \
            '--shm-size[Size of /dev/shm]' \
            '--squash[Squash newly built layers into a single new layer]' \
            {-t,--tag}'[Name and optionally a tag in the '\''name:tag'\'' format]' \
            '--target[Set the target build stage to build.]' \
            '--ulimit[Ulimit options (default \[\])]' \
            "*: :_files"

    }

    function _docker_commit {
        _arguments \
            {-a,--author}'[Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")]' \
            {-c,--change}'[Apply Dockerfile instruction to the created image]' \
            {-m,--message}'[Commit message]' \
            {-p,--pause}'[Pause container during commit (default true)]' \
            "*: :_files"

    }

    function _docker_cp {
        _arguments \
            {-a,--archive}'[Archive mode (copy all uid/gid information)]' \
            {-L,--follow-link}'[Always follow symbol link in SRC_PATH]' \
            "*: :_files"

    }

    function _docker_create {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
            {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
            '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
            '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
            '--cap-add[Add Linux capabilities]' \
            '--cap-drop[Drop Linux capabilities]' \
            '--cgroup-parent[Optional parent cgroup for the container]' \
            '--cgroupns[Cgroup namespace to use (host|private)   '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
            '--cidfile[Write the container ID to the file]' \
            '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
            '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
            '--device[Add a host device to the container]' \
            '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
            '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
            '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
            '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
            '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
            '--disable-content-trust[Skip image verification (default true)]' \
            '--dns[Set custom DNS servers]' \
            '--dns-option[Set DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            '--domainname[Container NIS domain name]' \
            '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
            {-e,--env}'[Set environment variables]' \
            '--env-file[Read in a file of environment variables]' \
            '--expose[Expose a port or a range of ports]' \
            '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
            '--group-add[Add additional groups to join]' \
            '--health-cmd[Command to run to check health]' \
            '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
            '--health-retries[Consecutive failures needed to report unhealthy]' \
            '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
            '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
            '--help[Print usage]' \
            {-h,--hostname}'[Container host name]' \
            '--init[Run an init inside the container that forwards signals and reaps processes]' \
            {-i,--interactive}'[Keep STDIN open even if not attached]' \
            '--ip[IPv4 address (e.g., 172.30.100.104)]' \
            '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
            '--ipc[IPC mode to use]' \
            '--isolation[Container isolation technology]' \
            '--kernel-memory[Kernel memory limit]' \
            {-l,--label}'[Set meta data on a container]' \
            '--label-file[Read in a line delimited file of labels]' \
            '--link[Add link to another container]' \
            '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
            '--log-driver[Logging driver for the container]' \
            '--log-opt[Log driver options]' \
            '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
            {-m,--memory}'[Memory limit]' \
            '--memory-reservation[Memory soft limit]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
            '--mount[Attach a filesystem mount to the container]' \
            '--name[Assign a name to the container]' \
            '--network[Connect a container to a network]' \
            '--network-alias[Add network-scoped alias for the container]' \
            '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
            '--oom-kill-disable[Disable OOM Killer]' \
            '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
            '--pid[PID namespace to use]' \
            '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
            '--platform[Set platform if server is multi-platform capable]' \
            '--privileged[Give extended privileges to this container]' \
            {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
            {-P,--publish-all}'[Publish all exposed ports to random ports]' \
            '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
            '--read-only[Mount the container'\''s root filesystem as read only]' \
            '--restart[Restart policy to apply when a container exits (default "no")]' \
            '--rm[Automatically remove the container when it exits]' \
            '--runtime[Runtime to use for this container]' \
            '--security-opt[Security Options]' \
            '--shm-size[Size of /dev/shm]' \
            '--stop-signal[Signal to stop a container (default "SIGTERM")]' \
            '--stop-timeout[Timeout (in seconds) to stop a container]' \
            '--storage-opt[Storage driver options for the container]' \
            '--sysctl[Sysctl options (default map\[\])]' \
            '--tmpfs[Mount a tmpfs directory]' \
            {-t,--tty}'[Allocate a pseudo-TTY]' \
            '--ulimit[Ulimit options (default \[\])]' \
            {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
            '--userns[User namespace to use]' \
            '--uts[UTS namespace to use]' \
            {-v,--volume}'[Bind mount a volume]' \
            '--volume-driver[Optional volume driver for the container]' \
            '--volumes-from[Mount volumes from the specified container(s)]' \
            {-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _docker_diff {
        _arguments \
            "*: :_files"

    }

    function _docker_events {
        _arguments \
            {-f,--filter}'[Filter output based on conditions provided]' \
            '--format[Format the output using the given Go template]' \
            '--since[Show all events created since timestamp]' \
            '--until[Stream events until this timestamp]' \
            "*: :_files"

    }

    function _docker_exec {
        _arguments \
            {-d,--detach}'[Detached mode: run command in the background]' \
            '--detach-keys[Override the key sequence for detaching a container]' \
            {-e,--env}'[Set environment variables]' \
            '--env-file[Read in a file of environment variables]' \
            {-i,--interactive}'[Keep STDIN open even if not attached]' \
            '--privileged[Give extended privileges to the command]' \
            {-t,--tty}'[Allocate a pseudo-TTY]' \
            {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
            {-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _docker_export {
        _arguments \
            {-o,--output}'[Write to a file, instead of STDOUT]' \
            "*: :_files"

    }

    function _docker_history {
        _arguments \
            '--format[Pretty-print images using a Go template]' \
            {-H,--human}'[Print sizes and dates in human readable format (default true)]' \
            '--no-trunc[Don'\''t truncate output]' \
            {-q,--quiet}'[Only show image IDs]' \
            "*: :_files"

    }

    function _docker_images {
        _arguments \
            {-a,--all}'[Show all images (default hides intermediate images)]' \
            '--digests[Show digests]' \
            {-f,--filter}'[Filter output based on conditions provided]' \
            '--format[Pretty-print images using a Go template]' \
            '--no-trunc[Don'\''t truncate output]' \
            {-q,--quiet}'[Only show image IDs]' \
            "*: :_files"

    }

    function _docker_import {
        _arguments \
            {-c,--change}'[Apply Dockerfile instruction to the created image]' \
            {-m,--message}'[Set commit message for imported image]' \
            '--platform[Set platform if server is multi-platform capable]' \
            "*: :_files"

    }

    function _docker_info {
        _arguments \
            {-f,--format}'[Format the output using the given Go template]' \
            "*: :_files"

    }

    function _docker_inspect {
        _arguments \
            {-f,--format}'[Format the output using the given Go template]' \
            {-s,--size}'[Display total file sizes if the type is container]' \
            '--type[Return JSON for specified type]' \
            "*: :_files"

    }

    function _docker_kill {
        _arguments \
            {-s,--signal}'[Signal to send to the container (default "KILL")]' \
            "*: :_files"

    }

    function _docker_load {
        _arguments \
            {-i,--input}'[Read from tar archive file, instead of STDIN]' \
            {-q,--quiet}'[Suppress the load output]' \
            "*: :_files"

    }

    function _docker_login {
        _arguments \
            {-p,--password,--password-stdin}'[Take the password from stdin]' \
            {-u,--username}'[Username]' \
            "*: :_files"

    }

    function _docker_logout {
        _arguments \
            "*: :_files"

    }

    function _docker_logs {
        _arguments \
            '--details[Show extra details provided to logs]' \
            {-f,--follow}'[Follow log output]' \
            '--since[Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)]' \
            {-n,--tail}'[Number of lines to show from the end of the logs (default "all")]' \
            {-t,--timestamps}'[Show timestamps]' \
            '--until[Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)]' \
            "*: :_files"

    }

    function _docker_pause {
        _arguments \
            "*: :_files"

    }

    function _docker_port {
        _arguments \
            "*: :_files"

    }

    function _docker_ps {
        _arguments \
            {-a,--all}'[Show all containers (default shows just running)]' \
            {-f,--filter}'[Filter output based on conditions provided]' \
            '--format[Pretty-print containers using a Go template]' \
            {-n,--last}'[Show n last created containers (includes all states) (default -1)]' \
            {-l,--latest}'[Show the latest created container (includes all states)]' \
            '--no-trunc[Don'\''t truncate output]' \
            {-q,--quiet}'[Only display container IDs]' \
            {-s,--size}'[Display total file sizes]' \
            "*: :_files"

    }

    function _docker_pull {
        _arguments \
            {-a,--all-tags}'[Download all tagged images in the repository]' \
            '--disable-content-trust[Skip image verification (default true)]' \
            '--platform[Set platform if server is multi-platform capable]' \
            {-q,--quiet}'[Suppress verbose output]' \
            "*: :_files"

    }

    function _docker_push {
        _arguments \
            {-a,--all-tags}'[Push all tagged images in the repository]' \
            '--disable-content-trust[Skip image signing (default true)]' \
            {-q,--quiet}'[Suppress verbose output]' \
            "*: :_files"

    }

    function _docker_rename {
        _arguments \
            "*: :_files"

    }

    function _docker_restart {
        _arguments \
            {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
            "*: :_files"

    }

    function _docker_rm {
        _arguments \
            {-f,--force}'[Force the removal of a running container (uses SIGKILL)]' \
            {-l,--link}'[Remove the specified link]' \
            {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
            "*: :_files"

    }

    function _docker_rmi {
        _arguments \
            {-f,--force}'[Force removal of the image]' \
            '--no-prune[Do not delete untagged parents]' \
            "*: :_files"

    }

    function _docker_run {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
            {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
            '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
            '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
            '--cap-add[Add Linux capabilities]' \
            '--cap-drop[Drop Linux capabilities]' \
            '--cgroup-parent[Optional parent cgroup for the container]' \
            '--cgroupns[Cgroup namespace to use (host|private)   '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
            '--cidfile[Write the container ID to the file]' \
            '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
            '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
            {-d,--detach}'[Run container in background and print container ID]' \
            '--detach-keys[Override the key sequence for detaching a container]' \
            '--device[Add a host device to the container]' \
            '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
            '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
            '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
            '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
            '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
            '--disable-content-trust[Skip image verification (default true)]' \
            '--dns[Set custom DNS servers]' \
            '--dns-option[Set DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            '--domainname[Container NIS domain name]' \
            '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
            {-e,--env}'[Set environment variables]' \
            '--env-file[Read in a file of environment variables]' \
            '--expose[Expose a port or a range of ports]' \
            '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
            '--group-add[Add additional groups to join]' \
            '--health-cmd[Command to run to check health]' \
            '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
            '--health-retries[Consecutive failures needed to report unhealthy]' \
            '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
            '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
            '--help[Print usage]' \
            {-h,--hostname}'[Container host name]' \
            '--init[Run an init inside the container that forwards signals and reaps processes]' \
            {-i,--interactive}'[Keep STDIN open even if not attached]' \
            '--ip[IPv4 address (e.g., 172.30.100.104)]' \
            '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
            '--ipc[IPC mode to use]' \
            '--isolation[Container isolation technology]' \
            '--kernel-memory[Kernel memory limit]' \
            {-l,--label}'[Set meta data on a container]' \
            '--label-file[Read in a line delimited file of labels]' \
            '--link[Add link to another container]' \
            '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
            '--log-driver[Logging driver for the container]' \
            '--log-opt[Log driver options]' \
            '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
            {-m,--memory}'[Memory limit]' \
            '--memory-reservation[Memory soft limit]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
            '--mount[Attach a filesystem mount to the container]' \
            '--name[Assign a name to the container]' \
            '--network[Connect a container to a network]' \
            '--network-alias[Add network-scoped alias for the container]' \
            '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
            '--oom-kill-disable[Disable OOM Killer]' \
            '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
            '--pid[PID namespace to use]' \
            '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
            '--platform[Set platform if server is multi-platform capable]' \
            '--privileged[Give extended privileges to this container]' \
            {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
            {-P,--publish-all}'[Publish all exposed ports to random ports]' \
            '--pull[Pull image before running ("always"|"missing"|"never") (default "missing")]' \
            '--read-only[Mount the container'\''s root filesystem as read only]' \
            '--restart[Restart policy to apply when a container exits (default "no")]' \
            '--rm[Automatically remove the container when it exits]' \
            '--runtime[Runtime to use for this container]' \
            '--security-opt[Security Options]' \
            '--shm-size[Size of /dev/shm]' \
            '--sig-proxy[Proxy received signals to the process (default true)]' \
            '--stop-signal[Signal to stop a container (default "SIGTERM")]' \
            '--stop-timeout[Timeout (in seconds) to stop a container]' \
            '--storage-opt[Storage driver options for the container]' \
            '--sysctl[Sysctl options (default map\[\])]' \
            '--tmpfs[Mount a tmpfs directory]' \
            {-t,--tty}'[Allocate a pseudo-TTY]' \
            '--ulimit[Ulimit options (default \[\])]' \
            {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
            '--userns[User namespace to use]' \
            '--uts[UTS namespace to use]' \
            {-v,--volume}'[Bind mount a volume]' \
            '--volume-driver[Optional volume driver for the container]' \
            '--volumes-from[Mount volumes from the specified container(s)]' \
            {-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _docker_save {
        _arguments \
            {-o,--output}'[Write to a file, instead of STDOUT]' \
            "*: :_files"

    }

    function _docker_search {
        _arguments \
            {-f,--filter}'[Filter output based on conditions provided]' \
            '--format[Pretty-print search using a Go template]' \
            '--limit[Max number of search results (default 25)]' \
            '--no-trunc[Don'\''t truncate output]' \
            "*: :_files"

    }

    function _docker_start {
        _arguments \
            {-a,--attach}'[Attach STDOUT/STDERR and forward signals]' \
            '--detach-keys[Override the key sequence for detaching a container]' \
            {-i,--interactive}'[Attach container'\''s STDIN]' \
            "*: :_files"

    }

    function _docker_stats {
        _arguments \
            {-a,--all}'[Show all containers (default shows just running)]' \
            '--format[Pretty-print images using a Go template]' \
            '--no-stream[Disable streaming stats and only pull the first result]' \
            '--no-trunc[Do not truncate output]' \
            "*: :_files"

    }

    function _docker_stop {
        _arguments \
            {-t,--time}'[Seconds to wait for stop before killing it (default 10)]' \
            "*: :_files"

    }

    function _docker_tag {
        _arguments \
            "*: :_files"

    }

    function _docker_top {
        _arguments \
            "*: :_files"

    }

    function _docker_unpause {
        _arguments \
            "*: :_files"

    }

    function _docker_update {
        _arguments \
            '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
            '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
            '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
            {-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
            '--kernel-memory[Kernel memory limit]' \
            {-m,--memory}'[Memory limit]' \
            '--memory-reservation[Memory soft limit]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
            '--restart[Restart policy to apply when a container exits]' \
            "*: :_files"

    }

    function _docker_version {
        _arguments \
            {-f,--format}'[Format the output using the given Go template]' \
            '--kubeconfig[Kubernetes config file]' \
            "*: :_files"

    }

    function _docker_wait {
        _arguments \
            "*: :_files"

    }

    function _docker_builder {
        _arguments \
            "*: :_files"

    }

    function _docker_buildx {
        _arguments \
            '--builder[Override the configured builder instance]' \
            "*: :_files"

    }

    function _docker_compose {
        _arguments \
            '--ansi[Control when to print ANSI control characters ("never"|"always"|"auto") (default "auto")]' \
            '--compatibility[Run compose in backward compatibility mode]' \
            '--env-file[Specify an alternate environment file.]' \
            {-f,--file}'[Compose configuration files]' \
            '--profile[Specify a profile to enable]' \
            '--project-directory[Specify an alternate working directory (default: the path of the Compose file)]' \
            {-p,--project-name}'[Project name]' \
            "*: :_files"

    }

    function _docker_config {
        _arguments \
            "*: :_files"

    }

    function _docker_container {
        _arguments \
            "*: :_files"

    }

    function _docker_context {
        _arguments \
            "*: :_files"

    }

    function _docker_image {
        _arguments \
            "*: :_files"

    }

    function _docker_manifest {
        _arguments \
            "*: :_files"

    }

    function _docker_network {
        _arguments \
            "*: :_files"

    }

    function _docker_node {
        _arguments \
            "*: :_files"

    }

    function _docker_plugin {
        _arguments \
            "*: :_files"

    }

    function _docker_scan {
        _arguments \
            '--accept-license[Accept using a third party scanning provider]' \
            '--dependency-tree[Show dependency tree with scan results]' \
            '--exclude-base[Exclude base image from vulnerability scanning (requires --file)]' \
            {-f,--file}'[Dockerfile associated with image, provides more detailed results]' \
            '--group-issues[Aggregate duplicated vulnerabilities and group them to a single one (requires --json)]' \
            '--json[Output results in JSON format]' \
            '--login[Authenticate to the scan provider using an optional token (with --token), or web base token if empty]' \
            '--reject-license[Reject using a third party scanning provider]' \
            '--severity[Only report vulnerabilities of provided level or higher (low|medium|high)]' \
            '--token[Authentication token to login to the third party scanning provider]' \
            '--version[Display version of the scan plugin]' \
            "*: :_files"

    }

    function _docker_secret {
        _arguments \
            "*: :_files"

    }

    function _docker_service {
        _arguments \
            "*: :_files"

    }

    function _docker_stack {
        _arguments \
            '--orchestrator[Orchestrator to use (swarm|kubernetes|all)]' \
            "*: :_files"

    }

    function _docker_swarm {
        _arguments \
            "*: :_files"

    }

    function _docker_system {
        _arguments \
            "*: :_files"

    }

    function _docker_trust {
        _arguments \
            "*: :_files"

    }

    function _docker_volume {
        _arguments \
            "*: :_files"

    }


function _docker {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach local standard input, output, and error streams to a running container'
            'build:Build an image from a Dockerfile'
            'commit:Create a new image from a container'\''s changes'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create a new container'
            'diff:Inspect changes to files or directories on a container'\''s filesystem'
            'events:Get real time events from the server'
            'exec:Run a command in a running container'
            'export:Export a container'\''s filesystem as a tar archive'
            'history:Show the history of an image'
            'images:List images'
            'import:Import the contents from a tarball to create a filesystem image'
            'info:Display system-wide information'
            'inspect:Return low-level information on Docker objects'
            'kill:Kill one or more running containers'
            'load:Load an image from a tar archive or STDIN'
            'login:Log in to a Docker registry'
            'logout:Log out from a Docker registry'
            'logs:Fetch the logs of a container'
            'pause:Pause all processes within one or more containers'
            'port:List port mappings or a specific mapping for the container'
            'ps:List containers'
            'pull:Pull an image or a repository from a registry'
            'push:Push an image or a repository to a registry'
            'rename:Rename a container'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Remove one or more images'
            'run:Run a command in a new container'
            'save:Save one or more images to a tar archive (streamed to STDOUT by default)'
            'search:Search the Docker Hub for images'
            'start:Start one or more stopped containers'
            'stats:Display a live stream of container(s) resource usage statistics'
            'stop:Stop one or more running containers'
            'tag:Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE'
            'top:Display the running processes of a container'
            'unpause:Unpause all processes within one or more containers'
            'update:Update configuration of one or more containers'
            'version:Show the Docker version information'
            'wait:Show the Docker version information'
            'builder:Manage builds'
            'buildx:Docker Buildx (Docker Inc., v0.7.1)'
            'compose:Docker Compose (Docker Inc., v2.2.1)'
            'config:Manage Docker configs'
            'container:Manage containers'
            'context:Manage contexts'
            'image:Manage images'
            'manifest:Manage Docker image manifests and manifest lists'
            'network:Manage networks'
            'node:Manage Swarm nodes'
            'plugin:Manage plugins'
            'scan:Docker Scan (Docker Inc., v0.14.0)'
            'secret:Manage Docker secrets'
            'service:Manage services'
            'stack:Manage Docker stacks'
            'swarm:Manage Swarm'
            'system:Manage Docker'
            'trust:Manage trust on Docker images'
            'volume:Manage volumes'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--config[Location of client config files (default "/home/vierbein/.docker")]' \
        {-c,--context}'[Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")]' \
        {-D,--debug}'[Enable debug mode]' \
        {-H,--host}'[Daemon socket(s) to connect to]' \
        {-l,--log-level}'[Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")]' \
        '--tls[Use TLS; implied by --tlsverify]' \
        '--tlscacert[Trust certs signed only by this CA (default "/home/vierbein/.docker/ca.pem")]' \
        '--tlscert[Path to TLS certificate file (default "/home/vierbein/.docker/cert.pem")]' \
        '--tlskey[Path to TLS key file (default "/home/vierbein/.docker/key.pem")]' \
        '--tlsverify[Use TLS and verify the remote]' \
        {-v,--version}'[Print version information and quit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _docker_attach
            ;;

        (build)
            _docker_build
            ;;

        (commit)
            _docker_commit
            ;;

        (cp)
            _docker_cp
            ;;

        (create)
            _docker_create
            ;;

        (diff)
            _docker_diff
            ;;

        (events)
            _docker_events
            ;;

        (exec)
            _docker_exec
            ;;

        (export)
            _docker_export
            ;;

        (history)
            _docker_history
            ;;

        (images)
            _docker_images
            ;;

        (import)
            _docker_import
            ;;

        (info)
            _docker_info
            ;;

        (inspect)
            _docker_inspect
            ;;

        (kill)
            _docker_kill
            ;;

        (load)
            _docker_load
            ;;

        (login)
            _docker_login
            ;;

        (logout)
            _docker_logout
            ;;

        (logs)
            _docker_logs
            ;;

        (pause)
            _docker_pause
            ;;

        (port)
            _docker_port
            ;;

        (ps)
            _docker_ps
            ;;

        (pull)
            _docker_pull
            ;;

        (push)
            _docker_push
            ;;

        (rename)
            _docker_rename
            ;;

        (restart)
            _docker_restart
            ;;

        (rm)
            _docker_rm
            ;;

        (rmi)
            _docker_rmi
            ;;

        (run)
            _docker_run
            ;;

        (save)
            _docker_save
            ;;

        (search)
            _docker_search
            ;;

        (start)
            _docker_start
            ;;

        (stats)
            _docker_stats
            ;;

        (stop)
            _docker_stop
            ;;

        (tag)
            _docker_tag
            ;;

        (top)
            _docker_top
            ;;

        (unpause)
            _docker_unpause
            ;;

        (update)
            _docker_update
            ;;

        (version)
            _docker_version
            ;;

        (wait)
            _docker_wait
            ;;

        (builder)
            _docker_builder
            ;;

        (buildx)
            _docker_buildx
            ;;

        (compose)
            _docker_compose
            ;;

        (config)
            _docker_config
            ;;

        (container)
            _docker_container
            ;;

        (context)
            _docker_context
            ;;

        (image)
            _docker_image
            ;;

        (manifest)
            _docker_manifest
            ;;

        (network)
            _docker_network
            ;;

        (node)
            _docker_node
            ;;

        (plugin)
            _docker_plugin
            ;;

        (scan)
            _docker_scan
            ;;

        (secret)
            _docker_secret
            ;;

        (service)
            _docker_service
            ;;

        (stack)
            _docker_stack
            ;;

        (swarm)
            _docker_swarm
            ;;

        (system)
            _docker_system
            ;;

        (trust)
            _docker_trust
            ;;

        (volume)
            _docker_volume
            ;;

        esac
        ;;
     esac

}

