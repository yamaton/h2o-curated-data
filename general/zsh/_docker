#compdef docker

# Auto-generated with h2o


function _docker {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:Create and run a new container from an image'
            'exec:Execute a command in a running container'
            'ps:List containers'
            'build:Build an image from a Dockerfile'
            'pull:Download an image from a registry'
            'push:Upload an image to a registry'
            'images:List images'
            'login:Log in to a registry'
            'logout:Log out from a registry'
            'search:Search Docker Hub for images'
            'version:Show the Docker version information'
            'info:Display system-wide information'
            'attach:Attach local standard input, output, and error streams to a running container'
            'commit:Create a new image from a container'\''s changes'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create a new container'
            'diff:Inspect changes to files or directories on a container'\''s filesystem'
            'events:Get real time events from the server'
            'export:Export a container'\''s filesystem as a tar archive'
            'history:Show the history of an image'
            'import:Import the contents from a tarball to create a filesystem image'
            'inspect:Return low-level information on Docker objects'
            'kill:Kill one or more running containers'
            'load:Load an image from a tar archive or STDIN'
            'logs:Fetch the logs of a container'
            'pause:Pause all processes within one or more containers'
            'port:List port mappings or a specific mapping for the container'
            'rename:Rename a container'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Remove one or more images'
            'save:Save one or more images to a tar archive (streamed to STDOUT by default)'
            'start:Start one or more stopped containers'
            'stats:Display a live stream of container(s) resource usage statistics'
            'stop:Stop one or more running containers'
            'tag:Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE'
            'top:Display the running processes of a container'
            'unpause:Unpause all processes within one or more containers'
            'update:Update configuration of one or more containers'
            'wait:Block until one or more containers stop, then print their exit codes'
            'builder:Manage builds'
            'buildx:Docker Buildx (Docker Inc., v0.11.0)'
            'compose:Docker Compose (Docker Inc., v2.19.1)'
            'container:Manage containers'
            'context:Manage contexts'
            'dev:Docker Dev Environments (Docker Inc., v0.1.0)'
            'extension:Manages Docker extensions (Docker Inc., v0.2.20)'
            'image:Manage images'
            'init:Creates Docker-related starter files for your project (Docker Inc., v0.1.0-beta.6)'
            'manifest:Manage Docker image manifests and manifest lists'
            'network:Manage networks'
            'plugin:Manage plugins'
            'sbom:View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc., 0.6.0)'
            'scan:Docker Scan (Docker Inc., v0.26.0)'
            'scout:Command line tool for Docker Scout (Docker Inc., 0.16.1)'
            'system:Manage Docker'
            'trust:Manage trust on Docker images'
            'volume:Manage volumes'
            'swarm:Manage Swarm'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _docker_run
            ;;

        (exec)
            _docker_exec
            ;;

        (ps)
            _docker_ps
            ;;

        (build)
            _docker_build
            ;;

        (pull)
            _docker_pull
            ;;

        (push)
            _docker_push
            ;;

        (images)
            _docker_images
            ;;

        (login)
            _docker_login
            ;;

        (logout)
            _docker_logout
            ;;

        (search)
            _docker_search
            ;;

        (version)
            _docker_version
            ;;

        (info)
            _docker_info
            ;;

        (attach)
            _docker_attach
            ;;

        (commit)
            _docker_commit
            ;;

        (cp)
            _docker_cp
            ;;

        (create)
            _docker_create
            ;;

        (diff)
            _docker_diff
            ;;

        (events)
            _docker_events
            ;;

        (export)
            _docker_export
            ;;

        (history)
            _docker_history
            ;;

        (import)
            _docker_import
            ;;

        (inspect)
            _docker_inspect
            ;;

        (kill)
            _docker_kill
            ;;

        (load)
            _docker_load
            ;;

        (logs)
            _docker_logs
            ;;

        (pause)
            _docker_pause
            ;;

        (port)
            _docker_port
            ;;

        (rename)
            _docker_rename
            ;;

        (restart)
            _docker_restart
            ;;

        (rm)
            _docker_rm
            ;;

        (rmi)
            _docker_rmi
            ;;

        (save)
            _docker_save
            ;;

        (start)
            _docker_start
            ;;

        (stats)
            _docker_stats
            ;;

        (stop)
            _docker_stop
            ;;

        (tag)
            _docker_tag
            ;;

        (top)
            _docker_top
            ;;

        (unpause)
            _docker_unpause
            ;;

        (update)
            _docker_update
            ;;

        (wait)
            _docker_wait
            ;;

        (builder)
            _docker_builder
            ;;

        (buildx)
            _docker_buildx
            ;;

        (compose)
            _docker_compose
            ;;

        (container)
            _docker_container
            ;;

        (context)
            _docker_context
            ;;

        (dev)
            _docker_dev
            ;;

        (extension)
            _docker_extension
            ;;

        (image)
            _docker_image
            ;;

        (init)
            _docker_init
            ;;

        (manifest)
            _docker_manifest
            ;;

        (network)
            _docker_network
            ;;

        (plugin)
            _docker_plugin
            ;;

        (sbom)
            _docker_sbom
            ;;

        (scan)
            _docker_scan
            ;;

        (scout)
            _docker_scout
            ;;

        (system)
            _docker_system
            ;;

        (trust)
            _docker_trust
            ;;

        (volume)
            _docker_volume
            ;;

        (swarm)
            _docker_swarm
            ;;

        esac
        ;;
     esac

}

function _docker_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
        '--annotation[Add an annotation to the container (passed through to the OCI runtime) (default map\[\])]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
        '--cap-add[Add Linux capabilities]' \
        '--cap-drop[Drop Linux capabilities]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[Cgroup namespace to use (host|private) '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
        '--cidfile[Write the container ID to the file]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--dns[Set custom DNS servers]' \
        '--dns-option[Set DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--domainname[Container NIS domain name]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        '--expose[Expose a port or a range of ports]' \
        '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
        '--group-add[Add additional groups to join]' \
        '--health-cmd[Command to run to check health]' \
        '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
        '--health-retries[Consecutive failures needed to report unhealthy]' \
        '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
        '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
        '--help[Print usage]' \
        {-h,--hostname}'[Container host name]' \
        '--init[Run an init inside the container that forwards signals and reaps processes]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[IPv4 address (e.g., 172.30.100.104)]' \
        '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
        '--ipc[IPC mode to use]' \
        '--isolation[Container isolation technology]' \
        '--kernel-memory[Kernel memory limit]' \
        {-l,--label}'[Set meta data on a container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--link[Add link to another container]' \
        '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
        '--log-driver[Logging driver for the container]' \
        '--log-opt[Log driver options]' \
        '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
        '--pid[PID namespace to use]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        '--privileged[Give extended privileges to this container]' \
        {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports]' \
        '--pull[Pull image before running ("always", "missing", "never") (default "missing")]' \
        {-q,--quiet}'[Suppress the pull output]' \
        '--read-only[Mount the container'\''s root filesystem as read only]' \
        '--restart[Restart policy to apply when a container exits (default "no")]' \
        '--rm[Automatically remove the container when it exits]' \
        '--runtime[Runtime to use for this container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop the container]' \
        '--stop-timeout[Timeout (in seconds) to stop a container]' \
        '--storage-opt[Storage driver options for the container]' \
        '--sysctl[Sysctl options (default map\[\])]' \
        '--tmpfs[Mount a tmpfs directory]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        '--ulimit[Ulimit options (default \[\])]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        {-v,--volume}'[Bind mount a volume]' \
        '--volume-driver[Optional volume driver for the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_exec {
    _arguments \
        {-d,--detach}'[Detached mode: run command in the background]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--privileged[Give extended privileges to the command]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        {-u,--user}'[Username or UID (format: "<name|uid>\[:<group|gid>\]")]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_ps {
    _arguments \
        {-a,--all}'[Show all containers (default shows just running)]' \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-n,--last}'[Show n last created containers (includes all states) (default -1)]' \
        {-l,--latest}'[Show the latest created container (includes all states)]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only display container IDs]' \
        {-s,--size}'[Display total file sizes]' \
        "*: :_files"

}

function _docker_build {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (format: "host:ip")]' \
        '--allow[Allow extra privileged entitlement (e.g., "network.host", "security.insecure")]' \
        '--attest[Attestation parameters (format: "type=sbom,generator=image")]' \
        '--build-arg[Set build-time variables]' \
        '--build-context[Additional build contexts (e.g., name=path)]' \
        '--builder[Override the configured builder instance (default "default")]' \
        '--cache-from[External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")]' \
        '--cache-to[Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        {-f,--file}'[Name of the Dockerfile (default: "PATH/Dockerfile")]' \
        '--iidfile[Write the image ID to the file]' \
        '--label[Set metadata for an image]' \
        '--load[Shorthand for "--output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--network[Set the networking mode for the "RUN" instructions during build (default "default")]' \
        '--no-cache[Do not use cache when building the image]' \
        '--no-cache-filter[Do not cache specified stages]' \
        {-o,--output}'[Output destination (format: "type=local,dest=path")]' \
        '--platform[Set target platform for build]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--output=type=registry"]' \
        {-q,--quiet}'[Suppress the build output and print image ID on success]' \
        '--sbom[Shorthand for "--attest=type=sbom"]' \
        '--secret[Secret to expose to the build (format: "id=mysecret\[,src=/local/secret\]")]' \
        '--shm-size[Size of "/dev/shm"]' \
        '--ssh[SSH agent socket or keys to expose to the build (format: "default|<id>\[=<socket>|<key>\[,<key>\]\]")]' \
        {-t,--tag}'[Name and optionally a tag (format: "name:tag")]' \
        '--target[Set the target build stage to build]' \
        '--ulimit[Ulimit options (default \[\])]' \
        "*: :_files"

}

function _docker_pull {
    _arguments \
        {-a,--all-tags}'[Download all tagged images in the repository]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        {-q,--quiet}'[Suppress verbose output]' \
        "*: :_files"

}

function _docker_push {
    _arguments \
        {-a,--all-tags}'[Push all tags of an image to the repository]' \
        '--disable-content-trust[Skip image signing (default true)]' \
        {-q,--quiet}'[Suppress verbose output]' \
        "*: :_files"

}

function _docker_images {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only show image IDs]' \
        "*: :_files"

}

function _docker_login {
    _arguments \
        {-h,--help}'[Help for login]' \
        {-p,--password}'[password]' \
        '--password-stdin[Take the password from stdin]' \
        {-u,--username}'[username]' \
        "*: :_files"

}

function _docker_logout {
    _arguments \
        {-h,--help}'[Help for logout]' \
        "*: :_files"

}

function _docker_search {
    _arguments \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Pretty-print search using a Go template]' \
        '--limit[Max number of search results]' \
        '--no-trunc[Don'\''t truncate output]' \
        "*: :_files"

}

function _docker_version {
    _arguments \
        {-f,--format}'[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        {-h,--help}'[Help for version]' \
        '--kubeconfig[Kubernetes config file]' \
        "*: :_files"

}

function _docker_info {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        "*: :_files"

}

function _docker_attach {
    _arguments \
        '--detach-keys[Override the key sequence for detaching a container]' \
        '--no-stdin[Do not attach STDIN]' \
        '--sig-proxy[Proxy all received signals to the process (default true)]' \
        "*: :_files"

}

function _docker_commit {
    _arguments \
        {-a,--author}'[Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")]' \
        {-c,--change}'[Apply Dockerfile instruction to the created image]' \
        {-m,--message}'[Commit message]' \
        {-p,--pause}'[Pause container during commit (default true)]' \
        "*: :_files"

}

function _docker_cp {
    _arguments \
        {-a,--archive}'[Archive mode (copy all uid/gid information)]' \
        {-L,--follow-link}'[Always follow symbol link in SRC_PATH]' \
        {-q,--quiet}'[Suppress progress output during copy. Progress output is automatically suppressed if no terminal is attached]' \
        "*: :_files"

}

function _docker_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
        '--annotation[Add an annotation to the container (passed through to the OCI runtime) (default map\[\])]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
        '--cap-add[Add Linux capabilities]' \
        '--cap-drop[Drop Linux capabilities]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[Cgroup namespace to use (host|private) '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
        '--cidfile[Write the container ID to the file]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--dns[Set custom DNS servers]' \
        '--dns-option[Set DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--domainname[Container NIS domain name]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        '--expose[Expose a port or a range of ports]' \
        '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
        '--group-add[Add additional groups to join]' \
        '--health-cmd[Command to run to check health]' \
        '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
        '--health-retries[Consecutive failures needed to report unhealthy]' \
        '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
        '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
        '--help[Print usage]' \
        {-h,--hostname}'[Container host name]' \
        '--init[Run an init inside the container that forwards signals and reaps processes]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[IPv4 address (e.g., 172.30.100.104)]' \
        '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
        '--ipc[IPC mode to use]' \
        '--isolation[Container isolation technology]' \
        '--kernel-memory[Kernel memory limit]' \
        {-l,--label}'[Set meta data on a container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--link[Add link to another container]' \
        '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
        '--log-driver[Logging driver for the container]' \
        '--log-opt[Log driver options]' \
        '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
        '--pid[PID namespace to use]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        '--privileged[Give extended privileges to this container]' \
        {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports]' \
        '--pull[Pull image before creating ("always", "|missing", "never") (default "missing")]' \
        {-q,--quiet}'[Suppress the pull output]' \
        '--read-only[Mount the container'\''s root filesystem as read only]' \
        '--restart[Restart policy to apply when a container exits (default "no")]' \
        '--rm[Automatically remove the container when it exits]' \
        '--runtime[Runtime to use for this container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm]' \
        '--stop-signal[Signal to stop the container]' \
        '--stop-timeout[Timeout (in seconds) to stop a container]' \
        '--storage-opt[Storage driver options for the container]' \
        '--sysctl[Sysctl options (default map\[\])]' \
        '--tmpfs[Mount a tmpfs directory]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        '--ulimit[Ulimit options (default \[\])]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        {-v,--volume}'[Bind mount a volume]' \
        '--volume-driver[Optional volume driver for the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_diff {
    _arguments \
        "*: :_files"

}

function _docker_events {
    _arguments \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format the output using the given Go template]' \
        '--since[Show all events created since timestamp]' \
        '--until[Stream events until this timestamp]' \
        "*: :_files"

}

function _docker_export {
    _arguments \
        {-o,--output}'[Write to a file, instead of STDOUT]' \
        "*: :_files"

}

function _docker_history {
    _arguments \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-H,--human}'[Print sizes and dates in human readable format (default true)]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only show image IDs]' \
        "*: :_files"

}

function _docker_import {
    _arguments \
        {-c,--change}'[Apply Dockerfile instruction to the created image]' \
        {-m,--message}'[Set commit message for imported image]' \
        '--platform[Set platform if server is multi-platform capable]' \
        "*: :_files"

}

function _docker_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-s,--size}'[Display total file sizes if the type is container]' \
        '--type[Return JSON for specified type]' \
        "*: :_files"

}

function _docker_kill {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        "*: :_files"

}

function _docker_load {
    _arguments \
        {-i,--input}'[Read from tar archive file, instead of STDIN]' \
        {-q,--quiet}'[Suppress the load output]' \
        "*: :_files"

}

function _docker_logs {
    _arguments \
        '--details[Show extra details provided to logs]' \
        {-f,--follow}'[Follow log output]' \
        '--since[Show logs since timestamp (e.g. "2013-01-02T13:23:37Z") or relative (e.g. "42m" for 42 minutes)]' \
        {-n,--tail}'[Number of lines to show from the end of the logs (default "all")]' \
        {-t,--timestamps}'[Show timestamps]' \
        '--until[Show logs before a timestamp (e.g. "2013-01-02T13:23:37Z") or relative (e.g. "42m" for 42 minutes)]' \
        "*: :_files"

}

function _docker_pause {
    _arguments \
        "*: :_files"

}

function _docker_port {
    _arguments \
        "*: :_files"

}

function _docker_rename {
    _arguments \
        "*: :_files"

}

function _docker_restart {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        {-t,--time}'[Seconds to wait before killing the container]' \
        "*: :_files"

}

function _docker_rm {
    _arguments \
        {-f,--force}'[Force the removal of a running container (uses SIGKILL)]' \
        {-l,--link}'[Remove the specified link]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _docker_rmi {
    _arguments \
        {-f,--force}'[Force removal of the image]' \
        '--no-prune[Do not delete untagged parents]' \
        "*: :_files"

}

function _docker_save {
    _arguments \
        {-o,--output}'[Write to a file, instead of STDOUT]' \
        "*: :_files"

}

function _docker_start {
    _arguments \
        {-a,--attach}'[Attach STDOUT/STDERR and forward signals]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        {-i,--interactive}'[Attach container'\''s STDIN]' \
        "*: :_files"

}

function _docker_stats {
    _arguments \
        {-a,--all}'[Show all containers (default shows just running)]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-stream[Disable streaming stats and only pull the first result]' \
        '--no-trunc[Do not truncate output]' \
        "*: :_files"

}

function _docker_stop {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        {-t,--time}'[Seconds to wait before killing the container]' \
        "*: :_files"

}

function _docker_tag {
    _arguments \
        "*: :_files"

}

function _docker_top {
    _arguments \
        "*: :_files"

}

function _docker_unpause {
    _arguments \
        "*: :_files"

}

function _docker_update {
    _arguments \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: -1 to enable unlimited swap]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--restart[Restart policy to apply when a container exits]' \
        "*: :_files"

}

function _docker_wait {
    _arguments \
        "*: :_files"

}


function _docker_builder {
    local line state

    function _commands {
        local -a commands
        commands=(
            'imagetools:Commands to work on images in registry'
            'bake:Build from a file'
            'build:Start a build'
            'create:Create a new builder instance'
            'du:Disk usage'
            'inspect:Inspect current builder instance'
            'ls:List builder instances'
            'prune:Remove build cache'
            'rm:Remove a builder instance'
            'stop:Stop builder instance'
            'use:Set the current builder instance'
            'version:Show buildx version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--builder[Override the configured builder instance (default "default")]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (imagetools)
            _docker_builder_imagetools
            ;;

        (bake)
            _docker_builder_bake
            ;;

        (build)
            _docker_builder_build
            ;;

        (create)
            _docker_builder_create
            ;;

        (du)
            _docker_builder_du
            ;;

        (inspect)
            _docker_builder_inspect
            ;;

        (ls)
            _docker_builder_ls
            ;;

        (prune)
            _docker_builder_prune
            ;;

        (rm)
            _docker_builder_rm
            ;;

        (stop)
            _docker_builder_stop
            ;;

        (use)
            _docker_builder_use
            ;;

        (version)
            _docker_builder_version
            ;;

        esac
        ;;
     esac

}


function _docker_builder_imagetools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new image based on source images'
            'inspect:Show details of an image in the registry'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--builder[Override the configured builder instance (default "default")]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _docker_builder_imagetools_create
            ;;

        (inspect)
            _docker_builder_imagetools_inspect
            ;;

        esac
        ;;
     esac

}

function _docker_builder_imagetools_create {
    _arguments \
        '--append[Append to existing manifest]' \
        '--builder[Override the configured builder instance (default "default")]' \
        '--dry-run[Show final image instead of pushing]' \
        {-f,--file}'[Read source descriptor from file]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        {-t,--tag}'[Set reference for new image]' \
        "*: :_files"

}

function _docker_builder_imagetools_inspect {
    _arguments \
        '--builder[Override the configured builder instance (default "default")]' \
        '--format[Format the output using the given Go template]' \
        '--raw[Show original, unformatted JSON manifest]' \
        "*: :_files"

}

function _docker_builder_bake {
    _arguments \
        '--builder[Override the configured builder instance (default "default")]' \
        {-f,--file}'[Build definition file]' \
        '--load[Shorthand for "--set=*.output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--no-cache[Do not use cache when building the image]' \
        '--print[Print the options without building]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--set=*.attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--set=*.output=type=registry"]' \
        '--sbom[Shorthand for "--set=*.attest=type=sbom"]' \
        '--set[Override target value (e.g., "targetpattern.key=value")]' \
        "*: :_files"

}

function _docker_builder_build {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (format: "host:ip")]' \
        '--allow[Allow extra privileged entitlement (e.g., "network.host", "security.insecure")]' \
        '--attest[Attestation parameters (format: "type=sbom,generator=image")]' \
        '--build-arg[Set build-time variables]' \
        '--build-context[Additional build contexts (e.g., name=path)]' \
        '--builder[Override the configured builder instance (default "default")]' \
        '--cache-from[External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")]' \
        '--cache-to[Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        {-f,--file}'[Name of the Dockerfile (default: "PATH/Dockerfile")]' \
        '--iidfile[Write the image ID to the file]' \
        '--label[Set metadata for an image]' \
        '--load[Shorthand for "--output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--network[Set the networking mode for the "RUN" instructions during build (default "default")]' \
        '--no-cache[Do not use cache when building the image]' \
        '--no-cache-filter[Do not cache specified stages]' \
        {-o,--output}'[Output destination (format: "type=local,dest=path")]' \
        '--platform[Set target platform for build]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--output=type=registry"]' \
        {-q,--quiet}'[Suppress the build output and print image ID on success]' \
        '--sbom[Shorthand for "--attest=type=sbom"]' \
        '--secret[Secret to expose to the build (format: "id=mysecret\[,src=/local/secret\]")]' \
        '--shm-size[Size of "/dev/shm"]' \
        '--ssh[SSH agent socket or keys to expose to the build (format: "default|<id>\[=<socket>|<key>\[,<key>\]\]")]' \
        {-t,--tag}'[Name and optionally a tag (format: "name:tag")]' \
        '--target[Set the target build stage to build]' \
        '--ulimit[Ulimit options (default \[\])]' \
        "*: :_files"

}

function _docker_builder_create {
    _arguments \
        '--append[Append a node to builder instead of changing it]' \
        '--bootstrap[Boot builder after creation]' \
        '--buildkitd-flags[Flags for buildkitd daemon]' \
        '--config[BuildKit config file]' \
        '--driver[Driver to use (available: "docker-container", "kubernetes", "remote")]' \
        '--driver-opt[Options for the driver]' \
        '--leave[Remove a node from builder instead of changing it]' \
        '--name[Builder instance name]' \
        '--node[Create/modify node with given name]' \
        '--platform[Fixed platforms for current node]' \
        '--use[Set the current builder instance]' \
        "*: :_files"

}

function _docker_builder_du {
    _arguments \
        '--builder[Override the configured builder instance (default "default")]' \
        '--filter[Provide filter values]' \
        '--verbose[Provide a more verbose output]' \
        "*: :_files"

}

function _docker_builder_inspect {
    _arguments \
        '--bootstrap[Ensure builder has booted before inspecting]' \
        '--builder[Override the configured builder instance (default "default")]' \
        "*: :_files"

}

function _docker_builder_ls {
    _arguments \
        "*: :_files"

}

function _docker_builder_prune {
    _arguments \
        {-a,--all}'[Include internal/frontend images]' \
        '--builder[Override the configured builder instance (default "default")]' \
        '--filter[Provide filter values (e.g., "until=24h")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        '--keep-storage[Amount of disk space to keep for cache]' \
        '--verbose[Provide a more verbose output]' \
        "*: :_files"

}

function _docker_builder_rm {
    _arguments \
        '--all-inactive[Remove all inactive builders]' \
        '--builder[Override the configured builder instance (default "default")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        '--keep-daemon[Keep the buildkitd daemon running]' \
        '--keep-state[Keep BuildKit state]' \
        "*: :_files"

}

function _docker_builder_stop {
    _arguments \
        '--builder[Override the configured builder instance (default "default")]' \
        "*: :_files"

}

function _docker_builder_use {
    _arguments \
        '--builder[Override the configured builder instance (default "default")]' \
        '--default[Set builder as default for current context]' \
        '--global[Builder persists context changes]' \
        "*: :_files"

}

function _docker_builder_version {
    _arguments \
        "*: :_files"

}


function _docker_buildx {
    local line state

    function _commands {
        local -a commands
        commands=(
            'imagetools:Commands to work on images in registry'
            'bake:Build from a file'
            'build:Start a build'
            'create:Create a new builder instance'
            'du:Disk usage'
            'inspect:Inspect current builder instance'
            'ls:List builder instances'
            'prune:Remove build cache'
            'rm:Remove a builder instance'
            'stop:Stop builder instance'
            'use:Set the current builder instance'
            'version:Show buildx version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--builder[Override the configured builder instance]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (imagetools)
            _docker_buildx_imagetools
            ;;

        (bake)
            _docker_buildx_bake
            ;;

        (build)
            _docker_buildx_build
            ;;

        (create)
            _docker_buildx_create
            ;;

        (du)
            _docker_buildx_du
            ;;

        (inspect)
            _docker_buildx_inspect
            ;;

        (ls)
            _docker_buildx_ls
            ;;

        (prune)
            _docker_buildx_prune
            ;;

        (rm)
            _docker_buildx_rm
            ;;

        (stop)
            _docker_buildx_stop
            ;;

        (use)
            _docker_buildx_use
            ;;

        (version)
            _docker_buildx_version
            ;;

        esac
        ;;
     esac

}


function _docker_buildx_imagetools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new image based on source images'
            'inspect:Show details of an image in the registry'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--builder[Override the configured builder instance]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _docker_buildx_imagetools_create
            ;;

        (inspect)
            _docker_buildx_imagetools_inspect
            ;;

        esac
        ;;
     esac

}

function _docker_buildx_imagetools_create {
    _arguments \
        '--append[Append to existing manifest]' \
        '--builder[Override the configured builder instance]' \
        '--dry-run[Show final image instead of pushing]' \
        {-f,--file}'[Read source descriptor from file]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        {-t,--tag}'[Set reference for new image]' \
        "*: :_files"

}

function _docker_buildx_imagetools_inspect {
    _arguments \
        '--builder[Override the configured builder instance]' \
        '--format[Format the output using the given Go template]' \
        '--raw[Show original, unformatted JSON manifest]' \
        "*: :_files"

}

function _docker_buildx_bake {
    _arguments \
        '--builder[Override the configured builder instance]' \
        {-f,--file}'[Build definition file]' \
        '--load[Shorthand for "--set=*.output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--no-cache[Do not use cache when building the image]' \
        '--print[Print the options without building]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--set=*.attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--set=*.output=type=registry"]' \
        '--sbom[Shorthand for "--set=*.attest=type=sbom"]' \
        '--set[Override target value (e.g., "targetpattern.key=value")]' \
        "*: :_files"

}

function _docker_buildx_build {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (format: "host:ip")]' \
        '--allow[Allow extra privileged entitlement (e.g., "network.host", "security.insecure")]' \
        '--attest[Attestation parameters (format: "type=sbom,generator=image")]' \
        '--build-arg[Set build-time variables]' \
        '--build-context[Additional build contexts (e.g., name=path)]' \
        '--builder[Override the configured builder instance]' \
        '--cache-from[External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")]' \
        '--cache-to[Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        {-f,--file}'[Name of the Dockerfile (default: "PATH/Dockerfile")]' \
        '--iidfile[Write the image ID to the file]' \
        '--label[Set metadata for an image]' \
        '--load[Shorthand for "--output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--network[Set the networking mode for the "RUN" instructions during build (default "default")]' \
        '--no-cache[Do not use cache when building the image]' \
        '--no-cache-filter[Do not cache specified stages]' \
        {-o,--output}'[Output destination (format: "type=local,dest=path")]' \
        '--platform[Set target platform for build]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--output=type=registry"]' \
        {-q,--quiet}'[Suppress the build output and print image ID on success]' \
        '--sbom[Shorthand for "--attest=type=sbom"]' \
        '--secret[Secret to expose to the build (format: "id=mysecret\[,src=/local/secret\]")]' \
        '--shm-size[Size of "/dev/shm"]' \
        '--ssh[SSH agent socket or keys to expose to the build (format: "default|<id>\[=<socket>|<key>\[,<key>\]\]")]' \
        {-t,--tag}'[Name and optionally a tag (format: "name:tag")]' \
        '--target[Set the target build stage to build]' \
        '--ulimit[Ulimit options (default \[\])]' \
        "*: :_files"

}

function _docker_buildx_create {
    _arguments \
        '--append[Append a node to builder instead of changing it]' \
        '--bootstrap[Boot builder after creation]' \
        '--buildkitd-flags[Flags for buildkitd daemon]' \
        '--config[BuildKit config file]' \
        '--driver[Driver to use (available: "docker-container", "kubernetes", "remote")]' \
        '--driver-opt[Options for the driver]' \
        '--leave[Remove a node from builder instead of changing it]' \
        '--name[Builder instance name]' \
        '--node[Create/modify node with given name]' \
        '--platform[Fixed platforms for current node]' \
        '--use[Set the current builder instance]' \
        "*: :_files"

}

function _docker_buildx_du {
    _arguments \
        '--builder[Override the configured builder instance]' \
        '--filter[Provide filter values]' \
        '--verbose[Provide a more verbose output]' \
        "*: :_files"

}

function _docker_buildx_inspect {
    _arguments \
        '--bootstrap[Ensure builder has booted before inspecting]' \
        '--builder[Override the configured builder instance]' \
        "*: :_files"

}

function _docker_buildx_ls {
    _arguments \
        "*: :_files"

}

function _docker_buildx_prune {
    _arguments \
        {-a,--all}'[Include internal/frontend images]' \
        '--builder[Override the configured builder instance]' \
        '--filter[Provide filter values (e.g., "until=24h")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        '--keep-storage[Amount of disk space to keep for cache]' \
        '--verbose[Provide a more verbose output]' \
        "*: :_files"

}

function _docker_buildx_rm {
    _arguments \
        '--all-inactive[Remove all inactive builders]' \
        '--builder[Override the configured builder instance]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        '--keep-daemon[Keep the buildkitd daemon running]' \
        '--keep-state[Keep BuildKit state]' \
        "*: :_files"

}

function _docker_buildx_stop {
    _arguments \
        '--builder[Override the configured builder instance]' \
        "*: :_files"

}

function _docker_buildx_use {
    _arguments \
        '--builder[Override the configured builder instance]' \
        '--default[Set builder as default for current context]' \
        '--global[Builder persists context changes]' \
        "*: :_files"

}

function _docker_buildx_version {
    _arguments \
        "*: :_files"

}


function _docker_compose {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build or rebuild services'
            'config:Parse, resolve and render compose file in canonical format'
            'cp:Copy files/folders between a service container and the local filesystem'
            'create:Creates containers for a service.'
            'down:Stop and remove containers, networks'
            'events:Receive real time events from containers.'
            'exec:Execute a command in a running container.'
            'images:List images used by the created containers'
            'kill:Force stop service containers.'
            'logs:View output from containers'
            'ls:List running compose projects'
            'pause:Pause services'
            'port:Print the public port for a port binding.'
            'ps:List containers'
            'pull:Pull service images'
            'push:Push service images'
            'restart:Restart service containers'
            'rm:Removes stopped service containers'
            'run:Run a one-off command on a service.'
            'start:Start services'
            'stop:Stop services'
            'top:Display the running processes'
            'unpause:Unpause services'
            'up:Create and start containers'
            'version:Show the Docker Compose version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--ansi[Control when to print ANSI control characters ("never"|"always"|"auto") (default "auto")]' \
        '--compatibility[Run compose in backward compatibility mode]' \
        '--dry-run[Execute command in dry run mode]' \
        '--env-file[Specify an alternate environment file.]' \
        {-f,--file}'[Compose configuration files]' \
        '--parallel[Control max parallelism, -1 for unlimited (default -1)]' \
        '--profile[Specify a profile to enable]' \
        '--progress[Set type of progress output (auto, tty, plain, quiet) (default "auto")]' \
        '--project-directory[Specify an alternate working directory (default: the path of the, first specified, Compose file)]' \
        {-p,--project-name}'[Project name]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _docker_compose_build
            ;;

        (config)
            _docker_compose_config
            ;;

        (cp)
            _docker_compose_cp
            ;;

        (create)
            _docker_compose_create
            ;;

        (down)
            _docker_compose_down
            ;;

        (events)
            _docker_compose_events
            ;;

        (exec)
            _docker_compose_exec
            ;;

        (images)
            _docker_compose_images
            ;;

        (kill)
            _docker_compose_kill
            ;;

        (logs)
            _docker_compose_logs
            ;;

        (ls)
            _docker_compose_ls
            ;;

        (pause)
            _docker_compose_pause
            ;;

        (port)
            _docker_compose_port
            ;;

        (ps)
            _docker_compose_ps
            ;;

        (pull)
            _docker_compose_pull
            ;;

        (push)
            _docker_compose_push
            ;;

        (restart)
            _docker_compose_restart
            ;;

        (rm)
            _docker_compose_rm
            ;;

        (run)
            _docker_compose_run
            ;;

        (start)
            _docker_compose_start
            ;;

        (stop)
            _docker_compose_stop
            ;;

        (top)
            _docker_compose_top
            ;;

        (unpause)
            _docker_compose_unpause
            ;;

        (up)
            _docker_compose_up
            ;;

        (version)
            _docker_compose_version
            ;;

        esac
        ;;
     esac

}

function _docker_compose_build {
    _arguments \
        '--build-arg[Set build-time variables for services.]' \
        '--dry-run[Execute command in dry run mode]' \
        {-m,--memory}'[Set memory limit for the build container. Not supported by BuildKit.]' \
        '--no-cache[Do not use cache when building the image]' \
        '--pull[Always attempt to pull a newer version of the image.]' \
        '--push[Push service images.]' \
        {-q,--quiet}'[Don'\''t print anything to STDOUT]' \
        '--ssh[Set SSH authentications used when building service images. (use '\''default'\'' for using your default SSH Agent)]' \
        "*: :_files"

}

function _docker_compose_config {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--format[Format the output. Values: \[yaml | json\] (default "yaml")]' \
        '--hash[Print the service config hash, one per line.]' \
        '--images[Print the image names, one per line.]' \
        '--no-consistency[Don'\''t check model consistency - warning: may produce invalid Compose output]' \
        '--no-interpolate[Don'\''t interpolate environment variables.]' \
        '--no-normalize[Don'\''t normalize compose model.]' \
        '--no-path-resolution[Don'\''t resolve file paths.]' \
        {-o,--output}'[Save to file (default to stdout)]' \
        '--profiles[Print the profile names, one per line.]' \
        {-q,--quiet}'[Only validate the configuration, don'\''t print anything.]' \
        '--resolve-image-digests[Pin image tags to digests.]' \
        '--services[Print the service names, one per line.]' \
        '--volumes[Print the volume names, one per line.]' \
        "*: :_files"

}

function _docker_compose_cp {
    _arguments \
        {-a,--archive}'[Archive mode (copy all uid/gid information)]' \
        '--dry-run[Execute command in dry run mode]' \
        {-L,--follow-link}'[Always follow symbol link in SRC_PATH]' \
        '--index[Index of the container if there are multiple instances of a service .]' \
        "*: :_files"

}

function _docker_compose_create {
    _arguments \
        '--build[Build images before starting containers.]' \
        '--dry-run[Execute command in dry run mode]' \
        '--force-recreate[Recreate containers even if their configuration and image haven'\''t changed.]' \
        '--no-build[Don'\''t build an image, even if it'\''s missing.]' \
        '--no-recreate[If containers already exist, don'\''t recreate them. Incompatible with --force-recreate.]' \
        '--pull[Pull image before running ("always"|"missing"|"never") (default "missing")]' \
        '--remove-orphans[Remove containers for services not defined in the Compose file.]' \
        '--scale[Scale SERVICE to NUM instances. Overrides the scale setting in the Compose file if present.]' \
        "*: :_files"

}

function _docker_compose_down {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--remove-orphans[Remove containers for services not defined in the Compose file.]' \
        '--rmi[Remove images used by services. "local" remove only images that don'\''t have a custom tag ("local"|"all")]' \
        {-t,--timeout}'[Specify a shutdown timeout in seconds]' \
        {-v,--volumes}'[Remove named volumes declared in the "volumes" section of the Compose file and anonymous volumes attached to containers.]' \
        "*: :_files"

}

function _docker_compose_events {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--json[Output events as a stream of json objects]' \
        "*: :_files"

}

function _docker_compose_exec {
    _arguments \
        {-d,--detach}'[Detached mode: Run command in the background.]' \
        '--dry-run[Execute command in dry run mode]' \
        {-e,--env}'[Set environment variables]' \
        '--index[index of the container if there are multiple instances of a service \[default: 1\]. (default 1)]' \
        {-T,--no-TTY}'[Disable pseudo-TTY allocation. By default docker compose exec allocates a TTY. (default true)]' \
        '--privileged[Give extended privileges to the process.]' \
        {-u,--user}'[Run the command as this user.]' \
        {-w,--workdir}'[Path to workdir directory for this command.]' \
        "*: :_files"

}

function _docker_compose_images {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--format[Format the output. Values: \[table | json\]. (default "table")]' \
        {-q,--quiet}'[Only display IDs]' \
        "*: :_files"

}

function _docker_compose_kill {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--remove-orphans[Remove containers for services not defined in the Compose file.]' \
        {-s,--signal}'[SIGNAL to send to the container. (default "SIGKILL")]' \
        "*: :_files"

}

function _docker_compose_logs {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        {-f,--follow}'[Follow log output.]' \
        '--no-color[Produce monochrome output.]' \
        '--no-log-prefix[Don'\''t print prefix in logs.]' \
        '--since[Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)]' \
        {-n,--tail}'[Number of lines to show from the end of the logs for each container. (default "all")]' \
        {-t,--timestamps}'[Show timestamps.]' \
        '--until[Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)]' \
        "*: :_files"

}

function _docker_compose_ls {
    _arguments \
        {-a,--all}'[Show all stopped Compose projects]' \
        '--dry-run[Execute command in dry run mode]' \
        '--filter[Filter output based on conditions provided.]' \
        '--format[Format the output. Values: \[table | json\]. (default "table")]' \
        {-q,--quiet}'[Only display IDs.]' \
        "*: :_files"

}

function _docker_compose_pause {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        "*: :_files"

}

function _docker_compose_port {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--index[index of the container if service has multiple replicas (default 1)]' \
        '--protocol[tcp or udp (default "tcp")]' \
        "*: :_files"

}

function _docker_compose_ps {
    _arguments \
        {-a,--all}'[Show all stopped containers (including those created by the run command)]' \
        '--dry-run[Execute command in dry run mode]' \
        '--filter[Filter services by a property (supported filters: status).]' \
        '--format[Format the output. Values: \[table | json\] (default "table")]' \
        {-q,--quiet}'[Only display IDs]' \
        '--services[Display services]' \
        '--status[Filter services by status. Values: \[paused | restarting | removing | running | dead | created | exited\]]' \
        "*: :_files"

}

function _docker_compose_pull {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--ignore-buildable[Ignore images that can be built.]' \
        '--ignore-pull-failures[Pull what it can and ignores images with pull failures.]' \
        '--include-deps[Also pull services declared as dependencies.]' \
        {-q,--quiet}'[Pull without printing progress information.]' \
        "*: :_files"

}

function _docker_compose_push {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--ignore-push-failures[Push what it can and ignores images with push failures]' \
        '--include-deps[Also push images of services declared as dependencies]' \
        {-q,--quiet}'[Push without printing progress information]' \
        "*: :_files"

}

function _docker_compose_restart {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        '--no-deps[Don'\''t restart dependent services.]' \
        {-t,--timeout}'[Specify a shutdown timeout in seconds]' \
        "*: :_files"

}

function _docker_compose_rm {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        {-f,--force}'[Don'\''t ask to confirm removal]' \
        {-s,--stop}'[Stop the containers, if required, before removing]' \
        {-v,--volumes}'[Remove any anonymous volumes attached to containers]' \
        "*: :_files"

}

function _docker_compose_run {
    _arguments \
        '--build[Build image before starting container.]' \
        '--cap-add[Add Linux capabilities]' \
        '--cap-drop[Drop Linux capabilities]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--dry-run[Execute command in dry run mode]' \
        '--entrypoint[Override the entrypoint of the image]' \
        {-e,--env}'[Set environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached. (default true)]' \
        {-l,--label}'[Add or override a label]' \
        '--name[Assign a name to the container]' \
        {-T,--no-TTY}'[Disable pseudo-TTY allocation (default: auto-detected). (default true)]' \
        '--no-deps[Don'\''t start linked services.]' \
        {-p,--publish}'[Publish a container'\''s port(s) to the host.]' \
        '--quiet-pull[Pull without printing progress information.]' \
        '--remove-orphans[Remove containers for services not defined in the Compose file.]' \
        '--rm[Automatically remove the container when it exits]' \
        '--service-ports[Run command with the service'\''s ports enabled and mapped to the host.]' \
        '--use-aliases[Use the service'\''s network useAliases in the network(s) the container connects to.]' \
        {-u,--user}'[Run as specified username or uid]' \
        {-v,--volume}'[Bind mount a volume.]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_compose_start {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        "*: :_files"

}

function _docker_compose_stop {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        {-t,--timeout}'[Specify a shutdown timeout in seconds]' \
        "*: :_files"

}

function _docker_compose_top {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        "*: :_files"

}

function _docker_compose_unpause {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        "*: :_files"

}

function _docker_compose_up {
    _arguments \
        '--abort-on-container-exit[Stops all containers if any container was stopped. Incompatible with -d]' \
        '--always-recreate-deps[Recreate dependent containers. Incompatible with --no-recreate.]' \
        '--attach[Attach to service output.]' \
        '--attach-dependencies[Attach to dependent containers.]' \
        '--build[Build images before starting containers.]' \
        {-d,--detach}'[Detached mode: Run containers in the background]' \
        '--dry-run[Execute command in dry run mode]' \
        '--exit-code-from[Return the exit code of the selected service container. Implies --abort-on-container-exit]' \
        '--force-recreate[Recreate containers even if their configuration and image haven'\''t changed.]' \
        '--no-attach[Don'\''t attach to specified service.]' \
        '--no-build[Don'\''t build an image, even if it'\''s missing.]' \
        '--no-color[Produce monochrome output.]' \
        '--no-deps[Don'\''t start linked services.]' \
        '--no-log-prefix[Don'\''t print prefix in logs.]' \
        '--no-recreate[If containers already exist, don'\''t recreate them. Incompatible with --force-recreate.]' \
        '--no-start[Don'\''t start the services after creating them.]' \
        '--pull[Pull image before running ("always"|"missing"|"never") (default "missing")]' \
        '--quiet-pull[Pull without printing progress information.]' \
        '--remove-orphans[Remove containers for services not defined in the Compose file.]' \
        {-V,--renew-anon-volumes}'[Recreate anonymous volumes instead of retrieving data from the previous containers.]' \
        '--scale[Scale SERVICE to NUM instances. Overrides the scale setting in the Compose file if present.]' \
        {-t,--timeout}'[Use this timeout in seconds for container shutdown when attached or when containers are already running.]' \
        '--timestamps[Show timestamps.]' \
        '--wait[Wait for services to be running|healthy. Implies detached mode.]' \
        '--wait-timeout[timeout waiting for application to be running|healthy.]' \
        "*: :_files"

}

function _docker_compose_version {
    _arguments \
        '--dry-run[Execute command in dry run mode]' \
        {-f,--format}'[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        '--short[Shows only Compose'\''s version number.]' \
        "*: :_files"

}


function _docker_container {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach local standard input, output, and error streams to a running container'
            'commit:Create a new image from a container'\''s changes'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create a new container'
            'diff:Inspect changes to files or directories on a container'\''s filesystem'
            'exec:Execute a command in a running container'
            'export:Export a container'\''s filesystem as a tar archive'
            'inspect:Display detailed information on one or more containers'
            'kill:Kill one or more running containers'
            'logs:Fetch the logs of a container'
            'ls:List containers'
            'pause:Pause all processes within one or more containers'
            'port:List port mappings or a specific mapping for the container'
            'prune:Remove all stopped containers'
            'rename:Rename a container'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'run:Create and run a new container from an image'
            'start:Start one or more stopped containers'
            'stats:Display a live stream of container(s) resource usage statistics'
            'stop:Stop one or more running containers'
            'top:Display the running processes of a container'
            'unpause:Unpause all processes within one or more containers'
            'update:Update configuration of one or more containers'
            'wait:Block until one or more containers stop, then print their exit codes'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _docker_container_attach
            ;;

        (commit)
            _docker_container_commit
            ;;

        (cp)
            _docker_container_cp
            ;;

        (create)
            _docker_container_create
            ;;

        (diff)
            _docker_container_diff
            ;;

        (exec)
            _docker_container_exec
            ;;

        (export)
            _docker_container_export
            ;;

        (inspect)
            _docker_container_inspect
            ;;

        (kill)
            _docker_container_kill
            ;;

        (logs)
            _docker_container_logs
            ;;

        (ls)
            _docker_container_ls
            ;;

        (pause)
            _docker_container_pause
            ;;

        (port)
            _docker_container_port
            ;;

        (prune)
            _docker_container_prune
            ;;

        (rename)
            _docker_container_rename
            ;;

        (restart)
            _docker_container_restart
            ;;

        (rm)
            _docker_container_rm
            ;;

        (run)
            _docker_container_run
            ;;

        (start)
            _docker_container_start
            ;;

        (stats)
            _docker_container_stats
            ;;

        (stop)
            _docker_container_stop
            ;;

        (top)
            _docker_container_top
            ;;

        (unpause)
            _docker_container_unpause
            ;;

        (update)
            _docker_container_update
            ;;

        (wait)
            _docker_container_wait
            ;;

        esac
        ;;
     esac

}

function _docker_container_attach {
    _arguments \
        '--detach-keys[Override the key sequence for detaching a container]' \
        '--no-stdin[Do not attach STDIN]' \
        '--sig-proxy[Proxy all received signals to the process (default true)]' \
        "*: :_files"

}

function _docker_container_commit {
    _arguments \
        {-a,--author}'[Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")]' \
        {-c,--change}'[Apply Dockerfile instruction to the created image]' \
        {-m,--message}'[Commit message]' \
        {-p,--pause}'[Pause container during commit (default true)]' \
        "*: :_files"

}

function _docker_container_cp {
    _arguments \
        {-a,--archive}'[Archive mode (copy all uid/gid information)]' \
        {-L,--follow-link}'[Always follow symbol link in SRC_PATH]' \
        {-q,--quiet}'[Suppress progress output during copy. Progress output is automatically suppressed if no terminal is attached]' \
        "*: :_files"

}

function _docker_container_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
        '--annotation[Add an annotation to the container (passed through to the OCI runtime) (default map\[\])]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
        '--cap-add[Add Linux capabilities]' \
        '--cap-drop[Drop Linux capabilities]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[Cgroup namespace to use (host|private) '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
        '--cidfile[Write the container ID to the file]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--dns[Set custom DNS servers]' \
        '--dns-option[Set DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--domainname[Container NIS domain name]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        '--expose[Expose a port or a range of ports]' \
        '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
        '--group-add[Add additional groups to join]' \
        '--health-cmd[Command to run to check health]' \
        '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
        '--health-retries[Consecutive failures needed to report unhealthy]' \
        '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
        '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
        '--help[Print usage]' \
        {-h,--hostname}'[Container host name]' \
        '--init[Run an init inside the container that forwards signals and reaps processes]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[IPv4 address (e.g., 172.30.100.104)]' \
        '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
        '--ipc[IPC mode to use]' \
        '--isolation[Container isolation technology]' \
        '--kernel-memory[Kernel memory limit]' \
        {-l,--label}'[Set meta data on a container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--link[Add link to another container]' \
        '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
        '--log-driver[Logging driver for the container]' \
        '--log-opt[Log driver options]' \
        '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
        '--pid[PID namespace to use]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        '--privileged[Give extended privileges to this container]' \
        {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports]' \
        '--pull[Pull image before creating ("always", "|missing", "never") (default "missing")]' \
        {-q,--quiet}'[Suppress the pull output]' \
        '--read-only[Mount the container'\''s root filesystem as read only]' \
        '--restart[Restart policy to apply when a container exits (default "no")]' \
        '--rm[Automatically remove the container when it exits]' \
        '--runtime[Runtime to use for this container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm]' \
        '--stop-signal[Signal to stop the container]' \
        '--stop-timeout[Timeout (in seconds) to stop a container]' \
        '--storage-opt[Storage driver options for the container]' \
        '--sysctl[Sysctl options (default map\[\])]' \
        '--tmpfs[Mount a tmpfs directory]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        '--ulimit[Ulimit options (default \[\])]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        {-v,--volume}'[Bind mount a volume]' \
        '--volume-driver[Optional volume driver for the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_container_diff {
    _arguments \
        "*: :_files"

}

function _docker_container_exec {
    _arguments \
        {-d,--detach}'[Detached mode: run command in the background]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--privileged[Give extended privileges to the command]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        {-u,--user}'[Username or UID (format: "<name|uid>\[:<group|gid>\]")]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_container_export {
    _arguments \
        {-o,--output}'[Write to a file, instead of STDOUT]' \
        "*: :_files"

}

function _docker_container_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-s,--size}'[Display total file sizes]' \
        "*: :_files"

}

function _docker_container_kill {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        "*: :_files"

}

function _docker_container_logs {
    _arguments \
        '--details[Show extra details provided to logs]' \
        {-f,--follow}'[Follow log output]' \
        '--since[Show logs since timestamp (e.g. "2013-01-02T13:23:37Z") or relative (e.g. "42m" for 42 minutes)]' \
        {-n,--tail}'[Number of lines to show from the end of the logs (default "all")]' \
        {-t,--timestamps}'[Show timestamps]' \
        '--until[Show logs before a timestamp (e.g. "2013-01-02T13:23:37Z") or relative (e.g. "42m" for 42 minutes)]' \
        "*: :_files"

}

function _docker_container_ls {
    _arguments \
        {-a,--all}'[Show all containers (default shows just running)]' \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-n,--last}'[Show n last created containers (includes all states) (default -1)]' \
        {-l,--latest}'[Show the latest created container (includes all states)]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only display container IDs]' \
        {-s,--size}'[Display total file sizes]' \
        "*: :_files"

}

function _docker_container_pause {
    _arguments \
        "*: :_files"

}

function _docker_container_port {
    _arguments \
        "*: :_files"

}

function _docker_container_prune {
    _arguments \
        '--filter[Provide filter values (e.g. "until=<timestamp>")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_container_rename {
    _arguments \
        "*: :_files"

}

function _docker_container_restart {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        {-t,--time}'[Seconds to wait before killing the container]' \
        "*: :_files"

}

function _docker_container_rm {
    _arguments \
        {-f,--force}'[Force the removal of a running container (uses SIGKILL)]' \
        {-l,--link}'[Remove the specified link]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _docker_container_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
        '--annotation[Add an annotation to the container (passed through to the OCI runtime) (default map\[\])]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--blkio-weight-device[Block IO weight (relative device weight) (default \[\])]' \
        '--cap-add[Add Linux capabilities]' \
        '--cap-drop[Drop Linux capabilities]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[Cgroup namespace to use (host|private) '\''host'\'': Run the container in the Docker host'\''s cgroup namespace '\''private'\'': Run the container in its own private cgroup namespace '\'''\'': Use the cgroup namespace as configured by the]' \
        '--cidfile[Write the container ID to the file]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (default \[\])]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (default \[\])]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (default \[\])]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (default \[\])]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--dns[Set custom DNS servers]' \
        '--dns-option[Set DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--domainname[Container NIS domain name]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        '--expose[Expose a port or a range of ports]' \
        '--gpus[GPU devices to add to the container ('\''all'\'' to pass all GPUs)]' \
        '--group-add[Add additional groups to join]' \
        '--health-cmd[Command to run to check health]' \
        '--health-interval[Time between running the check (ms|s|m|h) (default 0s)]' \
        '--health-retries[Consecutive failures needed to report unhealthy]' \
        '--health-start-period[Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)]' \
        '--health-timeout[Maximum time to allow one check to run (ms|s|m|h) (default 0s)]' \
        '--help[Print usage]' \
        {-h,--hostname}'[Container host name]' \
        '--init[Run an init inside the container that forwards signals and reaps processes]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[IPv4 address (e.g., 172.30.100.104)]' \
        '--ip6[IPv6 address (e.g., 2001:db8::33)]' \
        '--ipc[IPC mode to use]' \
        '--isolation[Container isolation technology]' \
        '--kernel-memory[Kernel memory limit]' \
        {-l,--label}'[Set meta data on a container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--link[Add link to another container]' \
        '--link-local-ip[Container IPv4/IPv6 link-local addresses]' \
        '--log-driver[Logging driver for the container]' \
        '--log-opt[Log driver options]' \
        '--mac-address[Container MAC address (e.g., 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable any container-specified HEALTHCHECK]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune host'\''s OOM preferences (-1000 to 1000)]' \
        '--pid[PID namespace to use]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        '--privileged[Give extended privileges to this container]' \
        {-p,--publish}'[Publish a container'\''s port(s) to the host]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports]' \
        '--pull[Pull image before running ("always", "missing", "never") (default "missing")]' \
        {-q,--quiet}'[Suppress the pull output]' \
        '--read-only[Mount the container'\''s root filesystem as read only]' \
        '--restart[Restart policy to apply when a container exits (default "no")]' \
        '--rm[Automatically remove the container when it exits]' \
        '--runtime[Runtime to use for this container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop the container]' \
        '--stop-timeout[Timeout (in seconds) to stop a container]' \
        '--storage-opt[Storage driver options for the container]' \
        '--sysctl[Sysctl options (default map\[\])]' \
        '--tmpfs[Mount a tmpfs directory]' \
        {-t,--tty}'[Allocate a pseudo-TTY]' \
        '--ulimit[Ulimit options (default \[\])]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        {-v,--volume}'[Bind mount a volume]' \
        '--volume-driver[Optional volume driver for the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _docker_container_start {
    _arguments \
        {-a,--attach}'[Attach STDOUT/STDERR and forward signals]' \
        '--detach-keys[Override the key sequence for detaching a container]' \
        {-i,--interactive}'[Attach container'\''s STDIN]' \
        "*: :_files"

}

function _docker_container_stats {
    _arguments \
        {-a,--all}'[Show all containers (default shows just running)]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-stream[Disable streaming stats and only pull the first result]' \
        '--no-trunc[Do not truncate output]' \
        "*: :_files"

}

function _docker_container_stop {
    _arguments \
        {-s,--signal}'[Signal to send to the container]' \
        {-t,--time}'[Seconds to wait before killing the container]' \
        "*: :_files"

}

function _docker_container_top {
    _arguments \
        "*: :_files"

}

function _docker_container_unpause {
    _arguments \
        "*: :_files"

}

function _docker_container_update {
    _arguments \
        '--blkio-weight[Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)]' \
        '--cpu-period[Limit CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[MEMs in which to allow execution (0-3, 0,1)]' \
        {-m,--memory}'[Memory limit]' \
        '--memory-reservation[Memory soft limit]' \
        '--memory-swap[Swap limit equal to memory plus swap: -1 to enable unlimited swap]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--restart[Restart policy to apply when a container exits]' \
        "*: :_files"

}

function _docker_container_wait {
    _arguments \
        "*: :_files"

}


function _docker_context {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create new context'
            'export:Export a context to a tar or kubeconfig file'
            'import:Import a context from a tar or zip file'
            'inspect:Display detailed information on one or more contexts'
            'list:List available contexts'
            'rm:Remove one or more contexts'
            'show:Print the current context'
            'update:Update a context'
            'use:Set the default context'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Help for context]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _docker_context_create
            ;;

        (export)
            _docker_context_export
            ;;

        (import)
            _docker_context_import
            ;;

        (inspect)
            _docker_context_inspect
            ;;

        (list)
            _docker_context_list
            ;;

        (rm)
            _docker_context_rm
            ;;

        (show)
            _docker_context_show
            ;;

        (update)
            _docker_context_update
            ;;

        (use)
            _docker_context_use
            ;;

        esac
        ;;
     esac

}


function _docker_context_create {
    local line state

    function _commands {
        local -a commands
        commands=(
            'aci:Create a context for Azure Container Instances'
            'ecs:Create a context for Amazon ECS'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--default-stack-orchestrator[Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)]' \
        '--description[Description of the context]' \
        '--docker[Set the docker endpoint (default \[\])]' \
        '--from[Create context from a named context]' \
        {-h,--help}'[Help for create]' \
        '--kubernetes[Set the kubernetes endpoint (default \[\])]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (aci)
            _docker_context_create_aci
            ;;

        (ecs)
            _docker_context_create_ecs
            ;;

        esac
        ;;
     esac

}

function _docker_context_create_aci {
    _arguments \
        '--description[Description of the context]' \
        {-h,--help}'[Help for aci]' \
        '--location[Location]' \
        '--resource-group[Resource group]' \
        '--subscription-id[Subscription id]' \
        "*: :_files"

}

function _docker_context_create_ecs {
    _arguments \
        '--access-keys[Use AWS access keys from file]' \
        '--description[Description of the context]' \
        '--from-env[Use AWS environment variables for profile, or credentials and region]' \
        {-h,--help}'[Help for ecs]' \
        '--local-simulation[Create context for ECS local simulation endpoints]' \
        '--profile[Use an existing AWS profile]' \
        "*: :_files"

}

function _docker_context_export {
    _arguments \
        {-h,--help}'[Help for export]' \
        '--kubeconfig[Export as a kubeconfig file]' \
        "*: :_files"

}

function _docker_context_import {
    _arguments \
        {-h,--help}'[Help for import]' \
        "*: :_files"

}

function _docker_context_inspect {
    _arguments \
        {-f,--format}'[Format the output using the given Go template]' \
        {-h,--help}'[Help for inspect]' \
        "*: :_files"

}

function _docker_context_list {
    _arguments \
        '--format[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        {-h,--help}'[Help for list]' \
        {-q,--quiet}'[Only show context names]' \
        "*: :_files"

}

function _docker_context_rm {
    _arguments \
        {-f,--force}'[Force removing current context]' \
        {-h,--help}'[Help for rm]' \
        "*: :_files"

}

function _docker_context_show {
    _arguments \
        {-h,--help}'[Help for show]' \
        "*: :_files"

}

function _docker_context_update {
    _arguments \
        '--default-stack-orchestrator[Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)]' \
        '--description[Description of the context]' \
        '--docker[Set the docker endpoint (default \[\])]' \
        {-h,--help}'[Help for update]' \
        '--kubernetes[Set the kubernetes endpoint (default \[\])]' \
        "*: :_files"

}

function _docker_context_use {
    _arguments \
        {-h,--help}'[Help for use]' \
        "*: :_files"

}


function _docker_dev {
    local line state

    function _commands {
        local -a commands
        commands=(
            'service:Service management on a dev environment'
            'check:Check Dev Environments'
            'create:Create a new dev environment'
            'list:Lists all Dev Environments'
            'logs:Traces logs from a dev environment'
            'open:Open Dev Environment with the IDE'
            'rm:Removes a dev environment'
            'start:Starts a dev environment'
            'stop:Stops a dev environment'
            'version:Show the Docker Dev version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-s,--socket}'[Sets the path to the unix socket or pipe to be targeted. Can also be set through the environment variable DOCKER_DEV_ENVS_SOCKET_PATH]' \
        {-v,--version}'[Display version of the dev plugin]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (service)
            _docker_dev_service
            ;;

        (check)
            _docker_dev_check
            ;;

        (create)
            _docker_dev_create
            ;;

        (list)
            _docker_dev_list
            ;;

        (logs)
            _docker_dev_logs
            ;;

        (open)
            _docker_dev_open
            ;;

        (rm)
            _docker_dev_rm
            ;;

        (start)
            _docker_dev_start
            ;;

        (stop)
            _docker_dev_stop
            ;;

        (version)
            _docker_dev_version
            ;;

        esac
        ;;
     esac

}


function _docker_dev_service {
    local line state

    function _commands {
        local -a commands
        commands=(
            'start:Start service on a dev environment'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (start)
            _docker_dev_service_start
            ;;

        esac
        ;;
     esac

}

function _docker_dev_service_start {
    _arguments \
        "*: :_files"

}

function _docker_dev_check {
    _arguments \
        {-f,--format}'[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        "*: :_files"

}

function _docker_dev_create {
    _arguments \
        '--base-image[Base image to use for the dev environment]' \
        {-d,--detach}'[Detach creates a Dev Env without attaching to it'\''s logs]' \
        '--language[Language to use for the dev environment. \[\]]' \
        '--name[Name of the Dev Env. Will be autogenerated if not specified]' \
        {-o,--open}'[Open IDE after a successful creation]' \
        '--path[Local path to clone repository.]' \
        "*: :_files"

}

function _docker_dev_list {
    _arguments \
        {-f,--format}'[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        {-q,--quiet}'[Only show Dev Environments names]' \
        "*: :_files"

}

function _docker_dev_logs {
    _arguments \
        "*: :_files"

}

function _docker_dev_open {
    _arguments \
        {-e,--editor}'[Editor]' \
        "*: :_files"

}

function _docker_dev_rm {
    _arguments \
        "*: :_files"

}

function _docker_dev_start {
    _arguments \
        "*: :_files"

}

function _docker_dev_stop {
    _arguments \
        "*: :_files"

}

function _docker_dev_version {
    _arguments \
        {-f,--format}'[Format the output. Values: \[pretty | json\]. (Default: pretty)]' \
        {-s,--short}'[Shows only Docker Dev'\''s version number.]' \
        "*: :_files"

}


function _docker_extension {
    local line state

    function _commands {
        local -a commands
        commands=(
            'dev:Extension development helpers'
            'init:Create a new Docker Extension based on a template.'
            'install:Install a Docker extension with the specified image'
            'ls:List installed Docker extensions'
            'rm:Remove a Docker extension'
            'share:Generate a link to share the extension.'
            'update:Remove and re-install a Docker extension'
            'validate:Validate an extension image or metadata file'
            'version:Print the client and server versions'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--socket[The Desktop extension manager socket]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (dev)
            _docker_extension_dev
            ;;

        (init)
            _docker_extension_init
            ;;

        (install)
            _docker_extension_install
            ;;

        (ls)
            _docker_extension_ls
            ;;

        (rm)
            _docker_extension_rm
            ;;

        (share)
            _docker_extension_share
            ;;

        (update)
            _docker_extension_update
            ;;

        (validate)
            _docker_extension_validate
            ;;

        (version)
            _docker_extension_version
            ;;

        esac
        ;;
     esac

}


function _docker_extension_dev {
    local line state

    function _commands {
        local -a commands
        commands=(
            'debug:Set the debug mode for an extension'
            'reset:Reset the source and disables the debug mode for the extension UI'
            'ui-source:Set a new source for the extension UI'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (debug)
            _docker_extension_dev_debug
            ;;

        (reset)
            _docker_extension_dev_reset
            ;;

        (ui-source)
            _docker_extension_dev_ui-source
            ;;

        esac
        ;;
     esac

}

function _docker_extension_dev_debug {
    _arguments \
        "*: :_files"

}

function _docker_extension_dev_reset {
    _arguments \
        "*: :_files"

}

function _docker_extension_dev_ui-source {
    _arguments \
        "*: :_files"

}

function _docker_extension_init {
    _arguments \
        '--image-repo[Image Repository where the extension will be pushed (required with --quiet)]' \
        {-q,--quiet}'[Use quiet to not prompt questions and use default values as answers.]' \
        '--title[Title of your extension as it will appear in the Marketplace (required with --quiet)]' \
        '--version[Minimum extension SDK version the extension is compatible with]' \
        "*: :_files"

}

function _docker_extension_install {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_extension_ls {
    _arguments \
        '--format[Format the output. Values: \[pretty | json\]. (default "pretty")]' \
        {-q,--quiet}'[Only display IDs.]' \
        "*: :_files"

}

function _docker_extension_rm {
    _arguments \
        "*: :_files"

}

function _docker_extension_share {
    _arguments \
        "*: :_files"

}

function _docker_extension_update {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_extension_validate {
    _arguments \
        {-a,--auto-resolve-tag}'[Use the greatest semver tag available in the DockerHub repository (overrides the tag specified, if any)]' \
        {-e,--errors-only}'[Only outputs validation errors (no log or debug messages). Can'\''t be set alongside verbose flag.]' \
        {-s,--sdk-compatibility}'[Validate the extension is compatible with the SDK version (requires having Docker Desktop running)]' \
        {-i,--validate-install-uninstall}'[Validate the installation and uninstallation process]' \
        {-v,--verbose}'[Show a more verbose output]' \
        "*: :_files"

}

function _docker_extension_version {
    _arguments \
        "*: :_files"

}


function _docker_image {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build an image from a Dockerfile'
            'history:Show the history of an image'
            'import:Import the contents from a tarball to create a filesystem image'
            'inspect:Display detailed information on one or more images'
            'load:Load an image from a tar archive or STDIN'
            'ls:List images'
            'prune:Remove unused images'
            'pull:Download an image from a registry'
            'push:Upload an image to a registry'
            'rm:Remove one or more images'
            'save:Save one or more images to a tar archive (streamed to STDOUT by default)'
            'tag:Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _docker_image_build
            ;;

        (history)
            _docker_image_history
            ;;

        (import)
            _docker_image_import
            ;;

        (inspect)
            _docker_image_inspect
            ;;

        (load)
            _docker_image_load
            ;;

        (ls)
            _docker_image_ls
            ;;

        (prune)
            _docker_image_prune
            ;;

        (pull)
            _docker_image_pull
            ;;

        (push)
            _docker_image_push
            ;;

        (rm)
            _docker_image_rm
            ;;

        (save)
            _docker_image_save
            ;;

        (tag)
            _docker_image_tag
            ;;

        esac
        ;;
     esac

}

function _docker_image_build {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (format: "host:ip")]' \
        '--allow[Allow extra privileged entitlement (e.g., "network.host", "security.insecure")]' \
        '--attest[Attestation parameters (format: "type=sbom,generator=image")]' \
        '--build-arg[Set build-time variables]' \
        '--build-context[Additional build contexts (e.g., name=path)]' \
        '--builder[Override the configured builder instance (default "default")]' \
        '--cache-from[External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")]' \
        '--cache-to[Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        {-f,--file}'[Name of the Dockerfile (default: "PATH/Dockerfile")]' \
        '--iidfile[Write the image ID to the file]' \
        '--label[Set metadata for an image]' \
        '--load[Shorthand for "--output=type=docker"]' \
        '--metadata-file[Write build result metadata to the file]' \
        '--network[Set the networking mode for the "RUN" instructions during build (default "default")]' \
        '--no-cache[Do not use cache when building the image]' \
        '--no-cache-filter[Do not cache specified stages]' \
        {-o,--output}'[Output destination (format: "type=local,dest=path")]' \
        '--platform[Set target platform for build]' \
        '--progress[Set type of progress output ("auto", "plain", "tty"). Use plain to show container output (default "auto")]' \
        '--provenance[Shorthand for "--attest=type=provenance"]' \
        '--pull[Always attempt to pull all referenced images]' \
        '--push[Shorthand for "--output=type=registry"]' \
        {-q,--quiet}'[Suppress the build output and print image ID on success]' \
        '--sbom[Shorthand for "--attest=type=sbom"]' \
        '--secret[Secret to expose to the build (format: "id=mysecret\[,src=/local/secret\]")]' \
        '--shm-size[Size of "/dev/shm"]' \
        '--ssh[SSH agent socket or keys to expose to the build (format: "default|<id>\[=<socket>|<key>\[,<key>\]\]")]' \
        {-t,--tag}'[Name and optionally a tag (format: "name:tag")]' \
        '--target[Set the target build stage to build]' \
        '--ulimit[Ulimit options (default \[\])]' \
        "*: :_files"

}

function _docker_image_history {
    _arguments \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-H,--human}'[Print sizes and dates in human readable format (default true)]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only show image IDs]' \
        "*: :_files"

}

function _docker_image_import {
    _arguments \
        {-c,--change}'[Apply Dockerfile instruction to the created image]' \
        {-m,--message}'[Set commit message for imported image]' \
        '--platform[Set platform if server is multi-platform capable]' \
        "*: :_files"

}

function _docker_image_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        "*: :_files"

}

function _docker_image_load {
    _arguments \
        {-i,--input}'[Read from tar archive file, instead of STDIN]' \
        {-q,--quiet}'[Suppress the load output]' \
        "*: :_files"

}

function _docker_image_ls {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only show image IDs]' \
        "*: :_files"

}

function _docker_image_prune {
    _arguments \
        {-a,--all}'[Remove all unused images, not just dangling ones]' \
        '--filter[Provide filter values (e.g. "until=<timestamp>")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_image_pull {
    _arguments \
        {-a,--all-tags}'[Download all tagged images in the repository]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--platform[Set platform if server is multi-platform capable]' \
        {-q,--quiet}'[Suppress verbose output]' \
        "*: :_files"

}

function _docker_image_push {
    _arguments \
        {-a,--all-tags}'[Push all tags of an image to the repository]' \
        '--disable-content-trust[Skip image signing (default true)]' \
        {-q,--quiet}'[Suppress verbose output]' \
        "*: :_files"

}

function _docker_image_rm {
    _arguments \
        {-f,--force}'[Force removal of the image]' \
        '--no-prune[Do not delete untagged parents]' \
        "*: :_files"

}

function _docker_image_save {
    _arguments \
        {-o,--output}'[Write to a file, instead of STDOUT]' \
        "*: :_files"

}

function _docker_image_tag {
    _arguments \
        "*: :_files"

}

function _docker_init {
    _arguments \
        '--version[Display version of the init plugin]' \
        "*: :_files"

}


function _docker_manifest {
    local line state

    function _commands {
        local -a commands
        commands=(
            'annotate:Add additional information to a local image manifest'
            'create:Create a local manifest list for annotating and pushing to a registry'
            'inspect:Display an image manifest, or manifest list'
            'push:Push a manifest list to a repository'
            'rm:Delete one or more manifest lists from local storage'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (annotate)
            _docker_manifest_annotate
            ;;

        (create)
            _docker_manifest_create
            ;;

        (inspect)
            _docker_manifest_inspect
            ;;

        (push)
            _docker_manifest_push
            ;;

        (rm)
            _docker_manifest_rm
            ;;

        esac
        ;;
     esac

}

function _docker_manifest_annotate {
    _arguments \
        '--arch[Set architecture]' \
        '--os[Set operating system]' \
        '--os-features[Set operating system feature]' \
        '--os-version[Set operating system version]' \
        '--variant[Set architecture variant]' \
        "*: :_files"

}

function _docker_manifest_create {
    _arguments \
        {-a,--amend}'[Amend an existing manifest list]' \
        '--insecure[Allow communication with an insecure registry]' \
        "*: :_files"

}

function _docker_manifest_inspect {
    _arguments \
        '--insecure[Allow communication with an insecure registry]' \
        {-v,--verbose}'[Output additional info including layers and platform]' \
        "*: :_files"

}

function _docker_manifest_push {
    _arguments \
        '--insecure[Allow push to an insecure registry]' \
        {-p,--purge}'[Remove the local manifest list after push]' \
        "*: :_files"

}

function _docker_manifest_rm {
    _arguments \
        "*: :_files"

}


function _docker_network {
    local line state

    function _commands {
        local -a commands
        commands=(
            'connect:Connect a container to a network'
            'create:Create a network'
            'disconnect:Disconnect a container from a network'
            'inspect:Display detailed information on one or more networks'
            'ls:List networks'
            'prune:Remove all unused networks'
            'rm:Remove one or more networks'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (connect)
            _docker_network_connect
            ;;

        (create)
            _docker_network_create
            ;;

        (disconnect)
            _docker_network_disconnect
            ;;

        (inspect)
            _docker_network_inspect
            ;;

        (ls)
            _docker_network_ls
            ;;

        (prune)
            _docker_network_prune
            ;;

        (rm)
            _docker_network_rm
            ;;

        esac
        ;;
     esac

}

function _docker_network_connect {
    _arguments \
        '--alias[Add network-scoped alias for the container]' \
        '--driver-opt[driver options for the network]' \
        '--ip[IPv4 address (e.g., "172.30.100.104")]' \
        '--ip6[IPv6 address (e.g., "2001:db8::33")]' \
        '--link[Add link to another container]' \
        '--link-local-ip[Add a link-local address for the container]' \
        "*: :_files"

}

function _docker_network_create {
    _arguments \
        '--attachable[Enable manual container attachment]' \
        '--aux-address[Auxiliary IPv4 or IPv6 addresses used by Network driver (default map\[\])]' \
        '--config-from[The network from which to copy the configuration]' \
        '--config-only[Create a configuration only network]' \
        {-d,--driver}'[Driver to manage the Network (default "bridge")]' \
        '--gateway[IPv4 or IPv6 Gateway for the master subnet]' \
        '--ingress[Create swarm routing-mesh network]' \
        '--internal[Restrict external access to the network]' \
        '--ip-range[Allocate container ip from a sub-range]' \
        '--ipam-driver[IP Address Management Driver (default "default")]' \
        '--ipam-opt[Set IPAM driver specific options (default map\[\])]' \
        '--ipv6[Enable IPv6 networking]' \
        '--label[Set metadata on a network]' \
        {-o,--opt}'[Set driver specific options (default map\[\])]' \
        '--scope[Control the network'\''s scope]' \
        '--subnet[Subnet in CIDR format that represents a network segment]' \
        "*: :_files"

}

function _docker_network_disconnect {
    _arguments \
        {-f,--force}'[Force the container to disconnect from a network]' \
        "*: :_files"

}

function _docker_network_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-v,--verbose}'[Verbose output for diagnostics]' \
        "*: :_files"

}

function _docker_network_ls {
    _arguments \
        {-f,--filter}'[Provide filter values (e.g. "driver=bridge")]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-trunc[Do not truncate the output]' \
        {-q,--quiet}'[Only display network IDs]' \
        "*: :_files"

}

function _docker_network_prune {
    _arguments \
        '--filter[Provide filter values (e.g. "until=<timestamp>")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_network_rm {
    _arguments \
        {-f,--force}'[Do not error if the network does not exist]' \
        "*: :_files"

}


function _docker_plugin {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.'
            'disable:Disable a plugin'
            'enable:Enable a plugin'
            'inspect:Display detailed information on one or more plugins'
            'install:Install a plugin'
            'ls:List plugins'
            'push:Push a plugin to a registry'
            'rm:Remove one or more plugins'
            'set:Change settings for a plugin'
            'upgrade:Upgrade an existing plugin'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _docker_plugin_create
            ;;

        (disable)
            _docker_plugin_disable
            ;;

        (enable)
            _docker_plugin_enable
            ;;

        (inspect)
            _docker_plugin_inspect
            ;;

        (install)
            _docker_plugin_install
            ;;

        (ls)
            _docker_plugin_ls
            ;;

        (push)
            _docker_plugin_push
            ;;

        (rm)
            _docker_plugin_rm
            ;;

        (set)
            _docker_plugin_set
            ;;

        (upgrade)
            _docker_plugin_upgrade
            ;;

        esac
        ;;
     esac

}

function _docker_plugin_create {
    _arguments \
        '--compress[Compress the context using gzip]' \
        "*: :_files"

}

function _docker_plugin_disable {
    _arguments \
        {-f,--force}'[Force the disable of an active plugin]' \
        "*: :_files"

}

function _docker_plugin_enable {
    _arguments \
        '--timeout[HTTP client timeout (in seconds) (default 30)]' \
        "*: :_files"

}

function _docker_plugin_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        "*: :_files"

}

function _docker_plugin_install {
    _arguments \
        '--alias[Local name for plugin]' \
        '--disable[Do not enable the plugin on install]' \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--grant-all-permissions[Grant all permissions necessary to run the plugin]' \
        "*: :_files"

}

function _docker_plugin_ls {
    _arguments \
        {-f,--filter}'[Provide filter values (e.g. "enabled=true")]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        '--no-trunc[Don'\''t truncate output]' \
        {-q,--quiet}'[Only display plugin IDs]' \
        "*: :_files"

}

function _docker_plugin_push {
    _arguments \
        '--disable-content-trust[Skip image signing (default true)]' \
        "*: :_files"

}

function _docker_plugin_rm {
    _arguments \
        {-f,--force}'[Force the removal of an active plugin]' \
        "*: :_files"

}

function _docker_plugin_set {
    _arguments \
        "*: :_files"

}

function _docker_plugin_upgrade {
    _arguments \
        '--disable-content-trust[Skip image verification (default true)]' \
        '--grant-all-permissions[Grant all permissions necessary to run the plugin]' \
        '--skip-remote-check[Do not check if specified remote plugin matches existing plugin image]' \
        "*: :_files"

}

function _docker_sbom {
    _arguments \
        {-D,--debug}'[show debug logging]' \
        '--exclude[exclude paths from being scanned using a glob expression]' \
        '--format[report output format, options=\[syft-json cyclonedx-xml cyclonedx-json github-0-json spdx-tag-value spdx-json table text\] (default "table")]' \
        '--layers[\[experimental\] selection of layers to catalog, options=\[squashed all\] (default "squashed")]' \
        {-o,--output}'[file to write the default report output to (default is STDOUT)]' \
        '--platform[an optional platform specifier for container image sources (e.g. '\''linux/arm64'\'', '\''linux/arm64/v8'\'', '\''arm64'\'', '\''linux'\'')]' \
        '--quiet[suppress all non-report output]' \
        {-v,--version}'[version for sbom]' \
        "*: :_files"

}

function _docker_scan {
    _arguments \
        '--version[Display version of the scan plugin]' \
        "*: :_files"

}


function _docker_scout {
    local line state

    function _commands {
        local -a commands
        commands=(
            'compare:Compare two images and display differences (experimental)'
            'cves:Display CVEs identified in a software artifact'
            'entitlement:Manage entitlement of a Docker Hub repository'
            'quickview:Quick overview of an image'
            'recommendations:Display available base image updates and remediation recommendations'
            'stream:Record an image into a stream (experimental)'
            'version:Show Docker Scout version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (compare)
            _docker_scout_compare
            ;;

        (cves)
            _docker_scout_cves
            ;;

        (entitlement)
            _docker_scout_entitlement
            ;;

        (quickview)
            _docker_scout_quickview
            ;;

        (recommendations)
            _docker_scout_recommendations
            ;;

        (stream)
            _docker_scout_stream
            ;;

        (version)
            _docker_scout_version
            ;;

        esac
        ;;
     esac

}

function _docker_scout_compare {
    _arguments \
        {-e,--exit-code}'[Return exit code '\''2'\'' if vulnerability changes are detected]' \
        '--format[Output format of the generated vulnerability report:]' \
        '--ignore-base[Filter out CVEs introduced from base image]' \
        '--ignore-unchanged[Filter out unchanged packages]' \
        '--only-fixed[Filter to fixable CVEs]' \
        '--only-package-type[Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)]' \
        '--only-severity[Comma separated list of severities (critical, high, medium, low, unspecified) to filter CVEs by]' \
        '--only-unfixed[Filter to unfixed CVEs]' \
        {-o,--output}'[Write the report to a file.]' \
        '--platform[Platform of image to analyze]' \
        '--ref[Reference to use if the provided tarball contains multiple references.]' \
        '--to[Image, directory or archive to compare to]' \
        '--to-latest[Latest image processed to compare to]' \
        '--to-ref[Reference to use if the provided tarball contains multiple references.]' \
        '--to-stream[Name of stream to compare to]' \
        '--to-type[Type of the image to analyze. Can be one of:]' \
        '--type[Type of the image to analyze. Can be one of:]' \
        "*: :_files"

}

function _docker_scout_cves {
    _arguments \
        '--details[Print details on default text output]' \
        {-e,--exit-code}'[Return exit code '\''2'\'' if vulnerabilities are detected]' \
        '--format[Output format of the generated vulnerability report:]' \
        '--ignore-base[Filter out CVEs introduced from base image]' \
        '--locations[Print package locations including file paths and layer diff_id]' \
        '--only-cve-id[Comma separated list of CVE ids (like CVE-2021-45105) to search for]' \
        '--only-fixed[Filter to fixable CVEs]' \
        '--only-package-type[Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)]' \
        '--only-severity[Comma separated list of severities (critical, high, medium, low, unspecified) to filter CVEs by]' \
        '--only-unfixed[Filter to unfixed CVEs]' \
        {-o,--output}'[Write the report to a file.]' \
        '--platform[Platform of image to analyze]' \
        '--ref[Reference to use if the provided tarball contains multiple references.]' \
        '--type[Type of the image to analyze. Can be one of:]' \
        "*: :_files"

}

function _docker_scout_entitlement {
    _arguments \
        '--disable[Disable Docker Scout on repository]' \
        "*: :_files"

}

function _docker_scout_quickview {
    _arguments \
        {-o,--output}'[Write the report to a file.]' \
        '--platform[Platform of image to analyze]' \
        '--ref[Reference to use if the provided tarball contains multiple references.]' \
        '--type[Type of the image to analyze. Can be one of:]' \
        "*: :_files"

}

function _docker_scout_recommendations {
    _arguments \
        '--only-refresh[Only display base image refresh recommendations]' \
        '--only-update[Only display base image update recommendations]' \
        {-o,--output}'[Write the report to a file.]' \
        '--platform[Platform of image to analyze]' \
        '--ref[Reference to use if the provided tarball contains multiple references.]' \
        '--tag[Specify tag]' \
        '--type[Type of the image to analyze. Can be one of:]' \
        "*: :_files"

}

function _docker_scout_stream {
    _arguments \
        '--app[Name of application the image is a part of]' \
        '--platform[Platform of image to record]' \
        "*: :_files"

}

function _docker_scout_version {
    _arguments \
        "*: :_files"

}


function _docker_system {
    local line state

    function _commands {
        local -a commands
        commands=(
            'df:Show docker disk usage'
            'events:Get real time events from the server'
            'info:Display system-wide information'
            'prune:Remove unused data'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (df)
            _docker_system_df
            ;;

        (events)
            _docker_system_events
            ;;

        (info)
            _docker_system_info
            ;;

        (prune)
            _docker_system_prune
            ;;

        esac
        ;;
     esac

}

function _docker_system_df {
    _arguments \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-v,--verbose}'[Show detailed information on space usage]' \
        "*: :_files"

}

function _docker_system_events {
    _arguments \
        {-f,--filter}'[Filter output based on conditions provided]' \
        '--format[Format the output using the given Go template]' \
        '--since[Show all events created since timestamp]' \
        '--until[Stream events until this timestamp]' \
        "*: :_files"

}

function _docker_system_info {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        "*: :_files"

}

function _docker_system_prune {
    _arguments \
        {-a,--all}'[Remove all unused images not just dangling ones]' \
        '--filter[Provide filter values (e.g. "label=<key>=<value>")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        '--volumes[Prune volumes]' \
        "*: :_files"

}


function _docker_trust {
    local line state

    function _commands {
        local -a commands
        commands=(
            'key:Manage keys for signing Docker images'
            'signer:Manage entities who can sign Docker images'
            'inspect:Return low-level information about keys and signatures'
            'revoke:Remove trust for an image'
            'sign:Sign an image'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (key)
            _docker_trust_key
            ;;

        (signer)
            _docker_trust_signer
            ;;

        (inspect)
            _docker_trust_inspect
            ;;

        (revoke)
            _docker_trust_revoke
            ;;

        (sign)
            _docker_trust_sign
            ;;

        esac
        ;;
     esac

}


function _docker_trust_key {
    local line state

    function _commands {
        local -a commands
        commands=(
            'generate:Generate and load a signing key-pair'
            'load:Load a private key file for signing'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (generate)
            _docker_trust_key_generate
            ;;

        (load)
            _docker_trust_key_load
            ;;

        esac
        ;;
     esac

}

function _docker_trust_key_generate {
    _arguments \
        '--dir[Directory to generate key in, defaults to current directory]' \
        "*: :_files"

}

function _docker_trust_key_load {
    _arguments \
        '--name[Name for the loaded key (default "signer")]' \
        "*: :_files"

}


function _docker_trust_signer {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a signer'
            'remove:Remove a signer'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _docker_trust_signer_add
            ;;

        (remove)
            _docker_trust_signer_remove
            ;;

        esac
        ;;
     esac

}

function _docker_trust_signer_add {
    _arguments \
        '--key[Path to the signer'\''s public key file]' \
        "*: :_files"

}

function _docker_trust_signer_remove {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation before removing the most recent signer]' \
        "*: :_files"

}

function _docker_trust_inspect {
    _arguments \
        '--pretty[Print the information in a human friendly format]' \
        "*: :_files"

}

function _docker_trust_revoke {
    _arguments \
        {-y,--yes}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_trust_sign {
    _arguments \
        '--local[Sign a locally tagged image]' \
        "*: :_files"

}


function _docker_volume {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a volume'
            'inspect:Display detailed information on one or more volumes'
            'ls:List volumes'
            'prune:Remove all unused local volumes'
            'rm:Remove one or more volumes'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _docker_volume_create
            ;;

        (inspect)
            _docker_volume_inspect
            ;;

        (ls)
            _docker_volume_ls
            ;;

        (prune)
            _docker_volume_prune
            ;;

        (rm)
            _docker_volume_rm
            ;;

        esac
        ;;
     esac

}

function _docker_volume_create {
    _arguments \
        {-d,--driver}'[Specify volume driver name (default "local")]' \
        '--label[Set metadata for a volume]' \
        {-o,--opt}'[Set driver specific options (default map\[\])]' \
        "*: :_files"

}

function _docker_volume_inspect {
    _arguments \
        {-f,--format}'[Format output using a custom template: '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        "*: :_files"

}

function _docker_volume_ls {
    _arguments \
        {-f,--filter}'[Provide filter values (e.g. "dangling=true")]' \
        '--format[Format output using a custom template: '\''table'\'': Print output in table format with column headers (default) '\''table TEMPLATE'\'': Print output in table format using the given Go template '\''json'\'': Print in JSON format '\''TEMPLATE'\'': Print output using the given Go template. Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates]' \
        {-q,--quiet}'[Only display volume names]' \
        "*: :_files"

}

function _docker_volume_prune {
    _arguments \
        {-a,--all}'[Remove all unused volumes, not just anonymous ones]' \
        '--filter[Provide filter values (e.g. "label=<label>")]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _docker_volume_rm {
    _arguments \
        {-f,--force}'[Force the removal of one or more volumes]' \
        "*: :_files"

}


function _docker_swarm {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Initialize a swarm'
            'join:Join a swarm as a node and/or manager'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _docker_swarm_init
            ;;

        (join)
            _docker_swarm_join
            ;;

        esac
        ;;
     esac

}

function _docker_swarm_init {
    _arguments \
        '--config[Location of client config files (default "~/.docker")]' \
        {-c,--context}'[Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")]' \
        {-D,--debug}'[Enable debug mode]' \
        {-H,--host}'[Daemon socket(s) to connect to]' \
        {-l,--log-level}'[Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")]' \
        '--tls[Use TLS; implied by --tlsverify]' \
        '--tlscacert[Trust certs signed only by this CA (default "~/.docker/ca.pem")]' \
        '--tlscert[Path to TLS certificate file (default "~/.docker/cert.pem")]' \
        '--tlskey[Path to TLS key file (default "~/.docker/key.pem")]' \
        '--tlsverify[Use TLS and verify the remote]' \
        "*: :_files"

}

function _docker_swarm_join {
    _arguments \
        '--advertise-addr[Advertised address (format: "<ip|interface>\[:port\]")]' \
        '--availability[Availability of the node ("active", "pause", "drain") (default "active")]' \
        '--data-path-addr[Address or interface to use for data path traffic (format: "<ip|interface>")]' \
        '--listen-addr[Listen address (format: "<ip|interface>\[:port\]") (default 0.0.0.0:2377)]' \
        '--token[Token for entry into the swarm]' \
        "*: :_files"

}

_docker "$@"

