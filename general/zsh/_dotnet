#compdef _dotnet dotnet

# Auto-generated with h2o

    function _dotnet_add {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_build {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-o,--output}'[The output directory to place built artifacts in.]':file:_files \
            {-f,--framework}'[The target framework to build for. The target framework must also be specified in the project file.]' \
            {-c,--configuration}'[The configuration to use for building the project. The default for most projects is '\''Debug'\''.]' \
            {-r,--runtime}'[The target runtime to build for.]' \
            '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
            '--no-incremental[Do not use incremental building.]' \
            '--no-dependencies[Do not build project-to-project references and only build the specified project.]' \
            '--nologo[Do not display the startup banner or the copyright message.]' \
            '--no-restore[Do not restore the project before building.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            '--force[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
            "*: :_files"

    }

    function _dotnet_build-server {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_clean {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-o,--output}'[The directory containing the build artifacts to clean.]':file:_files \
            '--nologo[Do not display the startup banner or the copyright message.]' \
            {-f,--framework}'[The target framework to clean for. The target framework must also be specified in the project file.]' \
            {-r,--runtime}'[The target runtime to clean for.]' \
            {-c,--configuration}'[The configuration to clean for. The default for most projects is '\''Debug'\''.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            "*: :_files"

    }

    function _dotnet_help {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_list {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_msbuild {
        _arguments \
            "*: :_files"

    }

    function _dotnet_new {
        _arguments \
            "*: :_files"

    }

    function _dotnet_nuget {
        _arguments \
            "*: :_files"

    }

    function _dotnet_pack {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-o,--output}'[The output directory to place built packages in.]':file:_files \
            '--no-build[Do not build the project before packing. Implies --no-restore.]' \
            '--include-symbols[Include packages with symbols in addition to regular packages in output directory.]' \
            '--include-source[Include PDBs and source files. Source files go into the '\''src'\'' folder in the resulting nuget package.]' \
            {-c,--configuration}'[The configuration to use for building the package. The default for most projects is '\''Debug'\''.]' \
            '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
            {-s,--serviceable}'[Set the serviceable flag in the package. See https://aka.ms/nupkgservicing for more information.]' \
            '--nologo[Do not display the startup banner or the copyright message.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            '--no-restore[Do not restore the project before building.]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            '--runtime[The target runtime to restore packages for.]' \
            '--no-dependencies[Do not restore project-to-project references and only restore the specified project.]' \
            '--force[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
            "*: :_files"

    }

    function _dotnet_publish {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-o,--output}'[The output directory to place the published artifacts in.]':file:_files \
            {-f,--framework}'[The target framework to publish for. The target framework has to be specified in the project file.]' \
            {-r,--runtime}'[The target runtime to publish for. This is used when creating a self-contained deployment. The default is to publish a framework-dependent application.]' \
            {-c,--configuration}'[The configuration to publish for. The default for most projects is '\''Debug'\''.]' \
            '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
            '--manifest[The path to a target manifest file that contains the list of packages to be excluded from the publish step.]' \
            '--no-build[Do not build the project before publishing. Implies --no-restore.]' \
            '--self-contained[Publish the .NET runtime with your application so the runtime doesn'\''t need to be installed on the target machine. The default is '\''true'\'' if a runtime identifier is specified.]' \
            '--no-self-contained[Publish your application as a framework dependent application without the .NET runtime. A supported .NET runtime must be installed to run your application.]' \
            '--nologo[Do not display the startup banner or the copyright message.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            '--no-restore[Do not restore the project before building.]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            '--no-dependencies[Do not restore project-to-project references and only restore the specified project.]' \
            '--force[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
            "*: :_files"

    }

    function _dotnet_remove {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_restore {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-s,--source}'[The NuGet package source to use for the restore.]' \
            {-r,--runtime}'[The target runtime to restore packages for.]' \
            '--packages[The directory to restore packages to.]':file:_files \
            '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
            '--configfile[The NuGet configuration file to use.]':file:_files \
            '--no-cache[Do not cache packages and http requests.]' \
            '--ignore-failed-sources[Treat package source failures as warnings.]' \
            '--no-dependencies[Do not restore project-to-project references and only restore the specified project.]' \
            {-f,--force}'[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            '--use-lock-file[Enables project lock file to be generated and used with restore.]' \
            '--locked-mode[Don'\''t allow updating project lock file.]' \
            '--lock-file-path[Output location where project lock file is written. By default, this is '\''PROJECT_ROOT\packages.lock.json'\''.]':file:_files \
            '--force-evaluate[Forces restore to reevaluate all dependencies even if a lock file already exists.]' \
            "*: :_files"

    }

    function _dotnet_run {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-c,--configuration}'[The configuration to run for. The default for most projects is '\''Debug'\''.]' \
            {-f,--framework}'[The target framework to run for. The target framework must also be specified in the project file.]' \
            {-r,--runtime}'[The target runtime to run for.]' \
            {-p,--project}'[The path to the project file to run (defaults to the current directory if there is only one project).]' \
            '--launch-profile[The name of the launch profile (if any) to use when launching the application.]' \
            '--no-launch-profile[Do not attempt to use launchSettings.json to configure the application.]' \
            '--no-build[Do not build the project before running. Implies --no-restore.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            '--no-restore[Do not restore the project before building.]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            '--no-dependencies[Do not restore project-to-project references and only restore the specified project.]' \
            '--force[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
            "*: :_files"

    }

    function _dotnet_sln {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_store {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-m,--manifest}'[The XML file that contains the list of packages to be stored.]' \
            {-f,--framework}'[The target framework to store packages for. The target framework has to be specified in the project file.]' \
            '--framework-version[The Microsoft.NETCore.App package version that will be used to run the assemblies.]' \
            {-r,--runtime}'[The target runtime to store packages for.]' \
            {-o,--output}'[The output directory to store the given assemblies in.]':file:_files \
            {-w,--working-dir}'[The working directory used by the command to execute.]':file:_files \
            '--skip-optimization[Skip the optimization phase.]' \
            '--skip-symbols[Skip creating symbol files which can be used for profiling the optimized assemblies.]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            "*: :_files"

    }

    function _dotnet_test {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            {-s,--settings}'[The settings file to use when running tests.]':file:_files \
            {-t,--list-tests}'[List the discovered tests instead of running the tests.]' \
            '--filter[Run tests that match the given expression. Examples: Run tests with priority set to 1: --filter "Priority = 1" Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName" Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class" See https://aka.ms/vstest-filtering for more information on filtering support.]' \
            {-a,--test-adapter-path}'[The path to the custom adapters to use for the test run.]':file:_files \
            {-l,--logger}'[The logger to use for test results. Examples: Log in trx format using a unique file name: --logger trx Log in trx format using the specified file name: --logger "trx;LogFileName=<TestResults.trx>" See https://aka.ms/vstest-report for more information on logger arguments.]' \
            {-c,--configuration}'[The configuration to use for running tests. The default for most projects is '\''Debug'\''.]' \
            {-f,--framework}'[The target framework to run tests for. The target framework must also be specified in the project file.]' \
            '--runtime[The target runtime to test for.]' \
            {-o,--output}'[The output directory to place built artifacts in.]':file:_files \
            {-d,--diag}'[Enable verbose logging to the specified file.]':file:_files \
            '--no-build[Do not build the project before testing. Implies --no-restore.]' \
            {-r,--results-directory}'[The directory where the test results will be placed. The specified directory will be created if it does not exist.]':file:_files \
            '--collect[The friendly name of the data collector to use for the test run. More info here: https://aka.ms/vstest-collect]' \
            '--blame[Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang. When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash. Based on the additional settings, hang dump or crash dump can also be collected. Example: Timeout the test run when test takes more than the default timeout of 1 hour, and collect crash dump when the test host exits unexpectedly. (Crash dumps require additional setup, see below.) dotnet test --blame-hang --blame-crash Example: Timeout the test run when a test takes more than 20 minutes and collect hang dump. dotnet test --blame-hang-timeout 20min]' \
            '--blame-crash[Runs the tests in blame mode and enables collecting crash dump when testhost exits unexpectedly. This option is currently only supported on Windows, and requires procdump.exe and procdump64.exe to be available in PATH. Or PROCDUMP_PATH environment variable to be set, and point to a directory that contains procdump.exe and procdump64.exe. The tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump Implies --blame.]' \
            '--blame-crash-dump-type[The type of crash dump to be collected. Implies --blame-crash.]' \
            '--blame-crash-collect-always[Enables collecting crash dump on expected as well as unexpected testhost exit.]' \
            '--blame-hang[Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.]' \
            '--blame-hang-dump-type[The type of crash dump to be collected. When None, is used then test host is terminated on timeout, but no dump is collected. Implies --blame-hang.]' \
            '--blame-hang-timeout[Per-test timeout, after which hang dump is triggered and the testhost process is terminated. The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds. When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit and NUnit the timeout is renewed after every test case, For MSTest, the timeout is used for all testcases. This option is currently supported only on Windows together with netcoreapp2.1 and newer. And on Linux with netcoreapp3.1 and newer. OSX and UWP are not supported.]' \
            '--nologo[Run test(s), without displaying Microsoft Testplatform banner]' \
            '--no-restore[Do not restore the project before building.]' \
            '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
            {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
            "*: :_files"

    }

    function _dotnet_tool {
        _arguments \
            {-h,--help}'[Show command line help.]' \
            "*: :_files"

    }

    function _dotnet_vstest {
        _arguments \
            "*: :_files"

    }

    function _dotnet_dev-certs {
        _arguments \
            "*: :_files"

    }

    function _dotnet_fsi {
        _arguments \
            "*: :_files"

    }

    function _dotnet_sql-cache {
        _arguments \
            "*: :_files"

    }

    function _dotnet_user-secrets {
        _arguments \
            "*: :_files"

    }

    function _dotnet_watch {
        _arguments \
            "*: :_files"

    }


function _dotnet {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a package or reference to a .NET project.'
            'build:Build a .NET project.'
            'build-server:Interact with servers started by a build.'
            'clean:Clean build outputs of a .NET project.'
            'help:Show command line help.'
            'list:List project references of a .NET project.'
            'msbuild:Run Microsoft Build Engine (MSBuild) commands.'
            'new:Create a new .NET project or file.'
            'nuget:Provides additional NuGet commands.'
            'pack:Create a NuGet package.'
            'publish:Publish a .NET project for deployment.'
            'remove:Remove a package or reference from a .NET project.'
            'restore:Restore dependencies specified in a .NET project.'
            'run:Build and run a .NET project output.'
            'sln:Modify Visual Studio solution files.'
            'store:Store the specified assemblies in the runtime package store.'
            'test:Run unit tests using the test runner specified in a .NET project.'
            'tool:Install or manage tools that extend the .NET experience.'
            'vstest:Run Microsoft Test Engine (VSTest) commands.'
            'dev-certs:Create and manage development certificates.'
            'fsi:Start F# Interactive / execute F# scripts.'
            'sql-cache:SQL Server cache command-line tools.'
            'user-secrets:Manage development user secrets.'
            'watch:Start a file watcher that runs a command when files change.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--additionalprobingpath[Path containing probing policy and assemblies to probe for.]':file:_files \
        '--additional-deps[Path to additional deps.json file.]':file:_files \
        '--depsfile[Path to <application>.deps.json file.]' \
        '--fx-version[Version of the installed Shared Framework to use to run the application.]' \
        '--roll-forward[Roll forward to framework version  (LatestPatch, Minor, LatestMinor, Major, LatestMajor, Disable).]' \
        '--runtimeconfig[Path to <application>.runtimeconfig.json file.]' \
        {-d,--diagnostics,-h,--help}'[ne help.]' \
        '--info[formation.]' \
        {--list-runtimes,--list-sdks,--version}'[K version in use.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _dotnet_add
            ;;

        (build)
            _dotnet_build
            ;;

        (build-server)
            _dotnet_build-server
            ;;

        (clean)
            _dotnet_clean
            ;;

        (help)
            _dotnet_help
            ;;

        (list)
            _dotnet_list
            ;;

        (msbuild)
            _dotnet_msbuild
            ;;

        (new)
            _dotnet_new
            ;;

        (nuget)
            _dotnet_nuget
            ;;

        (pack)
            _dotnet_pack
            ;;

        (publish)
            _dotnet_publish
            ;;

        (remove)
            _dotnet_remove
            ;;

        (restore)
            _dotnet_restore
            ;;

        (run)
            _dotnet_run
            ;;

        (sln)
            _dotnet_sln
            ;;

        (store)
            _dotnet_store
            ;;

        (test)
            _dotnet_test
            ;;

        (tool)
            _dotnet_tool
            ;;

        (vstest)
            _dotnet_vstest
            ;;

        (dev-certs)
            _dotnet_dev-certs
            ;;

        (fsi)
            _dotnet_fsi
            ;;

        (sql-cache)
            _dotnet_sql-cache
            ;;

        (user-secrets)
            _dotnet_user-secrets
            ;;

        (watch)
            _dotnet_watch
            ;;

        esac
        ;;
     esac

}

