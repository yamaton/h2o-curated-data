#compdef _gem gem

# Auto-generated with h2o

    function _gem_build {
        _arguments \
            '--platform[Specify the platform of gem to build]' \
            '--force[skip validation of the spec]' \
            '--strict[consider warnings as errors when validating the spec]' \
            {-o,--output}'[output gem with the given filename]':file:_files \
            '-C[Run as if gem build was started in <PATH> instead of the current working directory.]':file:_files \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_cert {
        _arguments \
            {-a,--add}'[Add a trusted certificate.]' \
            {-l,--list}'[List trusted certificates where the subject contains FILTER]' \
            {-r,--remove}'[Remove trusted certificates where the subject contains FILTER]' \
            {-b,--build}'[Build private key and self-signed certificate for EMAIL_ADDR]' \
            {-C,--certificate}'[Signing certificate for --sign]' \
            {-K,--private-key}'[Key for --sign or --build]' \
            {-A,--key-algorithm}'[Select which key algorithm to use for --build]' \
            {-s,--sign}'[Signs CERT with the key from -K and the certificate from -C]' \
            {-d,--days}'[Days before the certificate expires]' \
            {-R,--re-sign}'[Re-signs the certificate from -C with the key from -K]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_check {
        _arguments \
            {-a,--alien}'[Report "unmanaged" or rogue files in the gem repository]' \
            {-a,--no-alien}'[Report "unmanaged" or rogue files in the gem repository]' \
            '--doctor[Clean up uninstalled gems and broken specifications]' \
            '--no-doctor[Clean up uninstalled gems and broken specifications]' \
            '--dry-run[Do not remove files, only report what would be removed]' \
            '--no-dry-run[Do not remove files, only report what would be removed]' \
            '--gems[Check installed gems for problems]' \
            '--no-gems[Check installed gems for problems]' \
            {-v,--version}'[Specify version of gem to check]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_cleanup {
        _arguments \
            {-n,-d,--dry-run}'[Do not uninstall gems]' \
            {-D,--check-development}'[Check development dependencies while uninstalling (default: true)]' \
            {-D,--no-check-development}'[Check development dependencies while uninstalling (default: true)]' \
            '--user-install[Cleanup in user'\''s home directory instead of GEM_HOME.]' \
            '--no-user-install[Cleanup in user'\''s home directory instead of GEM_HOME.]' \
            '--dryrun[Do not uninstall gems]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_contents {
        _arguments \
            {-v,--version}'[Specify version of gem to contents]' \
            '--all[Contents for all gems]' \
            {-s,--spec-dir}'[Search for gems under specific paths]' \
            {-l,--lib-only}'[Only return files in the Gem'\''s lib_dirs]' \
            {-l,--no-lib-only}'[Only return files in the Gem'\''s lib_dirs]' \
            '--prefix[Don'\''t include installed path prefix]' \
            '--no-prefix[Don'\''t include installed path prefix]' \
            '--show-install-dir[Show only the gem install dir]' \
            '--no-show-install-dir[Show only the gem install dir]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_dependency {
        _arguments \
            {-v,--version}'[Specify version of gem to dependency]' \
            '--platform[Specify the platform of gem to dependency]' \
            '--prerelease[Allow prerelease versions of a gem]' \
            '--no-prerelease[Allow prerelease versions of a gem]' \
            {-R,--reverse-dependencies}'[Include reverse dependencies in the output]' \
            {-R,--no-reverse-dependencies}'[Include reverse dependencies in the output]' \
            '--pipe[Pipe Format (name --version ver)]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_environment {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_fetch {
        _arguments \
            {-v,--version}'[Specify version of gem to fetch]' \
            '--platform[Specify the platform of gem to fetch]' \
            '--prerelease[Allow prerelease versions of a gem]' \
            '--no-prerelease[Allow prerelease versions of a gem]' \
            '--suggestions[Suggest alternates when gems are not found]' \
            '--no-suggestions[Suggest alternates when gems are not found]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            {-p,--http-proxy}'[Use HTTP proxy for remote operations]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            '--clear-sources[Clear the gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_generate_index {
        _arguments \
            {-d,--directory}'[repository base dir containing gems subdir]':file:_files \
            '--modern[Generate indexes for RubyGems (always true)]' \
            '--no-modern[Generate indexes for RubyGems (always true)]' \
            '--update[Update modern indexes with gems added since the last update]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_help {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_info {
        _arguments \
            {-i,--installed}'[Check for installed gem]' \
            {-i,--no-installed}'[Check for installed gem]' \
            '-I[Equivalent to --no-installed]' \
            {-v,--version}'[Specify version of gem to info for use with --installed]' \
            '--versions[Display only gem names]' \
            '--no-versions[Display only gem names]' \
            {-a,--all}'[Display all gem versions]' \
            {-e,--exact}'[Name of gem(s) to query on matches the provided STRING]' \
            '--prerelease[Display prerelease versions]' \
            '--no-prerelease[Display prerelease versions]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_install {
        _arguments \
            '--platform[Specify the platform of gem to install]' \
            {-v,--version}'[Specify version of gem to install]' \
            '--prerelease[Allow prerelease versions of a gem to be installed. (Only for listed gems)]' \
            '--no-prerelease[Allow prerelease versions of a gem to be installed. (Only for listed gems)]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-i,--install-dir}'[Gem repository directory to get installed gems]':file:_files \
            {-n,--bindir}'[Directory where executables will be placed when the gem is installed]':file:_files \
            '--document[Generate documentation for installed gems List the documentation types you wish to generate. For example: rdoc,ri]' \
            '--build-root[Temporary installation root. Useful for building packages. Do not use this when installing remote gems.]':file:_files \
            '--vendor[Install gem into the vendor directory. Only for use by gem repackagers.]' \
            {-N,--no-document}'[Disable documentation generation]' \
            {-E,--env-shebang}'[Rewrite the shebang line on installed scripts to use /usr/bin/env]' \
            {-E,--no-env-shebang}'[Rewrite the shebang line on installed scripts to use /usr/bin/env]' \
            {-f,--force}'[Force gem to install, bypassing dependency checks]' \
            {-f,--no-force}'[Force gem to install, bypassing dependency checks]' \
            {-w,--wrappers}'[Use bin wrappers for executables Not available on dosish platforms]' \
            {-w,--no-wrappers}'[Use bin wrappers for executables Not available on dosish platforms]' \
            {-P,--trust-policy}'[Specify gem trust policy]' \
            '--ignore-dependencies[Do not install any required dependent gems]' \
            '--format-executable[Make installed executable names match Ruby. If Ruby is ruby18, foo_exec will be foo_exec18]' \
            '--no-format-executable[Make installed executable names match Ruby. If Ruby is ruby18, foo_exec will be foo_exec18]' \
            '--user-install[Install in user'\''s home directory instead of GEM_HOME.]' \
            '--no-user-install[Install in user'\''s home directory instead of GEM_HOME.]' \
            '--development[Install additional development dependencies]' \
            '--development-all[Install development dependencies for all gems (including dev deps themselves)]' \
            '--conservative[Don'\''t attempt to upgrade gems already meeting version requirement]' \
            '--minimal-deps[Don'\''t upgrade any dependencies that already meet version requirements]' \
            '--no-minimal-deps[Don'\''t upgrade any dependencies that already meet version requirements]' \
            '--post-install-message[Print post install message]' \
            '--no-post-install-message[Print post install message]' \
            {-g,--file}'[Read from a gem dependencies API file and install the listed gems]':file:_files \
            '--without[Omit the named groups (comma separated) when installing from a gem dependencies file]' \
            '--default[Add the gem'\''s full specification to specifications/default and extract only its bin]' \
            '--explain[Rather than install the gems, indicate which would be installed]' \
            '--lock[Create a lock file (when used with -g/--file)]' \
            '--no-lock[Create a lock file (when used with -g/--file)]' \
            '--suggestions[Suggest alternates when gems are not found]' \
            '--no-suggestions[Suggest alternates when gems are not found]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_list {
        _arguments \
            {-i,--installed}'[Check for installed gem]' \
            {-i,--no-installed}'[Check for installed gem]' \
            '-I[Equivalent to --no-installed]' \
            {-v,--version}'[Specify version of gem to list for use with --installed]' \
            {-d,--details}'[Display detailed information of gem(s)]' \
            {-d,--no-details}'[Display detailed information of gem(s)]' \
            '--versions[Display only gem names]' \
            '--no-versions[Display only gem names]' \
            {-a,--all}'[Display all gem versions]' \
            {-e,--exact}'[Name of gem(s) to query on matches the provided STRING]' \
            '--prerelease[Display prerelease versions]' \
            '--no-prerelease[Display prerelease versions]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_lock {
        _arguments \
            {-s,--strict}'[fail if unable to satisfy a dependency]' \
            {-s,--no-strict}'[fail if unable to satisfy a dependency]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_mirror {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_open {
        _arguments \
            {-e,--editor}'[Prepends COMMAND to gem path. Could be used to specify editor.]' \
            {-v,--version}'[Opens specific gem version]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_outdated {
        _arguments \
            '--platform[Specify the platform of gem to outdated]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_owner {
        _arguments \
            {-k,--key}'[Use the given API key from ~/.local/share/gem/credentials]' \
            '--otp[Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE]' \
            {-a,--add}'[Add an owner]' \
            {-r,--remove}'[Remove an owner]' \
            '--host[Use another gemcutter-compatible host]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_pristine {
        _arguments \
            '--all[Restore all installed gems to pristine condition]' \
            '--skip[used on --all, skip if name == gem_name]' \
            '--extensions[Restore gems with extensions in addition to regular gems]' \
            '--no-extensions[Restore gems with extensions in addition to regular gems]' \
            '--only-executables[Only restore executables]' \
            '--only-plugins[Only restore plugins]' \
            {-E,--env-shebang}'[Rewrite executables with a shebang of /usr/bin/env]' \
            {-E,--no-env-shebang}'[Rewrite executables with a shebang of /usr/bin/env]' \
            {-i,--install-dir}'[Gem repository to get binstubs and plugins installed]':file:_files \
            {-n,--bindir}'[Directory where executables are located]':file:_files \
            {-v,--version}'[Specify version of gem to restore to pristine condition]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_push {
        _arguments \
            {-k,--key}'[Use the given API key from ~/.local/share/gem/credentials]' \
            '--otp[Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE]' \
            '--host[Push to another gemcutter-compatible host]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_rdoc {
        _arguments \
            '--all[Generate RDoc/RI documentation for all installed gems]' \
            '--rdoc[Generate RDoc HTML]' \
            '--no-rdoc[Generate RDoc HTML]' \
            '--ri[Generate RI data]' \
            '--no-ri[Generate RI data]' \
            '--overwrite[Overwrite installed documents]' \
            '--no-overwrite[Overwrite installed documents]' \
            {-v,--version}'[Specify version of gem to rdoc]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_search {
        _arguments \
            {-i,--installed}'[Check for installed gem]' \
            {-i,--no-installed}'[Check for installed gem]' \
            '-I[Equivalent to --no-installed]' \
            {-v,--version}'[Specify version of gem to search for use with --installed]' \
            {-d,--details}'[Display detailed information of gem(s)]' \
            '--versions[Display only gem names]' \
            '--no-versions[Display only gem names]' \
            {-a,--all}'[Display all gem versions]' \
            {-e,--exact}'[Name of gem(s) to query on matches the provided STRING]' \
            '--prerelease[Display prerelease versions]' \
            '--no-prerelease[Display prerelease versions]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            {-p,--http-proxy}'[Use HTTP proxy for remote operations]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_server {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_signin {
        _arguments \
            '--host[Push to another gemcutter-compatible host]' \
            '--otp[Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_signout {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_sources {
        _arguments \
            {-a,--add}'[Add source]' \
            {-l,--list}'[List sources]' \
            {-r,--remove}'[Remove source]' \
            {-c,--clear-all}'[Remove all sources (clear the cache)]' \
            {-u,--update}'[Update source cache]' \
            {-f,--force}'[Do not show any confirmation prompts and behave as if '\''yes'\'' was always answered]' \
            {-f,--no-force}'[Do not show any confirmation prompts and behave as if '\''yes'\'' was always answered]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_specification {
        _arguments \
            {-v,--version}'[Specify version of gem to examine]' \
            '--platform[Specify the platform of gem to specification]' \
            '--prerelease[Allow prerelease versions of a gem]' \
            '--no-prerelease[Allow prerelease versions of a gem]' \
            '--all[Output specifications for all versions of the gem]' \
            '--ruby[Output ruby format]' \
            '--yaml[Output YAML format]' \
            '--marshal[Output Marshal format]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_stale {
        _arguments \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_uninstall {
        _arguments \
            {-a,--all}'[Uninstall all matching versions]' \
            {-a,--no-all}'[Uninstall all matching versions]' \
            {-I,--ignore-dependencies}'[Ignore dependency requirements while uninstalling]' \
            {-I,--no-ignore-dependencies}'[Ignore dependency requirements while uninstalling]' \
            {-D,--check-development}'[Check development dependencies while uninstalling (default: false)]' \
            {-D,--no-check-development}'[Check development dependencies while uninstalling (default: false)]' \
            {-x,--executables}'[Uninstall applicable executables without confirmation]' \
            {-x,--no-executables}'[Uninstall applicable executables without confirmation]' \
            {-i,--install-dir}'[Directory to uninstall gem from]':file:_files \
            {-n,--bindir}'[Directory to remove executables from]':file:_files \
            '--user-install[Uninstall from user'\''s home directory in addition to GEM_HOME.]' \
            '--no-user-install[Uninstall from user'\''s home directory in addition to GEM_HOME.]' \
            '--format-executable[Assume executable names match Ruby'\''s prefix and suffix.]' \
            '--no-format-executable[Assume executable names match Ruby'\''s prefix and suffix.]' \
            '--force[Uninstall all versions of the named gems ignoring dependencies]' \
            '--no-force[Uninstall all versions of the named gems ignoring dependencies]' \
            '--abort-on-dependent[Prevent uninstalling gems that are depended on by other gems.]' \
            '--no-abort-on-dependent[Prevent uninstalling gems that are depended on by other gems.]' \
            {-v,--version}'[Specify version of gem to uninstall]' \
            '--platform[Specify the platform of gem to uninstall]' \
            '--vendor[Uninstall gem from the vendor directory. Only for use by gem repackagers.]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_unpack {
        _arguments \
            '--target[target directory for unpacking]':file:_files \
            '--spec[unpack the gem specification]' \
            {-v,--version}'[Specify version of gem to unpack]' \
            {-P,--trust-policy}'[Specify gem trust policy]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_update {
        _arguments \
            '--system[Update the RubyGems system software]' \
            '--platform[Specify the platform of gem to update]' \
            '--prerelease[Allow prerelease versions of a gem as update targets]' \
            '--no-prerelease[Allow prerelease versions of a gem as update targets]' \
            {-u,--update-sources}'[Update local source cache]' \
            {-u,--no-update-sources}'[Update local source cache]' \
            {-i,--install-dir}'[Gem repository directory to get installed gems]':file:_files \
            {-n,--bindir}'[Directory where executables will be placed when the gem is installed]':file:_files \
            '--document[Generate documentation for installed gems List the documentation types you wish to generate. For example: rdoc,ri]' \
            '--build-root[Temporary installation root. Useful for building packages. Do not use this when installing remote gems.]':file:_files \
            '--vendor[Install gem into the vendor directory. Only for use by gem repackagers.]' \
            {-N,--no-document}'[Disable documentation generation]' \
            {-E,--env-shebang}'[Rewrite the shebang line on installed scripts to use /usr/bin/env]' \
            {-E,--no-env-shebang}'[Rewrite the shebang line on installed scripts to use /usr/bin/env]' \
            {-f,--force}'[Force gem to install, bypassing dependency checks]' \
            {-f,--no-force}'[Force gem to install, bypassing dependency checks]' \
            {-w,--wrappers}'[Use bin wrappers for executables Not available on dosish platforms]' \
            {-w,--no-wrappers}'[Use bin wrappers for executables Not available on dosish platforms]' \
            {-P,--trust-policy}'[Specify gem trust policy]' \
            '--ignore-dependencies[Do not install any required dependent gems]' \
            '--format-executable[Make installed executable names match Ruby. If Ruby is ruby18, foo_exec will be foo_exec18]' \
            '--no-format-executable[Make installed executable names match Ruby. If Ruby is ruby18, foo_exec will be foo_exec18]' \
            '--user-install[Install in user'\''s home directory instead of GEM_HOME.]' \
            '--no-user-install[Install in user'\''s home directory instead of GEM_HOME.]' \
            '--development[Install additional development dependencies]' \
            '--development-all[Install development dependencies for all gems (including dev deps themselves)]' \
            '--conservative[Don'\''t attempt to upgrade gems already meeting version requirement]' \
            '--minimal-deps[Don'\''t upgrade any dependencies that already meet version requirements]' \
            '--no-minimal-deps[Don'\''t upgrade any dependencies that already meet version requirements]' \
            '--post-install-message[Print post install message]' \
            '--no-post-install-message[Print post install message]' \
            {-g,--file}'[Read from a gem dependencies API file and install the listed gems]':file:_files \
            '--without[Omit the named groups (comma separated) when installing from a gem dependencies file]' \
            '--default[Add the gem'\''s full specification to specifications/default and extract only its bin]' \
            '--explain[Rather than install the gems, indicate which would be installed]' \
            '--lock[Create a lock file (when used with -g/--file)]' \
            '--no-lock[Create a lock file (when used with -g/--file)]' \
            '--suggestions[Suggest alternates when gems are not found]' \
            '--no-suggestions[Suggest alternates when gems are not found]' \
            {-l,--local}'[Restrict operations to the LOCAL domain]' \
            {-r,--remote}'[Restrict operations to the REMOTE domain]' \
            {-b,--both}'[Allow LOCAL and REMOTE operations]' \
            {-B,--bulk-threshold}'[Threshold for switching to bulk synchronization (default 1000)]' \
            '--clear-sources[Clear the gem sources]' \
            {-s,--source}'[Append URL to list of remote gem sources]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_which {
        _arguments \
            {-a,--all}'[show all matching files]' \
            {-a,--no-all}'[show all matching files]' \
            {-g,--gems-first}'[search gems before non-gems]' \
            {-g,--no-gems-first}'[search gems before non-gems]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }

    function _gem_yank {
        _arguments \
            {-v,--version}'[Specify version of gem to remove]' \
            '--platform[Specify the platform of gem to remove]' \
            '--otp[Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE]' \
            '--host[Yank from another gemcutter-compatible host]' \
            {-k,--key}'[Use the given API key from ~/.local/share/gem/credentials]' \
            {-h,--help}'[Get help on this command]' \
            {-V,--verbose}'[Set the verbose level of output]' \
            {-V,--no-verbose}'[Set the verbose level of output]' \
            {-q,--quiet}'[Silence command progress meter]' \
            '--silent[Silence RubyGems output]' \
            '--config-file[Use this config file instead of default]':file:_files \
            '--backtrace[Show stack backtrace on errors]' \
            '--debug[Turn on Ruby debugging]' \
            '--norc[Avoid loading any .gemrc file]' \
            "*: :_files"

    }


function _gem {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build a gem from a gemspec'
            'cert:Manage RubyGems certificates and signing settings'
            'check:Check a gem repository for added or missing files'
            'cleanup:Clean up old versions of installed gems'
            'contents:Display the contents of the installed gems'
            'dependency:Show the dependencies of an installed gem'
            'environment:Display information about the RubyGems environment'
            'fetch:Download a gem and place it in the current directory'
            'generate_index:Generates the index files for a gem server directory'
            'help:Provide help on the '\''gem'\'' command'
            'info:Show information for the given gem'
            'install:Install a gem into the local repository'
            'list:Display local gems whose name matches REGEXP'
            'lock:Generate a lockdown list of gems'
            'mirror:Mirror all gem files (requires rubygems-mirror)'
            'open:Open gem sources in editor'
            'outdated:Display all gems that need updates'
            'owner:Manage gem owners of a gem on the push server'
            'pristine:Restores installed gems to pristine condition from files'
            'push:Push a gem up to the gem server'
            'rdoc:Generates RDoc for pre-installed gems'
            'search:Display remote gems whose name matches REGEXP'
            'server:Starts up a web server that hosts the RDoc (requires'
            'signin:Sign in to any gemcutter-compatible host. It defaults to'
            'signout:Sign out from all the current sessions.'
            'sources:Manage the sources and cache file RubyGems uses to search'
            'specification:Display gem specification (in yaml)'
            'stale:List gems along with access times'
            'uninstall:Uninstall gems from the local repository'
            'unpack:Unpack an installed gem to the current directory'
            'update:Update installed gems to the latest version'
            'which:Find the location of a library file you can require'
            'yank:Remove a pushed gem from the index'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Get help]' \
        {-v,--version}'[Get version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _gem_build
            ;;

        (cert)
            _gem_cert
            ;;

        (check)
            _gem_check
            ;;

        (cleanup)
            _gem_cleanup
            ;;

        (contents)
            _gem_contents
            ;;

        (dependency)
            _gem_dependency
            ;;

        (environment)
            _gem_environment
            ;;

        (fetch)
            _gem_fetch
            ;;

        (generate_index)
            _gem_generate_index
            ;;

        (help)
            _gem_help
            ;;

        (info)
            _gem_info
            ;;

        (install)
            _gem_install
            ;;

        (list)
            _gem_list
            ;;

        (lock)
            _gem_lock
            ;;

        (mirror)
            _gem_mirror
            ;;

        (open)
            _gem_open
            ;;

        (outdated)
            _gem_outdated
            ;;

        (owner)
            _gem_owner
            ;;

        (pristine)
            _gem_pristine
            ;;

        (push)
            _gem_push
            ;;

        (rdoc)
            _gem_rdoc
            ;;

        (search)
            _gem_search
            ;;

        (server)
            _gem_server
            ;;

        (signin)
            _gem_signin
            ;;

        (signout)
            _gem_signout
            ;;

        (sources)
            _gem_sources
            ;;

        (specification)
            _gem_specification
            ;;

        (stale)
            _gem_stale
            ;;

        (uninstall)
            _gem_uninstall
            ;;

        (unpack)
            _gem_unpack
            ;;

        (update)
            _gem_update
            ;;

        (which)
            _gem_which
            ;;

        (yank)
            _gem_yank
            ;;

        esac
        ;;
     esac

}

