#compdef _gh gh

# Auto-generated with h2o

    function _gh_auth {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_browse {
        _arguments \
            {-b,--branch}'[Select another branch by passing in the branch name]' \
            {-c,--commit}'[Open the last commit]' \
            {-n,--no-browser}'[Print destination URL instead of opening the browser]' \
            {-p,--projects}'[Open repository projects]' \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            {-s,--settings}'[Open repository settings]' \
            {-w,--wiki}'[Open repository wiki]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_codespace {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_gist {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_issue {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_pr {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_release {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_repo {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_run {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_workflow {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_alias {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_api {
        _arguments \
            '--cache[Cache the response, e.g. "3600s", "60m", "1h"]' \
            {-F,--field}'[Add a typed parameter in key=value format]' \
            {-H,--header}'[Add a HTTP request header in key:value format]' \
            '--hostname[The GitHub hostname for the request (default "github.com")]' \
            {-i,--include}'[Include HTTP response status line and headers in the output]' \
            '--input[The file to use as body for the HTTP request (use "-" to read from standard input)]':file:_files \
            {-q,--jq}'[Query to select values from the response using jq syntax]' \
            {-X,--method}'[The HTTP method for the request (default "GET")]' \
            '--paginate[Make additional HTTP requests to fetch all pages of results]' \
            {-p,--preview}'[GitHub API preview names to request (without the "-preview" suffix)]' \
            {-f,--raw-field}'[Add a string parameter in key=value format]' \
            '--silent[Do not print the response body]' \
            {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_completion {
        _arguments \
            {-s,--shell}'[Shell type: {bash|zsh|fish|powershell}]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_config {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_extension {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_gpg-key {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_label {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_search {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_secret {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_ssh-key {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_status {
        _arguments \
            {-e,--exclude}'[Comma separated list of repos to exclude in owner/name format]' \
            {-o,--org}'[Report status within an organization]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_actions {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_environment {
        _arguments \
            "*: :_files"

    }

    function _gh_exit-codes {
        _arguments \
            "*: :_files"

    }

    function _gh_formatting {
        _arguments \
            "*: :_files"

    }

    function _gh_mintty {
        _arguments \
            "*: :_files"

    }

    function _gh_reference {
        _arguments \
            "*: :_files"

    }


function _gh {
    local line state

    function _commands {
        local -a commands
        commands=(
            'auth:Authenticate gh and git with GitHub'
            'browse:Open the repository in the browser'
            'codespace:Connect to and manage codespaces'
            'gist:Manage gists'
            'issue:Manage issues'
            'pr:Manage pull requests'
            'release:Manage releases'
            'repo:Manage repositories'
            'run:View details about workflow runs'
            'workflow:View details about GitHub Actions workflows'
            'alias:Create command shortcuts'
            'api:Make an authenticated GitHub API request'
            'completion:Generate shell completion scripts'
            'config:Manage configuration for gh'
            'extension:Manage gh extensions'
            'gpg-key:Manage GPG keys'
            'label:Manage labels'
            'search:Search for repositories, issues, and pull requests'
            'secret:Manage GitHub secrets'
            'ssh-key:Manage SSH keys'
            'status:Print information about relevant issues, pull requests, and notifications across repositories'
            'actions:Learn about working with GitHub Actions'
            'environment:Environment variables that can be used with gh'
            'exit-codes:Exit codes used by gh'
            'formatting:Formatting options for JSON data exported from gh'
            'mintty:Information about using gh with MinTTY'
            'reference:A comprehensive reference of all gh commands'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        '--version[Show gh version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (auth)
            _gh_auth
            ;;

        (browse)
            _gh_browse
            ;;

        (codespace)
            _gh_codespace
            ;;

        (gist)
            _gh_gist
            ;;

        (issue)
            _gh_issue
            ;;

        (pr)
            _gh_pr
            ;;

        (release)
            _gh_release
            ;;

        (repo)
            _gh_repo
            ;;

        (run)
            _gh_run
            ;;

        (workflow)
            _gh_workflow
            ;;

        (alias)
            _gh_alias
            ;;

        (api)
            _gh_api
            ;;

        (completion)
            _gh_completion
            ;;

        (config)
            _gh_config
            ;;

        (extension)
            _gh_extension
            ;;

        (gpg-key)
            _gh_gpg-key
            ;;

        (label)
            _gh_label
            ;;

        (search)
            _gh_search
            ;;

        (secret)
            _gh_secret
            ;;

        (ssh-key)
            _gh_ssh-key
            ;;

        (status)
            _gh_status
            ;;

        (actions)
            _gh_actions
            ;;

        (environment)
            _gh_environment
            ;;

        (exit-codes)
            _gh_exit-codes
            ;;

        (formatting)
            _gh_formatting
            ;;

        (mintty)
            _gh_mintty
            ;;

        (reference)
            _gh_reference
            ;;

        esac
        ;;
     esac

}

