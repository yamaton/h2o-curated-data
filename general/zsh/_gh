#compdef _gh gh

# Generated with h2o 0.1.18

    function _gh_browse {
        _arguments \
            '(-b --branch)'{-b,--branch}'[Select another branch by passing in the branch name]' \
            '(-n --no-browser)'{-n,--no-browser}'[Print destination URL instead of opening the browser]' \
            '(-p --projects)'{-p,--projects}'[Open repository projects]' \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '(-s --settings)'{-s,--settings}'[Open repository settings]' \
            '(-w --wiki)'{-w,--wiki}'[Open repository wiki]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_gist {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_issue {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_pr {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_release {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_repo {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_run {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_workflow {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_alias {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_api {
        _arguments \
            '--cache[Cache the response, e.g. "3600s", "60m", "1h"]' \
            '(-F --field)'{-F,--field}'[Add a typed parameter in key=value format]' \
            '(-H --header)'{-H,--header}'[Add a HTTP request header in key:value format]' \
            '--hostname[The GitHub hostname for the request (default "github.com")]' \
            '(-i --include)'{-i,--include}'[Include HTTP response headers in the output]' \
            '--input[The file to use as body for the HTTP request]:file:_files' \
            '(-q --jq)'{-q,--jq}'[Query to select values from the response using jq syntax]' \
            '(-X --method)'{-X,--method}'[The HTTP method for the request (default "GET")]' \
            '--paginate[Make additional HTTP requests to fetch all pages of results]' \
            '(-p --preview)'{-p,--preview}'[Opt into GitHub API previews]' \
            '(-f --raw-field)'{-f,--raw-field}'[Add a string parameter in key=value format]' \
            '--silent[Do not print the response body]' \
            '(-t --template)'{-t,--template}'[Format the response using a Go template]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_auth {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_completion {
        _arguments \
            '(-s --shell)'{-s,--shell}'[Shell type: {bash|zsh|fish|powershell}]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_config {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_secret {
        _arguments \
            '(-R --repo)'{-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_ssh-key {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }


function _gh {
    local line state

    function _commands {
        local -a commands
        commands=(
            'browse:Open the repository in the browser'
            'gist:Manage gists'
            'issue:Manage issues'
            'pr:Manage pull requests'
            'release:Manage GitHub releases'
            'repo:Create, clone, fork, and view repositories'
            'run:View details about workflow runs'
            'workflow:View details about GitHub Actions workflows'
            'alias:Create command shortcuts'
            'api:Make an authenticated GitHub API request'
            'auth:Login, logout, and refresh your authentication'
            'completion:Generate shell completion scripts'
            'config:Manage configuration for gh'
            'secret:Manage GitHub secrets'
            'ssh-key:Manage SSH keys'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        '--version[Show gh version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (browse)
            _gh_browse
            ;;

        (gist)
            _gh_gist
            ;;

        (issue)
            _gh_issue
            ;;

        (pr)
            _gh_pr
            ;;

        (release)
            _gh_release
            ;;

        (repo)
            _gh_repo
            ;;

        (run)
            _gh_run
            ;;

        (workflow)
            _gh_workflow
            ;;

        (alias)
            _gh_alias
            ;;

        (api)
            _gh_api
            ;;

        (auth)
            _gh_auth
            ;;

        (completion)
            _gh_completion
            ;;

        (config)
            _gh_config
            ;;

        (secret)
            _gh_secret
            ;;

        (ssh-key)
            _gh_ssh-key
            ;;

        esac
        ;;
     esac

}

