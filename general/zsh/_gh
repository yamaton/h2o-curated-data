#compdef _gh gh

# Auto-generated with h2o

    function _gh_auth {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_browse {
        _arguments \
            {-b,--branch}'[Select another branch by passing in the branch name]' \
            {-c,--commit}'[Open the last commit]' \
            {-n,--no-browser}'[Print destination URL instead of opening the browser]' \
            {-p,--projects}'[Open repository projects]' \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            {-s,--settings}'[Open repository settings]' \
            {-w,--wiki}'[Open repository wiki]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_codespace {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_gist {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_issue {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_pr {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_release {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_repo {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_run {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_workflow {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_alias {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_api {
        _arguments \
            '--cache[Cache the response, e.g. "3600s", "60m", "1h"]' \
            {-F,--field}'[Add a typed parameter in key=value format]' \
            {-H,--header}'[Add a HTTP request header in key:value format]' \
            '--hostname[The GitHub hostname for the request (default "github.com")]' \
            {-i,--include}'[Include HTTP response status line and headers in the output]' \
            '--input[The file to use as body for the HTTP request (use "-" to read from standard input)]':file:_files \
            {-q,--jq}'[Query to select values from the response using jq syntax]' \
            {-X,--method}'[The HTTP method for the request (default "GET")]' \
            '--paginate[Make additional HTTP requests to fetch all pages of results]' \
            {-p,--preview}'[GitHub API preview names to request (without the "-preview" suffix)]' \
            {-f,--raw-field}'[Add a string parameter in key=value format]' \
            '--silent[Do not print the response body]' \
            {-t,--template}'[Format the response using a Go template]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_completion {
        _arguments \
            {-s,--shell}'[Shell type: {bash|zsh|fish|powershell}]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_config {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_extension {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_gpg-key {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_label {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_search {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_secret {
        _arguments \
            {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_ssh-key {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_status {
        _arguments \
            {-e,--exclude}'[Comma separated list of repos to exclude in owner/name format]' \
            {-o,--org}'[Report status within an organization]' \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_actions {
        _arguments \
            '--help[Show help for command]' \
            "*: :_files"

    }

    function _gh_environment {
        _arguments \
            "*: :_files"

    }

    function _gh_formatting {
        _arguments \
            "*: :_files"

    }

    function _gh_mintty {
        _arguments \
            "*: :_files"

    }

    function _gh_reference {
        _arguments \
            {-s,--shell}'[Declare an alias to be passed through a shell interpreter]' \
            '--cache[Cache the response, e.g. "3600s", "60m", "1h"]' \
            {-F,--field}'[Add a typed parameter in key=value format]' \
            {-H,--header}'[Add a HTTP request header in key:value format]' \
            '--hostname[The GitHub hostname for the request (default "github.com")]' \
            {-i,--include}'[Include HTTP response status line and headers in the output]' \
            '--input[The file to use as body for the HTTP request (use "-" to read from standard input)]':file:_files \
            {-q,--jq}'[Query to select values from the response using jq syntax]' \
            {-X,--method}'[The HTTP method for the request (default "GET")]' \
            '--paginate[Make additional HTTP requests to fetch all pages of results]' \
            {-p,--preview}'[GitHub API preview names to request (without the "-preview" suffix)]' \
            {-f,--raw-field}'[Add a string parameter in key=value format]' \
            '--silent[Do not print the response body]' \
            {-t,--template}'[Format the response using a Go template]' \
            {-p,--git-protocol}'[The protocol to use for git operations: {ssh|https}]' \
            {-h,--hostname}'[The hostname of the GitHub instance to authenticate with]' \
            {-s,--scopes}'[Additional authentication scopes to request]' \
            {-w,--web}'[Open a browser to authenticate]' \
            '--with-token[Read token from standard input]' \
            {-h,--hostname}'[The hostname of the GitHub instance to log out of]' \
            {-h,--hostname}'[The GitHub host to use for authentication]' \
            {-s,--scopes}'[Additional authentication scopes for gh to have]' \
            {-h,--hostname}'[The hostname to configure git for]' \
            {-h,--hostname}'[Check a specific hostname'\''s auth status]' \
            {-t,--show-token}'[Display the auth token]' \
            {-b,--branch}'[Select another branch by passing in the branch name]' \
            {-c,--commit}'[Open the last commit]' \
            {-n,--no-browser}'[Print destination URL instead of opening the browser]' \
            {-p,--projects}'[Open repository projects]' \
            {-s,--settings}'[Open repository settings]' \
            {-w,--wiki}'[Open repository wiki]' \
            {-c,--codespace}'[Name of the codespace]' \
            '--insiders[Use the insiders version of Visual Studio Code]' \
            {-w,--web}'[Use the web version of Visual Studio Code]' \
            {-e,--expand}'[Expand remote file names on remote shell]' \
            {-p,--profile}'[Name of the SSH profile to use]' \
            {-r,--recursive}'[Recursively copy directories]' \
            {-b,--branch}'[repository branch]' \
            '--default-permissions[do not prompt to accept additional permissions requested by the codespace]' \
            '--devcontainer-path[path to the devcontainer.json file to use when creating codespace]' \
            '--idle-timeout[allowed inactivity before codespace is stopped, e.g. "10m", "1h"]' \
            {-l,--location}'[location: {EastUs|SouthEastAsia|WestEurope|WestUs2} (determined automatically if not provided)]' \
            {-m,--machine}'[hardware specifications for the VM]' \
            {-r,--repo}'[repository name with owner: user/repo]' \
            {-s,--status}'[show status of post-create command and dotfiles]' \
            '--all[Delete all codespaces]' \
            '--days[Delete codespaces older than N days]' \
            {-f,--force}'[Skip confirmation for codespaces that contain unsaved changes]' \
            {-r,--repo}'[Delete codespaces for a repository]' \
            {-d,--display-name}'[Set the display name]' \
            {-m,--machine}'[Set hardware specifications for the VM]' \
            {-q,--jq}'[Filter JSON output using a jq expression]' \
            '--json[Output JSON with the specified fields]' \
            {-L,--limit}'[Maximum number of codespaces to list (default 30)]' \
            {-t,--template}'[Format JSON output using a Go template]' \
            {-f,--follow}'[Tail and follow the logs]' \
            '--config[Write OpenSSH configuration to stdout]' \
            {-d,--debug}'[Log debug data to a file]' \
            '--debug-file[Path of the file log to]' \
            '--profile[Name of the SSH profile to use]' \
            '--server-port[SSH server port number (0 => pick unused)]' \
            {-s,--shell}'[Shell type: {bash|zsh|fish|powershell}]' \
            {-h,--host}'[Get per-host setting]' \
            {-h,--host}'[Get per-host configuration]' \
            {-h,--host}'[Set per-host setting]' \
            '--precompiled[Create a precompiled extension. Possible values: go, other]' \
            '--pin[pin extension to a release tag or commit ref]' \
            '--all[Upgrade all extensions]' \
            '--dry-run[Only display upgrades]' \
            '--force[Force upgrade extension]' \
            {-d,--desc}'[A description for this gist]' \
            {-f,--filename}'[Provide a filename to be used when reading from standard input]' \
            {-p,--public}'[List the gist publicly (default: secret)]' \
            {-w,--web}'[Open the web browser with created gist]' \
            {-a,--add}'[Add a new file to the gist]' \
            {-d,--desc}'[New description for the gist]' \
            {-f,--filename}'[Select a file to edit]' \
            {-L,--limit}'[Maximum number of gists to fetch (default 10)]' \
            '--public[Show only public gists]' \
            '--secret[Show only secret gists]' \
            {-f,--filename}'[Display a single file from the gist]' \
            '--files[List file names from the gist]' \
            {-r,--raw}'[Print raw instead of rendered gist contents]' \
            {-w,--web}'[Open gist in the browser]' \
            {-c,--comment}'[Leave a closing comment]' \
            {-b,--body}'[The comment body text]' \
            {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
            {-e,--editor}'[Skip prompts and open the text editor to write the body in]' \
            {-w,--web}'[Open the web browser to write the comment]' \
            {-a,--assignee}'[Assign people by their login. Use "@me" to self-assign.]' \
            {-b,--body}'[Supply a body. Will prompt for one otherwise.]' \
            {-l,--label}'[Add labels by name]' \
            {-m,--milestone}'[Add the issue to a milestone by name]' \
            {-p,--project}'[Add the issue to projects by name]' \
            '--recover[Recover input from a failed run of create]' \
            {-t,--title}'[Supply a title. Will prompt for one otherwise.]' \
            {-w,--web}'[Open the browser to create an issue]' \
            '--add-assignee[Add assigned users by their login. Use "@me" to assign yourself.]' \
            '--add-label[Add labels by name]' \
            '--add-project[Add the issue to projects by name]' \
            {-b,--body}'[Set the new body.]' \
            {-m,--milestone}'[Edit the milestone the issue belongs to by name]' \
            '--remove-assignee[Remove assigned users by their login. Use "@me" to unassign yourself.]' \
            '--remove-label[Remove labels by name]' \
            '--remove-project[Remove the issue from projects by name]' \
            {-t,--title}'[Set the new title.]' \
            '--app[Filter by GitHub App author]' \
            {-a,--assignee}'[Filter by assignee]' \
            {-A,--author}'[Filter by author]' \
            {-l,--label}'[Filter by label]' \
            {-L,--limit}'[Maximum number of issues to fetch (default 30)]' \
            '--mention[Filter by mention]' \
            {-m,--milestone}'[Filter by milestone number or title]' \
            {-S,--search}'[Search issues with query]' \
            {-s,--state}'[Filter by state: {open|closed|all} (default "open")]' \
            {-w,--web}'[List issues in the web browser]' \
            {-c,--comment}'[Add a reopening comment]' \
            {-c,--comments}'[View issue comments]' \
            {-w,--web}'[Open an issue in the browser]' \
            {-f,--force}'[Overwrite labels in the destination repository]' \
            {-c,--color}'[Color of the label]' \
            {-d,--description}'[Description of the label]' \
            {-f,--force}'[Update the label color and description if label already exists]' \
            '--confirm[Confirm deletion without prompting]' \
            {-n,--name}'[New name of the label]' \
            {-L,--limit}'[Maximum number of labels to fetch (default 30)]' \
            '--order[Order of labels returned: {asc|desc} (default "asc")]' \
            {-S,--search}'[Search label names and descriptions]' \
            '--sort[Sort fetched labels: {created|name} (default "created")]' \
            {-w,--web}'[List labels in the web browser]' \
            {-b,--branch}'[Local branch name to use (default: the name of the head branch)]' \
            '--detach[Checkout PR with a detached HEAD]' \
            {-f,--force}'[Reset the existing local branch to the latest state of the pull request]' \
            '--recurse-submodules[Update all submodules after checkout]' \
            {-i,--interval,--watch}'[Refresh interval in seconds when using --watch flag (default 10)]' \
            '--watch[Watch checks until they finish]' \
            {-w,--web}'[Open the web browser to show details about checks]' \
            {-d,--delete-branch}'[Delete the local and remote branch after close]' \
            {-B,--base}'[The branch into which you want your code merged]' \
            {-b,--body}'[Body for the pull request]' \
            {-d,--draft}'[Mark pull request as a draft]' \
            {-f,--fill}'[Do not prompt for title/body and just use commit info]' \
            {-H,--head}'[The branch that contains commits for your pull request (default: current branch)]' \
            {-m,--milestone}'[Add the pull request to a milestone by name]' \
            '--no-maintainer-edit[Disable maintainer'\''s ability to modify pull request]' \
            {-p,--project}'[Add the pull request to projects by name]' \
            {-r,--reviewer}'[Request reviews from people or teams by their handle]' \
            {-t,--title}'[Title for the pull request]' \
            {-w,--web}'[Open the web browser to create a pull request]' \
            '--color[Use color in diff output: {always|never|auto} (default "auto")]' \
            '--patch[Display diff in patch format]' \
            '--add-project[Add the pull request to projects by name]' \
            '--add-reviewer[Add reviewers by their login.]' \
            {-B,--base}'[Change the base branch for this pull request]' \
            {-m,--milestone}'[Edit the milestone the pull request belongs to by name]' \
            '--remove-project[Remove the pull request from projects by name]' \
            '--remove-reviewer[Remove reviewers by their login.]' \
            {-B,--base}'[Filter by base branch]' \
            {-d,--draft}'[Filter by draft state]' \
            {-H,--head}'[Filter by head branch]' \
            {-L,--limit}'[Maximum number of items to fetch (default 30)]' \
            {-S,--search}'[Search pull requests with query]' \
            {-s,--state}'[Filter by state: {open|closed|merged|all} (default "open")]' \
            {-w,--web}'[List pull requests in the web browser]' \
            '--admin[Use administrator privileges to merge a pull request that does not meet requirements]' \
            '--auto[Automatically merge only after necessary requirements are met]' \
            {-b,--body}'[Body text for the merge commit]' \
            {-d,--delete-branch}'[Delete the local and remote branch after merge]' \
            '--disable-auto[Disable auto-merge for this pull request]' \
            {-m,--merge}'[Merge the commits with the base branch]' \
            {-r,--rebase}'[Rebase the commits onto the base branch]' \
            {-s,--squash}'[Squash the commits into one commit and merge it into the base branch]' \
            {-t,--subject}'[Subject text for the merge commit]' \
            {-a,--approve}'[Approve pull request]' \
            {-b,--body}'[Specify the body of a review]' \
            {-c,--comment}'[Comment on a pull request]' \
            {-r,--request-changes}'[Request changes on a pull request]' \
            {-c,--comments}'[View pull request comments]' \
            {-w,--web}'[Open a pull request in the browser]' \
            '--discussion-category[Start a discussion in the specified category]' \
            {-d,--draft}'[Save the release as a draft instead of publishing it]' \
            '--generate-notes[Automatically generate title and notes for the release]' \
            {-n,--notes}'[Release notes]' \
            {-F,--notes-file}'[Read release notes from file (use "-" to read from standard input)]':file:_files \
            {-p,--prerelease}'[Mark the release as a prerelease]' \
            '--target[Target branch or full commit SHA (default: main branch)]' \
            {-t,--title}'[Release title]' \
            {-y,--yes}'[Skip the confirmation prompt]' \
            {-A,--archive}'[Download the source code archive in the specified format (zip or tar.gz)]' \
            {-D,--dir}'[The directory to download files into (default ".")]' \
            {-p,--pattern}'[Download only assets that match a glob pattern]' \
            '--discussion-category[Start a discussion in the specified category when publishing a draft]' \
            '--draft[Save the release as a draft instead of publishing it]' \
            '--prerelease[Mark the release as a prerelease]' \
            '--tag[The name of the tag]' \
            '--exclude-drafts[Exclude draft releases]' \
            '--clobber[Overwrite existing assets of the same name]' \
            {-w,--web}'[Open the release in the browser]' \
            {-y,--confirm}'[Skip the confirmation prompt]' \
            {-u,--upstream-remote-name}'[Upstream remote name when cloning a fork (default "upstream")]' \
            {-c,--clone}'[Clone the new repository to the current directory]' \
            {-d,--description}'[Description of the repository]' \
            '--disable-issues[Disable issues in the new repository]' \
            '--disable-wiki[Disable wiki in the new repository]' \
            {-g,--gitignore}'[Specify a gitignore template for the repository]' \
            {-h,--homepage}'[Repository home page URL]' \
            '--include-all-branches[Include all branches from template repository]' \
            '--internal[Make the new repository internal]' \
            {-l,--license}'[Specify an Open Source License for the repository]' \
            '--private[Make the new repository private]' \
            '--public[Make the new repository public]' \
            '--push[Push local commits to the new repository]' \
            {-r,--remote}'[Specify remote name for the new repository]' \
            {-s,--source}'[Specify path to local repository to use as source]' \
            {-t,--team}'[The name of the organization team to be granted access]' \
            {-p,--template}'[Make the new repository based on a template repository]' \
            {-w,--allow-write}'[Allow write access for the key]' \
            {-t,--title}'[Title of the new key]' \
            '--add-topic[Add repository topic]' \
            '--allow-forking[Allow forking of an organization repository]' \
            '--default-branch[Set the default branch name for the repository]' \
            '--delete-branch-on-merge[Delete head branch when pull requests are merged]' \
            '--enable-auto-merge[Enable auto-merge functionality]' \
            '--enable-issues[Enable issues in the repository]' \
            '--enable-merge-commit[Enable merging pull requests via merge commit]' \
            '--enable-projects[Enable projects in the repository]' \
            '--enable-rebase-merge[Enable merging pull requests via rebase]' \
            '--enable-squash-merge[Enable merging pull requests via squashed commit]' \
            '--enable-wiki[Enable wiki in the repository]' \
            '--remove-topic[Remove repository topic]' \
            '--template[Make the repository available as a template repository]' \
            '--visibility[Change the visibility of the repository to {public,private,internal}]' \
            '--clone[Clone the fork]' \
            '--fork-name[Rename the forked repository]' \
            '--org[Create the fork in an organization]' \
            '--remote[Add a git remote for the fork]' \
            '--remote-name[Specify the name for the new remote (default "origin")]' \
            '--archived[Show only archived repositories]' \
            '--fork[Show only forks]' \
            {-l,--language}'[Filter by primary coding language]' \
            {-L,--limit}'[Maximum number of repositories to list (default 30)]' \
            '--no-archived[Omit archived repositories]' \
            '--source[Show only non-forks]' \
            '--topic[Filter by topic]' \
            '--visibility[Filter by repository visibility: {public|private|internal}]' \
            {-y,--confirm}'[skip confirmation prompt]' \
            {-b,--branch}'[Branch to sync (default: main branch)]' \
            {-s,--source}'[Source repository]' \
            {-b,--branch}'[View a specific branch of the repository]' \
            {-w,--web}'[Open a repository in the browser]' \
            {-D,--dir}'[The directory to download artifacts into (default ".")]' \
            {-n,--name}'[Download artifacts that match any of the given names]' \
            {-p,--pattern}'[Download artifacts that match a glob pattern]' \
            {-b,--branch}'[Filter runs by branch]' \
            {-L,--limit}'[Maximum number of runs to fetch (default 20)]' \
            {-u,--user}'[Filter runs by user who triggered the run]' \
            {-w,--workflow}'[Filter runs by workflow]' \
            {-d,--debug}'[Rerun with debug logging]' \
            '--failed[Rerun only failed jobs, including dependencies]' \
            {-j,--job}'[Rerun a specific job from a run, including dependencies]' \
            '--exit-status[Exit with non-zero status if run failed]' \
            {-j,--job}'[View a specific job ID from a run]' \
            '--log[View full log for either a run or specific job]' \
            '--log-failed[View the log for any failed steps in a run or specific job]' \
            {-v,--verbose}'[Show job steps]' \
            {-w,--web}'[Open run in the browser]' \
            '--exit-status[Exit with non-zero status if run fails]' \
            {-i,--interval}'[Refresh interval in seconds (default 3)]' \
            '--archived[Restrict search to archived repositories]' \
            '--assignee[Filter by assignee]' \
            '--author[Filter by author]' \
            '--closed[Filter on closed at date]' \
            '--commenter[Filter based on comments by user]' \
            '--comments[Filter on number of comments]' \
            '--created[Filter based on created at date]' \
            '--include-prs[Include pull requests in results]' \
            '--interactions[Filter on number of reactions and comments]' \
            '--involves[Filter based on involvement of user]' \
            '--label[Filter on label]' \
            '--language[Filter based on the coding language]' \
            {-L,--limit}'[Maximum number of results to fetch (default 30)]' \
            '--locked[Filter on locked conversation status]' \
            '--match[Restrict search to specific field of issue: {title|body|comments}]' \
            '--mentions[Filter based on user mentions]' \
            '--milestone[Filter by milestone title]' \
            '--no-assignee[Filter on missing assignee]' \
            '--no-label[Filter on missing label]' \
            '--no-milestone[Filter on missing milestone]' \
            '--no-project[Filter on missing project]' \
            '--order[Order of results returned, ignored unless '\''--sort'\'' flag is specified: {asc|desc} (default "desc")]' \
            '--owner[Filter on repository owner]' \
            '--project[Filter on project board number]' \
            '--reactions[Filter on number of reactions]' \
            '--repo[Filter on repository]' \
            '--sort[Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated} (default "best-match")]' \
            '--state[Filter based on state: {open|closed}]' \
            '--team-mentions[Filter based on team mentions]' \
            '--updated[Filter on last updated at date]' \
            '--visibility[Filter based on repository visibility: {public|private|internal}]' \
            {-w,--web}'[Open the search query in the web browser]' \
            {-B,--base}'[Filter on base branch name]' \
            '--checks[Filter based on status of the checks: {pending|success|failure}]' \
            '--draft[Filter based on draft state]' \
            {-H,--head}'[Filter on head branch name]' \
            '--merged[Filter based on merged state]' \
            '--merged-at[Filter on merged at date]' \
            '--review[Filter based on review status: {none|required|approved|changes_requested}]' \
            '--review-requested[Filter on user or team requested to review]' \
            '--reviewed-by[Filter on user who reviewed]' \
            '--sort[Sort fetched results: {comments|reactions|reactions-+1|reactions--1|reactions-smile|reactions-thinking_face|reactions-heart|reactions-tada|interactions|created|updated} (default "best-match")]' \
            '--archived[Filter based on archive state]' \
            '--followers[Filter based on number of followers]' \
            '--forks[Filter on number of forks]' \
            '--good-first-issues[Filter on number of issues with the '\''good first issue'\'' label]' \
            '--help-wanted-issues[Filter on number of issues with the '\''help wanted'\'' label]' \
            '--include-forks[Include forks in fetched repositories: {false|true|only}]' \
            '--license[Filter based on license type]' \
            {-L,--limit}'[Maximum number of repositories to fetch (default 30)]' \
            '--match[Restrict search to specific field of repository: {name|description|readme}]' \
            '--number-topics[Filter on number of topics]' \
            '--order[Order of repositories returned, ignored unless '\''--sort'\'' flag is specified: {asc|desc} (default "desc")]' \
            '--owner[Filter on owner]' \
            '--size[Filter on a size range, in kilobytes]' \
            '--sort[Sort fetched repositories: {forks|help-wanted-issues|stars|updated} (default "best-match")]' \
            '--stars[Filter on number of stars]' \
            '--topic[Filter on topic]' \
            '--visibility[Filter based on visibility: {public|private|internal}]' \
            {-a,--app}'[Delete a secret for a specific application: {actions|codespaces|dependabot}]' \
            {-e,--env}'[Delete a secret for an environment]' \
            {-o,--org}'[Delete a secret for an organization]' \
            {-u,--user}'[Delete a secret for your user]' \
            {-a,--app}'[List secrets for a specific application: {actions|codespaces|dependabot}]' \
            {-e,--env}'[List secrets for an environment]' \
            {-o,--org}'[List secrets for an organization]' \
            {-u,--user}'[List a secret for your user]' \
            {-a,--app}'[Set the application for a secret: {actions|codespaces|dependabot}]' \
            {-b,--body}'[The value for the secret (reads from standard input if not specified)]' \
            {-e,--env}'[Set deployment environment secret]' \
            {-f,--env-file}'[Load secret names and values from a dotenv-formatted file]':file:_files \
            '--no-store[Print the encrypted, base64-encoded value instead of storing it on Github]' \
            {-o,--org}'[Set organization secret]' \
            {-r,--repos}'[List of repositories that can access an organization or user secret]' \
            {-u,--user}'[Set a secret for your user]' \
            {-v,--visibility}'[Set visibility for an organization secret: {all|private|selected} (default "private")]' \
            {-t,--title}'[Title for the new key]' \
            {-e,--exclude}'[Comma separated list of repos to exclude in owner/name format]' \
            {-o,--org}'[Report status within an organization]' \
            {-a,--all}'[Show all workflows, including disabled workflows]' \
            {-L,--limit}'[Maximum number of workflows to fetch (default 50)]' \
            {-F,--field}'[Add a string parameter in key=value format, respecting @ syntax]' \
            '--json[Read workflow inputs as JSON via STDIN]' \
            {-r,--ref}'[The branch or tag name which contains the version of the workflow file you'\''d like to run]' \
            {-r,--ref}'[The branch or tag name which contains the version of the workflow file you'\''d like to view]' \
            {-w,--web}'[Open workflow in the browser]' \
            {-y,--yaml}'[View the workflow yaml file]' \
            "*: :_files"

    }


function _gh {
    local line state

    function _commands {
        local -a commands
        commands=(
            'auth:Authenticate gh and git with GitHub'
            'browse:Open the repository in the browser'
            'codespace:Connect to and manage your codespaces'
            'gist:Manage gists'
            'issue:Manage issues'
            'pr:Manage pull requests'
            'release:Manage releases'
            'repo:Manage repositories'
            'run:View details about workflow runs'
            'workflow:View details about GitHub Actions workflows'
            'alias:Create command shortcuts'
            'api:Make an authenticated GitHub API request'
            'completion:Generate shell completion scripts'
            'config:Manage configuration for gh'
            'extension:Manage gh extensions'
            'gpg-key:Manage GPG keys'
            'label:Manage labels'
            'search:Search for repositories, issues, and pull requests'
            'secret:Manage GitHub secrets'
            'ssh-key:Manage SSH keys'
            'status:Print information about relevant issues, pull requests, and notifications across repositories'
            'actions:Learn about working with GitHub Actions'
            'environment:Environment variables that can be used with gh'
            'formatting:Formatting options for JSON data exported from gh'
            'mintty:Information about using gh with MinTTY'
            'reference:A comprehensive reference of all gh commands'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        '--version[Show gh version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (auth)
            _gh_auth
            ;;

        (browse)
            _gh_browse
            ;;

        (codespace)
            _gh_codespace
            ;;

        (gist)
            _gh_gist
            ;;

        (issue)
            _gh_issue
            ;;

        (pr)
            _gh_pr
            ;;

        (release)
            _gh_release
            ;;

        (repo)
            _gh_repo
            ;;

        (run)
            _gh_run
            ;;

        (workflow)
            _gh_workflow
            ;;

        (alias)
            _gh_alias
            ;;

        (api)
            _gh_api
            ;;

        (completion)
            _gh_completion
            ;;

        (config)
            _gh_config
            ;;

        (extension)
            _gh_extension
            ;;

        (gpg-key)
            _gh_gpg-key
            ;;

        (label)
            _gh_label
            ;;

        (search)
            _gh_search
            ;;

        (secret)
            _gh_secret
            ;;

        (ssh-key)
            _gh_ssh-key
            ;;

        (status)
            _gh_status
            ;;

        (actions)
            _gh_actions
            ;;

        (environment)
            _gh_environment
            ;;

        (formatting)
            _gh_formatting
            ;;

        (mintty)
            _gh_mintty
            ;;

        (reference)
            _gh_reference
            ;;

        esac
        ;;
     esac

}

