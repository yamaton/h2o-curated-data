#compdef _git git

# Generated with h2o 0.1.18

    function _git_clone {
        _arguments \
            '(-l --local)'{-l,--local}'[When the repository to clone from is on a local machine, this flag bypasses the normal "Git aware" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save space when possible.]' \
            '--no-hardlinks[Force the cloning process from a repository on a local filesystem to copy the files under the .git/objects directory instead of using hardlinks. This may be desirable if you are trying to make a back-up of your repository.]' \
            '(-s --shared)'{-s,--shared}'[When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects with the source repository. The resulting repository starts out without any object of its own.]' \
            '--reference[If the reference repository is on the local machine, automatically setup .git/objects/info/alternates to obtain objects from the reference repository. Using an already existing repository as an alternate will require fewer objects to be copied from the repository being cloned, reducing network and local storage costs. When using the --reference-if-able, a non existing directory is skipped with a warning instead of aborting the clone.]' \
            '--dissociate[Borrow the objects from reference repositories specified with the --reference options only to reduce network transfer, and stop borrowing from them after a clone is made by making necessary local copies of borrowed objects. This option can also be used when cloning locally from a repository that already borrows objects from another repository—the new repository will borrow objects from the same repository, and this option can be used to stop the borrowing.]' \
            '(-q --quiet)'{-q,--quiet}'[Operate quietly. Progress is not reported to the standard error stream.]' \
            '(-v --verbose)'{-v,--verbose}'[Run verbosely. Does not affect the reporting of progress status to the standard error stream.]' \
            '--progress[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.]' \
            '--server-option[Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line.]' \
            '(-n --no-checkout)'{-n,--no-checkout}'[No checkout of HEAD is performed after the clone is complete.]' \
            '--reject-shallow[Fail if the source repository is a shallow repository. The clone.rejectShallow configuration variable can be used to specify the default.]' \
            '--no-reject-shallow[Fail if the source repository is a shallow repository. The clone.rejectShallow configuration variable can be used to specify the default.]' \
            '--bare[Make a bare Git repository. That is, instead of creating <directory> and placing the administrative files in <directory>/.git, make the <directory> itself the $GIT_DIR. This obviously implies the --no-checkout because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither remote-tracking branches nor the related configuration variables are created.]' \
            '--sparse[Initialize the sparse-checkout file so the working directory starts with only the files in the root of the repository. The sparse-checkout file can be modified to grow the working directory as needed.]' \
            '--filter[Use the partial clone feature and request that the server sends a subset of reachable objects according to a given object filter. When using --filter, the supplied <filter-spec> is used for the partial clone filter. For example, --filter=blob:none will filter out all blobs (file contents) until needed by Git. Also, --filter=blob:limit=<size> will filter out all blobs of size at least <size>. For more details on filter specifications, see the --filter option in git-rev-list(1).]' \
            '--mirror[Set up a mirror of the source repository. This implies --bare. Compared to --bare, --mirror not only maps local branches of the source to local branches of the target, it maps all refs (including remote-tracking branches, notes etc.) and sets up a refspec configuration such that all these refs are overwritten by a git remote update in the target repository.]' \
            '(-o --origin)'{-o,--origin}'[Instead of using the remote name origin to keep track of the upstream repository, use <name>. Overrides clone.defaultRemoteName from the config.]' \
            '(-b --branch)'{-b,--branch}'[Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <name> branch instead. In a non-bare repository, this is the branch that will be checked out. --branch can also take tags and detaches the HEAD at that commit in the resulting repository.]' \
            '(-u --upload-pack)'{-u,--upload-pack}'[When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end.]' \
            '--template[Specify the directory from which templates will be used; (See the "TEMPLATE DIRECTORY" section of gitinit(1).)]' \
            '(-c --config)'{-c,--config}'[Set a configuration variable in the newly-created repository; this takes effect immediately after the repository is initialized, but before the remote history is fetched or any files checked out. The key is in the same format as expected by git-config(1) (e.g., core.eol=true). If multiple values are given for the same key, each value will be written to the config file. This makes it safe, for example, to add additional fetch refspecs to the origin remote.]' \
            '--depth[Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.]' \
            '--shallow-since[Create a shallow clone with a history after the specified time.]' \
            '--shallow-exclude[Create a shallow clone with a history, excluding commits reachable from a specified remote branch or tag. This option can be specified multiple times.]' \
            '--single-branch[Clone only the history leading to the tip of a single branch, either specified by the --branch option or the primary branch remote’s HEAD points at. Further fetches into the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when --single-branch clone was made, no remote-tracking branch is created.]' \
            '--no-single-branch[Clone only the history leading to the tip of a single branch, either specified by the --branch option or the primary branch remote’s HEAD points at. Further fetches into the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when --single-branch clone was made, no remote-tracking branch is created.]' \
            '--no-tags[Don’t clone any tags, and set remote.<remote>.tagOpt=--no-tags in the config, ensuring that future git pull and git fetch operations won’t follow any tags. Subsequent explicit tag fetches will still work, (see git-fetch(1)).]' \
            '--recurse-submodules[After the clone is created, initialize and clone submodules within based on the provided pathspec. If no pathspec is provided, all submodules are initialized and cloned. This option can be given multiple times for pathspecs consisting of multiple entries. The resulting clone has submodule.active set to the provided pathspec, or "." (meaning all submodules) if no pathspec is provided.]:file:_files' \
            '--shallow-submodules[All submodules which are cloned will be shallow with a depth of 1.]' \
            '--no-shallow-submodules[All submodules which are cloned will be shallow with a depth of 1.]' \
            '--remote-submodules[All submodules which are cloned will use the status of the submodule’s remote-tracking branch to update the submodule, rather than the superproject’s recorded SHA-1. Equivalent to passing --remote to git submodule update.]' \
            '--no-remote-submodules[All submodules which are cloned will use the status of the submodule’s remote-tracking branch to update the submodule, rather than the superproject’s recorded SHA-1. Equivalent to passing --remote to git submodule update.]' \
            '--separate-git-dir[Instead of placing the cloned repository where it is supposed to be, place the cloned repository at the specified directory, then make a filesystem-agnostic Git symbolic link to there. The result is Git repository can be separated from working tree.]' \
            '(-j --jobs)'{-j,--jobs}'[The number of submodules fetched at the same time. Defaults to the submodule.fetchJobs option.]' \
            "*: :_files"

    }

    function _git_init {
        _arguments \
            '(-q --quiet)'{-q,--quiet}'[Only print error and warning messages; all other output will be suppressed.]' \
            '--bare[Create a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.]' \
            '--object-format[Specify the given object format (hash algorithm) for the repository. The valid values are sha1 and (if enabled) sha256. sha1 is the default.]' \
            '--template[Specify the directory from which templates will be used. (See the "TEMPLATE DIRECTORY" section below.)]' \
            '--separate-git-dir[Instead of initializing the repository as a directory to either $GIT_DIR or ./.git/, create a text file there containing the path to the actual repository. This file acts as filesystem-agnostic Git symbolic link to the repository.]' \
            '(-b --initial-branch)'{-b,--initial-branch}'[Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name (currently master, but this is subject to change in the future; the name can be customized via the init.defaultBranch configuration variable).]' \
            '--shared[Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. When specified, the config variable "core.sharedRepository" is set so that files and directories under $GIT_DIR are created with the requested permissions. When not specified, Git will use permissions reported by umask(2).]' \
            "*: :_files"

    }

    function _git_add {
        _arguments \
            '(-n --dry-run)'{-n,--dry-run}'[Don’t actually add the file(s), just show if they exist and/or will be ignored.]' \
            '(-v --verbose)'{-v,--verbose}'[Be verbose.]' \
            '(-f --force)'{-f,--force}'[Allow adding otherwise ignored files.]' \
            '(-i --interactive)'{-i,--interactive}'[Add modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details.]' \
            '(-p --patch)'{-p,--patch}'[Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.]' \
            '(-e --edit)'{-e,--edit}'[Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.]' \
            '(-u --update)'{-u,--update}'[Update the index just where it already has an entry matching <pathspec>. This removes as well as modifies index entries to match the working tree, but adds no new files.]' \
            '(-A --all --no-ignore-removal)'{-A,--all,--no-ignore-removal}'[Update the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.]' \
            '(--no-all --ignore-removal)'{--no-all,--ignore-removal}'[Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no <pathspec> is used.]' \
            '(-N --intent-to-add)'{-N,--intent-to-add}'[Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with git diff and committing them with git commit -a.]' \
            '--refresh[Don’t add the file(s), but only refresh their stat() information in the index.]' \
            '--ignore-errors[If some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others. The command shall still exit with non-zero status. The configuration variable add.ignoreErrors can be set to true to make this the default behaviour.]' \
            '--ignore-missing[This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not.]' \
            '--no-warn-embedded-repo[By default, git add will warn when adding an embedded repository to the index without using git submodule add to create an entry in .gitmodules. This option will suppress the warning (e.g., if you are manually performing operations on submodules).]' \
            '--renormalize[Apply the "clean" process freshly to all tracked files to forcibly add them again to the index. This is useful after changing core.autocrlf configuration or the text attribute in order to correct files added with wrong CRLF/LF line endings. This option implies -u.]' \
            '--chmod[Override the executable bit of the added files. The executable bit is only changed in the index, the files on disk are left unchanged.]' \
            '--pathspec-from-file[Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config(1)). See also --pathspec-file-nul and global --literal-pathspecs.]:file:_files' \
            '--pathspec-file-nul[Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).]' \
            '--[This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).]' \
            "*: :_files"

    }

    function _git_mv {
        _arguments \
            '(-f --force)'{-f,--force}'[Force renaming or moving of a file even if the target exists]' \
            '-k[Skip move or rename actions which would lead to an error condition. An error happens when a source is neither existing nor controlled by Git, or when it would overwrite an existing file unless -f is given.]' \
            '(-n --dry-run)'{-n,--dry-run}'[Do nothing; only show what would happen]' \
            '(-v --verbose)'{-v,--verbose}'[Report the names of files as they are moved.]' \
            "*: :_files"

    }

    function _git_restore {
        _arguments \
            '(-s --source)'{-s,--source}'[Restore the working tree files with the content from the given tree. It is common to specify the source tree by naming a commit, branch or tag associated with it.]' \
            '(-p --patch)'{-p,--patch}'[Interactively select hunks in the difference between the restore source and the restore location. See the “Interactive Mode” section of git-add(1) to learn how to operate the --patch mode.]' \
            '(-W --worktree -S --staged)'{-W,--worktree,-S,--staged}'[Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both.]' \
            '(-q --quiet)'{-q,--quiet}'[Quiet, suppress feedback messages. Implies --no-progress.]' \
            '(--progress --no-progress)'{--progress,--no-progress}'[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet.]' \
            '(--ours --theirs)'{--ours,--theirs}'[When restoring files in the working tree from the index, use stage #2 (ours) or #3 (theirs) for unmerged paths.]' \
            '(-m --merge)'{-m,--merge}'[When restoring files on the working tree from the index, recreate the conflicted merge in the unmerged paths.]' \
            '--conflict[The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are "merge" (default) and "diff3" (in addition to what is shown by "merge" style, shows the original contents).]' \
            '--ignore-unmerged[When restoring files on the working tree from the index, do not abort the operation if there are unmerged entries and neither --ours, --theirs, --merge or --conflict is specified. Unmerged paths on the working tree are left alone.]' \
            '--ignore-skip-worktree-bits[In sparse checkout mode, by default is to only update entries matched by <pathspec> and sparse patterns in $GIT_DIR/info/sparse-checkout. This option ignores the sparse patterns and unconditionally restores any files in <pathspec>.]' \
            '(--recurse-submodules --no-recurse-submodules)'{--recurse-submodules,--no-recurse-submodules}'[If <pathspec> names an active submodule and the restore location includes the working tree, the submodule will only be updated if this option is given, in which case its working tree will be restored to the commit recorded in the superproject, and any local modifications overwritten. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-checkout(1), this will detach HEAD of the submodule.]' \
            '(--overlay --no-overlay)'{--overlay,--no-overlay}'[In overlay mode, the command never removes files when restoring. In no-overlay mode, tracked files that do not appear in the --source tree are removed, to make them match <tree> exactly. The default is no-overlay mode.]' \
            '--pathspec-from-file[Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config(1)). See also --pathspec-file-nul and global --literal-pathspecs.]:file:_files' \
            '--pathspec-file-nul[Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).]' \
            '--[Do not interpret any more arguments as options.]' \
            "*: :_files"

    }

    function _git_rm {
        _arguments \
            '(-f --force)'{-f,--force}'[Override the up-to-date check.]' \
            '(-n --dry-run)'{-n,--dry-run}'[Don’t actually remove any file(s). Instead, just show if they exist in the index and would otherwise be removed by the command.]' \
            '-r[Allow recursive removal when a leading directory name is given.]' \
            '--[This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).]' \
            '--cached[Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.]' \
            '--ignore-unmatch[Exit with a zero status even if no files matched.]' \
            '(-q --quiet)'{-q,--quiet}'[git rm normally outputs one line (in the form of an rm command) for each file removed. This option suppresses that output.]' \
            '--pathspec-from-file[Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config(1)). See also --pathspec-file-nul and global --literal-pathspecs.]:file:_files' \
            '--pathspec-file-nul[Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).]' \
            "*: :_files"

    }

    function _git_sparse-checkout {
        _arguments \
            "*: :_files"

    }

    function _git_bisect {
        _arguments \
            '--no-checkout[Do not checkout the new working tree at each iteration of the bisection process. Instead just update a special reference named BISECT_HEAD to make it point to the commit that should be tested.]' \
            '--first-parent[Follow only the first parent commit upon seeing a merge commit.]' \
            "*: :_files"

    }

    function _git_diff {
        _arguments \
            '(-p -u --patch)'{-p,-u,--patch}'[Generate patch (see section on generating patches). This is the default.]' \
            '(-s --no-patch)'{-s,--no-patch}'[Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch.]' \
            '(-U --unified)'{-U,--unified}'[Generate diffs with <n> lines of context instead of the usual three. Implies --patch.]' \
            '--output[Output to a specific file instead of stdout.]:file:_files' \
            '(--output-indicator-new --output-indicator-old --output-indicator-context)'{--output-indicator-new,--output-indicator-old,--output-indicator-context}'[Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and '\'' '\'' respectively.]' \
            '--raw[Generate the diff in raw format.]' \
            '--patch-with-raw[Synonym for -p --raw.]' \
            '--indent-heuristic[Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default.]' \
            '--no-indent-heuristic[Disable the indent heuristic.]' \
            '--minimal[Spend extra time to make sure the smallest possible diff is produced.]' \
            '--patience[Generate a diff using the "patience diff" algorithm.]' \
            '--histogram[Generate a diff using the "histogram diff" algorithm.]' \
            '--anchored[Generate a diff using the "anchored diff" algorithm.]' \
            '--diff-algorithm[Choose a diff algorithm. The variants are as follows:]' \
            '--compact-summary[Output a condensed summary of extended header information such as file creations or deletions ("new" or "gone", optionally "+l" if it’s a symlink) and mode changes ("+x" or "-x" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat.]' \
            '--numstat[Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0.]' \
            '--shortstat[Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines.]' \
            '(-X --dirstat)'{-X,--dirstat}'[Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config(1)). The following parameters are available:]' \
            '--cumulative[Synonym for --dirstat=cumulative]' \
            '--dirstat-by-file[Synonym for --dirstat=files,param1,param2...]' \
            '--summary[Output a condensed summary of extended header information such as creations, renames and mode changes.]' \
            '--patch-with-stat[Synonym for -p --stat.]' \
            '-z[When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as output field terminators.]' \
            '--name-only[Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log(1) manual page.]' \
            '--name-status[Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8.]' \
            '--submodule[Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule(1) summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset.]' \
            '--color[Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto. It can be changed by the color.ui and color.diff configuration settings.]' \
            '--no-color[Turn off colored diff. This can be used to override configuration settings. It is the same as --color=never.]' \
            '--color-moved[Moved lines of code are colored differently. It can be changed by the diff.colorMoved configuration setting. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:]' \
            '--no-color-moved[Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no.]' \
            '--color-moved-ws[This configures how whitespace is ignored when performing the move detection for --color-moved. It can be set by the diff.colorMovedWS configuration setting. These modes can be given as a comma separated list:]' \
            '--no-color-moved-ws[Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no.]' \
            '--word-diff[Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:]' \
            '--word-diff-regex[Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.]' \
            '--color-words[Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>.]' \
            '--no-renames[Turn off rename detection, even when the configuration file gives the default to do so.]' \
            '--rename-empty[Whether to use empty blobs as rename source.]' \
            '--no-rename-empty[Whether to use empty blobs as rename source.]' \
            '--check[Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.]' \
            '--ws-error-highlight[Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace.]' \
            '--full-index[Instead of the first handful of characters, show the full pre- and post-image blob object names on the "index" line when generating patch format output.]' \
            '--binary[In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch.]' \
            '--abbrev[Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>.]' \
            '(-M --find-renames)'{-M,--find-renames}'[Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%.]' \
            '(-C --find-copies)'{-C,--find-copies}'[Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>.]' \
            '--find-copies-harder[For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect.]' \
            '(-D --irreversible-delete)'{-D,--irreversible-delete}'[Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.]' \
            '-l[The -M and -C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.]' \
            '-S[Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.]' \
            '-G[Look for differences whose patch text contains added/removed lines that match <regex>.]' \
            '--find-object[Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.]' \
            '--pickaxe-all[When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.]' \
            '--pickaxe-regex[Treat the <string> given to -S as an extended POSIX regular expression to match.]' \
            '-O[Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config(1)). To cancel diff.orderFile, use -O/dev/null.]:file:_files' \
            '(--skip-to --rotate-to)'{--skip-to,--rotate-to}'[Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise.]:file:_files' \
            '-R[Swap two inputs; that is, show differences from index or on-disk file to tree contents.]' \
            '(--relative --no-relative)'{--relative,--no-relative}'[When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative.]:file:_files' \
            '(-a --text)'{-a,--text}'[Treat all files as text.]' \
            '--ignore-cr-at-eol[Ignore carriage-return at the end of line when doing a comparison.]' \
            '--ignore-space-at-eol[Ignore changes in whitespace at EOL.]' \
            '(-b --ignore-space-change)'{-b,--ignore-space-change}'[Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.]' \
            '(-w --ignore-all-space)'{-w,--ignore-all-space}'[Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.]' \
            '--ignore-blank-lines[Ignore changes whose lines are all blank.]' \
            '(-I --ignore-matching-lines)'{-I,--ignore-matching-lines}'[Ignore changes whose all lines match <regex>. This option may be specified more than once.]' \
            '--inter-hunk-context[Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset.]' \
            '(-W --function-context)'{-W,--function-context}'[Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes(5)).]' \
            '--exit-code[Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.]' \
            '--quiet[Disable all output of the program. Implies --exit-code.]' \
            '--ext-diff[Allow an external diff helper to be executed. If you set an external diff driver with gitattributes(5), you need to use this option with git-log(1) and friends.]' \
            '--no-ext-diff[Disallow external diff drivers.]' \
            '(--textconv --no-textconv)'{--textconv,--no-textconv}'[Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes(5) for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff(1) and git-log(1), but not for git-format-patch(1) or diff plumbing commands.]' \
            '--ignore-submodules[Ignore changes to submodules in the diff generation. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config(1) or gitmodules(5). When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using "all" hides all changes to submodules.]' \
            '--src-prefix[Show the given source prefix instead of "a/".]' \
            '--dst-prefix[Show the given destination prefix instead of "b/".]' \
            '--no-prefix[Do not show any source or destination prefix.]' \
            '--line-prefix[Prepend an additional prefix to every line of output.]' \
            '--ita-invisible-in-index[By default entries added by "git add -N" appear as an existing empty file in "git diff" and a new file in "git diff --cached". This option makes the entry appear as a new file in "git diff" and non-existent in "git diff --cached". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future.]' \
            '(-1 --base -2 --ours -3 --theirs)'{-1,--base,-2,--ours,-3,--theirs}'[Compare the working tree with the "base" version (stage #1), "our branch" (stage #2) or "their branch" (stage #3). The index contains these stages only for unmerged entries i.e. while resolving conflicts. See git-read-tree(1) section "3-Way Merge" for detailed information.]' \
            '-0[Omit diff output for unmerged entries and just show "Unmerged". Can be used only when comparing the working tree with the index.]' \
            "*: :_files"

    }

    function _git_grep {
        _arguments \
            '--cached[Instead of searching tracked files in the working tree, search blobs registered in the index file.]' \
            '--no-index[Search files in the current directory that is not managed by Git.]' \
            '--untracked[In addition to searching in the tracked files in the working tree, search also in untracked files.]' \
            '--no-exclude-standard[Also search in ignored files by not honoring the .gitignore mechanism. Only useful with --untracked.]' \
            '--exclude-standard[Do not pay attention to ignored files specified via the .gitignore mechanism. Only useful when searching files in the current directory with --no-index.]' \
            '--recurse-submodules[Recursively search in each submodule that is active and checked out in the repository. When used in combination with the <tree> option the prefix of all submodule output will be the name of the parent project’s <tree> object. This option has no effect if --no-index is given.]' \
            '(-a --text)'{-a,--text}'[Process binary files as if they were text.]' \
            '--textconv[Honor textconv filter settings.]' \
            '--no-textconv[Do not honor textconv filter settings. This is the default.]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[Ignore case differences between the patterns and the files.]' \
            '-I[Don’t match the pattern in binary files.]' \
            '--max-depth[For each <pathspec> given on command line, descend at most <depth> levels of directories. A value of -1 means no limit. This option is ignored if <pathspec> contains active wildcards. In other words if "a*" matches a directory named "a*", "*" is matched literally so --max-depth is still effective.]' \
            '(-r --recursive)'{-r,--recursive}'[Same as --max-depth=-1; this is the default.]' \
            '--no-recursive[Same as --max-depth=0.]' \
            '(-w --word-regexp)'{-w,--word-regexp}'[Match the pattern only at word boundary (either begin at the beginning of a line, or preceded by a non-word character; end at the end of a line or followed by a non-word character).]' \
            '(-v --invert-match)'{-v,--invert-match}'[Select non-matching lines.]' \
            '(-h -H)'{-h,-H}'[By default, the command shows the filename for each match. -h option is used to suppress this output. -H is there for completeness and does not do anything except it overrides -h given earlier on the command line.]' \
            '--full-name[When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.]' \
            '(-E --extended-regexp -G --basic-regexp)'{-E,--extended-regexp,-G,--basic-regexp}'[Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.]' \
            '(-P --perl-regexp)'{-P,--perl-regexp}'[Use Perl-compatible regular expressions for patterns.]' \
            '(-F --fixed-strings)'{-F,--fixed-strings}'[Use fixed strings for patterns (don’t interpret pattern as a regex).]' \
            '(-n --line-number)'{-n,--line-number}'[Prefix the line number to matching lines.]' \
            '--column[Prefix the 1-indexed byte-offset of the first match from the start of the matching line.]' \
            '(-l --files-with-matches --name-only -L --files-without-match)'{-l,--files-with-matches,--name-only,-L,--files-without-match}'[Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches.]' \
            '(-O --open-files-in-pager)'{-O,--open-files-in-pager}'[Open the matching files in the pager (not the output of grep). If the pager happens to be "less" or "vi", and the user specified only one pattern, the first file is positioned at the first match automatically. The pager argument is optional; if specified, it must be stuck to the option without a space. If pager is unspecified, the default pager will be used (see core.pager in git-config(1)).]' \
            '(-z --null)'{-z,--null}'[Use \0 as the delimiter for pathnames in the output, and print them verbatim. Without this option, pathnames with "unusual" characters are quoted as explained for the configuration variable core.quotePath (see git-config(1)).]' \
            '(-o --only-matching)'{-o,--only-matching}'[Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.]' \
            '(-c --count)'{-c,--count}'[Instead of showing every matched line, show the number of lines that match.]' \
            '--color[Show colored matches. The value must be always (the default), never, or auto.]' \
            '--no-color[Turn off match highlighting, even when the configuration file gives the default to color output. Same as --color=never.]' \
            '--break[Print an empty line between matches from different files.]' \
            '--heading[Show the filename above the matches in that file instead of at the start of each shown line.]' \
            '(-p --show-function)'{-p,--show-function}'[Show the preceding line that contains the function name of the match, unless the matching line is a function name itself. The name is determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes(5)).]' \
            '(- -C --context)'{-,-C,--context}'[Show <num> leading and trailing lines, and place a line containing -- between contiguous groups of matches.]' \
            '(-A --after-context)'{-A,--after-context}'[Show <num> trailing lines, and place a line containing -- between contiguous groups of matches.]' \
            '(-B --before-context)'{-B,--before-context}'[Show <num> leading lines, and place a line containing -- between contiguous groups of matches.]' \
            '(-W --function-context)'{-W,--function-context}'[Show the surrounding text from the previous line containing a function name up to the one before the next function name, effectively showing the whole function in which the match was found. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes(5)).]' \
            '--threads[Number of grep worker threads to use. See grep.threads in CONFIGURATION for more information.]' \
            '-f[Read patterns from <file>, one per line.]:file:_files' \
            '-e[The next parameter is the pattern. This option has to be used for patterns starting with - and should be used in scripts passing user input to grep. Multiple patterns are combined by or.]' \
            '--all-match[When giving multiple pattern expressions combined with --or, this flag is specified to limit the match to files that have lines to match all of them.]' \
            '(-q --quiet)'{-q,--quiet}'[Do not output matched lines; instead, exit with status 0 when there is a match and with non-zero status when there isn’t.]' \
            '--[Signals the end of options; the rest of the parameters are <pathspec> limiters.]' \
            "*: :_files"

    }

    function _git_log {
        _arguments \
            '--follow[Continue listing the history of a file beyond renames (works only for a single file).]' \
            '(--no-decorate --decorate)'{--no-decorate,--decorate}'[Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. The default option is short.]' \
            '(--decorate-refs --decorate-refs-exclude)'{--decorate-refs,--decorate-refs-exclude}'[If no --decorate-refs is given, pretend as if all refs were included. For each candidate, do not use it for decoration if it matches any patterns given to --decorate-refs-exclude or if it doesn’t match any of the patterns given to --decorate-refs. The log.excludeDecoration config option allows excluding refs from the decorations, but an explicit --decorate-refs pattern will override a match in log.excludeDecoration.]' \
            '--source[Print out the ref name given on the command line by which each commit was reached.]' \
            '--full-diff[Without this flag, git log -p <path>... shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that "<path>..." limits only commits, and doesn’t limit diff for those commits.]' \
            '--log-size[Include a line “log size <number>” in the output for each commit, where <number> is the length of that commit’s message in bytes. Intended to speed up tools that read log messages from git log output by allowing them to allocate space in advance.]' \
            '(- -n --max-count)'{-,-n,--max-count}'[Limit the number of commits to output.]' \
            '--skip[Skip number commits before starting to show the commit output.]' \
            '(--since --after)'{--since,--after}'[Show commits more recent than a specific date.]' \
            '(--until --before)'{--until,--before}'[Show commits older than a specific date.]' \
            '(--author --committer)'{--author,--committer}'[Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>).]' \
            '--grep-reflog[Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one --grep-reflog, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless --walk-reflogs is in use.]' \
            '--grep[Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one --grep=<pattern>, commits whose message matches any of the given patterns are chosen (but see --all-match).]' \
            '--all-match[Limit the commits output to ones that match all given --grep, instead of ones that match at least one.]' \
            '--invert-grep[Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>.]' \
            '(-i --regexp-ignore-case)'{-i,--regexp-ignore-case}'[Match the regular expression limiting patterns without regard to letter case.]' \
            '--basic-regexp[Consider the limiting patterns to be basic regular expressions; this is the default.]' \
            '(-E --extended-regexp)'{-E,--extended-regexp}'[Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.]' \
            '(-F --fixed-strings)'{-F,--fixed-strings}'[Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression).]' \
            '(-P --perl-regexp)'{-P,--perl-regexp}'[Consider the limiting patterns to be Perl-compatible regular expressions.]' \
            '--remove-empty[Stop when a given path disappears from the tree.]' \
            '--merges[Print only merge commits. This is exactly the same as --min-parents=2.]' \
            '--no-merges[Do not print commits with more than one parent. This is exactly the same as --max-parents=1.]' \
            '(--min-parents --max-parents --no-min-parents --no-max-parents)'{--min-parents,--max-parents,--no-min-parents,--no-max-parents}'[Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.]' \
            '--first-parent[Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge.]' \
            '--not[Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next --not.]' \
            '--all[Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>.]' \
            '--branches[Pretend as if all the refs in refs/heads are listed on the command line as <commit>. If <pattern> is given, limit branches to ones matching given shell glob. If pattern lacks ?, *, or \[, /* at the end is implied.]' \
            '--tags[Pretend as if all the refs in refs/tags are listed on the command line as <commit>. If <pattern> is given, limit tags to ones matching given shell glob. If pattern lacks ?, *, or \[, /* at the end is implied.]' \
            '--remotes[Pretend as if all the refs in refs/remotes are listed on the command line as <commit>. If <pattern> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks ?, *, or \[, /* at the end is implied.]' \
            '--glob[Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>. Leading refs/, is automatically prepended if missing. If pattern lacks ?, *, or \[, /* at the end is implied.]' \
            '--exclude[Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options or arguments do not clear accumulated patterns).]' \
            '--reflog[Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>.]' \
            '--alternate-refs[Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in objects/info/alternates. The set of included objects may be modified by core.alternateRefsCommand, etc. See git-config(1).]' \
            '--single-worktree[By default, all working trees will be examined by the following options when there are more than one (see git-worktree(1)): --all, --reflog and --indexed-objects. This option forces them to examine the current working tree only.]' \
            '--ignore-missing[Upon seeing an invalid object name in the input, pretend as if the bad input was not given.]' \
            '--bisect[Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good bisection refs refs/bisect/good-* on the command line.]' \
            '--stdin[In addition to the <commit> listed on the command line, read them from the standard input. If a -separator is seen, stop reading commits and start reading paths to limit the result.]' \
            '--cherry-mark[Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +.]' \
            '--cherry-pick[Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.]' \
            '(--left-only --right-only)'{--left-only,--right-only}'[List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.]' \
            '--cherry[A synonym for --right-only --cherry-mark --no-merges; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with git log --cherry upstream...mybranch, similar to git cherry upstream mybranch.]' \
            '(-g --walk-reflogs)'{-g,--walk-reflogs}'[Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).]' \
            '--merge[After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.]' \
            '--boundary[Output excluded boundary commits. Boundary commits are prefixed with -.]' \
            '--simplify-by-decoration[Commits that are referred by some branch or tag are selected.]' \
            '--show-pulls[Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for showing the merge commits that "first introduced" a change to a branch.]' \
            '--full-history[Same as the default mode, but does not prune some history.]' \
            '--dense[Only the selected commits are shown, plus some to have a meaningful history.]' \
            '--sparse[All commits in the simplified history are shown.]' \
            '--simplify-merges[Additional option to --full-history to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge.]' \
            '--ancestry-path[When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1), only display commits that exist directly on the ancestry chain between the commit1 and commit2, i.e. commits that are both descendants of commit1, and ancestors of commit2.]' \
            '--dense[Commits that are walked are included if they are not TREESAME to any parent.]' \
            '--sparse[All commits that are walked are included.]' \
            '--simplify-merges[First, build a history graph in the same way that --full-history with parent rewriting does (see above).]' \
            '--ancestry-path[Limit the displayed commits to those directly on the ancestry chain between the “from” and “to” commits in the given commit range. I.e. only display commits that are ancestor of the “to” commit and descendants of the “from” commit.]' \
            '--show-pulls[In addition to the commits shown in the default history, show each merge commit that is not TREESAME to its first parent but is TREESAME to a later parent.]' \
            '--date-order[Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order.]' \
            '--author-date-order[Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order.]' \
            '--topo-order[Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.]' \
            '--reverse[Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with --walk-reflogs.]' \
            '--no-walk[Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were given on the command line. Otherwise (if sorted or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with --graph.]' \
            '--do-walk[Overrides a previous --no-walk.]' \
            '(--pretty --format)'{--pretty,--format}'[Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.]' \
            '--abbrev-commit[Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. "--abbrev=<n>" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.]' \
            '--no-abbrev-commit[Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as "--oneline". It also overrides the log.abbrevCommit variable.]' \
            '--oneline[This is a shorthand for "--pretty=oneline --abbrev-commit" used together.]' \
            '--encoding[The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.]' \
            '(--expand-tabs --no-expand-tabs)'{--expand-tabs,--no-expand-tabs}'[Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.]' \
            '--notes[Show the notes (see git-notes(1)) that annotate the commit, when showing the commit log message. This is the default for git log, git show and git whatchanged commands when there is no --pretty, --format, or --oneline option given on the command line.]' \
            '--no-notes[Do not show notes. This negates the above --notes option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. "--notes --notes=foo --no-notes --notes=bar" will only show notes from "refs/notes/bar".]' \
            '--show-signature[Check the validity of a signed commit object by passing the signature to gpg --verify and show the output.]' \
            '--relative-date[Synonym for --date=relative.]' \
            '--date[Only takes effect for dates shown in human-readable format, such as when using --pretty. log.date config variable sets a default value for the log command’s --date option. By default, dates are shown in the original time zone (either committer’s or author’s). If -local is appended to the format (e.g., iso-local), the user’s local time zone is used instead.]' \
            '--parents[Print also the parents of the commit (in the form "commit parent..."). Also enables parent rewriting, see History Simplification above.]' \
            '--children[Print also the children of the commit (in the form "commit child..."). Also enables parent rewriting, see History Simplification above.]' \
            '--left-right[Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are prefixed with < and those from the right with >. If combined with --boundary, those commits are prefixed with -.]' \
            '--graph[Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with --no-walk.]' \
            '--show-linear-break[When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If <barrier> is specified, it is the string that will be shown instead of the default one.]' \
            '(-p -u --patch)'{-p,-u,--patch}'[Generate patch (see section on generating patches).]' \
            '(-s --no-patch)'{-s,--no-patch}'[Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch.]' \
            '(--diff-merges --no-diff-merges)'{--diff-merges,--no-diff-merges}'[Specify diff format to be used for merge commits. Default is off unless --first-parent is in use, in which case first-parent is the default.]' \
            '--combined-all-paths[This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when --diff-merges=\[dense-\]combined is in use, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).]' \
            '(-U --unified)'{-U,--unified}'[Generate diffs with <n> lines of context instead of the usual three. Implies --patch.]' \
            '--output[Output to a specific file instead of stdout.]:file:_files' \
            '(--output-indicator-new --output-indicator-old --output-indicator-context)'{--output-indicator-new,--output-indicator-old,--output-indicator-context}'[Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and '\'' '\'' respectively.]' \
            '--raw[For each commit, show a summary of changes using the raw diff format. See the "RAW OUTPUT FORMAT" section of git-diff(1). This is different from showing the log itself in raw format, which you can achieve with --format=raw.]' \
            '--patch-with-raw[Synonym for -p --raw.]' \
            '-t[Show the tree objects in the diff output.]' \
            '--indent-heuristic[Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default.]' \
            '--no-indent-heuristic[Disable the indent heuristic.]' \
            '--minimal[Spend extra time to make sure the smallest possible diff is produced.]' \
            '--patience[Generate a diff using the "patience diff" algorithm.]' \
            '--histogram[Generate a diff using the "histogram diff" algorithm.]' \
            '--anchored[Generate a diff using the "anchored diff" algorithm.]' \
            '--diff-algorithm[Choose a diff algorithm. The variants are as follows:]' \
            '--compact-summary[Output a condensed summary of extended header information such as file creations or deletions ("new" or "gone", optionally "+l" if it’s a symlink) and mode changes ("+x" or "-x" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat.]' \
            '--numstat[Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0.]' \
            '--shortstat[Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines.]' \
            '(-X --dirstat)'{-X,--dirstat}'[Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config(1)). The following parameters are available:]' \
            '--cumulative[Synonym for --dirstat=cumulative]' \
            '--dirstat-by-file[Synonym for --dirstat=files,param1,param2...]' \
            '--summary[Output a condensed summary of extended header information such as creations, renames and mode changes.]' \
            '--patch-with-stat[Synonym for -p --stat.]' \
            '-z[Separate the commits with NULs instead of with new newlines.]' \
            '--name-only[Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log(1) manual page.]' \
            '--name-status[Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8.]' \
            '--submodule[Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule(1) summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset.]' \
            '--color[Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto.]' \
            '--no-color[Turn off colored diff. It is the same as --color=never.]' \
            '--color-moved[Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:]' \
            '--no-color-moved[Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no.]' \
            '--color-moved-ws[This configures how whitespace is ignored when performing the move detection for --color-moved. These modes can be given as a comma separated list:]' \
            '--no-color-moved-ws[Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no.]' \
            '--word-diff[Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:]' \
            '--word-diff-regex[Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.]' \
            '--color-words[Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>.]' \
            '--no-renames[Turn off rename detection, even when the configuration file gives the default to do so.]' \
            '--rename-empty[Whether to use empty blobs as rename source.]' \
            '--no-rename-empty[Whether to use empty blobs as rename source.]' \
            '--check[Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.]' \
            '--ws-error-highlight[Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace.]' \
            '--full-index[Instead of the first handful of characters, show the full pre- and post-image blob object names on the "index" line when generating patch format output.]' \
            '--binary[In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch.]' \
            '--abbrev[Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>.]' \
            '(-M --find-renames)'{-M,--find-renames}'[If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see --follow. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%.]' \
            '(-C --find-copies)'{-C,--find-copies}'[Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>.]' \
            '--find-copies-harder[For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect.]' \
            '(-D --irreversible-delete)'{-D,--irreversible-delete}'[Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.]' \
            '-l[The -M and -C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.]' \
            '-S[Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.]' \
            '-G[Look for differences whose patch text contains added/removed lines that match <regex>.]' \
            '--find-object[Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.]' \
            '--pickaxe-all[When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.]' \
            '--pickaxe-regex[Treat the <string> given to -S as an extended POSIX regular expression to match.]' \
            '-O[Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config(1)). To cancel diff.orderFile, use -O/dev/null.]:file:_files' \
            '(--skip-to --rotate-to)'{--skip-to,--rotate-to}'[Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise.]:file:_files' \
            '-R[Swap two inputs; that is, show differences from index or on-disk file to tree contents.]' \
            '(--relative --no-relative)'{--relative,--no-relative}'[When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative.]:file:_files' \
            '(-a --text)'{-a,--text}'[Treat all files as text.]' \
            '--ignore-cr-at-eol[Ignore carriage-return at the end of line when doing a comparison.]' \
            '--ignore-space-at-eol[Ignore changes in whitespace at EOL.]' \
            '(-b --ignore-space-change)'{-b,--ignore-space-change}'[Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.]' \
            '(-w --ignore-all-space)'{-w,--ignore-all-space}'[Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.]' \
            '--ignore-blank-lines[Ignore changes whose lines are all blank.]' \
            '(-I --ignore-matching-lines)'{-I,--ignore-matching-lines}'[Ignore changes whose all lines match <regex>. This option may be specified more than once.]' \
            '--inter-hunk-context[Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset.]' \
            '(-W --function-context)'{-W,--function-context}'[Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes(5)).]' \
            '--ext-diff[Allow an external diff helper to be executed. If you set an external diff driver with gitattributes(5), you need to use this option with git-log(1) and friends.]' \
            '--no-ext-diff[Disallow external diff drivers.]' \
            '(--textconv --no-textconv)'{--textconv,--no-textconv}'[Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes(5) for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff(1) and git-log(1), but not for git-format-patch(1) or diff plumbing commands.]' \
            '--ignore-submodules[Ignore changes to submodules in the diff generation. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config(1) or gitmodules(5). When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using "all" hides all changes to submodules.]' \
            '--src-prefix[Show the given source prefix instead of "a/".]' \
            '--dst-prefix[Show the given destination prefix instead of "b/".]' \
            '--no-prefix[Do not show any source or destination prefix.]' \
            '--line-prefix[Prepend an additional prefix to every line of output.]' \
            '--ita-invisible-in-index[By default entries added by "git add -N" appear as an existing empty file in "git diff" and a new file in "git diff --cached". This option makes the entry appear as a new file in "git diff" and non-existent in "git diff --cached". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future.]' \
            '--grep[further limits to commits whose log message has a line that matches <pattern>), unless otherwise noted.]' \
            "*: :_files"

    }

    function _git_show {
        _arguments \
            '(--pretty --format)'{--pretty,--format}'[Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.]' \
            '--abbrev-commit[Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. "--abbrev=<n>" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.]' \
            '--no-abbrev-commit[Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as "--oneline". It also overrides the log.abbrevCommit variable.]' \
            '--oneline[This is a shorthand for "--pretty=oneline --abbrev-commit" used together.]' \
            '--encoding[The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.]' \
            '(--expand-tabs --no-expand-tabs)'{--expand-tabs,--no-expand-tabs}'[Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.]' \
            '--notes[Show the notes (see git-notes(1)) that annotate the commit, when showing the commit log message. This is the default for git log, git show and git whatchanged commands when there is no --pretty, --format, or --oneline option given on the command line.]' \
            '--no-notes[Do not show notes. This negates the above --notes option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. "--notes --notes=foo --no-notes --notes=bar" will only show notes from "refs/notes/bar".]' \
            '--show-signature[Check the validity of a signed commit object by passing the signature to gpg --verify and show the output.]' \
            '(-p -u --patch)'{-p,-u,--patch}'[Generate patch (see section on generating patches).]' \
            '(-s --no-patch)'{-s,--no-patch}'[Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch.]' \
            '(--diff-merges --no-diff-merges)'{--diff-merges,--no-diff-merges}'[Specify diff format to be used for merge commits. Default is dense-combined unless --first-parent is in use, in which case first-parent is the default.]' \
            '--combined-all-paths[This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when --diff-merges=\[dense-\]combined is in use, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).]' \
            '(-U --unified)'{-U,--unified}'[Generate diffs with <n> lines of context instead of the usual three. Implies --patch.]' \
            '--output[Output to a specific file instead of stdout.]:file:_files' \
            '(--output-indicator-new --output-indicator-old --output-indicator-context)'{--output-indicator-new,--output-indicator-old,--output-indicator-context}'[Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and '\'' '\'' respectively.]' \
            '--raw[For each commit, show a summary of changes using the raw diff format. See the "RAW OUTPUT FORMAT" section of git-diff(1). This is different from showing the log itself in raw format, which you can achieve with --format=raw.]' \
            '--patch-with-raw[Synonym for -p --raw.]' \
            '-t[Show the tree objects in the diff output.]' \
            '--indent-heuristic[Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default.]' \
            '--no-indent-heuristic[Disable the indent heuristic.]' \
            '--minimal[Spend extra time to make sure the smallest possible diff is produced.]' \
            '--patience[Generate a diff using the "patience diff" algorithm.]' \
            '--histogram[Generate a diff using the "histogram diff" algorithm.]' \
            '--anchored[Generate a diff using the "anchored diff" algorithm.]' \
            '--diff-algorithm[Choose a diff algorithm. The variants are as follows:]' \
            '--compact-summary[Output a condensed summary of extended header information such as file creations or deletions ("new" or "gone", optionally "+l" if it’s a symlink) and mode changes ("+x" or "-x" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat.]' \
            '--numstat[Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0.]' \
            '--shortstat[Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines.]' \
            '(-X --dirstat)'{-X,--dirstat}'[Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config(1)). The following parameters are available:]' \
            '--cumulative[Synonym for --dirstat=cumulative]' \
            '--dirstat-by-file[Synonym for --dirstat=files,param1,param2...]' \
            '--summary[Output a condensed summary of extended header information such as creations, renames and mode changes.]' \
            '--patch-with-stat[Synonym for -p --stat.]' \
            '-z[Separate the commits with NULs instead of with new newlines.]' \
            '--name-only[Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log(1) manual page.]' \
            '--name-status[Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8.]' \
            '--submodule[Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule(1) summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset.]' \
            '--color[Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto.]' \
            '--no-color[Turn off colored diff. It is the same as --color=never.]' \
            '--color-moved[Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:]' \
            '--no-color-moved[Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no.]' \
            '--color-moved-ws[This configures how whitespace is ignored when performing the move detection for --color-moved. These modes can be given as a comma separated list:]' \
            '--no-color-moved-ws[Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no.]' \
            '--word-diff[Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:]' \
            '--word-diff-regex[Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.]' \
            '--color-words[Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>.]' \
            '--no-renames[Turn off rename detection, even when the configuration file gives the default to do so.]' \
            '--rename-empty[Whether to use empty blobs as rename source.]' \
            '--no-rename-empty[Whether to use empty blobs as rename source.]' \
            '--check[Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.]' \
            '--ws-error-highlight[Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace.]' \
            '--full-index[Instead of the first handful of characters, show the full pre- and post-image blob object names on the "index" line when generating patch format output.]' \
            '--binary[In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch.]' \
            '--abbrev[Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>.]' \
            '(-M --find-renames)'{-M,--find-renames}'[If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see --follow. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%.]' \
            '(-C --find-copies)'{-C,--find-copies}'[Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>.]' \
            '--find-copies-harder[For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect.]' \
            '(-D --irreversible-delete)'{-D,--irreversible-delete}'[Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.]' \
            '-l[The -M and -C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.]' \
            '-S[Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.]' \
            '-G[Look for differences whose patch text contains added/removed lines that match <regex>.]' \
            '--find-object[Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.]' \
            '--pickaxe-all[When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.]' \
            '--pickaxe-regex[Treat the <string> given to -S as an extended POSIX regular expression to match.]' \
            '-O[Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config(1)). To cancel diff.orderFile, use -O/dev/null.]:file:_files' \
            '(--skip-to --rotate-to)'{--skip-to,--rotate-to}'[Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise.]:file:_files' \
            '-R[Swap two inputs; that is, show differences from index or on-disk file to tree contents.]' \
            '(--relative --no-relative)'{--relative,--no-relative}'[When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative.]:file:_files' \
            '(-a --text)'{-a,--text}'[Treat all files as text.]' \
            '--ignore-cr-at-eol[Ignore carriage-return at the end of line when doing a comparison.]' \
            '--ignore-space-at-eol[Ignore changes in whitespace at EOL.]' \
            '(-b --ignore-space-change)'{-b,--ignore-space-change}'[Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.]' \
            '(-w --ignore-all-space)'{-w,--ignore-all-space}'[Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.]' \
            '--ignore-blank-lines[Ignore changes whose lines are all blank.]' \
            '(-I --ignore-matching-lines)'{-I,--ignore-matching-lines}'[Ignore changes whose all lines match <regex>. This option may be specified more than once.]' \
            '--inter-hunk-context[Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset.]' \
            '(-W --function-context)'{-W,--function-context}'[Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes(5)).]' \
            '--ext-diff[Allow an external diff helper to be executed. If you set an external diff driver with gitattributes(5), you need to use this option with git-log(1) and friends.]' \
            '--no-ext-diff[Disallow external diff drivers.]' \
            '(--textconv --no-textconv)'{--textconv,--no-textconv}'[Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes(5) for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff(1) and git-log(1), but not for git-format-patch(1) or diff plumbing commands.]' \
            '--ignore-submodules[Ignore changes to submodules in the diff generation. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config(1) or gitmodules(5). When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using "all" hides all changes to submodules.]' \
            '--src-prefix[Show the given source prefix instead of "a/".]' \
            '--dst-prefix[Show the given destination prefix instead of "b/".]' \
            '--no-prefix[Do not show any source or destination prefix.]' \
            '--line-prefix[Prepend an additional prefix to every line of output.]' \
            '--ita-invisible-in-index[By default entries added by "git add -N" appear as an existing empty file in "git diff" and a new file in "git diff --cached". This option makes the entry appear as a new file in "git diff" and non-existent in "git diff --cached". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future.]' \
            "*: :_files"

    }

    function _git_status {
        _arguments \
            '(-s --short)'{-s,--short}'[Give the output in the short-format.]' \
            '(-b --branch)'{-b,--branch}'[Show the branch and tracking info even in short-format.]' \
            '--show-stash[Show the number of entries currently stashed away.]' \
            '--porcelain[Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.]' \
            '--long[Give the output in the long-format. This is the default.]' \
            '(-v --verbose)'{-v,--verbose}'[In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of git diff --cached). If -v is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of git diff).]' \
            '(-u --untracked-files)'{-u,--untracked-files}'[Show untracked files.]' \
            '--ignore-submodules[Ignore changes to submodules when looking for changes. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config(1) or gitmodules(5). When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior before 1.7.0). Using "all" hides all changes to submodules (and suppresses the output of submodule summaries when the config option status.submoduleSummary is set).]' \
            '--ignored[Show ignored files as well.]' \
            '-z[Terminate entries with NUL, instead of LF. This implies the --porcelain=v1 output format if no other format is given.]' \
            '(--column --no-column)'{--column,--no-column}'[Display untracked files in columns. See configuration variable column.status for option syntax. --column and --no-column without options are equivalent to always and never respectively.]' \
            '(--ahead-behind --no-ahead-behind)'{--ahead-behind,--no-ahead-behind}'[Display or do not display detailed ahead/behind counts for the branch relative to its upstream branch. Defaults to true.]' \
            '(--renames --no-renames)'{--renames,--no-renames}'[Turn on/off rename detection regardless of user configuration. See also git-diff(1) --no-renames.]' \
            '--find-renames[Turn on rename detection, optionally setting the similarity threshold. See also git-diff(1) --find-renames.]' \
            "*: :_files"

    }

    function _git_branch {
        _arguments \
            '(-d --delete)'{-d,--delete}'[Delete a branch. The branch must be fully merged in its upstream branch, or in HEAD if no upstream was set with --track or --set-upstream-to.]' \
            '-D[Shortcut for --delete --force.]' \
            '--create-reflog[Create the branch’s reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as "<branchname>@{yesterday}". Note that in non-bare repositories, reflogs are usually enabled by default by the core.logAllRefUpdates config option. The negated form --no-create-reflog only overrides an earlier --create-reflog, but currently does not negate the setting of core.logAllRefUpdates.]' \
            '(-f --force)'{-f,--force}'[Reset <branchname> to <startpoint>, even if <branchname> exists already. Without -f, git branch refuses to change an existing branch. In combination with -d (or --delete), allow deleting the branch irrespective of its merged status. In combination with -m (or --move), allow renaming the branch even if the new branch name already exists, the same applies for -c (or --copy).]' \
            '(-m --move)'{-m,--move}'[Move/rename a branch and the corresponding reflog.]' \
            '-M[Shortcut for --move --force.]' \
            '(-c --copy)'{-c,--copy}'[Copy a branch and the corresponding reflog.]' \
            '-C[Shortcut for --copy --force.]' \
            '--color[Color branches to highlight current, local, and remote-tracking branches. The value must be always (the default), never, or auto.]' \
            '--no-color[Turn off branch colors, even when the configuration file gives the default to color output. Same as --color=never.]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[Sorting and filtering branches are case insensitive.]' \
            '(--column --no-column)'{--column,--no-column}'[Display branch listing in columns. See configuration variable column.branch for option syntax. --column and --no-column without options are equivalent to always and never respectively.]' \
            '(-r --remotes)'{-r,--remotes}'[List or delete (if used with -d) the remote-tracking branches. Combine with --list to match the optional pattern(s).]' \
            '(-a --all)'{-a,--all}'[List both remote-tracking branches and local branches. Combine with --list to match optional pattern(s).]' \
            '(-l --list)'{-l,--list}'[List branches. With optional <pattern>..., e.g. git branch --list '\''maint-*'\'', list only the branches that match the pattern(s).]' \
            '--show-current[Print the name of the current branch. In detached HEAD state, nothing is printed.]' \
            '(-v -vv --verbose)'{-v,-vv,--verbose}'[When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the path of the linked worktree (if any) and the name of the upstream branch, as well (see also git remote show <remote>). Note that the current worktree’s HEAD will not have its path printed (it will always be your current directory).]' \
            '(-q --quiet)'{-q,--quiet}'[Be more quiet when creating or deleting a branch, suppressing non-error messages.]' \
            '--abbrev[In the verbose listing that show the commit object name, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. The default value is 7 and can be overridden by the core.abbrev config option.]' \
            '--no-abbrev[Display the full sha1s in the output listing rather than abbreviating them.]' \
            '(-t --track)'{-t,--track}'[When creating a new branch, set up branch.<name>.remote and branch.<name>.merge configuration entries to mark the start-point branch as "upstream" from the new branch. This configuration will tell git to show the relationship between the two branches in git status and git branch -v. Furthermore, it directs git pull without arguments to pull from the upstream when the new branch is checked out.]' \
            '--no-track[Do not set up "upstream" configuration, even if the branch.autoSetupMerge configuration variable is true.]' \
            '--set-upstream[As this option had confusing syntax, it is no longer supported. Please use --track or --set-upstream-to instead.]' \
            '(-u --set-upstream-to)'{-u,--set-upstream-to}'[Set up <branchname>'\''s tracking information so <upstream> is considered <branchname>'\''s upstream branch. If no <branchname> is specified, then it defaults to the current branch.]' \
            '--unset-upstream[Remove the upstream information for <branchname>. If no branch is specified it defaults to the current branch.]' \
            '--edit-description[Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g. format-patch, request-pull, and merge (if enabled)). Multi-line explanations may be used.]' \
            '--contains[Only list branches which contain the specified commit (HEAD if not specified). Implies --list.]' \
            '--no-contains[Only list branches which don’t contain the specified commit (HEAD if not specified). Implies --list.]' \
            '--merged[Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies --list.]' \
            '--no-merged[Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies --list.]' \
            '--sort[Sort based on the key given. Prefix - to sort in descending order of the value. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key. The keys supported are the same as those in git for-each-ref. Sort order defaults to the value configured for the branch.sort variable if exists, or to sorting based on the full refname (including refs/... prefix). This lists detached HEAD (if present) first, then local branches and finally remote-tracking branches. See gitconfig(1).]' \
            '--points-at[Only list branches of the given object.]' \
            '--format[A string that interpolates %(fieldname) from a branch ref being shown and the object it points at. The format is the same as that of git-for-each-ref(1).]' \
            "*: :_files"

    }

    function _git_commit {
        _arguments \
            '(-a --all)'{-a,--all}'[Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.]' \
            '(-p --patch)'{-p,--patch}'[Use the interactive patch selection interface to chose which changes to commit. See git-add(1) for details.]' \
            '(-C --reuse-message)'{-C,--reuse-message}'[Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.]' \
            '(-c --reedit-message)'{-c,--reedit-message}'[Like -C, but with -c the editor is invoked, so that the user can further edit the commit message.]' \
            '--fixup[Create a new commit which "fixes up" <commit> when applied with git rebase --autosquash. Plain --fixup=<commit> creates a "fixup!" commit which changes the content of <commit> but leaves its log message untouched. --fixup=amend:<commit> is similar but creates an "amend!" commit which also replaces the log message of <commit> with the log message of the "amend!" commit. --fixup=reword:<commit> creates an "amend!" commit which replaces the log message of <commit> with its own log message but makes no changes to the content of <commit>.]' \
            '--squash[Construct a commit message for use with rebase --autosquash. The commit message subject line is taken from the specified commit with a prefix of "squash! ". Can be used with additional commit message options (-m/-c/-C/-F). See git-rebase(1) for details.]' \
            '--reset-author[When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This also renews the author timestamp.]' \
            '--short[When doing a dry-run, give the output in the short-format. See git-status(1) for details. Implies --dry-run.]' \
            '--branch[Show the branch and tracking info even in short-format.]' \
            '--porcelain[When doing a dry-run, give the output in a porcelain-ready format. See git-status(1) for details. Implies --dry-run.]' \
            '--long[When doing a dry-run, give the output in the long-format. Implies --dry-run.]' \
            '(-z --null)'{-z,--null}'[When showing short or porcelain status output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the --porcelain output format. Without the -z option, filenames with "unusual" characters are quoted as explained for the configuration variable core.quotePath (see git-config(1)).]' \
            '(-F --file)'{-F,--file}'[Take the commit message from the given file. Use - to read the message from the standard input.]:file:_files' \
            '--author[Override the commit author. Specify an explicit author using the standard A U Thor <author@example.com> format. Otherwise <author> is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=<author>); the commit author is then copied from the first such commit found.]' \
            '--date[Override the author date used in the commit.]' \
            '(-m --message)'{-m,--message}'[Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.]' \
            '(-t --template)'{-t,--template}'[When editing the commit message, start the editor with the contents in the given file. The commit.template configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the -m or -F options.]:file:_files' \
            '(-s --signoff --no-signoff)'{-s,--signoff,--no-signoff}'[Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.]' \
            '--trailer[Specify a (<token>, <value>) pair that should be applied as a trailer. (e.g. git commit --trailer "Signed-off-by:C O Mitter \ <committer@example.com>" --trailer "Helped-by:C O Mitter \ <committer@example.com>" will add the "Signed-off-by" trailer and the "Helped-by" trailer to the commit message.) The trailer.* configuration variables (git-interpret-trailers(1)) can be used to define if a duplicated trailer is omitted, where in the run of trailers each trailer would appear, and other details.]' \
            '--trailer[Specify a (<token>, <value>) pair that should be applied as a trailer. (e.g. git commit --trailer "Signed-off-by:C O Mitter \ <committer@example.com>" --trailer "Helped-by:C O Mitter \ <committer@example.com>" will add the "Signed-off-by" trailer and the "Helped-by" trailer to the commit message.) The trailer.* configuration variables (git-interpret-trailers(1)) can be used to define if a duplicated trailer is omitted, where in the run of trailers each trailer would appear, and other details.]' \
            '(-n --no-verify)'{-n,--no-verify}'[This option bypasses the pre-commit and commit-msg hooks. See also githooks(5).]' \
            '--allow-empty[Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts.]' \
            '--allow-empty-message[Like --allow-empty this command is primarily for use by foreign SCM interface scripts. It allows you to create a commit with an empty commit message without using plumbing commands like git-commit-tree(1).]' \
            '--cleanup[This option determines how the supplied commit message should be cleaned up before committing. The <mode> can be strip, whitespace, verbatim, scissors or default.]' \
            '(-e --edit)'{-e,--edit}'[The message taken from file with -F, command line with -m, and from commit object with -C are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.]' \
            '--no-edit[Use the selected commit message without launching an editor. For example, git commit --amend --no-edit amends a commit without changing its commit message.]' \
            '--amend[Replace the tip of the current branch by creating a new commit. The recorded tree is prepared as usual (including the effect of the -i and -o options and explicit pathspec), and the message from the original commit is used as the starting point, instead of an empty message, when no other message is specified from the command line via options such as -m, -F, -c, etc. The new commit has the same parents and author as the current one (the --reset-author option can countermand this).]' \
            '--no-post-rewrite[Bypass the post-rewrite hook.]' \
            '(-i --include)'{-i,--include}'[Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge.]' \
            '(-o --only)'{-o,--only}'[Make a commit by taking the updated working tree contents of the paths specified on the command line, disregarding any contents that have been staged for other paths. This is the default mode of operation of git commit if any paths are given on the command line, in which case this option can be omitted. If this option is specified together with --amend, then no paths need to be specified, which can be used to amend the last commit without committing changes that have already been staged. If used together with --allow-empty paths are also not required, and an empty commit will be created.]' \
            '--pathspec-from-file[Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config(1)). See also --pathspec-file-nul and global --literal-pathspecs.]:file:_files' \
            '--pathspec-file-nul[Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).]' \
            '(-u --untracked-files)'{-u,--untracked-files}'[Show untracked files.]' \
            '(-v --verbose)'{-v,--verbose}'[Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has. Note that this diff output doesn’t have its lines prefixed with #. This diff will not be a part of the commit message. See the commit.verbose configuration variable in git-config(1).]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress commit summary message.]' \
            '--dry-run[Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked.]' \
            '--status[Include the output of git-status(1) in the commit message template when using an editor to prepare the commit message. Defaults to on, but can be used to override configuration variable commit.status.]' \
            '--no-status[Do not include the output of git-status(1) in the commit message template when using an editor to prepare the default commit message.]' \
            '(-S --gpg-sign --no-gpg-sign)'{-S,--gpg-sign,--no-gpg-sign}'[GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign.]' \
            '--[Do not interpret any more arguments as options.]' \
            "*: :_files"

    }

    function _git_merge {
        _arguments \
            '(--commit --no-commit)'{--commit,--no-commit}'[Perform the merge and commit the result. This option can be used to override --no-commit.]' \
            '(--edit -e --no-edit)'{--edit,-e,--no-edit}'[Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged). The --edit (or -e) option is still useful if you are giving a draft message with the -m option from the command line and want to edit it in the editor.]' \
            '--cleanup[This option determines how the merge message will be cleaned up before committing. See git-commit(1) for more details. In addition, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on to the commit machinery in the case of a merge conflict.]' \
            '(--ff --no-ff --ff-only)'{--ff,--no-ff,--ff-only}'[Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.]' \
            '(-S --gpg-sign --no-gpg-sign)'{-S,--gpg-sign,--no-gpg-sign}'[GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign.]' \
            '(--log --no-log)'{--log,--no-log}'[In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg(1).]' \
            '(--signoff --no-signoff)'{--signoff,--no-signoff}'[Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.]' \
            '(--stat -n --no-stat)'{--stat,-n,--no-stat}'[Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.]' \
            '(--squash --no-squash)'{--squash,--no-squash}'[Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).]' \
            '--no-verify[This option bypasses the pre-merge and commit-msg hooks. See also githooks(5).]' \
            '(-s --strategy)'{-s,--strategy}'[Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (git merge-recursive when merging a single head, git merge-octopus otherwise).]' \
            '(-X --strategy-option)'{-X,--strategy-option}'[Pass merge strategy specific option through to the merge strategy.]' \
            '(--verify-signatures --no-verify-signatures)'{--verify-signatures,--no-verify-signatures}'[Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.]' \
            '(--summary --no-summary)'{--summary,--no-summary}'[Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.]' \
            '(-q --quiet)'{-q,--quiet}'[Operate quietly. Implies --no-progress.]' \
            '(-v --verbose)'{-v,--verbose}'[Be verbose.]' \
            '(--progress --no-progress)'{--progress,--no-progress}'[Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.]' \
            '(--autostash --no-autostash)'{--autostash,--no-autostash}'[Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts.]' \
            '--allow-unrelated-histories[By default, git merge command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.]' \
            '-m[Set the commit message to be used for the merge commit (in case one is created).]' \
            '(-F --file)'{-F,--file}'[Read the commit message to be used for the merge commit (in case one is created).]:file:_files' \
            '(--rerere-autoupdate --no-rerere-autoupdate)'{--rerere-autoupdate,--no-rerere-autoupdate}'[Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.]' \
            '(--overwrite-ignore --no-overwrite-ignore)'{--overwrite-ignore,--no-overwrite-ignore}'[Silently overwrite ignored files from the merge result. This is the default behavior. Use --no-overwrite-ignore to abort.]' \
            '--abort[Abort the current conflict resolution process, and try to reconstruct the pre-merge state. If an autostash entry is present, apply it to the worktree.]' \
            '--quit[Forget about the current merge in progress. Leave the index and the working tree as-is. If MERGE_AUTOSTASH is present, the stash entry will be saved to the stash list.]' \
            '--continue[After a git merge stops due to conflicts you can conclude the merge by running git merge --continue (see "HOW TO RESOLVE CONFLICTS" section below).]' \
            "*: :_files"

    }

    function _git_rebase {
        _arguments \
            '--onto[Starting point at which to create the new commits. If the --onto option is not specified, the starting point is <upstream>. May be any valid commit, and not just an existing branch name.]' \
            '--keep-base[Set the starting point at which to create the new commits to the merge base of <upstream> <branch>. Running git rebase --keep-base <upstream> <branch> is equivalent to running git rebase --onto <upstream>... <upstream>.]' \
            '--continue[Restart the rebasing process after having resolved a merge conflict.]' \
            '--abort[Abort the rebase operation and reset HEAD to the original branch. If <branch> was provided when the rebase operation was started, then HEAD will be reset to <branch>. Otherwise HEAD will be reset to where it was when the rebase operation was started.]' \
            '--quit[Abort the rebase operation but HEAD is not reset back to the original branch. The index and working tree are also left unchanged as a result. If a temporary stash entry was created using --autostash, it will be saved to the stash list.]' \
            '--apply[Use applying strategies to rebase (calling git-am internally). This option may become a no-op in the future once the merge backend handles everything the apply one does.]' \
            '--empty[How to handle commits that are not empty to start and are not clean cherry-picks of any upstream commit, but which become empty after rebasing (because they contain a subset of already upstream changes). With drop (the default), commits that become empty are dropped. With keep, such commits are kept. With ask (implied by --interactive), the rebase will halt when an empty commit is applied allowing you to choose whether to drop it, edit files more, or just commit the empty changes. Other options, like --exec, will use the default of drop unless -i/--interactive is explicitly specified.]' \
            '(--no-keep-empty --keep-empty)'{--no-keep-empty,--keep-empty}'[Do not keep commits that start empty before the rebase (i.e. that do not change anything from its parent) in the result. The default is to keep commits which start empty, since creating such commits requires passing the --allow-empty override flag to git commit, signifying that a user is very intentionally creating such a commit and thus wants to keep it.]' \
            '(--reapply-cherry-picks --no-reapply-cherry-picks)'{--reapply-cherry-picks,--no-reapply-cherry-picks}'[Reapply all clean cherry-picks of any upstream commit instead of preemptively dropping them. (If these commits then become empty after rebasing, because they contain a subset of already upstream changes, the behavior towards them is controlled by the --empty flag.)]' \
            '--allow-empty-message[No-op. Rebasing commits with an empty message used to fail and this option would override that behavior, allowing commits with empty messages to be rebased. Now commits with an empty message do not cause rebasing to halt.]' \
            '--skip[Restart the rebasing process by skipping the current patch.]' \
            '--edit-todo[Edit the todo list during an interactive rebase.]' \
            '--show-current-patch[Show the current patch in an interactive rebase or when rebase is stopped because of conflicts. This is the equivalent of git show REBASE_HEAD.]' \
            '(-m --merge)'{-m,--merge}'[Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side. This is the default.]' \
            '(-s --strategy)'{-s,--strategy}'[Use the given merge strategy. If there is no -s option git merge-recursive is used instead. This implies --merge.]' \
            '(-X --strategy-option)'{-X,--strategy-option}'[Pass the <strategy-option> through to the merge strategy. This implies --merge and, if no strategy has been specified, -s recursive. Note the reversal of ours and theirs as noted above for the -m option.]' \
            '(--rerere-autoupdate --no-rerere-autoupdate)'{--rerere-autoupdate,--no-rerere-autoupdate}'[Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.]' \
            '(-S --gpg-sign --no-gpg-sign)'{-S,--gpg-sign,--no-gpg-sign}'[GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign.]' \
            '(-q --quiet)'{-q,--quiet}'[Be quiet. Implies --no-stat.]' \
            '(-v --verbose)'{-v,--verbose}'[Be verbose. Implies --stat.]' \
            '--stat[Show a diffstat of what changed upstream since the last rebase. The diffstat is also controlled by the configuration option rebase.stat.]' \
            '(-n --no-stat)'{-n,--no-stat}'[Do not show a diffstat as part of the rebase process.]' \
            '--no-verify[This option bypasses the pre-rebase hook. See also githooks(5).]' \
            '--verify[Allows the pre-rebase hook to run, which is the default. This option can be used to override --no-verify. See also githooks(5).]' \
            '-C[Ensure at least <n> lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored. Implies --apply.]' \
            '(--no-ff --force-rebase -f)'{--no-ff,--force-rebase,-f}'[Individually replay all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits.]' \
            '(--fork-point --no-fork-point)'{--fork-point,--no-fork-point}'[Use reflog to find a better common ancestor between <upstream> and <branch> when calculating which commits have been introduced by <branch>.]' \
            '--ignore-whitespace[Ignore whitespace differences when trying to reconcile differences. Currently, each backend implements an approximation of this behavior:]' \
            '--whitespace[This flag is passed to the git apply program (see git-apply(1)) that applies the patch. Implies --apply.]' \
            '--committer-date-is-author-date[Instead of using the current time as the committer date, use the author date of the commit being rebased as the committer date. This option implies --force-rebase.]' \
            '(--ignore-date --reset-author-date)'{--ignore-date,--reset-author-date}'[Instead of using the author date of the original commit, use the current time as the author date of the rebased commit. This option implies --force-rebase.]' \
            '--signoff[Add a Signed-off-by trailer to all the rebased commits. Note that if --interactive is given then only commits marked to be picked, edited or reworded will have the trailer added.]' \
            '(-i --interactive)'{-i,--interactive}'[Make a list of the commits which are about to be rebased. Let the user edit that list before rebasing. This mode can also be used to split commits (see SPLITTING COMMITS below).]' \
            '(-r --rebase-merges)'{-r,--rebase-merges}'[By default, a rebase will simply drop merge commits from the todo list, and put the rebased commits into a single, linear branch. With --rebase-merges, the rebase will instead try to preserve the branching structure within the commits that are to be rebased, by recreating the merge commits. Any resolved merge conflicts or manual amendments in these merge commits will have to be resolved/re-applied manually.]' \
            '(-p --preserve-merges)'{-p,--preserve-merges}'[\[DEPRECATED: use --rebase-merges instead\] Recreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved.]' \
            '(-x --exec)'{-x,--exec}'[Append "exec <cmd>" after each line creating a commit in the final history. <cmd> will be interpreted as one or more shell commands. Any command that fails will interrupt the rebase, with exit code 1.]' \
            '--root[Rebase all commits reachable from <branch>, instead of limiting them with an <upstream>. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in <newbase> (instead of <upstream>) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, all root commits will be rewritten to have <newbase> as parent instead.]' \
            '(--autosquash --no-autosquash)'{--autosquash,--no-autosquash}'[When the commit log message begins with "squash! ..." or "fixup! ..." or "amend! ...", and there is already a commit in the todo list that matches the same ..., automatically modify the todo list of rebase -i, so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash or fixup or fixup -C respectively. A commit matches the ... if the commit subject matches, or if the ... refers to the commit’s hash. As a fall-back, partial matches of the commit subject work, too. The recommended way to create fixup/amend/squash commits is by using the --fixup, --fixup=amend: or --fixup=reword: and --squash options respectively of git-commit(1).]' \
            '(--autostash --no-autostash)'{--autostash,--no-autostash}'[Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts.]' \
            '(--reschedule-failed-exec --no-reschedule-failed-exec)'{--reschedule-failed-exec,--no-reschedule-failed-exec}'[Automatically reschedule exec commands that failed. This only makes sense in interactive mode (or when an --exec option was provided).]' \
            "*: :_files"

    }

    function _git_reset {
        _arguments \
            '--soft[Does not touch the index file or the working tree at all (but resets the head to <commit>, just like]' \
            '--mixed[Resets the index but not the working tree (i.e., the changed files are preserved but not marked for]' \
            '--hard[Resets the index and working tree. Any changes to tracked files in the working tree since <commit> are]' \
            '--merge[Resets the index and updates the files in the working tree that are different between <commit> and]' \
            '--keep[Resets index entries and updates files in the working tree that are different between <commit> and]' \
            '--recurse-submodules[When the working tree is updated, using --recurse-submodules will also recursively reset the working tree of all active submodules according to the commit recorded in the superproject, also setting the submodules'\'' HEAD to be detached at that commit.]' \
            '--no-recurse-submodules[When the working tree is updated, using --recurse-submodules will also recursively reset the working tree of all active submodules according to the commit recorded in the superproject, also setting the submodules'\'' HEAD to be detached at that commit.]' \
            '(-q --quiet --no-quiet)'{-q,--quiet,--no-quiet}'[Be quiet, only report errors. The default behavior is set by the reset.quiet config option. --quiet and --no-quiet will override the default behavior.]' \
            '--pathspec-from-file[Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config(1)). See also --pathspec-file-nul and global --literal-pathspecs.]:file:_files' \
            '--pathspec-file-nul[Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).]' \
            '--[Do not interpret any more arguments as options.]' \
            "*: :_files"

    }

    function _git_switch {
        _arguments \
            '(-c --create)'{-c,--create}'[Create a new branch named <new-branch> starting at <start-point> before switching to the branch. This is a convenient shortcut for:]' \
            '(-C --force-create)'{-C,--force-create}'[Similar to --create except that if <new-branch> already exists, it will be reset to <start-point>. This is a convenient shortcut for:]' \
            '(-d --detach)'{-d,--detach}'[Switch to a commit for inspection and discardable experiments. See the "DETACHED HEAD" section in gitcheckout(1) for details.]' \
            '(--guess --no-guess)'{--guess,--no-guess}'[If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to]' \
            '(-f --force)'{-f,--force}'[An alias for --discard-changes.]' \
            '--discard-changes[Proceed even if the index or the working tree differs from HEAD. Both the index and working tree are restored to match the switching target. If --recurse-submodules is specified, submodule content is also restored to match the switching target. This is used to throw away local changes.]' \
            '(-m --merge)'{-m,--merge}'[If you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.]' \
            '--conflict[The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are "merge" (default) and "diff3" (in addition to what is shown by "merge" style, shows the original contents).]' \
            '(-q --quiet)'{-q,--quiet}'[Quiet, suppress feedback messages.]' \
            '(--progress --no-progress)'{--progress,--no-progress}'[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet.]' \
            '(-t --track)'{-t,--track}'[When creating a new branch, set up "upstream" configuration. -c is implied. See --track in git-branch(1) for details.]' \
            '--no-track[Do not set up "upstream" configuration, even if the branch.autoSetupMerge configuration variable is true.]' \
            '--orphan[Create a new orphan branch, named <new-branch>. All tracked files are removed.]' \
            '--ignore-other-worktrees[git switch refuses when the wanted ref is already checked out by another worktree. This option makes it check the ref out anyway. In other words, the ref can be held by more than one worktree.]' \
            '(--recurse-submodules --no-recurse-submodules)'{--recurse-submodules,--no-recurse-submodules}'[Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-submodule(1), this will detach HEAD of the submodules.]' \
            "*: :_files"

    }

    function _git_tag {
        _arguments \
            '(-a --annotate)'{-a,--annotate}'[Make an unsigned, annotated tag object]' \
            '(-s --sign)'{-s,--sign}'[Make a GPG-signed tag, using the default e-mail address’s key. The default behavior of tag GPG-signing is controlled by tag.gpgSign configuration variable if it exists, or disabled otherwise. See git-config(1).]' \
            '--no-sign[Override tag.gpgSign configuration variable that is set to force each and every tag to be signed.]' \
            '(-u --local-user)'{-u,--local-user}'[Make a GPG-signed tag, using the given key.]' \
            '(-f --force)'{-f,--force}'[Replace an existing tag with the given name (instead of failing)]' \
            '(-d --delete)'{-d,--delete}'[Delete existing tags with the given names.]' \
            '(-v --verify)'{-v,--verify}'[Verify the GPG signature of the given tag names.]' \
            '-n[<num> specifies how many lines from the annotation, if any, are printed when using -l. Implies --list.]' \
            '(-l --list)'{-l,--list}'[List tags. With optional <pattern>..., e.g. git tag --list '\''v-*'\'', list only the tags that match the pattern(s).]' \
            '--sort[Sort based on the key given. Prefix - to sort in descending order of the value. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key. Also supports "version:refname" or "v:refname" (tag names are treated as versions). The "version:refname" sort order can also be affected by the "versionsort.suffix" configuration variable. The keys supported are the same as those in git for-each-ref. Sort order defaults to the value configured for the tag.sort variable if it exists, or lexicographic order otherwise. See git-config(1).]' \
            '--color[Respect any colors specified in the --format option. The <when> field must be one of always, never, or auto (if <when> is absent, behave as if always was given).]' \
            '(-i --ignore-case)'{-i,--ignore-case}'[Sorting and filtering tags are case insensitive.]' \
            '(--column --no-column)'{--column,--no-column}'[Display tag listing in columns. See configuration variable column.tag for option syntax. --column and --no-column without options are equivalent to always and never respectively.]' \
            '--contains[Only list tags which contain the specified commit (HEAD if not specified). Implies --list.]' \
            '--no-contains[Only list tags which don’t contain the specified commit (HEAD if not specified). Implies --list.]' \
            '--merged[Only list tags whose commits are reachable from the specified commit (HEAD if not specified).]' \
            '--no-merged[Only list tags whose commits are not reachable from the specified commit (HEAD if not specified).]' \
            '--points-at[Only list tags of the given object (HEAD if not specified). Implies --list.]' \
            '(-m --message)'{-m,--message}'[Use the given tag message (instead of prompting). If multiple -m options are given, their values are concatenated as separate paragraphs. Implies -a if none of -a, -s, or -u <keyid> is given.]' \
            '(-F --file)'{-F,--file}'[Take the tag message from the given file. Use - to read the message from the standard input. Implies -a if none of -a, -s, or -u <keyid> is given.]:file:_files' \
            '(-e --edit)'{-e,--edit}'[The message taken from file with -F and command line with -m are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources.]' \
            '--cleanup[This option sets how the tag message is cleaned up. The <mode> can be one of verbatim, whitespace and strip. The strip mode is default. The verbatim mode does not change message at all, whitespace removes just leading/trailing whitespace lines and strip removes both whitespace and commentary.]' \
            '--create-reflog[Create a reflog for the tag. To globally enable reflogs for tags, see core.logAllRefUpdates in gitconfig(1). The negated form --no-create-reflog only overrides an earlier --create-reflog, but currently does not negate the setting of core.logAllRefUpdates.]' \
            '--format[A string that interpolates %(fieldname) from a tag ref being shown and the object it points at. The format is the same as that of git-for-each-ref(1). When unspecified, defaults to %(refname:strip=2).]' \
            "*: :_files"

    }

    function _git_fetch {
        _arguments \
            '--all[Fetch all remotes.]' \
            '(-a --append)'{-a,--append}'[Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten.]' \
            '--atomic[Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated.]' \
            '--depth[Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a shallow repository created by git clone with --depth=<depth> option (see git-clone(1)), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched.]' \
            '--deepen[Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history.]' \
            '--shallow-since[Deepen or shorten the history of a shallow repository to include all reachable commits after <date>.]' \
            '--shallow-exclude[Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times.]' \
            '--unshallow[If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.]' \
            '--update-shallow[By default when fetching from a shallow repository, git fetch refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs.]' \
            '--negotiation-tip[By default, Git will report, to the server, commits reachable from all local refs to find common commits in an attempt to reduce the size of the to-be-received packfile. If specified, Git will only report commits reachable from the given tips. This is useful to speed up fetches when the user knows which local ref is likely to have commits in common with the upstream ref being fetched.]' \
            '--dry-run[Show what would be done, without making any changes.]' \
            '--write-fetch-head[Write the list of remote refs fetched in the FETCH_HEAD file directly under $GIT_DIR. This is the default. Passing --no-write-fetch-head from the command line tells Git not to write the file. Under --dry-run option, the file is never written.]' \
            '--no-write-fetch-head[Write the list of remote refs fetched in the FETCH_HEAD file directly under $GIT_DIR. This is the default. Passing --no-write-fetch-head from the command line tells Git not to write the file. Under --dry-run option, the file is never written.]' \
            '(-f --force)'{-f,--force}'[When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part below. This option overrides that check.]' \
            '(-k --keep)'{-k,--keep}'[Keep downloaded pack.]' \
            '--multiple[Allow several <repository> and <group> arguments to be specified. No <refspec>s may be specified.]' \
            '--write-commit-graph[Write a commit-graph after fetching. This overrides the config setting fetch.writeCommitGraph.]' \
            '--no-write-commit-graph[Write a commit-graph after fetching. This overrides the config setting fetch.writeCommitGraph.]' \
            '--prefetch[Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance(1).]' \
            '(-p --prune)'{-p,--prune}'[Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec.]' \
            '(-P --prune-tags)'{-P,--prune-tags}'[Before fetching, remove any local tags that no longer exist on the remote if --prune is enabled. This option should be used more carefully, unlike --prune it will remove any local references (local tags) that have been created. This option is a shorthand for providing the explicit tag refspec along with --prune, see the discussion about that in its documentation.]' \
            '(-n --no-tags)'{-n,--no-tags}'[By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config(1).]' \
            '--refmap[When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote repository. Providing an empty <refspec> to the --refmap option causes Git to ignore the configured refspecs and rely entirely on the refspecs supplied as command-line arguments. See section on "Configured Remote-tracking Branches" for details.]' \
            '(-t --tags)'{-t,--tags}'[Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune).]' \
            '--recurse-submodules[This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to no or to unconditionally recurse into all populated submodules when set to yes, which is the default when this option is used without any value. Use on-demand to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule’s reference to a commit that isn’t already in the local submodule clone. By default, on-demand is used, unless fetch.recurseSubmodules is set (see gitconfig(1)).]' \
            '(-j --jobs)'{-j,--jobs}'[Number of parallel children to be used for all forms of fetching.]' \
            '--no-recurse-submodules[Disable recursive fetching of submodules (this has the same effect as using the --recurse-submodules=no option).]' \
            '--set-upstream[If the remote is fetched successfully, add upstream (tracking) reference, used by argument-less gitpull(1) and other commands. For more information, see branch.<name>.merge and branch.<name>.remote in gitconfig(1).]' \
            '--submodule-prefix[Prepend <path> to paths printed in informative messages such as "Fetching submodule foo". This option is used internally when recursing over submodules.]:file:_files' \
            '--recurse-submodules-default[This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch’s submodule recursion (such as settings in gitmodules(5) and git-config(1)) override this option, as does specifying --\[no-\]recurse-submodules directly.]' \
            '(-u --update-head-ok)'{-u,--update-head-ok}'[By default git fetch refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for git pull to communicate with git fetch, and unless you are implementing your own Porcelain you are not supposed to use it.]' \
            '--upload-pack[When given, and the repository to fetch from is handled by git fetch-pack, --exec=<upload-pack> is passed to the command to specify non-default path for the command run on the other end.]' \
            '(-q --quiet)'{-q,--quiet}'[Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream.]' \
            '(-v --verbose)'{-v,--verbose}'[Be verbose.]' \
            '--progress[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.]' \
            '(-o --server-option)'{-o,--server-option}'[Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line.]' \
            '--show-forced-updates[By default, git checks if a branch is force-updated during fetch. This can be disabled through fetch.showForcedUpdates, but the --show-forced-updates option guarantees this check occurs. See gitconfig(1).]' \
            '--no-show-forced-updates[By default, git checks if a branch is force-updated during fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates to false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates before attempting a fast-forward update. See gitconfig(1).]' \
            '(-4 --ipv4)'{-4,--ipv4}'[Use IPv4 addresses only, ignoring IPv6 addresses.]' \
            '(-6 --ipv6)'{-6,--ipv6}'[Use IPv6 addresses only, ignoring IPv4 addresses.]' \
            '--stdin[Read refspecs, one per line, from stdin in addition to those provided as arguments. The "tag <name>" format is not supported.]' \
            "*: :_files"

    }

    function _git_pull {
        _arguments \
            '(-q --quiet)'{-q,--quiet}'[This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging.]' \
            '(-v --verbose)'{-v,--verbose}'[Pass --verbose to git-fetch and git-merge.]' \
            '(--commit --no-commit)'{--commit,--no-commit}'[Perform the merge and commit the result. This option can be used to override --no-commit.]' \
            '(--edit -e --no-edit)'{--edit,-e,--no-edit}'[Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged).]' \
            '--cleanup[This option determines how the merge message will be cleaned up before committing. See git-commit(1) for more details. In addition, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on to the commit machinery in the case of a merge conflict.]' \
            '(--ff --no-ff --ff-only)'{--ff,--no-ff,--ff-only}'[Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.]' \
            '(-S --gpg-sign --no-gpg-sign)'{-S,--gpg-sign,--no-gpg-sign}'[GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign.]' \
            '(--log --no-log)'{--log,--no-log}'[In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg(1).]' \
            '(--signoff --no-signoff)'{--signoff,--no-signoff}'[Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.]' \
            '(--stat -n --no-stat)'{--stat,-n,--no-stat}'[Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.]' \
            '(--squash --no-squash)'{--squash,--no-squash}'[Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).]' \
            '--no-verify[This option bypasses the pre-merge and commit-msg hooks. See also githooks(5).]' \
            '(-s --strategy)'{-s,--strategy}'[Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (git merge-recursive when merging a single head, git merge-octopus otherwise).]' \
            '(-X --strategy-option)'{-X,--strategy-option}'[Pass merge strategy specific option through to the merge strategy.]' \
            '(--verify-signatures --no-verify-signatures)'{--verify-signatures,--no-verify-signatures}'[Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.]' \
            '(--summary --no-summary)'{--summary,--no-summary}'[Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.]' \
            '(--autostash --no-autostash)'{--autostash,--no-autostash}'[Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts.]' \
            '--allow-unrelated-histories[By default, git merge command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.]' \
            '(-r --rebase)'{-r,--rebase}'[When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes.]' \
            '--no-rebase[Override earlier --rebase.]' \
            '--all[Fetch all remotes.]' \
            '(-a --append)'{-a,--append}'[Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten.]' \
            '--atomic[Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated.]' \
            '--depth[Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a shallow repository created by git clone with --depth=<depth> option (see git-clone(1)), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched.]' \
            '--deepen[Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history.]' \
            '--shallow-since[Deepen or shorten the history of a shallow repository to include all reachable commits after <date>.]' \
            '--shallow-exclude[Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times.]' \
            '--unshallow[If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.]' \
            '--update-shallow[By default when fetching from a shallow repository, git fetch refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs.]' \
            '--negotiation-tip[By default, Git will report, to the server, commits reachable from all local refs to find common commits in an attempt to reduce the size of the to-be-received packfile. If specified, Git will only report commits reachable from the given tips. This is useful to speed up fetches when the user knows which local ref is likely to have commits in common with the upstream ref being fetched.]' \
            '--dry-run[Show what would be done, without making any changes.]' \
            '(-f --force)'{-f,--force}'[When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part of the git-fetch(1) documentation. This option overrides that check.]' \
            '(-k --keep)'{-k,--keep}'[Keep downloaded pack.]' \
            '--prefetch[Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance(1).]' \
            '(-p --prune)'{-p,--prune}'[Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec.]' \
            '--no-tags[By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config(1).]' \
            '--refmap[When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote repository. Providing an empty <refspec> to the --refmap option causes Git to ignore the configured refspecs and rely entirely on the refspecs supplied as command-line arguments. See section on "Configured Remote-tracking Branches" for details.]' \
            '(-t --tags)'{-t,--tags}'[Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune).]' \
            '(-j --jobs)'{-j,--jobs}'[Number of parallel children to be used for all forms of fetching.]' \
            '--set-upstream[If the remote is fetched successfully, add upstream (tracking) reference, used by argument-less gitpull(1) and other commands. For more information, see branch.<name>.merge and branch.<name>.remote in gitconfig(1).]' \
            '--upload-pack[When given, and the repository to fetch from is handled by git fetch-pack, --exec=<upload-pack> is passed to the command to specify non-default path for the command run on the other end.]' \
            '--progress[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.]' \
            '(-o --server-option)'{-o,--server-option}'[Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line.]' \
            '--show-forced-updates[By default, git checks if a branch is force-updated during fetch. This can be disabled through fetch.showForcedUpdates, but the --show-forced-updates option guarantees this check occurs. See gitconfig(1).]' \
            '--no-show-forced-updates[By default, git checks if a branch is force-updated during fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates to false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates before attempting a fast-forward update. See gitconfig(1).]' \
            '(-4 --ipv4)'{-4,--ipv4}'[Use IPv4 addresses only, ignoring IPv6 addresses.]' \
            '(-6 --ipv6)'{-6,--ipv6}'[Use IPv6 addresses only, ignoring IPv4 addresses.]' \
            "*: :_files"

    }

    function _git_push {
        _arguments \
            '--all[Push all branches (i.e. refs under refs/heads/); cannot be used with other <refspec>.]' \
            '--prune[Remove remote branches that don’t have a local counterpart. For example a remote branch tmp will be removed if a local branch with the same name doesn’t exist any more. This also respects refspecs, e.g. git push --prune remote refs/heads/*:refs/tmp/* would make sure that remote refs/tmp/foo will be removed if refs/heads/foo doesn’t exist.]' \
            '--mirror[Instead of naming each ref to push, specifies that all refs under refs/ (which includes but is not limited to refs/heads/, refs/remotes/, and refs/tags/) be mirrored to the remote repository. Newly created local refs will be pushed to the remote end, locally updated refs will be force updated on the remote end, and deleted refs will be removed from the remote end. This is the default if the configuration option remote.<remote>.mirror is set.]' \
            '(-n --dry-run)'{-n,--dry-run}'[Do everything except actually send the updates.]' \
            '--porcelain[Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given.]' \
            '(-d --delete)'{-d,--delete}'[All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon.]' \
            '--tags[All refs under refs/tags are pushed, in addition to refspecs explicitly listed on the command line.]' \
            '--follow-tags[Push all the refs that would be pushed without this option, and also push annotated tags in refs/tags that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed. This can also be specified with configuration variable push.followTags. For more information, see push.followTags in git-config(1).]' \
            '--signed[GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If false or --no-signed, no signing will be attempted. If true or --signed, the push will fail if the server does not support signed pushes. If set to if-asked, sign if and only if the server supports signed pushes. The push will also fail if the actual call to gpg --sign fails. See git-receivepack(1) for the details on the receiving end.]' \
            '(--no-signed --signed)'{--no-signed,--signed}'[GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If false or --no-signed, no signing will be attempted. If true or --signed, the push will fail if the server does not support signed pushes. If set to if-asked, sign if and only if the server supports signed pushes. The push will also fail if the actual call to gpg --sign fails. See git-receivepack(1) for the details on the receiving end.]' \
            '--atomic[Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.]' \
            '--no-atomic[Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.]' \
            '(-o --push-option)'{-o,--push-option}'[Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple --push-option=<option> are given, they are all sent to the other side in the order listed on the command line. When no --push-option=<option> is given from the command line, the values of configuration variable push.pushOption are used instead.]' \
            '(--receive-pack --exec)'{--receive-pack,--exec}'[Path to the git-receive-pack program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.]' \
            '--force-with-lease[Usually, "git push" refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.]' \
            '(--no-force-with-lease --force-with-lease)'{--no-force-with-lease,--force-with-lease}'[Usually, "git push" refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.]' \
            '(-f --force)'{-f,--force}'[Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when --force-with-lease option is used, the command refuses to update a remote ref whose current value does not match what is expected.]' \
            '--force-if-includes[Force an update only if the tip of the remote-tracking ref has been integrated locally.]' \
            '--no-force-if-includes[Force an update only if the tip of the remote-tracking ref has been integrated locally.]' \
            '--repo[This option is equivalent to the <repository> argument. If both are specified, the command-line argument takes precedence.]' \
            '(-u --set-upstream)'{-u,--set-upstream}'[For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull(1) and other commands. For more information, see branch.<name>.merge in gitconfig(1).]' \
            '--thin[These options are passed to git-send-pack(1). A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin.]' \
            '--no-thin[These options are passed to git-send-pack(1). A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin.]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream.]' \
            '(-v --verbose)'{-v,--verbose}'[Run verbosely.]' \
            '--progress[Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.]' \
            '(--no-recurse-submodules --recurse-submodules)'{--no-recurse-submodules,--recurse-submodules}'[May be used to make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If check is used Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing the push will be aborted and exit with non-zero status. If on-demand is used all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. If only is used all submodules will be recursively pushed while the superproject is left unpushed. A value of no or using --no-recurse-submodules can be used to override the push.recurseSubmodules configuration variable when no submodule recursion is required.]' \
            '--verify[Toggle the pre-push hook (see githooks(5)). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.]' \
            '--no-verify[Toggle the pre-push hook (see githooks(5)). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.]' \
            '(-4 --ipv4)'{-4,--ipv4}'[Use IPv4 addresses only, ignoring IPv6 addresses.]' \
            '(-6 --ipv6)'{-6,--ipv6}'[Use IPv6 addresses only, ignoring IPv4 addresses.]' \
            "*: :_files"

    }


function _git {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clone:Clone a repository into a new directory'
            'init:Create an empty Git repository or reinitialize an existing one'
            'add:Add file contents to the index'
            'mv:Move or rename a file, a directory, or a symlink'
            'restore:Restore working tree files'
            'rm:Remove files from the working tree and from the index'
            'sparse-checkout:Initialize and modify the sparse-checkout'
            'bisect:Use binary search to find the commit that introduced a bug'
            'diff:Show changes between commits, commit and working tree, etc'
            'grep:Print lines matching a pattern'
            'log:Show commit logs'
            'show:Show various types of objects'
            'status:Show the working tree status'
            'branch:List, create, or delete branches'
            'commit:Record changes to the repository'
            'merge:Join two or more development histories together'
            'rebase:Reapply commits on top of another base tip'
            'reset:Reset current HEAD to the specified state'
            'switch:Switch branches'
            'tag:Create, list, delete or verify a tag object signed with GPG'
            'fetch:Download objects and refs from another repository'
            'pull:Fetch from and integrate with another repository or a local branch'
            'push:Update remote refs along with associated objects'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clone)
            _git_clone
            ;;

        (init)
            _git_init
            ;;

        (add)
            _git_add
            ;;

        (mv)
            _git_mv
            ;;

        (restore)
            _git_restore
            ;;

        (rm)
            _git_rm
            ;;

        (sparse-checkout)
            _git_sparse-checkout
            ;;

        (bisect)
            _git_bisect
            ;;

        (diff)
            _git_diff
            ;;

        (grep)
            _git_grep
            ;;

        (log)
            _git_log
            ;;

        (show)
            _git_show
            ;;

        (status)
            _git_status
            ;;

        (branch)
            _git_branch
            ;;

        (commit)
            _git_commit
            ;;

        (merge)
            _git_merge
            ;;

        (rebase)
            _git_rebase
            ;;

        (reset)
            _git_reset
            ;;

        (switch)
            _git_switch
            ;;

        (tag)
            _git_tag
            ;;

        (fetch)
            _git_fetch
            ;;

        (pull)
            _git_pull
            ;;

        (push)
            _git_push
            ;;

        esac
        ;;
     esac

}

