#compdef _go go

# Auto-generated with h2o

    function _go_build {
        _arguments \
            '-a[force rebuilding of packages that are already up-to-date.]' \
            '-n[print the commands but do not run them.]' \
            '-p[the number of programs, such as build commands or test binaries, that can be run in parallel. The default is GOMAXPROCS, normally the number of CPUs available.]' \
            '-race[enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA).]' \
            '-msan[enable interoperation with memory sanitizer. Supported only on linux/amd64, linux/arm64 and only with Clang/LLVM as the host C compiler. On linux/arm64, pie build mode will be used.]' \
            '-v[print the names of packages as they are compiled.]' \
            '-work[print the name of the temporary work directory and do not delete it when exiting.]' \
            '-x[print the commands.]' \
            '-asmflags[arguments to pass on each go tool asm invocation.]' \
            '-buildmode[build mode to use. See '\''go help buildmode'\'' for more.]' \
            '-compiler[name of compiler to use, as in runtime.Compiler (gccgo or gc).]' \
            '-gccgoflags[arguments to pass on each gccgo compiler/linker invocation.]' \
            '-gcflags[arguments to pass on each go tool compile invocation.]' \
            '-installsuffix[a suffix to use in the name of the package installation directory, in order to keep output separate from default builds. If using the -race flag, the install suffix is automatically set to race or, if set explicitly, has _race appended to it. Likewise for the -msan flag. Using a -buildmode option that requires non-default compile flags has a similar effect.]' \
            '-ldflags[arguments to pass on each go tool link invocation.]' \
            '-linkshared[build code that will be linked against shared libraries previously created with -buildmode=shared.]' \
            '-mod[module download mode to use: readonly, vendor, or mod. By default, if a vendor directory is present and the go version in go.mod is 1.14 or higher, the go command acts as if -mod=vendor were set. Otherwise, the go command acts as if -mod=readonly were set. See https://golang.org/ref/mod#build-commands for details.]' \
            '-modcacherw[leave newly-created directories in the module cache read-write instead of making them read-only.]' \
            '-modfile[in module aware mode, read (and possibly write) an alternate go.mod file instead of the one in the module root directory. A file named "go.mod" must still be present in order to determine the module root directory, but it is not accessed. When -modfile is specified, an alternate go.sum file is also used: its path is derived from the -modfile flag by trimming the ".mod" extension and appending ".sum".]':file:_files \
            '-overlay[read a JSON config file that provides an overlay for build operations. The file is a JSON struct with a single field, named '\''Replace'\'', that maps each disk file path (a string) to its backing file path, so that a build will run as if the disk file path exists with the contents given by the backing file paths, or as if the disk file path does not exist if its backing file path is empty. Support for the -overlay flag has some limitations: importantly, cgo files included from outside the include path must be in the same directory as the Go package they are included from, and overlays will not appear when binaries and tests are run through go run and go test respectively.]':file:_files \
            '-pkgdir[install and load all packages from dir instead of the usual locations. For example, when building with a non-standard configuration, use -pkgdir to keep generated packages in a separate location.]':file:_files \
            '-tags[a comma-separated list of build tags to consider satisfied during the build. For more information about build tags, see the description of build constraints in the documentation for the go/build package. (Earlier versions of Go used a space-separated list, and that form is deprecated but still recognized.)]' \
            '-trimpath[remove all file system paths from the resulting executable. Instead of absolute file system paths, the recorded file names will begin with either "go" (for the standard library), or a module path@version (when using modules), or a plain import path (when using GOPATH).]' \
            '-toolexec[a program to use to invoke toolchain programs like vet and asm. For example, instead of running asm, the go command will run '\''cmd args /path/to/asm <arguments for asm>'\''. The TOOLEXEC_IMPORTPATH environment variable will be set, matching '\''go list -f {{.ImportPath}}'\'' for the package being built.]' \
            "*: :_files"

    }

    function _go_clean {
        _arguments \
            "*: :_files"

    }

    function _go_doc {
        _arguments \
            '-all[show all documentation for package]' \
            '-c[symbol matching honors case (paths not affected)]' \
            '-cmd[show symbols with package docs even if package is a command]' \
            '-short[one-line representation for each symbol]' \
            '-src[show source code for symbol]' \
            '-u[show unexported symbols as well as exported]' \
            "*: :_files"

    }

    function _go_generate {
        _arguments \
            '-run[if non-empty, specifies a regular expression to select directives whose full original source text (excluding any trailing spaces and final newline) matches the expression.]' \
            "*: :_files"

    }

    function _go_get {
        _arguments \
            "*: :_files"

    }

    function _go_install {
        _arguments \
            "*: :_files"

    }

    function _go_list {
        _arguments \
            "*: :_files"

    }

    function _go_mod {
        _arguments \
            "*: :_files"

    }

    function _go_test {
        _arguments \
            '-args[Pass the remainder of the command line (everything after -args) to the test binary, uninterpreted and unchanged. Because this flag consumes the remainder of the command line, the package list (if present) must appear before this flag.]' \
            '-c[Compile the test binary to pkg.test but do not run it (where pkg is the last element of the package'\''s import path). The file name can be changed with the -o flag.]' \
            '-exec[Run the test binary using xprog. The behavior is the same as in '\''go run'\''. See '\''go help run'\'' for details.]' \
            '-i[Install packages that are dependencies of the test. Do not run the test. The -i flag is deprecated. Compiled packages are cached automatically.]' \
            '-json[Convert test output to JSON suitable for automated processing. See '\''go doc test2json'\'' for the encoding details.]' \
            '-o[Compile the test binary to the named file. The test still runs (unless -c or -i is specified).]':file:_files \
            "*: :_files"

    }

    function _go_buildconstraint {
        _arguments \
            '-[the target operating system, as spelled by runtime.GOOS, set with the GOOS environment variable.]' \
            '-[the target architecture, as spelled by runtime.GOARCH, set with the GOARCH environment variable.]' \
            '-[the compiler being used, either "gc" or "gccgo"]' \
            '-["cgo", if the cgo command is supported (see CGO_ENABLED in '\''go help environment'\'').]' \
            '-[a term for each Go major release, through the current version: "go1.1" from Go version 1.1 onward, "go1.12" from Go 1.12, and so on.]' \
            '-[any additional tags given by the -tags flag (see '\''go help build'\'').]' \
            "*: :_files"

    }

    function _go_buildmode {
        _arguments \
            '-buildmode[Build the listed non-main packages into .a files. Packages named main are ignored.]' \
            '-buildmode[Build the listed main package, plus all packages it imports, into a C archive file. The only callable symbols will be those functions exported using a cgo //export comment. Requires exactly one main package to be listed.]' \
            '-buildmode[Build the listed main package, plus all packages it imports, into a C shared library. The only callable symbols will be those functions exported using a cgo //export comment. Requires exactly one main package to be listed.]' \
            '-buildmode[Listed main packages are built into executables and listed non-main packages are built into .a files (the default behavior).]' \
            '-buildmode[Combine all the listed non-main packages into a single shared library that will be used when building with the -linkshared option. Packages named main are ignored.]' \
            '-buildmode[Build the listed main packages and everything they import into executables. Packages not named main are ignored.]' \
            '-buildmode[Build the listed main packages and everything they import into position independent executables (PIE). Packages not named main are ignored.]' \
            '-buildmode[Build the listed main packages, plus all packages that they import, into a Go plugin. Packages not named main are ignored.]' \
            "*: :_files"

    }

    function _go_environment {
        _arguments \
            "*: :_files"

    }

    function _go_filetype {
        _arguments \
            "*: :_files"

    }

    function _go_gopath {
        _arguments \
            "*: :_files"

    }

    function _go_importpath {
        _arguments \
            "*: :_files"

    }

    function _go_module-get {
        _arguments \
            "*: :_files"

    }

    function _go_packages {
        _arguments \
            "*: :_files"

    }

    function _go_testflag {
        _arguments \
            '-bench[Run only those benchmarks matching a regular expression. By default, no benchmarks are run. To run all benchmarks, use '\''-bench .'\'' or '\''-bench=.'\''. The regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a benchmark'\''s identifier must match the corresponding element in the sequence, if any. Possible parents of matches are run with b.N=1 to identify sub-benchmarks. For example, given -bench=X/Y, top-level benchmarks matching X are run with b.N=1 to find any sub-benchmarks matching Y, which are then run in full.]' \
            '-benchtime[Run enough iterations of each benchmark to take t, specified as a time.Duration (for example, -benchtime 1h30s). The default is 1 second (1s). The special syntax Nx means to run the benchmark N times (for example, -benchtime 100x).]' \
            '-count[Run each test and benchmark n times (default 1). If -cpu is set, run n times for each GOMAXPROCS value. Examples are always run once.]' \
            '-cover[Enable coverage analysis. Note that because coverage works by annotating the source code before compilation, compilation and test failures with coverage enabled may report line numbers that don'\''t correspond to the original sources.]' \
            '-covermode[Set the mode for coverage analysis for the package\[s\] being tested. The default is "set" unless -race is enabled, in which case it is "atomic". The values:]' \
            '-coverpkg[Apply coverage analysis in each test to packages matching the patterns. The default is for each test to analyze only the package being tested. See '\''go help packages'\'' for a description of package patterns. Sets -cover.]' \
            '-cpu[Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed. The default is the current value of GOMAXPROCS.]' \
            '-failfast[Do not start new tests after the first test failure.]' \
            '-list[List tests, benchmarks, or examples matching the regular expression. No tests, benchmarks or examples will be run. This will only list top-level tests. No subtest or subbenchmarks will be shown.]' \
            '-parallel[Allow parallel execution of test functions that call t.Parallel. The value of this flag is the maximum number of tests to run simultaneously; by default, it is set to the value of GOMAXPROCS. Note that -parallel only applies within a single test binary. The '\''go test'\'' command may run tests for different packages in parallel as well, according to the setting of the -p flag (see '\''go help build'\'').]' \
            '-run[Run only those tests and examples matching the regular expression. For tests, the regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a test'\''s identifier must match the corresponding element in the sequence, if any. Note that possible parents of matches are run too, so that -run=X/Y matches and runs and reports the result of all tests matching X, even those without sub-tests matching Y, because it must run them to look for those sub-tests.]' \
            '-short[Tell long-running tests to shorten their run time. It is off by default but set during all.bash so that installing the Go tree can run a sanity check but not spend time running exhaustive tests.]' \
            '-timeout[If a test binary runs longer than duration d, panic. If d is 0, the timeout is disabled. The default is 10 minutes (10m).]' \
            '-v[Verbose output: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds.]' \
            '-vet[Configure the invocation of "go vet" during "go test" to use the comma-separated list of vet checks. If list is empty, "go test" runs "go vet" with a curated list of checks believed to be always worth addressing. If list is "off", "go test" does not run "go vet" at all.]' \
            '-benchmem[Print memory allocation statistics for benchmarks.]' \
            '-blockprofile[Write a goroutine blocking profile to the specified file when all tests are complete. Writes test binary as -c would.]' \
            '-blockprofilerate[Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate with n. See '\''go doc runtime.SetBlockProfileRate'\''. The profiler aims to sample, on average, one blocking event every n nanoseconds the program spends blocked. By default, if -test.blockprofile is set without this flag, all blocking events are recorded, equivalent to -test.blockprofilerate=1.]' \
            '-coverprofile[Write a coverage profile to the file after all tests have passed. Sets -cover.]' \
            '-cpuprofile[Write a CPU profile to the specified file before exiting. Writes test binary as -c would.]' \
            '-memprofile[Write an allocation profile to the file after all tests have passed. Writes test binary as -c would.]' \
            '-memprofilerate[Enable more precise (and expensive) memory allocation profiles by setting runtime.MemProfileRate. See '\''go doc runtime.MemProfileRate'\''. To profile all memory allocations, use -test.memprofilerate=1.]' \
            '-mutexprofile[Write a mutex contention profile to the specified file when all tests are complete. Writes test binary as -c would.]' \
            '-mutexprofilefraction[Sample 1 in n stack traces of goroutines holding a contended mutex.]' \
            '-outputdir[Place output files from profiling in the specified directory, by default the directory in which "go test" is running.]':file:_files \
            '-trace[Write an execution trace to the specified file before exiting.]' \
            "*: :_files"

    }

    function _go_testfunc {
        _arguments \
            "*: :_files"

    }


function _go {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:compile packages and dependencies'
            'clean:remove object files and cached files'
            'doc:show documentation for package or symbol'
            'generate:generate Go files by processing source'
            'get:add dependencies to current module and install them'
            'install:compile and install packages and dependencies'
            'list:list packages or modules'
            'mod:module maintenance'
            'test:test packages'
            'buildconstraint:build constraints'
            'buildmode:build modes'
            'environment:environment variables'
            'filetype:file types'
            'gopath:GOPATH environment variable'
            'importpath:import path syntax'
            'module-get:module-aware go get'
            'packages:package lists and patterns'
            'testflag:testing flags'
            'testfunc:testing functions'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _go_build
            ;;

        (clean)
            _go_clean
            ;;

        (doc)
            _go_doc
            ;;

        (generate)
            _go_generate
            ;;

        (get)
            _go_get
            ;;

        (install)
            _go_install
            ;;

        (list)
            _go_list
            ;;

        (mod)
            _go_mod
            ;;

        (test)
            _go_test
            ;;

        (buildconstraint)
            _go_buildconstraint
            ;;

        (buildmode)
            _go_buildmode
            ;;

        (environment)
            _go_environment
            ;;

        (filetype)
            _go_filetype
            ;;

        (gopath)
            _go_gopath
            ;;

        (importpath)
            _go_importpath
            ;;

        (module-get)
            _go_module-get
            ;;

        (packages)
            _go_packages
            ;;

        (testflag)
            _go_testflag
            ;;

        (testfunc)
            _go_testfunc
            ;;

        esac
        ;;
     esac

}

