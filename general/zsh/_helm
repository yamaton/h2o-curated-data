#compdef _helm helm

# Auto-generated with h2o

    function _helm_completion {
        _arguments \
            {-h,--help}'[help for completion]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_create {
        _arguments \
            {-h,--help}'[help for create]' \
            {-p,--starter}'[the name or absolute path to Helm starter scaffold]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_dependency {
        _arguments \
            '-[name: nginx version: "1.2.3" repository: "file://../dependency_chart/nginx"]' \
            {-h,--help}'[help for dependency]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_env {
        _arguments \
            {-h,--help}'[help for env]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_get {
        _arguments \
            {-h,--help}'[help for get]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_history {
        _arguments \
            {-h,--help}'[help for history]' \
            '--max[maximum number of revision to include in history (default 256)]' \
            {-o,--output}'[prints the output in the specified format. Allowed values: table, json, yaml (default table)]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_install {
        _arguments \
            '--atomic[if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used]' \
            '--ca-file[verify certificates of HTTPS-enabled servers using this CA bundle]' \
            '--cert-file[identify HTTPS client using this SSL certificate file]' \
            '--create-namespace[create the release namespace if not present]' \
            '--dependency-update[update dependencies if they are missing before installing the chart]' \
            '--description[add a custom description]' \
            '--devel[use development versions, too. Equivalent to version '\''>0.0.0-0'\''. If --version is set, this is ignored]' \
            '--disable-openapi-validation[if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema]' \
            '--dry-run[simulate an install]' \
            {-g,--generate-name}'[generate the name (and omit the NAME parameter)]' \
            {-h,--help}'[help for install]' \
            '--insecure-skip-tls-verify[skip tls certificate checks for the chart download]' \
            '--key-file[identify HTTPS client using this SSL key file]' \
            '--keyring[location of public keys used for verification (default "~/.gnupg/pubring.gpg")]' \
            '--name-template[specify template used to name the release]' \
            '--no-hooks[prevent hooks from running during install]' \
            {-o,--output}'[prints the output in the specified format. Allowed values: table, json, yaml (default table)]' \
            '--pass-credentials[pass credentials to all domains]' \
            '--password[chart repository password where to locate the requested chart]' \
            '--post-renderer[the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path]' \
            '--post-renderer-args[an argument to the post-renderer (can specify multiple) (default \[\])]' \
            '--render-subchart-notes[if set, render subchart notes along with the parent]' \
            '--replace[re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production]' \
            '--repo[chart repository url where to locate the requested chart]' \
            '--set[set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--set-file[set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)]' \
            '--set-string[set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--skip-crds[if set, no CRDs will be installed. By default, CRDs are installed if not already present]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--username[chart repository username where to locate the requested chart]' \
            {-f,--values}'[specify values in a YAML file or a URL (can specify multiple)]' \
            '--verify[verify the package before using it]' \
            '--version[specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used]' \
            '--wait[if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout]' \
            '--wait-for-jobs[if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_lint {
        _arguments \
            {-h,--help}'[help for lint]' \
            '--quiet[print only warnings and errors]' \
            '--set[set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--set-file[set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)]' \
            '--set-string[set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--strict[fail on lint warnings]' \
            {-f,--values}'[specify values in a YAML file or a URL (can specify multiple)]' \
            '--with-subcharts[lint dependent charts]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_list {
        _arguments \
            {-a,--all}'[show all releases without any filter applied]' \
            {-A,--all-namespaces}'[list releases across all namespaces]' \
            {-d,--date}'[sort by release date]' \
            '--deployed[show deployed releases. If no other is specified, this will be automatically enabled]' \
            '--failed[show failed releases]' \
            {-f,--filter}'[a regular expression (Perl compatible). Any releases that match the expression will be included in the results]' \
            {-h,--help}'[help for list]' \
            {-m,--max}'[maximum number of releases to fetch (default 256)]' \
            '--offset[next release index in the list, used to offset from start value]' \
            {-o,--output}'[prints the output in the specified format. Allowed values: table, json, yaml (default table)]' \
            '--pending[show pending releases]' \
            {-r,--reverse}'[reverse the sort order]' \
            {-l,--selector}'[Selector (label query) to filter on, supports '\''='\'', '\''=='\'', and '\''!='\''.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.]' \
            {-q,--short}'[output short (quiet) listing format]' \
            '--superseded[show superseded releases]' \
            '--time-format[format time using golang time formatter. Example: --time-format "2006-01-02 15:04:05Z0700"]' \
            '--uninstalled[show uninstalled releases (if '\''helm uninstall --keep-history'\'' was used)]' \
            '--uninstalling[show releases that are currently being uninstalled]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_package {
        _arguments \
            '--app-version[set the appVersion on the chart to this version]' \
            {-u,--dependency-update}'[update dependencies from "Chart.yaml" to dir "charts/" before packaging]' \
            {-d,--destination}'[location to write the chart. (default ".")]' \
            {-h,--help}'[help for package]' \
            '--key[name of the key to use when signing. Used if --sign is true]' \
            '--keyring[location of a public keyring (default "~/.gnupg/pubring.gpg")]' \
            '--passphrase-file[location of a file which contains the passphrase for the signing key. Use "-" in order to read from stdin.]' \
            '--sign[use a PGP private key to sign this package]' \
            '--version[set the version on the chart to this semver version]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_plugin {
        _arguments \
            {-h,--help}'[help for plugin]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_pull {
        _arguments \
            '--ca-file[verify certificates of HTTPS-enabled servers using this CA bundle]' \
            '--cert-file[identify HTTPS client using this SSL certificate file]' \
            {-d,--destination}'[location to write the chart. If this and untardir are specified, untardir is appended to this (default ".")]' \
            '--devel[use development versions, too. Equivalent to version '\''>0.0.0-0'\''. If --version is set, this is ignored.]' \
            {-h,--help}'[help for pull]' \
            '--insecure-skip-tls-verify[skip tls certificate checks for the chart download]' \
            '--key-file[identify HTTPS client using this SSL key file]' \
            '--keyring[location of public keys used for verification (default "~/.gnupg/pubring.gpg")]' \
            '--pass-credentials[pass credentials to all domains]' \
            '--password[chart repository password where to locate the requested chart]' \
            '--prov[fetch the provenance file, but don'\''t perform verification]' \
            '--repo[chart repository url where to locate the requested chart]' \
            '--untar[if set to true, will untar the chart after downloading it]' \
            '--untardir[if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default ".")]' \
            '--username[chart repository username where to locate the requested chart]' \
            '--verify[verify the package before using it]' \
            '--version[specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_push {
        _arguments \
            {-h,--help}'[help for push]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_registry {
        _arguments \
            {-h,--help}'[help for registry]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_repo {
        _arguments \
            {-h,--help}'[help for repo]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_rollback {
        _arguments \
            '--cleanup-on-fail[allow deletion of new resources created in this rollback when rollback fails]' \
            '--dry-run[simulate a rollback]' \
            '--force[force resource update through delete/recreate if needed]' \
            {-h,--help}'[help for rollback]' \
            '--history-max[limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)]' \
            '--no-hooks[prevent hooks from running during rollback]' \
            '--recreate-pods[performs pods restart for the resource if applicable]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--wait[if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout]' \
            '--wait-for-jobs[if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_search {
        _arguments \
            {-h,--help}'[help for search]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_show {
        _arguments \
            {-h,--help}'[help for show]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_status {
        _arguments \
            {-h,--help}'[help for status]' \
            {-o,--output}'[prints the output in the specified format. Allowed values: table, json, yaml (default table)]' \
            '--revision[if set, display the status of the named release with revision]' \
            '--show-desc[if set, display the description message of the named release]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_template {
        _arguments \
            {-a,--api-versions}'[Kubernetes api versions used for Capabilities.APIVersions]' \
            '--atomic[if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used]' \
            '--ca-file[verify certificates of HTTPS-enabled servers using this CA bundle]' \
            '--cert-file[identify HTTPS client using this SSL certificate file]' \
            '--create-namespace[create the release namespace if not present]' \
            '--dependency-update[update dependencies if they are missing before installing the chart]' \
            '--description[add a custom description]' \
            '--devel[use development versions, too. Equivalent to version '\''>0.0.0-0'\''. If --version is set, this is ignored]' \
            '--disable-openapi-validation[if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema]' \
            '--dry-run[simulate an install]' \
            {-g,--generate-name}'[generate the name (and omit the NAME parameter)]' \
            {-h,--help}'[help for template]' \
            '--include-crds[include CRDs in the templated output]' \
            '--insecure-skip-tls-verify[skip tls certificate checks for the chart download]' \
            '--is-upgrade[set .Release.IsUpgrade instead of .Release.IsInstall]' \
            '--key-file[identify HTTPS client using this SSL key file]' \
            '--keyring[location of public keys used for verification (default "~/.gnupg/pubring.gpg")]' \
            '--kube-version[Kubernetes version used for Capabilities.KubeVersion]' \
            '--name-template[specify template used to name the release]' \
            '--no-hooks[prevent hooks from running during install]' \
            '--output-dir[writes the executed templates to files in output-dir instead of stdout]' \
            '--pass-credentials[pass credentials to all domains]' \
            '--password[chart repository password where to locate the requested chart]' \
            '--post-renderer[the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path]' \
            '--post-renderer-args[an argument to the post-renderer (can specify multiple) (default \[\])]' \
            '--release-name[use release name in the output-dir path.]' \
            '--render-subchart-notes[if set, render subchart notes along with the parent]' \
            '--replace[re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production]' \
            '--repo[chart repository url where to locate the requested chart]' \
            '--set[set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--set-file[set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)]' \
            '--set-string[set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            {-s,--show-only}'[only show manifests rendered from the given templates]' \
            '--skip-crds[if set, no CRDs will be installed. By default, CRDs are installed if not already present]' \
            '--skip-tests[skip tests from templated output]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--username[chart repository username where to locate the requested chart]' \
            '--validate[validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install]' \
            {-f,--values}'[specify values in a YAML file or a URL (can specify multiple)]' \
            '--verify[verify the package before using it]' \
            '--version[specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used]' \
            '--wait[if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout]' \
            '--wait-for-jobs[if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_test {
        _arguments \
            '--filter[specify tests by attribute (currently "name") using attribute=value syntax or '\''!attribute=value'\'' to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)]' \
            {-h,--help}'[help for test]' \
            '--logs[dump the logs from test pods (this runs after all tests are complete, but before any cleanup)]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_uninstall {
        _arguments \
            '--description[add a custom description]' \
            '--dry-run[simulate a uninstall]' \
            {-h,--help}'[help for uninstall]' \
            '--keep-history[remove all associated resources and mark the release as deleted, but retain the release history]' \
            '--no-hooks[prevent hooks from running during uninstallation]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--wait[if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_upgrade {
        _arguments \
            '--atomic[if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used]' \
            '--ca-file[verify certificates of HTTPS-enabled servers using this CA bundle]' \
            '--cert-file[identify HTTPS client using this SSL certificate file]' \
            '--cleanup-on-fail[allow deletion of new resources created in this upgrade when upgrade fails]' \
            '--create-namespace[if --install is set, create the release namespace if not present]' \
            '--dependency-update[update dependencies if they are missing before installing the chart]' \
            '--description[add a custom description]' \
            '--devel[use development versions, too. Equivalent to version '\''>0.0.0-0'\''. If --version is set, this is ignored]' \
            '--disable-openapi-validation[if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema]' \
            '--dry-run[simulate an upgrade]' \
            '--force[force resource updates through a replacement strategy]' \
            {-h,--help}'[help for upgrade]' \
            '--history-max[limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)]' \
            '--insecure-skip-tls-verify[skip tls certificate checks for the chart download]' \
            {-i,--install}'[if a release by this name doesn'\''t already exist, run an install]' \
            '--key-file[identify HTTPS client using this SSL key file]' \
            '--keyring[location of public keys used for verification (default "~/.gnupg/pubring.gpg")]' \
            '--no-hooks[disable pre/post upgrade hooks]' \
            {-o,--output}'[prints the output in the specified format. Allowed values: table, json, yaml (default table)]' \
            '--pass-credentials[pass credentials to all domains]' \
            '--password[chart repository password where to locate the requested chart]' \
            '--post-renderer[the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path]' \
            '--post-renderer-args[an argument to the post-renderer (can specify multiple) (default \[\])]' \
            '--render-subchart-notes[if set, render subchart notes along with the parent]' \
            '--repo[chart repository url where to locate the requested chart]' \
            '--reset-values[when upgrading, reset the values to the ones built into the chart]' \
            '--reuse-values[when upgrading, reuse the last release'\''s values and merge in any overrides from the command line via --set and -f. If '\''--reset-values'\'' is specified, this is ignored]' \
            '--set[set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--set-file[set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)]' \
            '--set-string[set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
            '--skip-crds[if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled]' \
            '--timeout[time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)]' \
            '--username[chart repository username where to locate the requested chart]' \
            {-f,--values}'[specify values in a YAML file or a URL (can specify multiple)]' \
            '--verify[verify the package before using it]' \
            '--version[specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used]' \
            '--wait[if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout]' \
            '--wait-for-jobs[if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_verify {
        _arguments \
            {-h,--help}'[help for verify]' \
            '--keyring[keyring containing public keys (default "~/.gnupg/pubring.gpg")]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }

    function _helm_version {
        _arguments \
            {-h,--help}'[help for version]' \
            '--short[print the version number]' \
            '--template[template for version string format]' \
            '--debug[enable verbose output]' \
            '--kube-apiserver[the address and the port for the Kubernetes API server]' \
            '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
            '--kube-as-user[username to impersonate for the operation]' \
            '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
            '--kube-context[name of the kubeconfig context to use]' \
            '--kube-token[bearer token used for authentication]' \
            '--kubeconfig[path to the kubeconfig file]' \
            {-n,--namespace}'[namespace scope for this request]' \
            '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
            '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
            '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
            "*: :_files"

    }


function _helm {
    local line state

    function _commands {
        local -a commands
        commands=(
            'completion:generate autocompletion scripts for the specified shell'
            'create:create a new chart with the given name'
            'dependency:manage a chart'\''s dependencies'
            'env:helm client environment information'
            'get:download extended information of a named release'
            'history:fetch release history'
            'install:install a chart'
            'lint:examine a chart for possible issues'
            'list:list releases'
            'package:package a chart directory into a chart archive'
            'plugin:install, list, or uninstall Helm plugins'
            'pull:download a chart from a repository and (optionally) unpack it in local directory'
            'push:push a chart to remote'
            'registry:login to or logout from a registry'
            'repo:add, list, remove, update, and index chart repositories'
            'rollback:roll back a release to a previous revision'
            'search:search for a keyword in charts'
            'show:show information of a chart'
            'status:display the status of the named release'
            'template:locally render templates'
            'test:run tests for a release'
            'uninstall:uninstall a release'
            'upgrade:upgrade a release'
            'verify:verify that a chart at the given path has been signed and is valid'
            'version:print the client version information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--debug[enable verbose output]' \
        {-h,--help}'[help for helm]' \
        '--kube-apiserver[the address and the port for the Kubernetes API server]' \
        '--kube-as-group[group to impersonate for the operation, this flag can be repeated to specify multiple groups.]' \
        '--kube-as-user[username to impersonate for the operation]' \
        '--kube-ca-file[the certificate authority file for the Kubernetes API server connection]' \
        '--kube-context[name of the kubeconfig context to use]' \
        '--kube-token[bearer token used for authentication]' \
        '--kubeconfig[path to the kubeconfig file]' \
        {-n,--namespace}'[namespace scope for this request]' \
        '--registry-config[path to the registry config file (default "~/.config/helm/registry/config.json")]' \
        '--repository-cache[path to the file containing cached repository indexes (default "~/.cache/helm/repository")]' \
        '--repository-config[path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (completion)
            _helm_completion
            ;;

        (create)
            _helm_create
            ;;

        (dependency)
            _helm_dependency
            ;;

        (env)
            _helm_env
            ;;

        (get)
            _helm_get
            ;;

        (history)
            _helm_history
            ;;

        (install)
            _helm_install
            ;;

        (lint)
            _helm_lint
            ;;

        (list)
            _helm_list
            ;;

        (package)
            _helm_package
            ;;

        (plugin)
            _helm_plugin
            ;;

        (pull)
            _helm_pull
            ;;

        (push)
            _helm_push
            ;;

        (registry)
            _helm_registry
            ;;

        (repo)
            _helm_repo
            ;;

        (rollback)
            _helm_rollback
            ;;

        (search)
            _helm_search
            ;;

        (show)
            _helm_show
            ;;

        (status)
            _helm_status
            ;;

        (template)
            _helm_template
            ;;

        (test)
            _helm_test
            ;;

        (uninstall)
            _helm_uninstall
            ;;

        (upgrade)
            _helm_upgrade
            ;;

        (verify)
            _helm_verify
            ;;

        (version)
            _helm_version
            ;;

        esac
        ;;
     esac

}

