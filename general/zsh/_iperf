#compdef _iperf iperf

# Auto-generated with h2o


function _iperf {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-b,--bandwidth}'[bandwidth to read/send at in bits/sec or packets/sec]' \
        {-e,--enhanced}'[use enhanced reporting giving more tcp/udp and traffic information]' \
        {-f,--format}'[format to report: Kbits, Mbits, KBytes, MBytes]' \
        '--hide-ips[hide ip addresses and host names within outputs]' \
        {-i,--interval}'[seconds between periodic bandwidth reports]' \
        {-l,--len}'[length of buffer in bytes to read or write (Defaults: TCP=128K, v4 UDP=1470, v6 UDP=1450)]' \
        {-m,--print_mss}'[print TCP maximum segment size (MTU - TCP/IP header)]' \
        {-o,--output}'[output the report or error message to this specified file]':file:_files \
        {-p,--port}'[client/server port to listen/send on and to connect]' \
        '--permit-key[permit key to be used to verify client and server (TCP only)]' \
        '--sum-only[output sum only reports]' \
        {-u,--udp}'[use UDP rather than TCP]' \
        {-w,--window}'[TCP window size (socket buffer size)]' \
        {-z,--realtime}'[request realtime scheduler]' \
        {-B,--bind}'[bind to <host>, ip addr (including multicast address) and optional port and device]' \
        {-C,--compatibility}'[for use with older versions does not sent extra msgs]' \
        {-M,--mss}'[set TCP maximum segment size (MTU - 40 bytes)]' \
        {-N,--nodelay}'[set TCP no delay, disabling Nagle'\''s Algorithm]' \
        {-S,--tos}'[set the socket'\''s IP_TOS (byte) field]' \
        {-Z,--tcp-congestion}'[set TCP congestion control algorithm (Linux only)]' \
        {-p,--port}'[server port(s) to listen on/connect to]' \
        {-s,--server}'[run in server mode]' \
        {-1,--singleclient}'[run one server at a time]' \
        '--histograms[enable latency histograms]' \
        '--permit-key-timeout[set the timeout for a permit key in seconds]' \
        '--tcp-rx-window-clamp[set the TCP receive window clamp size in bytes]' \
        '--tap-dev[use TAP device to receive at L2 layer]' \
        {-t,--time}'[time in seconds to listen for new connections as well as to receive traffic (default not set)]' \
        '--udp-histogram[enable UDP latency histogram(s) with bin width and count, e.g. 1,1000=1(ms),1000(bins)]' \
        {-B,--bind}'[bind to multicast address and optional device]' \
        {-U,--single_udp}'[run in single threaded UDP mode]' \
        '--sum-dstip[sum traffic threads based upon destination ip address (default is src ip)]' \
        {-D,--daemon}'[run the server as a daemon]' \
        {-V,--ipv6_domain}'[Enable IPv6 reception by setting the domain and socket to AF_INET6 (Can receive on both IPv4 and IPv6)]' \
        {-c,--client}'[run in client mode, connecting to <host>]' \
        '--connect-only[run a connect only test]' \
        '--connect-retries[number of times to retry tcp connect]' \
        {-d,--dualtest}'[Do a bidirectional test simultaneously (multiple sockets)]' \
        '--fq-rate[bandwidth to socket pacing]' \
        '--full-duplex[run full duplex test using same socket]' \
        '--ipg[set the the interpacket gap (milliseconds) for packets within an isochronous frame]' \
        '--isochronous[send traffic in bursts (frames - emulate video traffic)]' \
        '--incr-dstip[Increment the destination ip with parallel (-P) traffic threads]' \
        '--incr-dstport[Increment the destination port with parallel (-P) traffic threads]' \
        '--incr-srcip[Increment the source ip with parallel (-P) traffic threads]' \
        '--incr-srcport[Increment the source port with parallel (-P) traffic threads]' \
        '--local-only[Set don'\''t route on socket]' \
        '--near-congestion[Use a weighted write delay per the sampled TCP RTT (experimental)]' \
        '--no-connect-sync[No sychronization after connect when -P or parallel traffic threads]' \
        '--no-udp-fin[No final server to client stats at end of UDP test]' \
        {-n,--num}'[number of bytes to transmit (instead of -t)]' \
        {-r,--tradeoff}'[Do a fullduplexectional test individually]' \
        '--tcp-write-prefetch[set the socket'\''s TCP_NOTSENT_LOWAT value in bytes and use event based writes]' \
        {-t,--time}'[time in seconds to transmit for (default 10 secs)]' \
        '--trip-times[enable end to end measurements (requires client and server clock sync)]' \
        '--txdelay-time[time in seconds to hold back after connect and before first write]' \
        '--txstart-time[unix epoch time to schedule first write and start traffic]' \
        {-B,--bind}'[bind ip (and optional port) from which to source traffic]' \
        {-F,--fileinput}'[input the data to be transmitted from a file]' \
        {-H,--ssm-host}'[set the SSM source, use with -B for (S,G)]' \
        {-I,--stdin}'[input the data to be transmitted from stdin]' \
        {-L,--listenport}'[port to receive fullduplexectional tests back on]' \
        {-P,--parallel}'[number of parallel client threads to run]' \
        {-R,--reverse}'[reverse the test (client receives, server sends)]' \
        {-S,--tos}'[IP DSCP or tos settings]' \
        {-T,--ttl}'[time-to-live, for multicast (default 1)]' \
        {-V,--ipv6_domain}'[Set the domain to IPv6 (send packets over IPv6)]' \
        {-X,--peer-detect}'[perform server version detection and version exchange]' \
        {-x,--reportexclude}'[exclude C(connection) D(data) M(multicast) S(settings) V(server) reports]' \
        {-y,--reportstyle}'[report as a Comma-Separated Values]' \
        {-h,--help}'[print this message and quit]' \
        {-v,--version}'[print version information and quit]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

