#compdef _julia julia

# Auto-generated with h2o


function _julia {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-v,--version}'[Display version information]' \
        {-h,--help}'[Print this message (--help-hidden for more)]' \
        '--help-hidden[Uncommon options not shown by `-h`]' \
        '--project[Set <dir> as the home project/environment]':file:_files \
        {-J,--sysimage}'[Start up with the given system image file]':file:_files \
        {-H,--home}'[Set location of `julia` executable]':file:_files \
        '--startup-file[Load `JULIA_DEPOT_PATH/config/startup.jl`; if `JULIA_DEPOT_PATH` environment variable is unset, load `~/.julia/config/startup.jl`]' \
        '--handle-signals[Enable or disable Julia'\''s default signal handlers]' \
        '--sysimage-native-code[Use native code from system image if available]' \
        '--compiled-modules[Enable or disable incremental precompilation of modules]' \
        {-e,--eval}'[Evaluate <expr>]' \
        {-E,--print}'[Evaluate <expr> and display the result]' \
        {-L,--load}'[Load <file> immediately on all processors]':file:_files \
        {-t,--threads}'[Enable N threads; "auto" currently sets N to the number of local CPU threads but this might change in the future]' \
        {-p,--procs}'[Integer value N launches N additional local worker processes "auto" launches as many workers as the number of local CPU threads (logical cores)]' \
        '--machine-file[Run processes on hosts listed in <file>]':file:_files \
        '-i[Interactive mode; REPL runs and `isinteractive()` is true]' \
        {-q,--quiet}'[Quiet startup: no banner, suppress REPL warnings]' \
        '--banner[Enable or disable startup banner]' \
        '--color[Enable or disable color text]' \
        '--history-file[Load or save history]' \
        '--depwarn[Enable or disable syntax and method deprecation warnings (`error` turns warnings into errors)]' \
        '--warn-overwrite[Enable or disable method overwrite warnings]' \
        '--warn-scope[Enable or disable warning for ambiguous top-level scope]' \
        {-C,--cpu-target}'[Limit usage of CPU features up to <target>; set to `help` to see the available options]' \
        {-O,--optimize}'[Set the optimization level (level 3 if `-O` is used without a level)]' \
        '--min-optlevel[Set a lower bound on the optimization level]' \
        '-g[Set the level of debug info generation (level 2 if `-g` is used without a level)]' \
        '--inline[Control whether inlining is permitted, including overriding @inline declarations]' \
        '--check-bounds[Emit bounds checks always, never, or respect @inbounds declarations]' \
        '--math-mode[Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)]' \
        '--code-coverage[Count executions of source lines (omitting setting is equivalent to `user`)]' \
        '--code-coverage[Count executions but only in files that fall under the given file path/directory. The `@` prefix is required to select this option. A `@` with no path will track the current directory.]':file:_files \
        '--code-coverage[Append coverage information to the LCOV tracefile (filename supports format tokens)]':file:_files \
        '--track-allocation[Count bytes allocated by each source line (omitting setting is equivalent to `user`)]' \
        '--track-allocation[Count bytes but only in files that fall under the given file path/directory. The `@` prefix is required to select this option. A `@` with no path will track the current directory.]':file:_files \
        '--bug-report[Launch a bug report session. It can be used to start a REPL, run a script, or evaluate expressions. It first tries to use BugReporting.jl installed in current environment and fallbacks to the latest compatible BugReporting.jl if not. For more information, see --bug-report=help.]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

