#compdef _jupyter jupyter

# Auto-generated with h2o

    function _jupyter_bundlerextension {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--user[Apply the operation only for the given user Equivalent to: \[--BaseExtensionApp.user=True\]]' \
            '--system[Apply the operation system-wide Equivalent to: \[--BaseExtensionApp.user=False --BaseExtensionApp.sys_prefix=False\]]' \
            '--sys-prefix[Use sys.prefix as the prefix for installing nbextensions (for environments, packaging) Equivalent to: \[--BaseExtensionApp.sys_prefix=True\]]' \
            '--py[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--python[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_console {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--existing[Connect to an existing kernel. If no argument specified, guess most recent Equivalent to: \[--JupyterConsoleApp.existing=kernel*.json\]]' \
            '--confirm-exit[Set to display confirmation dialog on exit. You can always use '\''exit'\'' or]' \
            '--no-confirm-exit[Don'\''t prompt the user when exiting. This will terminate the kernel]' \
            '--simple-prompt[Force simple minimal prompt using `raw_input` Equivalent to: \[--ZMQTerminalInteractiveShell.simple_prompt=True\]]' \
            '--no-simple-prompt[Use a rich interactive prompt with prompt_toolkit Equivalent to: \[--ZMQTerminalInteractiveShell.simple_prompt=False\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--ip[Set the kernel'\''s IP address \[default localhost\].]' \
            '--transport[Choices: any of \['\''tcp'\'', '\''ipc'\''\] (case-insensitive) Default: '\''tcp'\'' Equivalent to: \[--JupyterConsoleApp.transport\]]' \
            '--hb[set the heartbeat port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.hb_port\]]' \
            '--shell[set the shell (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.shell_port\]]' \
            '--iopub[set the iopub (PUB) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.iopub_port\]]' \
            '--stdin[set the stdin (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.stdin_port\]]' \
            '--control[set the control (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.control_port\]]' \
            '--existing[Connect to an already running kernel Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.existing\]]' \
            '-f[JSON file in which to store connection info \[default: kernel-<pid>.json\]]' \
            '--kernel[The name of the default kernel to start. Default: '\''python'\'' Equivalent to: \[--JupyterConsoleApp.kernel_name\]]' \
            '--ssh[The SSH server to use to connect to the kernel. Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.sshserver\]]' \
            "*: :_files"

    }

    function _jupyter_execute {
        _arguments \
            '--allow-errors[Errors are ignored and execution is continued until the end of the notebook. Equivalent to: \[--NbClientApp.allow_errors=True\]]' \
            '--timeout[The time to wait (in seconds) for output from executions. If a cell execution takes longer, a TimeoutError is raised. ``-1`` will disable the timeout. Default: None Equivalent to: \[--NbClientApp.timeout\]]' \
            '--startup_timeout[The time to wait (in seconds) for the kernel to start. If kernel startup takes longer, a RuntimeError is raised. Default: 60 Equivalent to: \[--NbClientApp.startup_timeout\]]' \
            '--kernel_name[Name of kernel to use to execute the cells. If not set, use the kernel_spec embedded in the notebook. Default: '\'''\'' Equivalent to: \[--NbClientApp.kernel_name\]]' \
            "*: :_files"

    }

    function _jupyter_kernel {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--kernel[The name of a kernel type to start Default: '\''python3'\'' Equivalent to: \[--KernelApp.kernel_name\]]' \
            '--ip[Set the kernel'\''s IP address \[default localhost\].]' \
            "*: :_files"

    }

    function _jupyter_kernelspec {
        _arguments \
            "*: :_files"

    }

    function _jupyter_lab {
        _arguments \
            '--debug[Set debug level for the extension and underlying server applications. Equivalent to: \[--ServerApp.log_level=DEBUG --ExtensionApp.log_level=DEBUG\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--allow-root[Allow the server to be run from root user. Equivalent to: \[--ServerApp.allow_root=True\]]' \
            '--no-browser[Prevent the opening of the default url in the browser. Equivalent to: \[--ServerApp.open_browser=False --ExtensionApp.open_browser=False\]]' \
            '--autoreload[Autoreload the webapp]' \
            '--script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=True\]]' \
            '--no-script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=False\]]' \
            '--core-mode[Start the app in core mode. Equivalent to: \[--LabApp.core_mode=True\]]' \
            '--dev-mode[Start the app in dev mode for running from source. Equivalent to: \[--LabApp.dev_mode=True\]]' \
            '--watch[Start the app in watch mode. Equivalent to: \[--LabApp.watch=True\]]' \
            '--splice-source[Splice source packages into app directory. Equivalent to: \[--LabApp.splice_source=True\]]' \
            '--expose-app-in-browser[Expose the global app instance to browser via window.jupyterapp.]' \
            '--extensions-in-dev-mode[Load prebuilt extensions in dev-mode. Equivalent to: \[--LabApp.extensions_in_dev_mode=True\]]' \
            '--collaborative[Whether to enable collaborative mode. Equivalent to: \[--LabApp.collaborative=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--ip[The IP address the Jupyter server will listen on. Default: '\''localhost'\'' Equivalent to: \[--ServerApp.ip\]]' \
            '--port[The port the server will listen on (env: JUPYTER_PORT). Default: 0 Equivalent to: \[--ServerApp.port\]]' \
            '--port-retries[The number of additional ports to try if the specified port is not available (env: JUPYTER_PORT_RETRIES). Default: 50 Equivalent to: \[--ServerApp.port_retries\]]' \
            '--keyfile[The full path to a private key file for usage with SSL/TLS. Default: '\'''\'' Equivalent to: \[--ServerApp.keyfile\]]' \
            '--certfile[The full path to an SSL/TLS certificate file. Default: '\'''\'' Equivalent to: \[--ServerApp.certfile\]]' \
            '--client-ca[The full path to a certificate authority certificate for SSL/TLS client authentication. Default: '\'''\'' Equivalent to: \[--ServerApp.client_ca\]]' \
            '--notebook-dir[The directory to use for notebooks and kernels. Default: '\'''\'' Equivalent to: \[--ServerApp.root_dir\]]' \
            '--browser[Specify what command to use to invoke a web]' \
            '--pylab[DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib. Default: '\''disabled'\'' Equivalent to: \[--ServerApp.pylab\]]' \
            '--watch[Whether to serve the app in watch mode Default: False Equivalent to: \[--LabApp.watch\]]' \
            '--app-dir[The app directory to launch JupyterLab from. Default: None Equivalent to: \[--LabApp.app_dir\]]' \
            "*: :_files"

    }

    function _jupyter_labextension {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_migrate {
        _arguments \
            '-[nfig files in the default profile - kernels in ~/.ipython/kernels - notebook]' \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_nbclassic {
        _arguments \
            '--no-browser[Don'\''t open the notebook in a browser after startup. Equivalent to: \[--ServerApp.open_browser=False\]]' \
            '--no-mathjax[Disable MathJax]' \
            '--allow-root[Allow the notebook to be run from root user. Equivalent to: \[--ServerApp.allow_root=True\]]' \
            '--ip[The IP address the Jupyter server will listen on. Default: '\''localhost'\'' Equivalent to: \[--ServerApp.ip\]]' \
            '--port[The port the server will listen on (env: JUPYTER_PORT). Default: 0 Equivalent to: \[--ServerApp.port\]]' \
            '--port-retries[The number of additional ports to try if the specified port is not available (env: JUPYTER_PORT_RETRIES). Default: 50 Equivalent to: \[--ServerApp.port_retries\]]' \
            '--keyfile[The full path to a private key file for usage with SSL/TLS. Default: '\'''\'' Equivalent to: \[--ServerApp.keyfile\]]' \
            '--certfile[The full path to an SSL/TLS certificate file. Default: '\'''\'' Equivalent to: \[--ServerApp.certfile\]]' \
            '--client-ca[The full path to a certificate authority certificate for SSL/TLS client authentication. Default: '\'''\'' Equivalent to: \[--ServerApp.client_ca\]]' \
            '--notebook-dir[DEPRECATED, use root_dir. Default: '\'''\'' Equivalent to: \[--ServerApp.notebook_dir\]]' \
            '--browser[Specify what command to use to invoke a web]' \
            "*: :_files"

    }

    function _jupyter_nbconvert {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--execute[Execute the notebook prior to export. Equivalent to: \[--ExecutePreprocessor.enabled=True\]]' \
            '--allow-errors[Continue notebook execution even if one of the cells throws an error and include the error message in the cell output (the default behaviour is to abort conversion). This flag is only relevant if '\''--execute'\'' was specified, too. Equivalent to: \[--ExecutePreprocessor.allow_errors=True\]]' \
            '--stdin[read a single notebook file from stdin. Write the resulting notebook with default basename '\''notebook.*'\'' Equivalent to: \[--NbConvertApp.from_stdin=True\]]' \
            '--stdout[Write notebook output to stdout instead of files. Equivalent to: \[--NbConvertApp.writer_class=StdoutWriter\]]' \
            '--inplace[Run nbconvert in place, overwriting the existing notebook (only]' \
            '--clear-output[Clear output of current file and save in place,]' \
            '--no-prompt[Exclude input and output prompts from converted document. Equivalent to: \[--TemplateExporter.exclude_input_prompt=True --TemplateExporter.exclude_output_prompt=True\]]' \
            '--no-input[Exclude input cells and output prompts from converted document.]' \
            '--allow-chromium-download[Whether to allow downloading chromium if no suitable version is found on the system. Equivalent to: \[--WebPDFExporter.allow_chromium_download=True\]]' \
            '--disable-chromium-sandbox[Disable chromium security sandbox when converting to PDF.. Equivalent to: \[--WebPDFExporter.disable_sandbox=True\]]' \
            '--show-input[Shows code input. This flag is only useful for dejavu users. Equivalent to: \[--TemplateExporter.exclude_input=False\]]' \
            '--embed-images[Embed the images as base64 dataurls in the output. This flag is only useful for the HTML/WebPDF/Slides exports. Equivalent to: \[--HTMLExporter.embed_images=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--to[The export format to be used, either one of the built-in formats]' \
            '--template[Name of the template to use Default: '\'''\'' Equivalent to: \[--TemplateExporter.template_name\]]' \
            '--template-file[Name of the template file to use Default: None Equivalent to: \[--TemplateExporter.template_file\]]' \
            '--theme[Template specific theme(e.g. the name of a JupyterLab CSS theme distributed as prebuilt extension for the lab template) Default: '\''light'\'' Equivalent to: \[--HTMLExporter.theme\]]' \
            '--writer[Writer class used to write the]' \
            '--post[PostProcessor class used to write the]' \
            '--output[overwrite base name use for output files.]' \
            '--output-dir[Directory to write output(s) to. Defaults]' \
            '--reveal-prefix[The URL prefix for reveal.js (version 3.x).]' \
            '--nbformat[The nbformat version to write.]' \
            "*: :_files"

    }

    function _jupyter_nbextension {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--user[Apply the operation only for the given user Equivalent to: \[--BaseExtensionApp.user=True\]]' \
            '--system[Apply the operation system-wide Equivalent to: \[--BaseExtensionApp.user=False --BaseExtensionApp.sys_prefix=False\]]' \
            '--sys-prefix[Use sys.prefix as the prefix for installing nbextensions (for environments, packaging) Equivalent to: \[--BaseExtensionApp.sys_prefix=True\]]' \
            '--py[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--python[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_notebook {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--no-browser[Don'\''t open the notebook in a browser after startup. Equivalent to: \[--NotebookApp.open_browser=False\]]' \
            '--pylab[DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib. Equivalent to: \[--NotebookApp.pylab=warn\]]' \
            '--no-mathjax[Disable MathJax]' \
            '--allow-root[Allow the notebook to be run from root user. Equivalent to: \[--NotebookApp.allow_root=True\]]' \
            '--autoreload[Autoreload the webapp]' \
            '--script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=True\]]' \
            '--no-script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=False\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--ip[The IP address the notebook server will listen on. Default: '\''localhost'\'' Equivalent to: \[--NotebookApp.ip\]]' \
            '--port[The port the notebook server will listen on (env: JUPYTER_PORT). Default: 8888 Equivalent to: \[--NotebookApp.port\]]' \
            '--port-retries[The number of additional ports to try if the specified port is not available (env: JUPYTER_PORT_RETRIES). Default: 50 Equivalent to: \[--NotebookApp.port_retries\]]' \
            '--sock[The UNIX socket the notebook server will listen on. Default: '\'''\'' Equivalent to: \[--NotebookApp.sock\]]' \
            '--sock-mode[The permissions mode for UNIX socket creation (default: 0600). Default: '\''0600'\'' Equivalent to: \[--NotebookApp.sock_mode\]]' \
            '--transport[Choices: any of \['\''tcp'\'', '\''ipc'\''\] (case-insensitive) Default: '\''tcp'\'' Equivalent to: \[--KernelManager.transport\]]' \
            '--keyfile[The full path to a private key file for usage with SSL/TLS. Default: '\'''\'' Equivalent to: \[--NotebookApp.keyfile\]]' \
            '--certfile[The full path to an SSL/TLS certificate file. Default: '\'''\'' Equivalent to: \[--NotebookApp.certfile\]]' \
            '--client-ca[The full path to a certificate authority certificate for SSL/TLS client authentication. Default: '\'''\'' Equivalent to: \[--NotebookApp.client_ca\]]' \
            '--notebook-dir[The directory to use for notebooks and kernels. Default: '\'''\'' Equivalent to: \[--NotebookApp.notebook_dir\]]' \
            '--browser[Specify what command to use to invoke a web]' \
            '--pylab[DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib. Default: '\''disabled'\'' Equivalent to: \[--NotebookApp.pylab\]]' \
            '--gateway-url[The url of the Kernel or Enterprise Gateway server where]' \
            "*: :_files"

    }

    function _jupyter_qtconsole {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--plain[Disable rich text support. Equivalent to: \[--JupyterQtConsoleApp.plain=True\]]' \
            '--banner[Display a banner upon starting the QtConsole. Equivalent to: \[--JupyterQtConsoleApp.display_banner=True\]]' \
            '--no-banner[Don'\''t display a banner upon starting the QtConsole. Equivalent to: \[--JupyterQtConsoleApp.display_banner=False\]]' \
            '--existing[Connect to an existing kernel. If no argument specified, guess most recent Equivalent to: \[--JupyterConsoleApp.existing=kernel*.json\]]' \
            '--confirm-exit[Set to display confirmation dialog on exit. You can always use '\''exit'\'' or]' \
            '--no-confirm-exit[Don'\''t prompt the user when exiting. This will terminate the kernel]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--style[If not empty, use this Pygments style for syntax highlighting. Otherwise, the style sheet is queried for Pygments style information. Default: '\'''\'' Equivalent to: \[--JupyterWidget.syntax_style\]]' \
            '--stylesheet[path to a custom CSS stylesheet Default: '\'''\'' Equivalent to: \[--JupyterQtConsoleApp.stylesheet\]]' \
            '--editor[A command for invoking a GUI text editor. If the string contains a {filename} format specifier, it will be used. Otherwise, the filename will be appended to the end the command. To use a terminal text editor, the command should launch a new terminal, e.g. ``"gnome-terminal -- vim"``. Default: '\'''\'' Equivalent to: \[--JupyterWidget.editor\]]' \
            '--paging[The type of paging to use. Valid values are: '\''inside'\'']' \
            '--ip[Set the kernel'\''s IP address \[default localhost\].]' \
            '--transport[Choices: any of \['\''tcp'\'', '\''ipc'\''\] (case-insensitive) Default: '\''tcp'\'' Equivalent to: \[--JupyterConsoleApp.transport\]]' \
            '--hb[set the heartbeat port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.hb_port\]]' \
            '--shell[set the shell (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.shell_port\]]' \
            '--iopub[set the iopub (PUB) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.iopub_port\]]' \
            '--stdin[set the stdin (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.stdin_port\]]' \
            '--control[set the control (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.control_port\]]' \
            '--existing[Connect to an already running kernel Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.existing\]]' \
            '-f[JSON file in which to store connection info \[default: kernel-<pid>.json\]]' \
            '--kernel[The name of the default kernel to start. Default: '\''python'\'' Equivalent to: \[--JupyterConsoleApp.kernel_name\]]' \
            '--ssh[The SSH server to use to connect to the kernel. Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.sshserver\]]' \
            '--gui-completion[The type of completer to use. Valid values are: '\''plain'\'' : Show the available completion as a text list]' \
            "*: :_files"

    }

    function _jupyter_repo2docker {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--help-all[Display all configurable options and exit.]' \
            '--version[Print the repo2docker version and exit.]' \
            '--config[Path to config file for repo2docker]' \
            '--json-logs[Emit JSON logs instead of human readable logs]' \
            '--image-name[Name of image to be built. If unspecified will be autogenerated]' \
            '--ref[Reference to build instead of default reference. For example branch name or commit for a Git repository.]' \
            '--debug[Turn on debug logging]' \
            '--no-build[Do not actually build the image. Useful in conjunction with --debug.]' \
            '--build-memory-limit[Total Memory that can be used by the docker build process]' \
            '--no-run[Do not run container after it has been built]' \
            {--publish,-p}'[Specify port mappings for the image. Needs a command to run in the container.]' \
            {--publish-all,-P}'[Publish all exposed ports to random host ports.]' \
            '--no-clean[Don'\''t clean up remote checkouts after we are done]' \
            '--push[Push docker image to repository]' \
            {--volume,-v}'[Volumes to mount inside the container, in form src:dest]' \
            '--user-id[User ID of the primary user in the image]' \
            '--user-name[Username of the primary user in the image]' \
            {--env,-e}'[Environment variables to define at container run time]' \
            {--editable,-E}'[Use the local repository in edit mode]' \
            '--target-repo-dir[Path inside the image where contents of the repositories are copied to, and where all the build operations (such as postBuild) happen. Defaults to ${HOME} if not set]':file:_files \
            '--appendix[Appendix of Dockerfile commands to run at the end of the build. Can be used to customize the resulting image after all standard build steps finish.]' \
            '--label[Extra label to set on the image, in form name=value]' \
            '--build-arg[Extra build arg to pass to the build process, in form name=value]' \
            '--subdir[Subdirectory of the git repository to examine. Defaults to '\'''\''.]':file:_files \
            '--cache-from[List of images to try & re-use cached image layers from. Docker only tries to re-use image layers from images built locally, not pulled from a registry. We can ask it to explicitly re-use layers from non-locally built images by through the '\''cache_from'\'' parameter.]' \
            '--engine[Name of the container engine]' \
            "*: :_files"

    }

    function _jupyter_retro {
        _arguments \
            '--debug[Set debug level for the extension and underlying server applications. Equivalent to: \[--ServerApp.log_level=DEBUG --ExtensionApp.log_level=DEBUG\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--allow-root[Allow the server to be run from root user. Equivalent to: \[--ServerApp.allow_root=True\]]' \
            '--no-browser[Prevent the opening of the default url in the browser. Equivalent to: \[--ServerApp.open_browser=False --ExtensionApp.open_browser=False\]]' \
            '--autoreload[Autoreload the webapp]' \
            '--script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=True\]]' \
            '--no-script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=False\]]' \
            '--expose-app-in-browser[Expose the global app instance to browser via window.jupyterlab. Equivalent to: \[--RetroApp.expose_app_in_browser=True\]]' \
            '--collaborative[Whether to enable collaborative mode. Equivalent to: \[--RetroApp.collaborative=True\]]' \
            '--retro-logo[Whether to use the RetroLab inline logo Equivalent to: \[--RetroApp.retro_logo=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_run {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--existing[Connect to an existing kernel. If no argument specified, guess most recent Equivalent to: \[--JupyterConsoleApp.existing=kernel*.json\]]' \
            '--confirm-exit[Set to display confirmation dialog on exit. You can always use '\''exit'\'' or]' \
            '--no-confirm-exit[Don'\''t prompt the user when exiting. This will terminate the kernel]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--ip[Set the kernel'\''s IP address \[default localhost\].]' \
            '--transport[Choices: any of \['\''tcp'\'', '\''ipc'\''\] (case-insensitive) Default: '\''tcp'\'' Equivalent to: \[--JupyterConsoleApp.transport\]]' \
            '--hb[set the heartbeat port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.hb_port\]]' \
            '--shell[set the shell (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.shell_port\]]' \
            '--iopub[set the iopub (PUB) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.iopub_port\]]' \
            '--stdin[set the stdin (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.stdin_port\]]' \
            '--control[set the control (ROUTER) port \[default: random\] Default: 0 Equivalent to: \[--JupyterConsoleApp.control_port\]]' \
            '--existing[Connect to an already running kernel Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.existing\]]' \
            '-f[JSON file in which to store connection info \[default: kernel-<pid>.json\]]' \
            '--kernel[The name of the default kernel to start. Default: '\''python'\'' Equivalent to: \[--JupyterConsoleApp.kernel_name\]]' \
            '--ssh[The SSH server to use to connect to the kernel. Default: '\'''\'' Equivalent to: \[--JupyterConsoleApp.sshserver\]]' \
            "*: :_files"

    }

    function _jupyter_server {
        _arguments \
            '--debug[Set debug level for the extension and underlying server applications. Equivalent to: \[--ServerApp.log_level=DEBUG --ExtensionApp.log_level=DEBUG\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--allow-root[Allow the server to be run from root user. Equivalent to: \[--ServerApp.allow_root=True\]]' \
            '--no-browser[Prevent the opening of the default url in the browser. Equivalent to: \[--ServerApp.open_browser=False --ExtensionApp.open_browser=False\]]' \
            '--autoreload[Autoreload the webapp]' \
            '--script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=True\]]' \
            '--no-script[DEPRECATED, IGNORED Equivalent to: \[--FileContentsManager.save_script=False\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            '--ip[The IP address the Jupyter server will listen on. Default: '\''localhost'\'' Equivalent to: \[--ServerApp.ip\]]' \
            '--port[The port the server will listen on (env: JUPYTER_PORT). Default: 0 Equivalent to: \[--ServerApp.port\]]' \
            '--port-retries[The number of additional ports to try if the specified port is not available (env: JUPYTER_PORT_RETRIES). Default: 50 Equivalent to: \[--ServerApp.port_retries\]]' \
            '--sock[The UNIX socket the Jupyter server will listen on. Default: '\'''\'' Equivalent to: \[--ServerApp.sock\]]' \
            '--sock-mode[The permissions mode for UNIX socket creation (default: 0600). Default: '\''0600'\'' Equivalent to: \[--ServerApp.sock_mode\]]' \
            '--transport[Choices: any of \['\''tcp'\'', '\''ipc'\''\] (case-insensitive) Default: '\''tcp'\'' Equivalent to: \[--KernelManager.transport\]]' \
            '--keyfile[The full path to a private key file for usage with SSL/TLS. Default: '\'''\'' Equivalent to: \[--ServerApp.keyfile\]]' \
            '--certfile[The full path to an SSL/TLS certificate file. Default: '\'''\'' Equivalent to: \[--ServerApp.certfile\]]' \
            '--client-ca[The full path to a certificate authority certificate for SSL/TLS client authentication. Default: '\'''\'' Equivalent to: \[--ServerApp.client_ca\]]' \
            '--notebook-dir[The directory to use for notebooks and kernels. Default: '\'''\'' Equivalent to: \[--ServerApp.root_dir\]]' \
            '--preferred-dir[Preferred starting directory to use for notebooks and kernels. Default: '\'''\'' Equivalent to: \[--ServerApp.preferred_dir\]]' \
            '--browser[Specify what command to use to invoke a web]' \
            '--pylab[DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib. Default: '\''disabled'\'' Equivalent to: \[--ServerApp.pylab\]]' \
            '--gateway-url[The url of the Kernel or Enterprise Gateway server where]' \
            "*: :_files"

    }

    function _jupyter_serverextension {
        _arguments \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--user[Apply the operation only for the given user Equivalent to: \[--BaseExtensionApp.user=True\]]' \
            '--system[Apply the operation system-wide Equivalent to: \[--BaseExtensionApp.user=False --BaseExtensionApp.sys_prefix=False\]]' \
            '--sys-prefix[Use sys.prefix as the prefix for installing nbextensions (for environments, packaging) Equivalent to: \[--BaseExtensionApp.sys_prefix=True\]]' \
            '--py[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--python[Install from a Python package Equivalent to: \[--BaseExtensionApp.python=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }

    function _jupyter_troubleshoot {
        _arguments \
            "*: :_files"

    }

    function _jupyter_trust {
        _arguments \
            '--reset[Delete the trusted notebook cache.]' \
            '--debug[set log level to logging.DEBUG (maximize logging output) Equivalent to: \[--Application.log_level=10\]]' \
            '--show-config[Show the application'\''s configuration (human-readable format) Equivalent to: \[--Application.show_config=True\]]' \
            '--show-config-json[Show the application'\''s configuration (json format) Equivalent to: \[--Application.show_config_json=True\]]' \
            '--generate-config[generate default config file Equivalent to: \[--JupyterApp.generate_config=True\]]' \
            '-y[Answer yes to any questions instead of prompting. Equivalent to: \[--JupyterApp.answer_yes=True\]]' \
            '--log-level[Set the log level by value or name. Choices: any of \[0, 10, 20, 30, 40, 50, '\''DEBUG'\'', '\''INFO'\'', '\''WARN'\'', '\''ERROR'\'', '\''CRITICAL'\''\] Default: 30 Equivalent to: \[--Application.log_level\]]' \
            '--config[Full path of a config file. Default: '\'''\'' Equivalent to: \[--JupyterApp.config_file\]]' \
            "*: :_files"

    }


function _jupyter {
    local line state

    function _commands {
        local -a commands
        commands=(
            'bundlerextension:Work with Jupyter bundler extensions'
            'console:The Jupyter terminal-based Console.'
            'execute:An application used to execute notebook files (*.ipynb)'
            'kernel:Run a kernel locally in a subprocess'
            'kernelspec:Manage Jupyter kernel specifications'
            'lab:JupyterLab - An extensible computational environment for Jupyter'
            'labextension:Work with JupyterLab extensions'
            'migrate:Migrate configuration and data from .ipython prior to 4.0 to Jupyter locations'
            'nbclassic:The Jupyter HTML Notebook'
            'nbconvert:Convert notebook files (*.ipynb) to various other formats'
            'nbextension:Work with Jupyter notebook extensions'
            'notebook:The Jupyter HTML Notebook'
            'qtconsole:The Jupyter qtconsole'
            'repo2docker:Fetch a repository and build a container image'
            'retro:RetroLab - A JupyterLab Distribution with a retro look and feel'
            'run:Run Jupyter kernel code'
            'server:The Jupyter Server'
            'serverextension:Work with Jupyter server extensions'
            'troubleshoot:Show environment information'
            'trust:Sign one or more Jupyter notebooks with your key, to trust their dynamic (HTML, Javascript) output'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        '--version[show the versions of core jupyter packages and exit]' \
        '--config-dir[show Jupyter config dir]' \
        '--data-dir[show Jupyter data dir]' \
        '--runtime-dir[show Jupyter runtime dir]' \
        '--paths[show all Jupyter paths. Add --json for machine-readable format.]' \
        '--json[output paths as machine-readable json]' \
        '--debug[output debug information about paths]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (bundlerextension)
            _jupyter_bundlerextension
            ;;

        (console)
            _jupyter_console
            ;;

        (execute)
            _jupyter_execute
            ;;

        (kernel)
            _jupyter_kernel
            ;;

        (kernelspec)
            _jupyter_kernelspec
            ;;

        (lab)
            _jupyter_lab
            ;;

        (labextension)
            _jupyter_labextension
            ;;

        (migrate)
            _jupyter_migrate
            ;;

        (nbclassic)
            _jupyter_nbclassic
            ;;

        (nbconvert)
            _jupyter_nbconvert
            ;;

        (nbextension)
            _jupyter_nbextension
            ;;

        (notebook)
            _jupyter_notebook
            ;;

        (qtconsole)
            _jupyter_qtconsole
            ;;

        (repo2docker)
            _jupyter_repo2docker
            ;;

        (retro)
            _jupyter_retro
            ;;

        (run)
            _jupyter_run
            ;;

        (server)
            _jupyter_server
            ;;

        (serverextension)
            _jupyter_serverextension
            ;;

        (troubleshoot)
            _jupyter_troubleshoot
            ;;

        (trust)
            _jupyter_trust
            ;;

        esac
        ;;
     esac

}

