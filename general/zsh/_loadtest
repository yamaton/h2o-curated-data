#compdef _loadtest loadtest

# Auto-generated with h2o


function _loadtest {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--maxRequests}'[Number of requests to perform]' \
        {-c,--concurrency}'[Number of requests to make]' \
        {-t,--maxSeconds}'[Max time in seconds to wait for responses]' \
        {-d,--timeout}'[Timeout for each request in milliseconds]' \
        {-T,--contentType}'[MIME type for the body]' \
        {-C,--cookies}'[Send a cookie as name=value (multiple)]' \
        {-H,--headers}'[Send a header as header:value (multiple)]' \
        {-P,--postBody}'[Send string as POST body]' \
        {-p,--postFile}'[Send the contents of the file as POST body]' \
        {-A,--patchBody}'[Send string as PATCH body]' \
        {-a,--patchFile}'[Send the contents of the file as PATCH body]' \
        '--data[Send data POST body]' \
        {-m,--method}'[method to url]' \
        {-u,--putFile}'[Send the contents of the file as PUT body]' \
        {-R,--requestGenerator}'[JS module with a custom request generator function]' \
        {-r,--recover}'[Do not exit on socket receive errors (default)]' \
        {-s,--secureProtocol}'[TLS/SSL secure protocol method to use]' \
        {-k,--keepalive}'[Use a keep-alive http agent]' \
        {-V,--version}'[Show version number and exit]' \
        '--proxy[Use a proxy for requests e.g. http://localhost:8080]' \
        '--rps[Specify the requests per second for each client]' \
        '--agent[Use a keep-alive http agent (deprecated)]' \
        '--index[Replace the value of given arg with an index in the URL]' \
        '--quiet[Do not log any messages]' \
        '--debug[Show debug messages]' \
        '--insecure[Allow self-signed certificates over https]' \
        '--key[The client key to use]' \
        '--cert[The client certificate to use]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

