#compdef _meson meson

# Auto-generated with h2o

    function _meson_setup {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--prefix[Installation prefix (default: /usr/local).]' \
            '--bindir[Executable directory (default: bin).]':file:_files \
            '--datadir[Data file directory (default: share).]':file:_files \
            '--includedir[Header file directory (default: include).]':file:_files \
            '--infodir[Info page directory (default: share/info).]':file:_files \
            '--libdir[Library directory (default: lib/x86_64-linux-gnu).]':file:_files \
            '--libexecdir[Library executable directory (default: libexec).]':file:_files \
            '--localedir[Locale data directory (default: share/locale).]':file:_files \
            '--localstatedir[Localstate data directory (default: var).]':file:_files \
            '--mandir[Manual page directory (default: share/man).]':file:_files \
            '--sbindir[System executable directory (default: sbin).]':file:_files \
            '--sharedstatedir[Architecture-independent data directory (default: com).]':file:_files \
            '--sysconfdir[Sysconf data directory (default: etc).]':file:_files \
            '--auto-features[Override value of all '\''auto'\'' features (default: auto).]' \
            '--backend[Backend to use (default: ninja).]' \
            '--buildtype[Build type to use (default: debug).]' \
            '--debug[Enable debug symbols and other information]' \
            '--default-library[Default library type (default: shared).]' \
            '--errorlogs[Whether to print the logs from failing tests]' \
            '--install-umask[Default umask to apply on permissions of installed files (default: 022).]' \
            '--layout[Build directory layout (default: mirror).]' \
            '--optimization[Optimization level (default: 0).]' \
            '--stdsplit[Split stdout and stderr in test logs]' \
            '--strip[Strip targets on install]' \
            '--unity[Unity build (default: off).]' \
            '--unity-size[Unity block size (default: (2, None, 4)).]' \
            '--warnlevel[Compiler warning level to use (default: 1).]' \
            '--werror[Treat warnings as errors]' \
            '--wrap-mode[Wrap mode (default: default).]' \
            '--force-fallback-for[Force fallback for those subprojects (default: \[\]).]' \
            '--python.install-env[Which python environment to install to (default: prefix).]' \
            '--python.platlibdir[Directory for site-specific, platform-specific files (default: ).]':file:_files \
            '--python.purelibdir[Directory for site-specific, non-platform-specific files (default: ).]':file:_files \
            '--pkg-config-path[List of additional paths for pkg-config to search (default: \[\]). (just for host machine)]':file:_files \
            '--build.pkg-config-path[List of additional paths for pkg-config to search (default: \[\]). (just for build machine)]':file:_files \
            '--cmake-prefix-path[List of additional prefixes for cmake to search (default: \[\]). (just for host machine)]':file:_files \
            '--build.cmake-prefix-path[List of additional prefixes for cmake to search (default: \[\]). (just for build machine)]':file:_files \
            '-D[Set the value of an option, can be used several times to set multiple options.]' \
            '--native-file[File containing overrides for native compilation environment.]':file:_files \
            '--cross-file[File describing cross compilation environment.]':file:_files \
            '--vsenv[Setup Visual Studio environment even when other compilers are found, abort if Visual Studio is not found. This option has no effect on other platforms than Windows. Defaults to True when using "vs" backend.]' \
            {-v,--version}'[show program'\''s version number and exit]' \
            '--fatal-meson-warnings[Make all Meson warnings fatal]' \
            '--reconfigure[Set options and reconfigure the project. Useful when new options have been added to the project and the default value is not working.]' \
            '--wipe[Wipe build directory and reconfigure using previous command line options. Useful when build directory got corrupted, or when rebuilding with a newer version of meson.]' \
            "*: :_files"

    }

    function _meson_configure {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--prefix[Installation prefix (default: /usr/local).]' \
            '--bindir[Executable directory (default: bin).]':file:_files \
            '--datadir[Data file directory (default: share).]':file:_files \
            '--includedir[Header file directory (default: include).]':file:_files \
            '--infodir[Info page directory (default: share/info).]':file:_files \
            '--libdir[Library directory (default: lib/x86_64-linux-gnu).]':file:_files \
            '--libexecdir[Library executable directory (default: libexec).]':file:_files \
            '--localedir[Locale data directory (default: share/locale).]':file:_files \
            '--localstatedir[Localstate data directory (default: var).]':file:_files \
            '--mandir[Manual page directory (default: share/man).]':file:_files \
            '--sbindir[System executable directory (default: sbin).]':file:_files \
            '--sharedstatedir[Architecture-independent data directory (default: com).]':file:_files \
            '--sysconfdir[Sysconf data directory (default: etc).]':file:_files \
            '--auto-features[Override value of all '\''auto'\'' features (default: auto).]' \
            '--backend[Backend to use (default: ninja).]' \
            '--buildtype[Build type to use (default: debug).]' \
            '--debug[Enable debug symbols and other information]' \
            '--default-library[Default library type (default: shared).]' \
            '--errorlogs[Whether to print the logs from failing tests]' \
            '--install-umask[Default umask to apply on permissions of installed files (default: 022).]' \
            '--layout[Build directory layout (default: mirror).]' \
            '--optimization[Optimization level (default: 0).]' \
            '--stdsplit[Split stdout and stderr in test logs]' \
            '--strip[Strip targets on install]' \
            '--unity[Unity build (default: off).]' \
            '--unity-size[Unity block size (default: (2, None, 4)).]' \
            '--warnlevel[Compiler warning level to use (default: 1).]' \
            '--werror[Treat warnings as errors]' \
            '--wrap-mode[Wrap mode (default: default).]' \
            '--force-fallback-for[Force fallback for those subprojects (default: \[\]).]' \
            '--python.install-env[Which python environment to install to (default: prefix).]' \
            '--python.platlibdir[Directory for site-specific, platform-specific files (default: ).]':file:_files \
            '--python.purelibdir[Directory for site-specific, non-platform-specific files (default: ).]':file:_files \
            '--pkg-config-path[List of additional paths for pkg-config to search (default: \[\]). (just for host machine)]':file:_files \
            '--build.pkg-config-path[List of additional paths for pkg-config to search (default: \[\]). (just for build machine)]':file:_files \
            '--cmake-prefix-path[List of additional prefixes for cmake to search (default: \[\]). (just for host machine)]':file:_files \
            '--build.cmake-prefix-path[List of additional prefixes for cmake to search (default: \[\]). (just for build machine)]':file:_files \
            '-D[Set the value of an option, can be used several times to set multiple options.]' \
            '--clearcache[Clear cached state (e.g. found dependencies)]' \
            "*: :_files"

    }

    function _meson_dist {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '-C[directory to cd into before running]' \
            '--allow-dirty[Allow even when repository contains uncommitted changes.]' \
            '--formats[Comma separated list of archive types to create. Supports xztar (default), gztar, and zip.]' \
            '--include-subprojects[Include source code of subprojects that have been used for the build.]' \
            '--no-tests[Do not build and test generated packages.]' \
            "*: :_files"

    }

    function _meson_install {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '-C[directory to cd into before running]' \
            '--no-rebuild[Do not rebuild before installing.]' \
            '--only-changed[Only overwrite files that are older than the copied file.]' \
            '--quiet[Do not print every file that was installed.]' \
            '--destdir[Sets or overrides DESTDIR environment. (Since 0.57.0)]':file:_files \
            {--dry-run,-n}'[Doesn'\''t actually install, but print logs. (Since 0.57.0)]' \
            '--skip-subprojects[Do not install files from given subprojects. (Since 0.58.0)]' \
            '--tags[Install only targets having one of the given tags. (Since 0.60.0)]' \
            '--strip[Strip targets even if strip option was not set during configure. (Since 0.62.0)]' \
            "*: :_files"

    }

    function _meson_introspect {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--ast[Dump the AST of the meson file.]' \
            '--benchmarks[List all benchmarks.]' \
            '--buildoptions[List all build options.]' \
            '--buildsystem-files[List files that make up the build system.]' \
            '--dependencies[List external dependencies.]' \
            '--scan-dependencies[Scan for dependencies used in the meson.build file.]' \
            '--installed[List all installed files and directories.]' \
            '--install-plan[List all installed files and directories with their details.]' \
            '--projectinfo[Information about projects.]' \
            '--targets[List top level targets.]' \
            '--tests[List all unit tests.]' \
            '--backend[The backend to use for the --buildoptions introspection.]' \
            {-a,--all}'[Print all available information.]' \
            {-i,--indent}'[Enable pretty printed JSON.]' \
            {-f,--force-object-output}'[Always use the new JSON format for multiple entries (even for 0 and 1 introspection commands)]' \
            "*: :_files"

    }

    function _meson_init {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '-C[directory to cd into before running]' \
            {-n,--name}'[project name. default: name of current directory]' \
            {-e,--executable}'[executable name. default: project name]' \
            {-d,--deps}'[dependencies, comma-separated]' \
            {-l,--language}'[project language. default: autodetected based on source files]' \
            {-b,--build}'[build after generation]' \
            '--builddir[directory for build]':file:_files \
            {-f,--force}'[force overwrite of existing files and directories.]' \
            '--type[project type. default: executable based project]' \
            '--version[project version. default: 0.1]' \
            "*: :_files"

    }

    function _meson_test {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--repeat[Number of times to run the tests.]' \
            '--no-rebuild[Do not rebuild before running tests.]' \
            '--gdb[Run test under gdb.]' \
            '--gdb-path[Path to the gdb binary (default: gdb).]':file:_files \
            '--list[List available tests.]' \
            '--wrapper[wrapper to run tests with (e.g. Valgrind)]' \
            '-C[directory to cd into before running]' \
            '--suite[Only run tests belonging to the given suite.]' \
            '--no-suite[Do not run tests belonging to the given suite.]' \
            '--no-stdsplit[Do not split stderr and stdout in test logs.]' \
            '--print-errorlogs[Whether to print failing tests'\'' logs.]' \
            '--benchmark[Run benchmarks instead of tests.]' \
            '--logbase[Base name for log file.]' \
            '--num-processes[How many parallel processes to use.]' \
            {-v,--verbose}'[Do not redirect stdout and stderr]' \
            {-q,--quiet}'[Produce less output to the terminal.]' \
            {-t,--timeout-multiplier}'[Define a multiplier for test timeout, for example when running tests in particular conditions they might take more time to execute. (<= 0 to disable timeout)]' \
            '--setup[Which test setup to use.]' \
            '--test-args[Arguments to pass to the specified test(s) or all tests]' \
            "*: :_files"

    }

    function _meson_wrap {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            "*: :_files"

    }

    function _meson_subprojects {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            "*: :_files"

    }

    function _meson_rewrite {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-s,--sourcedir}'[Path to source directory.]':file:_files \
            {-V,--verbose}'[Enable verbose output]' \
            {-S,--skip-errors}'[Skip errors instead of aborting]' \
            "*: :_files"

    }

    function _meson_compile {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--clean[Clean the build directory.]' \
            '-C[directory to cd into before running]' \
            {-j,--jobs}'[The number of worker jobs to run (if supported). If the value is less than 1 the build program will guess.]' \
            {-l,--load-average}'[The system load average to try to maintain (if supported).]' \
            {-v,--verbose}'[Show more verbose output.]' \
            '--ninja-args[Arguments to pass to `ninja` (applied only on `ninja` backend).]' \
            '--vs-args[Arguments to pass to `msbuild` (applied only on `vs` backend).]' \
            '--xcode-args[Arguments to pass to `xcodebuild` (applied only on `xcode` backend).]' \
            "*: :_files"

    }

    function _meson_devenv {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '-C[Directory to cd into before running]' \
            '--dump[Only print required environment (Since 0.62.0)]' \
            "*: :_files"

    }

    function _meson_env2mfile {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            '--debarch[The dpkg architecture to generate.]' \
            '--gccsuffix[A particular gcc version suffix if necessary.]' \
            '-o[The output file.]':file:_files \
            '--cross[Generate a cross compilation file.]' \
            '--native[Generate a native compilation file.]' \
            '--system[Define system for cross compilation.]' \
            '--cpu[Define cpu for cross compilation.]' \
            '--cpu-family[Define cpu family for cross compilation.]' \
            '--endian[Define endianness for cross compilation.]' \
            "*: :_files"

    }


function _meson {
    local line state

    function _commands {
        local -a commands
        commands=(
            'setup:Configure the project'
            'configure:Change project options'
            'dist:Generate release archive'
            'install:Install the project'
            'introspect:Introspect project'
            'init:Create a new project'
            'test:Run tests'
            'wrap:Wrap tools'
            'subprojects:Manage subprojects'
            'rewrite:Modify the project definition'
            'compile:Build the project'
            'devenv:Run commands in developer environment'
            'env2mfile:Convert current environment to a cross'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (setup)
            _meson_setup
            ;;

        (configure)
            _meson_configure
            ;;

        (dist)
            _meson_dist
            ;;

        (install)
            _meson_install
            ;;

        (introspect)
            _meson_introspect
            ;;

        (init)
            _meson_init
            ;;

        (test)
            _meson_test
            ;;

        (wrap)
            _meson_wrap
            ;;

        (subprojects)
            _meson_subprojects
            ;;

        (rewrite)
            _meson_rewrite
            ;;

        (compile)
            _meson_compile
            ;;

        (devenv)
            _meson_devenv
            ;;

        (env2mfile)
            _meson_env2mfile
            ;;

        esac
        ;;
     esac

}

