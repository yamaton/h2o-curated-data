#compdef micromamba

# Auto-generated with h2o


function _micromamba {
    local line state

    function _commands {
        local -a commands
        commands=(
            'shell:Generate shell init scripts'
            'create:Create new environment'
            'install:Install packages in active environment'
            'update:Update packages in active environment'
            'self-update:Update micromamba'
            'repoquery:Find and analyze packages in active environment or channels'
            'remove:Remove packages from active environment'
            'list:List packages in active environment'
            'package:Extract a package or bundle files into an archive'
            'clean:Clean package cache'
            'config:Configuration of micromamba'
            'info:Information about micromamba'
            'constructor:Commands to support using micromamba in constructor'
            'env:List environments'
            'activate:Activate an environment'
            'run:Run an executable in an environment'
            'ps:Show, inspect or kill running processes'
            'auth:Login or logout of a given host'
            'search:Find packages in active environment or channels'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (shell)
            _micromamba_shell
            ;;

        (create)
            _micromamba_create
            ;;

        (install)
            _micromamba_install
            ;;

        (update)
            _micromamba_update
            ;;

        (self-update)
            _micromamba_self-update
            ;;

        (repoquery)
            _micromamba_repoquery
            ;;

        (remove)
            _micromamba_remove
            ;;

        (list)
            _micromamba_list
            ;;

        (package)
            _micromamba_package
            ;;

        (clean)
            _micromamba_clean
            ;;

        (config)
            _micromamba_config
            ;;

        (info)
            _micromamba_info
            ;;

        (constructor)
            _micromamba_constructor
            ;;

        (env)
            _micromamba_env
            ;;

        (activate)
            _micromamba_activate
            ;;

        (run)
            _micromamba_run
            ;;

        (ps)
            _micromamba_ps
            ;;

        (auth)
            _micromamba_auth
            ;;

        (search)
            _micromamba_search
            ;;

        esac
        ;;
     esac

}


function _micromamba_shell {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Add initialization in script to rc files'
            'deinit:Remove activation script from rc files'
            'reinit:Restore activation script from rc files'
            'hook:Micromamba hook scripts'
            'activate:Output activation code for the given shell'
            'reactivate:Output reactivateion code for the given shell'
            'deactivate:Output deactivation code for the given shell'
            'enable_long_path_support:Output deactivation code for the given shell'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        {-p,--prefix}'[Path to the target prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _micromamba_shell_init
            ;;

        (deinit)
            _micromamba_shell_deinit
            ;;

        (reinit)
            _micromamba_shell_reinit
            ;;

        (hook)
            _micromamba_shell_hook
            ;;

        (activate)
            _micromamba_shell_activate
            ;;

        (reactivate)
            _micromamba_shell_reactivate
            ;;

        (deactivate)
            _micromamba_shell_deactivate
            ;;

        (enable_long_path_support)
            _micromamba_shell_enable_long_path_support
            ;;

        esac
        ;;
     esac

}

function _micromamba_shell_init {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        {-r,-p,-n,--root-prefix,--prefix,--name}'[Path to the root prefix]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_deinit {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        {-r,-p,-n,--root-prefix,--prefix,--name}'[Path to the root prefix]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_reinit {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_hook {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        {-r,-p,-n,--root-prefix,--prefix,--name}'[Path to the root prefix]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_activate {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        {-p,--prefix}'[Path to the target prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--stack[Stack the environment being activated]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_reactivate {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_deactivate {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-s,--shell}'[A shell type]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_shell_enable_long_path_support {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_create {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-f,--file}'[File (yaml, explicit or plain)]' \
        {--no-pin,--pin}'[Ignore pinned packages]' \
        {--no-py-pin,--py-pin}'[Do not automatically pin Python]' \
        {--pyc,--no-pyc}'[Defines if PYC files will be compiled or not]' \
        {--allow-uninstall,--no-allow-uninstall}'[Allow uninstall when installing or updating packages. Default is true.]' \
        {--allow-downgrade,--no-allow-downgrade}'[Allow downgrade when installing packages. Default is false.]' \
        {--allow-softlinks,--no-allow-softlinks}'[Allow to use soft-links when hard-links are not possible]' \
        {--always-softlink,--no-always-softlink}'[Use soft-link instead of hard-link]' \
        {--always-copy,--no-always-copy}'[Use copy instead of hard-link]' \
        {--extra-safety-checks,--no-extra-safety-checks}'[Run extra verifications on packages]' \
        '--lock-timeout[Lockfile timeout]' \
        {--shortcuts,--no-shortcuts}'[Install start-menu shortcuts on Windows (not implemented on Linux / macOS)]' \
        '--safety-checks[Safety checks policy ('\''enabled'\'', '\''warn'\'', or '\''disabled'\'')]' \
        '--verify-artifacts[Run verifications on packages signatures]' \
        '--platform[The platform description]' \
        '--no-deps[Do not install dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk]' \
        '--only-deps[Only install dependencies]' \
        '--category[Categories of package to install from environment lockfile]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}

function _micromamba_install {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-f,--file}'[File (yaml, explicit or plain)]' \
        {--no-pin,--pin}'[Ignore pinned packages]' \
        {--no-py-pin,--py-pin}'[Do not automatically pin Python]' \
        {--pyc,--no-pyc}'[Defines if PYC files will be compiled or not]' \
        {--allow-uninstall,--no-allow-uninstall}'[Allow uninstall when installing or updating packages. Default is true.]' \
        {--allow-downgrade,--no-allow-downgrade}'[Allow downgrade when installing packages. Default is false.]' \
        {--allow-softlinks,--no-allow-softlinks}'[Allow to use soft-links when hard-links are not possible]' \
        {--always-softlink,--no-always-softlink}'[Use soft-link instead of hard-link]' \
        {--always-copy,--no-always-copy}'[Use copy instead of hard-link]' \
        {--extra-safety-checks,--no-extra-safety-checks}'[Run extra verifications on packages]' \
        '--lock-timeout[Lockfile timeout]' \
        {--shortcuts,--no-shortcuts}'[Install start-menu shortcuts on Windows (not implemented on Linux / macOS)]' \
        '--safety-checks[Safety checks policy ('\''enabled'\'', '\''warn'\'', or '\''disabled'\'')]' \
        '--verify-artifacts[Run verifications on packages signatures]' \
        '--platform[The platform description]' \
        '--no-deps[Do not install dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk]' \
        '--only-deps[Only install dependencies]' \
        '--category[Categories of package to install from environment lockfile]' \
        '--freeze-installed[Freeze already installed dependencies]' \
        '--force-reinstall[Force reinstall of package]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}

function _micromamba_update {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-f,--file}'[File (yaml, explicit or plain)]' \
        {--no-pin,--pin}'[Ignore pinned packages]' \
        {--no-py-pin,--py-pin}'[Do not automatically pin Python]' \
        {--pyc,--no-pyc}'[Defines if PYC files will be compiled or not]' \
        {--allow-uninstall,--no-allow-uninstall}'[Allow uninstall when installing or updating packages. Default is true.]' \
        {--allow-downgrade,--no-allow-downgrade}'[Allow downgrade when installing packages. Default is false.]' \
        {--allow-softlinks,--no-allow-softlinks}'[Allow to use soft-links when hard-links are not possible]' \
        {--always-softlink,--no-always-softlink}'[Use soft-link instead of hard-link]' \
        {--always-copy,--no-always-copy}'[Use copy instead of hard-link]' \
        {--extra-safety-checks,--no-extra-safety-checks}'[Run extra verifications on packages]' \
        '--lock-timeout[Lockfile timeout]' \
        {--shortcuts,--no-shortcuts}'[Install start-menu shortcuts on Windows (not implemented on Linux / macOS)]' \
        '--safety-checks[Safety checks policy ('\''enabled'\'', '\''warn'\'', or '\''disabled'\'')]' \
        '--verify-artifacts[Run verifications on packages signatures]' \
        '--platform[The platform description]' \
        '--no-deps[Do not install dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk]' \
        '--only-deps[Only install dependencies]' \
        '--category[Categories of package to install from environment lockfile]' \
        {--prune,--no-prune}'[Prune dependencies (default)]' \
        {-a,--all}'[Update all packages in the environment]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}

function _micromamba_self-update {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-f,--file}'[File (yaml, explicit or plain)]' \
        {--no-pin,--pin}'[Ignore pinned packages]' \
        {--no-py-pin,--py-pin}'[Do not automatically pin Python]' \
        {--pyc,--no-pyc}'[Defines if PYC files will be compiled or not]' \
        {--allow-uninstall,--no-allow-uninstall}'[Allow uninstall when installing or updating packages. Default is true.]' \
        {--allow-downgrade,--no-allow-downgrade}'[Allow downgrade when installing packages. Default is false.]' \
        {--allow-softlinks,--no-allow-softlinks}'[Allow to use soft-links when hard-links are not possible]' \
        {--always-softlink,--no-always-softlink}'[Use soft-link instead of hard-link]' \
        {--always-copy,--no-always-copy}'[Use copy instead of hard-link]' \
        {--extra-safety-checks,--no-extra-safety-checks}'[Run extra verifications on packages]' \
        '--lock-timeout[Lockfile timeout]' \
        {--shortcuts,--no-shortcuts}'[Install start-menu shortcuts on Windows (not implemented on Linux / macOS)]' \
        '--safety-checks[Safety checks policy ('\''enabled'\'', '\''warn'\'', or '\''disabled'\'')]' \
        '--verify-artifacts[Run verifications on packages signatures]' \
        '--platform[The platform description]' \
        '--no-deps[Do not install dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk]' \
        '--only-deps[Only install dependencies]' \
        '--category[Categories of package to install from environment lockfile]' \
        '--version[Install specific micromamba version]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}


function _micromamba_repoquery {
    local line state

    function _commands {
        local -a commands
        commands=(
            'query_type:TEXT:{search,depends,whoneeds} REQUIRED'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-t,--tree}'[Show result as a tree]' \
        '--recursive[Show dependencies recursively, i.e. transitive dependencies (only for `depends`)]' \
        '--pretty[Pretty print result (only for search)]' \
        '--use-local[Use installed data (--use-local=1, default for `depends` and `whoneeds`) or remote repositories (--use-local=0, default for `search`). If the `-c,--channel` option is set, it has the priority and --use-local is set to 0]' \
        '--platform[The platform description]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (query_type)
            _micromamba_repoquery_query_type
            ;;

        esac
        ;;
     esac

}

function _micromamba_repoquery_query_type {
    _arguments \
        "*: :_files"

}

function _micromamba_remove {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-a,--all}'[Remove all packages in the environment]' \
        {-f,--force}'[Force removal of package (note: consistency of environment is not guaranteed!]' \
        {--prune,--no-prune}'[Prune dependencies (default)]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_list {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_package {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}

function _micromamba_clean {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-a,--all}'[Remove index cache, lock files, unused cache packages, and tarballs]' \
        {-i,--index-cache}'[Remove index cache]' \
        {-p,--packages}'[Remove unused packages from writable package caches]' \
        {-t,--tarballs}'[Remove cached package tarballs]' \
        {-l,--locks}'[Remove lock files from caches]' \
        '--trash[Remove *.mamba_trash files from all environments]' \
        {-f,--force-pkgs-dirs}'[Remove *all* writable package caches. This option is not included with the --all flags.]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        "*: :_files"

}


function _micromamba_config {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List configuration values'
            'sources:Show configuration sources'
            'describe:Describe given configuration parameters'
            'prepend:Add one configuration value to the beginning of a list key'
            'append:Add one configuration value to the end of a list key'
            'remove-key:Remove a configuration key and its values'
            'remove:Remove a configuration value from a list key. This removes all instances of the value.'
            'set:Set a configuration value'
            'get:Get a configuration value'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _micromamba_config_list
            ;;

        (sources)
            _micromamba_config_sources
            ;;

        (describe)
            _micromamba_config_describe
            ;;

        (prepend)
            _micromamba_config_prepend
            ;;

        (append)
            _micromamba_config_append
            ;;

        (remove-key)
            _micromamba_config_remove-key
            ;;

        (remove)
            _micromamba_config_remove
            ;;

        (set)
            _micromamba_config_set
            ;;

        (get)
            _micromamba_config_get
            ;;

        esac
        ;;
     esac

}

function _micromamba_config_list {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-l,--long-descriptions}'[Display configs long descriptions]' \
        {-g,--groups}'[Display configs groups]' \
        {-s,--sources}'[Display all configs sources]' \
        {-a,--all}'[Display all rc configurable configs]' \
        {-d,--descriptions}'[Display configs descriptions]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_config_sources {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_config_describe {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-l,--long-descriptions}'[Display configs long descriptions]' \
        {-g,--groups}'[Display configs groups]' \
        "*: :_files"

}


function _micromamba_config_prepend {
    local line state

    function _commands {
        local -a commands
        commands=(
            'specs:\[TEXT,TEXT\] ... REQUIRED'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (specs)
            _micromamba_config_prepend_specs
            ;;

        esac
        ;;
     esac

}

function _micromamba_config_prepend_specs {
    _arguments \
        "*: :_files"

}


function _micromamba_config_append {
    local line state

    function _commands {
        local -a commands
        commands=(
            'specs:\[TEXT,TEXT\] ... REQUIRED'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (specs)
            _micromamba_config_append_specs
            ;;

        esac
        ;;
     esac

}

function _micromamba_config_append_specs {
    _arguments \
        "*: :_files"

}

function _micromamba_config_remove-key {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        "*: :_files"

}

function _micromamba_config_remove {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        "*: :_files"

}

function _micromamba_config_set {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        "*: :_files"

}

function _micromamba_config_get {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--system[Set configuration on system'\''s rc file]':file:_files \
        '--env[Set configuration on env'\''s rc file]':file:_files \
        '--file[Set configuration on system'\''s rc file]' \
        "*: :_files"

}

function _micromamba_info {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--licenses[Print licenses]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_constructor {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-p,--prefix}'[Extract the conda pkgs in <prefix>/pkgs]' \
        '--extract-conda-pkgs[Extract the conda pkgs in <prefix>/pkgs]' \
        '--extract-tarball[Extract given tarball into prefix]' \
        "*: :_files"

}


function _micromamba_env {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List known environments'
            'create:Create new environment (pre-commit.com compatibility alias for '\''micromamba create'\'')'
            'export:Export environment'
            'remove:Remove an environment'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _micromamba_env_list
            ;;

        (create)
            _micromamba_env_create
            ;;

        (export)
            _micromamba_env_export
            ;;

        (remove)
            _micromamba_env_remove
            ;;

        esac
        ;;
     esac

}

function _micromamba_env_list {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_env_create {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[in {disabled->0,flexible->1,strict->2} OR {0,1,2} Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-f,--file}'[File (yaml, explicit or plain)]' \
        {--no-pin,--pin}'[Ignore pinned packages]' \
        {--no-py-pin,--py-pin}'[Do not automatically pin Python]' \
        {--pyc,--no-pyc}'[Defines if PYC files will be compiled or not]' \
        {--allow-uninstall,--no-allow-uninstall}'[Allow uninstall when installing or updating packages. Default is true.]' \
        {--allow-downgrade,--no-allow-downgrade}'[Allow downgrade when installing packages. Default is false.]' \
        {--allow-softlinks,--no-allow-softlinks}'[Allow to use soft-links when hard-links are not possible]' \
        {--always-softlink,--no-always-softlink}'[Use soft-link instead of hard-link]' \
        {--always-copy,--no-always-copy}'[Use copy instead of hard-link]' \
        {--extra-safety-checks,--no-extra-safety-checks}'[Run extra verifications on packages]' \
        '--lock-timeout[Lockfile timeout]' \
        {--shortcuts,--no-shortcuts}'[Install start-menu shortcuts on Windows (not implemented on Linux / macOS)]' \
        '--safety-checks[Safety checks policy ('\''enabled'\'', '\''warn'\'', or '\''disabled'\'')]' \
        '--verify-artifacts[Run verifications on packages signatures]' \
        '--platform[The platform description]' \
        '--no-deps[Do not install dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk]' \
        '--only-deps[Only install dependencies]' \
        '--category[Categories of package to install from environment lockfile]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}

function _micromamba_env_export {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-e,--explicit}'[Use explicit format]' \
        {--no-md5,--md5}'[Disable md5]' \
        {--no-build,--build}'[Disable the build string in spec]' \
        '--from-history[Build environment spec from explicit specs in history]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_env_remove {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_activate {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--stack[Activate the specified environment without first deactivating the current one]' \
        "*: :_files"

}

function _micromamba_run {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-a,--attach}'[Attach to stdin, stdout and/or stderr. -a "" for disabling stream redirection]' \
        '--cwd[Current working directory for command to run in. Defaults to cwd]' \
        {-d,--detach}'[Detach process from terminal]' \
        '--clean-env[Start with a clean environment]' \
        {-e,--env}'[Add env vars with -e ENVVAR or -e ENVVAR=VALUE]' \
        '--label[Specifies the name of the process. If not set, a unique name will be generated derived from the executable name if possible.]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        "*: :_files"

}

function _micromamba_ps {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        "*: :_files"

}


function _micromamba_auth {
    local line state

    function _commands {
        local -a commands
        commands=(
            'login:Store login information for a specific host'
            'logout:Erase login information for a specific host'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Print this help message and exit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (login)
            _micromamba_auth_login
            ;;

        (logout)
            _micromamba_auth_logout
            ;;

        esac
        ;;
     esac

}

function _micromamba_auth_login {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-p,--password}'[Password for account]' \
        {-u,--username}'[User name for the account]' \
        {-t,--token}'[Token for the account]' \
        {-b,--bearer}'[Bearer token for the account]' \
        '--password-stdin[Read password from stdin]' \
        '--token-stdin[Read token from stdin]' \
        '--bearer-stdin[Read bearer token from stdin]' \
        "*: :_files"

}

function _micromamba_auth_logout {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        '--all[Log out from all hosts]' \
        "*: :_files"

}

function _micromamba_search {
    _arguments \
        {-h,--help}'[Print this help message and exit]' \
        {-c,--channel}'[Define the list of channels]' \
        '--override-channels[Override channels]' \
        '--channel-priority[Define the channel priority ('\''strict'\'' or '\''disabled'\'')]' \
        '--channel-alias[The prepended url location to associate with channel names]' \
        '--strict-channel-priority[Enable strict channel priority]' \
        '--no-channel-priority[Disable channel priority]' \
        {-t,--tree}'[Show result as a tree]' \
        '--recursive[Show dependencies recursively, i.e. transitive dependencies (only for `depends`)]' \
        '--pretty[Pretty print result (only for search)]' \
        '--use-local[Use installed data (--use-local=1, default for `depends` and `whoneeds`) or remote repositories (--use-local=0, default for `search`). If the `-c,--channel` option is set, it has the priority and --use-local is set to 0]' \
        '--platform[The platform description]' \
        '--rc-file[Paths to the configuration files to use]' \
        '--no-rc[Disable the use of configuration files]' \
        '--no-env[Disable the use of environment variables]' \
        {-v,--verbose}'[Set verbosity (higher verbosity with multiple -v, e.g. -vvv)]' \
        '--log-level[Set the log level]' \
        {-q,--quiet}'[Set quiet mode (print less output)]' \
        {-y,--yes}'[Automatically answer yes on prompted questions]' \
        '--json[Report all output as json]' \
        '--offline[Force use cached repodata]' \
        '--dry-run[Only display what would have been done]' \
        '--download-only[Only download and extract packages, do not link them into environment.]' \
        '--experimental[Enable experimental features]' \
        {-r,--root-prefix}'[Path to the root prefix]' \
        {-p,--prefix}'[Path to the target prefix]' \
        '--relocate-prefix[Path to the relocation prefix]' \
        {-n,--name}'[Name of the target prefix]' \
        '--ssl-verify[Verify SSL certificates for HTTPS requests]' \
        '--ssl-no-revoke[SSL certificate revocation checks]' \
        '--cacert-path[Path (file or directory) SSL certificate(s)]' \
        '--repodata-ttl[Repodata time-to-live]' \
        '--retry-clean-cache[If solve fails, try to fetch updated repodata]' \
        "*: :_files"

}

_micromamba "$@"

