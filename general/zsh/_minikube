#compdef _minikube minikube

# Auto-generated with h2o

    function _minikube_start {
        _arguments \
            '--container-runtime[The container runtime to be used. Valid options: docker, cri-o, containerd (default: auto),--cpus='\''2'\'': Number of CPUs allocated to Kubernetes. Use "max" to use the maximum number of CPUs.,--cri-socket='\'''\'': The cri socket path to be used.,--delete-on-failure=false: If set, delete the current cluster if start fails and try again. Defaults to false.,--disable-driver-mounts=false: Disables the filesystem mounts provided by the hypervisors,--disable-optimizations=false: If set, disables optimizations that are set for local Kubernetes. Including decreasing CoreDNS replicas from 2 to 1 and increasing kubeadm housekeeping-interval from 10s to 5m. Defaults to false.,--disk-size='\''20000mb'\'': Disk size allocated to the minikube VM (format: <number>\[<unit>\], where unit = b, k, m or g).,--dns-domain='\''cluster.local'\'': The cluster dns domain name used in the Kubernetes cluster,--dns-proxy=false: Enable proxy for NAT DNS requests (virtualbox driver only),--docker-env=\[\]: Environment variables to pass to the Docker daemon. (format: key=value),--docker-opt=\[\]: Specify arbitrary flags to pass to the Docker daemon. (format: key=value),--download-only=false: If true, only download and cache files for later use - don'\''t install or start anything.,--driver='\'''\'': Driver is one of: virtualbox, vmwarefusion, kvm2, vmware, none, docker, podman, ssh (defaults to auto-detect),--dry-run=false: dry-run mode. Validates configuration, but does not mutate system state,--embed-certs=false: if true, will embed the certs in kubeconfig.,--enable-default-cni=false: DEPRECATED: Replaced by --cni=bridge,--extra-config=: A set of key=value pairs that describe configuration that may be passed to different components.   The key should be '\''.'\'' separated, and the first part before the dot is the component to apply the configuration to. Valid components are: kubelet, kubeadm, apiserver, controller-manager, etcd, proxy, scheduler Valid kubeadm parameters: ignore-preflight-errors, dry-run, kubeconfig, kubeconfig-dir, node-name, cri-socket, experimental-upload-certs, certificate-key, rootfs, skip-phases, pod-network-cidr]' \
            '--extra-disks[Number of extra disks created and attached to the minikube VM (currently only implemented for hyperkit and kvm2 drivers)]' \
            '--feature-gates[A set of key=value pairs that describe feature gates for alpha/experimental features.]' \
            '--force[Force minikube to perform possibly dangerous operations]' \
            '--force-systemd[If set, force the container runtime to use systemd as cgroup manager. Defaults to false.]' \
            '--host-dns-resolver[Enable host resolver for NAT DNS requests (virtualbox driver only)]' \
            '--host-only-cidr[The CIDR to be used for the minikube VM (virtualbox driver only)]' \
            '--host-only-nic-type[NIC Type used for host only network. One of Am79C970A, Am79C973, 82540EM, 82543GC, 82545EM, or virtio (virtualbox driver only)]' \
            '--hyperkit-vpnkit-sock[Location of the VPNKit socket used for networking. If empty, disables Hyperkit VPNKitSock, if '\''auto'\'' uses Docker for Mac VPNKit connection, otherwise uses the specified VSock (hyperkit driver only)]' \
            '--hyperv-external-adapter[External Adapter on which external switch will be created if no external switch is found. (hyperv driver only)]' \
            '--hyperv-use-external-switch[Whether to use external switch over Default Switch if virtual switch not explicitly specified. (hyperv driver only)]' \
            '--hyperv-virtual-switch[The hyperv virtual switch name. Defaults to first found. (hyperv driver only)]' \
            '--image-mirror-country[Country code of the image mirror to be used. Leave empty to use the global one. For Chinese mainland users, set it to cn.]' \
            '--image-repository[Alternative image repository to pull docker images from. This can be used when you have limited access to gcr.io. Set it to "auto" to let minikube decide one for you. For Chinese mainland users, you may use local gcr.io mirrors such as registry.cn-hangzhou.aliyuncs.com/google_containers]' \
            '--install-addons[If set, install addons. Defaults to true.]' \
            '--interactive[Allow user prompts for more information]' \
            '--iso-url[Locations to fetch the minikube ISO from.]' \
            '--iso-url[Locations to fetch the minikube ISO from.]' \
            '--keep-context[This will keep the existing kubectl context and will create a minikube context.]' \
            '--kubernetes-version[The Kubernetes version that the minikube VM will use (ex: v1.2.3, '\''stable'\'' for v1.23.3, '\''latest'\'' for v1.23.4-rc.0). Defaults to '\''stable'\''.]' \
            '--kvm-gpu[Enable experimental NVIDIA GPU support in minikube]' \
            '--kvm-hidden[Hide the hypervisor signature from the guest in minikube (kvm2 driver only)]' \
            '--kvm-network[The KVM default network name. (kvm2 driver only)]' \
            '--kvm-numa-count[Simulate numa node count in minikube, supported numa node count range is 1-8 (kvm2 driver only)]' \
            '--kvm-qemu-uri[The KVM QEMU connection URI. (kvm2 driver only)]' \
            '--listen-address[IP Address to use to expose ports (docker and podman driver only)]' \
            '--memory[Amount of RAM to allocate to Kubernetes (format: <number>\[<unit>\], where unit = b, k, m or g). Use "max" to use the maximum amount of memory.]' \
            '--mount[This will start the mount daemon and automatically mount files into minikube.]' \
            '--mount-9p-version[Specify the 9p version that the mount should use]' \
            '--mount-gid[Default group id used for the mount]' \
            '--mount-ip[Specify the ip that the mount should be setup on]' \
            '--mount-msize[The number of bytes to use for 9p packet payload]' \
            '--mount-port[Specify the port that the mount should be setup on, where 0 means any free port.]' \
            '--mount-string[The argument to pass the minikube mount command on start.]' \
            '--mount-type[Specify the mount filesystem type (supported types: 9p)]' \
            '--mount-uid[Default user id used for the mount]' \
            '--namespace[The named space to activate after start]' \
            '--nat-nic-type[NIC Type used for nat network. One of Am79C970A, Am79C973, 82540EM, 82543GC, 82545EM, or virtio (virtualbox driver only)]' \
            '--native-ssh[Use native Golang SSH client (default true). Set to '\''false'\'' to use the command line '\''ssh'\'' command when accessing the docker machine. Useful for the machine drivers when they will not start with '\''Waiting for SSH'\''.]' \
            '--network[network to run minikube with. Now it is used by docker/podman and KVM drivers. If left empty, minikube will create a new network.]' \
            '--network-plugin[Kubelet network plug-in to use (default: auto)]' \
            '--nfs-shares-root[Where to root the NFS Shares, defaults to /nfsshares (hyperkit driver only)]' \
            '--no-kubernetes[If set, minikube VM/container will start without starting or configuring Kubernetes. (only works on new clusters)]' \
            '--no-vtx-check[Disable checking for the availability of hardware virtualization before the vm is started (virtualbox driver only)]' \
            {-n,--nodes}'[The number of nodes to spin up. Defaults to 1.]' \
            {-o,--output}'[Format to print stdout in. Options include: \[text,json\]]' \
            '--preload[If set, download tarball of preloaded images if available to improve start time. Defaults to true.]' \
            '--service-cluster-ip-range[The CIDR to be used for service cluster IPs.]' \
            '--ssh-ip-address[IP address (ssh driver only)]' \
            '--ssh-key[SSH key (ssh driver only)]' \
            '--ssh-port[SSH port (ssh driver only)]' \
            '--ssh-user[SSH user (ssh driver only)]' \
            '--trace[Send trace events. Options include: \[gcp\]]' \
            '--uuid[Provide VM UUID to restore MAC address (hyperkit driver only)]' \
            '--vm[Filter to use only VM Drivers]' \
            '--vm-driver[DEPRECATED, use `driver` instead.]' \
            '--wait[comma separated list of Kubernetes components to verify and wait for after starting a cluster. defaults to "apiserver,system_pods", available options: "apiserver,system_pods,default_sa,apps_running,node_ready,kubelet" . other acceptable values are '\''all'\'' or '\''none'\'', '\''true'\'' and '\''false'\'']' \
            '--wait-timeout[max time to wait per Kubernetes or host to be healthy.]' \
            "*: :_files"

    }

    function _minikube_status {
        _arguments \
            {-l,--layout}'[output layout (EXPERIMENTAL, JSON only): '\''nodes'\'' or '\''cluster'\'']' \
            {-n,--node}'[The node to check status for. Defaults to control plane. Leave blank with default format for status on all nodes.]' \
            {-o,--output}'[minikube status --output OUTPUT. json, text]' \
            {-w,--watch}'[Continuously listing/getting the status with optional interval duration.]' \
            "*: :_files"

    }

    function _minikube_stop {
        _arguments \
            '--all[Set flag to stop all profiles (clusters)]' \
            '--cancel-scheduled[cancel any existing scheduled stop requests]' \
            '--keep-context-active[keep the kube-context active after cluster is stopped. Defaults to false.]' \
            {-o,--output}'[Format to print stdout in. Options include: \[text,json\]]' \
            '--schedule[Set flag to stop cluster after a set amount of time (e.g. --schedule=5m)]' \
            "*: :_files"

    }

    function _minikube_delete {
        _arguments \
            '--all[Set flag to delete all profiles]' \
            '--purge[Set this flag to delete the '\''.minikube'\'' folder from your user directory.]' \
            "*: :_files"

    }

    function _minikube_dashboard {
        _arguments \
            '--port[Exposed port of the proxyfied dashboard. Set to 0 to pick a random port.]' \
            '--url[Display dashboard URL instead of opening a browser]' \
            "*: :_files"

    }

    function _minikube_pause {
        _arguments \
            {-A,--all-namespaces}'[If set, pause all namespaces]' \
            {-n,--namespaces}'[namespaces to pause]' \
            {-n,--namespaces}'[namespaces to pause]' \
            {-o,--output}'[Format to print stdout in. Options include: \[text,json\]]' \
            "*: :_files"

    }

    function _minikube_unpause {
        _arguments \
            {-A,--all-namespaces}'[If set, unpause all namespaces]' \
            {-n,--namespaces}'[namespaces to unpause]' \
            {-n,--namespaces}'[namespaces to unpause]' \
            {-o,--output}'[Format to print stdout in. Options include: \[text,json\]]' \
            "*: :_files"

    }

    function _minikube_docker-env {
        _arguments \
            '--no-proxy[Add machine IP to NO_PROXY environment variable]' \
            {-o,--output}'[One of '\''text'\'', '\''yaml'\'' or '\''json'\''.]' \
            '--shell[Force environment to be configured for a specified shell: \[fish, cmd, powershell, tcsh, bash, zsh\], default is auto-detect]' \
            '--ssh-add[Add SSH identity key to SSH authentication agent]' \
            '--ssh-host[Use SSH connection instead of HTTPS (port 2376)]' \
            {-u,--unset}'[Unset variables instead of setting them]' \
            "*: :_files"

    }

    function _minikube_podman-env {
        _arguments \
            '--shell[Force environment to be configured for a specified shell: \[fish, cmd, powershell, tcsh, bash, zsh\], default is auto-detect]' \
            {-u,--unset}'[Unset variables instead of setting them]' \
            "*: :_files"

    }

    function _minikube_cache {
        _arguments \
            "*: :_files"

    }

    function _minikube_image {
        _arguments \
            "*: :_files"

    }

    function _minikube_addons {
        _arguments \
            "*: :_files"

    }

    function _minikube_config {
        _arguments \
            "*: :_files"

    }

    function _minikube_profile {
        _arguments \
            "*: :_files"

    }

    function _minikube_update-context {
        _arguments \
            "*: :_files"

    }

    function _minikube_service {
        _arguments \
            '--all[Forwards all services in a namespace (defaults to "false")]' \
            '--https[Open the service URL with https instead of http (defaults to "false")]' \
            '--interval[The initial time interval for each check that wait performs in seconds]' \
            {-n,--namespace}'[The service namespace]' \
            '--url[Display the Kubernetes service URL in the CLI instead of opening it in the default browser]' \
            '--wait[Amount of time to wait for a service in seconds]' \
            "*: :_files"

    }

    function _minikube_tunnel {
        _arguments \
            {-c,--cleanup}'[call with cleanup=true to remove old tunnels]' \
            "*: :_files"

    }

    function _minikube_mount {
        _arguments \
            '--9p-version[Specify the 9p version that the mount should use]' \
            '--gid[Default group id used for the mount]' \
            '--ip[Specify the ip that the mount should be setup on]' \
            '--kill[Kill the mount process spawned by minikube start]' \
            '--msize[The number of bytes to use for 9p packet payload]' \
            '--port[Specify the port that the mount should be setup on, where 0 means any free port.]' \
            '--type[Specify the mount filesystem type (supported types: 9p)]' \
            '--uid[Default user id used for the mount]' \
            "*: :_files"

    }

    function _minikube_ssh {
        _arguments \
            '--native-ssh[Use native Golang SSH client (default true). Set to '\''false'\'' to use the command line '\''ssh'\'' command when accessing the docker machine. Useful for the machine drivers when they will not start with '\''Waiting for SSH'\''.]' \
            {-n,--node}'[The node to ssh into. Defaults to the primary control plane.]' \
            "*: :_files"

    }

    function _minikube_kubectl {
        _arguments \
            '--ssh[Use SSH for running kubernetes client on the node]' \
            "*: :_files"

    }

    function _minikube_node {
        _arguments \
            "*: :_files"

    }

    function _minikube_cp {
        _arguments \
            "*: :_files"

    }

    function _minikube_ssh-key {
        _arguments \
            {-n,--node}'[The node to get ssh-key path. Defaults to the primary control plane.]' \
            "*: :_files"

    }

    function _minikube_ssh-host {
        _arguments \
            '--append-known[Add host key to SSH known_hosts file]' \
            {-n,--node}'[The node to ssh into. Defaults to the primary control plane.]' \
            "*: :_files"

    }

    function _minikube_ip {
        _arguments \
            {-n,--node}'[The node to get IP. Defaults to the primary control plane.]' \
            "*: :_files"

    }

    function _minikube_logs {
        _arguments \
            '--file[If present, writes to the provided file instead of stdout.]' \
            {-f,--follow}'[Show only the most recent journal entries, and continuously print new entries as they are appended to the journal.]' \
            {-n,--length}'[Number of lines back to go within the log]' \
            '--node[The node to get logs from. Defaults to the primary control plane.]' \
            '--problems[Show only log entries which point to known problems]' \
            "*: :_files"

    }

    function _minikube_update-check {
        _arguments \
            "*: :_files"

    }

    function _minikube_version {
        _arguments \
            '--components[list versions of all components included with minikube. (the cluster must be running)]' \
            {-o,--output}'[One of '\''yaml'\'' or '\''json'\''.]' \
            '--short[Print just the version number.]' \
            "*: :_files"

    }

    function _minikube_options {
        _arguments \
            "*: :_files"

    }

    function _minikube_completion {
        _arguments \
            "*: :_files"

    }


function _minikube {
    local line state

    function _commands {
        local -a commands
        commands=(
            'start:Starts a local Kubernetes cluster'
            'status:Gets the status of a local Kubernetes cluster'
            'stop:Stops a running local Kubernetes cluster'
            'delete:Deletes a local Kubernetes cluster'
            'dashboard:Access the Kubernetes dashboard running within the minikube cluster'
            'pause:pause Kubernetes'
            'unpause:unpause Kubernetes'
            'docker-env:Configure environment to use minikube'\''s Docker daemon'
            'podman-env:Configure environment to use minikube'\''s Podman service'
            'cache:Add, delete, or push a local image into minikube'
            'image:Manage images'
            'addons:Enable or disable a minikube addon'
            'config:Modify persistent configuration values'
            'profile:Get or list the current profiles (clusters)'
            'update-context:Update kubeconfig in case of an IP or port change'
            'service:Returns a URL to connect to a service'
            'tunnel:Connect to LoadBalancer services'
            'mount:Mounts the specified directory into minikube'
            'ssh:Log into the minikube environment (for debugging)'
            'kubectl:Run a kubectl binary matching the cluster version'
            'node:Add, remove, or list additional nodes'
            'cp:Copy the specified file into minikube'
            'ssh-key:Retrieve the ssh identity key path of the specified node'
            'ssh-host:Retrieve the ssh host key of the specified node'
            'ip:Retrieves the IP address of the specified node'
            'logs:Returns logs to debug a local Kubernetes cluster'
            'update-check:Print current and latest version number'
            'version:Print the version of minikube'
            'options:Show a list of global command-line options (applies to all commands).'
            'completion:Generate command completion for a shell'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (start)
            _minikube_start
            ;;

        (status)
            _minikube_status
            ;;

        (stop)
            _minikube_stop
            ;;

        (delete)
            _minikube_delete
            ;;

        (dashboard)
            _minikube_dashboard
            ;;

        (pause)
            _minikube_pause
            ;;

        (unpause)
            _minikube_unpause
            ;;

        (docker-env)
            _minikube_docker-env
            ;;

        (podman-env)
            _minikube_podman-env
            ;;

        (cache)
            _minikube_cache
            ;;

        (image)
            _minikube_image
            ;;

        (addons)
            _minikube_addons
            ;;

        (config)
            _minikube_config
            ;;

        (profile)
            _minikube_profile
            ;;

        (update-context)
            _minikube_update-context
            ;;

        (service)
            _minikube_service
            ;;

        (tunnel)
            _minikube_tunnel
            ;;

        (mount)
            _minikube_mount
            ;;

        (ssh)
            _minikube_ssh
            ;;

        (kubectl)
            _minikube_kubectl
            ;;

        (node)
            _minikube_node
            ;;

        (cp)
            _minikube_cp
            ;;

        (ssh-key)
            _minikube_ssh-key
            ;;

        (ssh-host)
            _minikube_ssh-host
            ;;

        (ip)
            _minikube_ip
            ;;

        (logs)
            _minikube_logs
            ;;

        (update-check)
            _minikube_update-check
            ;;

        (version)
            _minikube_version
            ;;

        (options)
            _minikube_options
            ;;

        (completion)
            _minikube_completion
            ;;

        esac
        ;;
     esac

}

