#compdef _npm npm

# Auto-generated with h2o

    function _npm_access {
        _arguments \
            "*: :_files"

    }

    function _npm_adduser {
        _arguments \
            '--registry[The base URL of the npm registry. (default: "https://registry.npmjs.org/")]' \
            '--scope[Associate an operation with a scope for a scoped registry.]' \
            "*: :_files"

    }

    function _npm_audit {
        _arguments \
            "*: :_files"

    }

    function _npm_bin {
        _arguments \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            "*: :_files"

    }

    function _npm_bugs {
        _arguments \
            "*: :_files"

    }

    function _npm_cache {
        _arguments \
            "*: :_files"

    }

    function _npm_ci {
        _arguments \
            '--audit[When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.]' \
            '--foreground-scripts[Run all  build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--script-shell[The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.]' \
            "*: :_files"

    }

    function _npm_completion {
        _arguments \
            "*: :_files"

    }

    function _npm_config {
        _arguments \
            "*: :_files"

    }

    function _npm_dedupe {
        _arguments \
            '--global-style[Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.]' \
            '--legacy-bundling[Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.]' \
            '--strict-peer-deps[If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.]' \
            '--package-lock[If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.]' \
            '--save[Save installed packages to a package.json file as dependencies.]' \
            '--omit[Dependency types to omit from the installation tree on disk.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--audit[When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.]' \
            '--bin-links[Tells npm to create symlinks (or .cmd shims on Windows) for package executables.]' \
            '--fund[When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help npm fund for details.]' \
            '--dry-run[Indicates that you don'\''t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_deprecate {
        _arguments \
            '--registry[The base URL of the npm registry. (default: "https://registry.npmjs.org/")]' \
            '--otp[This is a one-time password from a two-factor authenticator. It'\''s needed when publishing or changing package permissions with npm access. If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one. (default: null)]' \
            "*: :_files"

    }

    function _npm_diff {
        _arguments \
            '--diff[Define arguments to compare in npm diff.]' \
            '--diff-name-only[Prints only filenames when using npm diff.]' \
            '--diff-unified[Ignore whitespace when comparing lines in npm diff.]' \
            '--diff-ignore-all-space[Define arguments to compare in npm diff.]' \
            '--diff-no-prefix[Do not show any source or destination prefix in npm diff output.]' \
            '--diff-src-prefix[Source prefix to be used in npm diff output.]' \
            '--diff-dst-prefix[Destination prefix to be used in npm diff output.]' \
            '--diff-text[Treat all files as text in npm diff.]' \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            '--tag[If you ask npm to install a package and don'\''t tell it a specific version, then it will install the specified tag.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_dist-tag {
        _arguments \
            "*: :_files"

    }

    function _npm_docs {
        _arguments \
            '--browser[The browser that is called by npm commands to open websites.]' \
            '--registry[The base URL of the npm registry.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_doctor {
        _arguments \
            '--registry[The base URL of the npm registry.]' \
            "*: :_files"

    }

    function _npm_edit {
        _arguments \
            '--editor[The command to run for `npm edit` and `npm config edit`.]' \
            "*: :_files"

    }

    function _npm_exec {
        _arguments \
            "*: :_files"

    }

    function _npm_explain {
        _arguments \
            '--json[Whether or not to output JSON data, rather than the normal output.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_explore {
        _arguments \
            "*: :_files"

    }

    function _npm_find-dupes {
        _arguments \
            "*: :_files"

    }

    function _npm_fund {
        _arguments \
            "*: :_files"

    }

    function _npm_get {
        _arguments \
            "*: :_files"

    }

    function _npm_help {
        _arguments \
            "*: :_files"

    }

    function _npm_hook {
        _arguments \
            "*: :_files"

    }

    function _npm_init {
        _arguments \
            '--yes[Automatically answer "yes" to any prompts that npm might print on the command line.]' \
            '--force[Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_install {
        _arguments \
            '--save[Save installed packages to a package.json file as dependencies.]' \
            '--save-exact[Dependencies saved to package.json will be configured with an exact version rather than using npm'\''s default semver range operator.]' \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            '--global-style[Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.]' \
            '--legacy-bundling[Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.]' \
            '--omit[Dependency types to omit from the installation tree on disk.]' \
            '--strict-peer-deps[If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.]' \
            '--package-lock[If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.]' \
            '--foreground-scripts[Run all  build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--audit[When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.]' \
            '--bin-links[Tells npm to create symlinks (or .cmd shims on Windows) for package executables.]' \
            '--fund[When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help npm fund for details.]' \
            '--dry-run[Indicates that you don'\''t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_install-ci-test {
        _arguments \
            "*: :_files"

    }

    function _npm_install-test {
        _arguments \
            '--save[Save installed packages to a package.json file as dependencies.]' \
            '--save-exact[Dependencies saved to package.json will be configured with an exact version rather than using npm'\''s default semver range operator.]' \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            '--global-style[Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.]' \
            '--legacy-bundling[Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.]' \
            '--omit[Dependency types to omit from the installation tree on disk.]' \
            '--strict-peer-deps[If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.]' \
            '--package-lock[If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.]' \
            '--foreground-scripts[Run all  build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--audit[When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.]' \
            '--bin-links[Tells npm to create symlinks (or .cmd shims on Windows) for package executables.]' \
            '--fund[When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help npm fund for details.]' \
            '--dry-run[Indicates that you don'\''t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_link {
        _arguments \
            '--save[Save installed packages to a package.json file as dependencies.]' \
            '--save-exact[Dependencies saved to package.json will be configured with an exact version rather than using npm'\''s default semver range operator.]' \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            '--global-style[Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.]' \
            '--legacy-bundling[Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred.]' \
            '--omit[Dependency types to omit from the installation tree on disk.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--audit[When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for npm help audit for details on what is submitted.]' \
            '--bin-links[Tells npm to create symlinks (or .cmd shims on Windows) for package executables.]' \
            '--fund[When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help npm fund for details.]' \
            '--dry-run[Indicates that you don'\''t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_ll {
        _arguments \
            "*: :_files"

    }

    function _npm_logout {
        _arguments \
            '--registry[The base URL of the npm registry. (default: "https://registry.npmjs.org/")]' \
            '--scope[Associate an operation with a scope for a scoped registry.]' \
            "*: :_files"

    }

    function _npm_ls {
        _arguments \
            '--all[When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended upon by the current project.]' \
            '--json[Whether or not to output JSON data, rather than the normal output.]' \
            '--long[Show extended information in ls, search, and help-search.]' \
            '--parseable[Show the description in npm search]' \
            '--global[Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help folders for more on the differences in behavior.]' \
            '--depth[The depth to go when recursing packages for npm ls.]' \
            '--omit[Dependency types to omit from the installation tree on disk.]' \
            '--link[Used with npm ls, limiting output to only those packages that are linked.]' \
            '--package-lock-only[If set to true, the current operation will only use the package-lock.json, ignoring node_modules.]' \
            '--unicode[When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_org {
        _arguments \
            "*: :_files"

    }

    function _npm_outdated {
        _arguments \
            "*: :_files"

    }

    function _npm_owner {
        _arguments \
            "*: :_files"

    }

    function _npm_pack {
        _arguments \
            "*: :_files"

    }

    function _npm_ping {
        _arguments \
            "*: :_files"

    }

    function _npm_pkg {
        _arguments \
            "*: :_files"

    }

    function _npm_prefix {
        _arguments \
            "*: :_files"

    }

    function _npm_profile {
        _arguments \
            "*: :_files"

    }

    function _npm_prune {
        _arguments \
            "*: :_files"

    }

    function _npm_publish {
        _arguments \
            "*: :_files"

    }

    function _npm_rebuild {
        _arguments \
            "*: :_files"

    }

    function _npm_repo {
        _arguments \
            "*: :_files"

    }

    function _npm_restart {
        _arguments \
            "*: :_files"

    }

    function _npm_root {
        _arguments \
            "*: :_files"

    }

    function _npm_run-script {
        _arguments \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            '--if-present[If true, npm will not exit with an error code when run-script is invoked for a script that isn'\''t defined in the scripts section of package.json. This option can be used when it'\''s desirable to optionally run a script when it'\''s present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.]' \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--script-shell[The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.]' \
            "*: :_files"

    }

    function _npm_search {
        _arguments \
            '--long[Show extended information in ls, search, and help-search.]' \
            '--json[Whether or not to output JSON data, rather than the normal output.]' \
            '--color[If false, never shows colors. If "always" then always shows colors. If true, then only prints color codes for tty file descriptors.]' \
            '--parseable[Show the description in npm search]' \
            '--searchopts[Space-separated options that are always passed to search.]' \
            '--searchexclude[Space-separated options that limit the results from search.]' \
            '--registry[The base URL of the npm registry.]' \
            '--prefer-online[If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.]' \
            '--prefer-offline[If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use --offline.]' \
            '--offline[Force offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see --prefer-offline.]' \
            "*: :_files"

    }

    function _npm_set {
        _arguments \
            "*: :_files"

    }

    function _npm_set-script {
        _arguments \
            "*: :_files"

    }

    function _npm_shrinkwrap {
        _arguments \
            "*: :_files"

    }

    function _npm_star {
        _arguments \
            "*: :_files"

    }

    function _npm_stars {
        _arguments \
            "*: :_files"

    }

    function _npm_start {
        _arguments \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--script-shell[The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.]' \
            "*: :_files"

    }

    function _npm_stop {
        _arguments \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--script-shell[The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.]' \
            "*: :_files"

    }

    function _npm_team {
        _arguments \
            "*: :_files"

    }

    function _npm_test {
        _arguments \
            '--ignore-scripts[If true, npm does not run scripts specified in package.json files.]' \
            '--script-shell[The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands.]' \
            "*: :_files"

    }

    function _npm_token {
        _arguments \
            "*: :_files"

    }

    function _npm_uninstall {
        _arguments \
            "*: :_files"

    }

    function _npm_unpublish {
        _arguments \
            "*: :_files"

    }

    function _npm_unstar {
        _arguments \
            "*: :_files"

    }

    function _npm_update {
        _arguments \
            "*: :_files"

    }

    function _npm_version {
        _arguments \
            '--allow-same-version[Prevents throwing an error when npm version is used to set the new version to the same value as the current version.]' \
            '--commit-hooks[Run git commit hooks when using the npm version command.]' \
            '--git-tag-version[Tag the commit when using the npm version command. Setting this to false results in no commit being made at all.]' \
            '--json[Whether or not to output JSON data, rather than the normal output.]' \
            '--preid[The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver. Like the rc in 1.2.0-rc.8.]' \
            '--sign-git-tag[If set to true, then the npm version command will tag the version using -s to add a signature.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_view {
        _arguments \
            '--json[Whether or not to output JSON data, rather than the normal output.]' \
            '--workspace[Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.]' \
            '--workspaces[Set to true to run the command in the context of all configured workspaces.]' \
            '--include-workspace-root[Include the workspace root when workspaces are enabled for a command.]' \
            "*: :_files"

    }

    function _npm_whoami {
        _arguments \
            '--registry[The base URL of the npm registry. (default: "https://registry.npmjs.org/")]' \
            "*: :_files"

    }


function _npm {
    local line state

    function _commands {
        local -a commands
        commands=(
            'access:Set access level on published packages'
            'adduser:Add a registry user account'
            'audit:Run a security audit'
            'bin:Display npm bin folder'
            'bugs:Report bugs for a package in a web browser'
            'cache:Manipulates packages cache'
            'ci:Install a project with a clean slate'
            'completion:Tab Completion for npm'
            'config:Manage the npm configuration files'
            'dedupe:Reduce duplication in the package tree'
            'deprecate:Deprecate a version of a package'
            'diff:The registry diff command'
            'dist-tag:Modify package distribution tags'
            'docs:Open documentation for a package in a web browser'
            'doctor:Check your npm environment'
            'edit:Edit an installed package'
            'exec:Run a command from a local or remote npm package'
            'explain:Explain installed packages'
            'explore:Browse an installed package'
            'find-dupes:Find duplication in the package tree'
            'fund:Retrieve funding information'
            'get:Get a value from the npm configuration'
            'help:Get help on npm'
            'hook:Manage registry hooks'
            'init:Create a package.json file'
            'install:Install a package'
            'install-ci-test:Install a project with a clean slate and run tests'
            'install-test:Install package(s) and run tests'
            'link:Symlink a package folder'
            'll:List installed packages'
            'logout:Log out of the registry'
            'ls:List installed packages'
            'org:Manage orgs'
            'outdated:Check for outdated packages'
            'owner:Manage package owners'
            'pack:Create a tarball from a package'
            'ping:Ping npm registry'
            'pkg:Manages your package.json'
            'prefix:Display prefix'
            'profile:Change settings on your registry profile'
            'prune:Remove extraneous packages'
            'publish:Publish a package'
            'rebuild:Rebuild a package'
            'repo:Open package repository page in the browser'
            'restart:Restart a package'
            'root:Display npm root'
            'run-script:Run arbitrary package scripts'
            'search:Search for packages'
            'set:Set a value in the npm configuration'
            'set-script:Set tasks in the scripts section of package.json'
            'shrinkwrap:Lock down dependency versions for publication'
            'star:Mark your favorite packages'
            'stars:View packages marked as favorites'
            'start:Start a package'
            'stop:Stop a package'
            'team:Manage organization teams and team memberships'
            'test:Test a package'
            'token:Manage your authentication tokens'
            'uninstall:Remove a package'
            'unpublish:Remove a package from the registry'
            'unstar:Remove an item from your favorite packages'
            'update:Update packages'
            'version:Bump a package version'
            'view:View registry info'
            'whoami:Display npm username'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (access)
            _npm_access
            ;;

        (adduser)
            _npm_adduser
            ;;

        (audit)
            _npm_audit
            ;;

        (bin)
            _npm_bin
            ;;

        (bugs)
            _npm_bugs
            ;;

        (cache)
            _npm_cache
            ;;

        (ci)
            _npm_ci
            ;;

        (completion)
            _npm_completion
            ;;

        (config)
            _npm_config
            ;;

        (dedupe)
            _npm_dedupe
            ;;

        (deprecate)
            _npm_deprecate
            ;;

        (diff)
            _npm_diff
            ;;

        (dist-tag)
            _npm_dist-tag
            ;;

        (docs)
            _npm_docs
            ;;

        (doctor)
            _npm_doctor
            ;;

        (edit)
            _npm_edit
            ;;

        (exec)
            _npm_exec
            ;;

        (explain)
            _npm_explain
            ;;

        (explore)
            _npm_explore
            ;;

        (find-dupes)
            _npm_find-dupes
            ;;

        (fund)
            _npm_fund
            ;;

        (get)
            _npm_get
            ;;

        (help)
            _npm_help
            ;;

        (hook)
            _npm_hook
            ;;

        (init)
            _npm_init
            ;;

        (install)
            _npm_install
            ;;

        (install-ci-test)
            _npm_install-ci-test
            ;;

        (install-test)
            _npm_install-test
            ;;

        (link)
            _npm_link
            ;;

        (ll)
            _npm_ll
            ;;

        (logout)
            _npm_logout
            ;;

        (ls)
            _npm_ls
            ;;

        (org)
            _npm_org
            ;;

        (outdated)
            _npm_outdated
            ;;

        (owner)
            _npm_owner
            ;;

        (pack)
            _npm_pack
            ;;

        (ping)
            _npm_ping
            ;;

        (pkg)
            _npm_pkg
            ;;

        (prefix)
            _npm_prefix
            ;;

        (profile)
            _npm_profile
            ;;

        (prune)
            _npm_prune
            ;;

        (publish)
            _npm_publish
            ;;

        (rebuild)
            _npm_rebuild
            ;;

        (repo)
            _npm_repo
            ;;

        (restart)
            _npm_restart
            ;;

        (root)
            _npm_root
            ;;

        (run-script)
            _npm_run-script
            ;;

        (search)
            _npm_search
            ;;

        (set)
            _npm_set
            ;;

        (set-script)
            _npm_set-script
            ;;

        (shrinkwrap)
            _npm_shrinkwrap
            ;;

        (star)
            _npm_star
            ;;

        (stars)
            _npm_stars
            ;;

        (start)
            _npm_start
            ;;

        (stop)
            _npm_stop
            ;;

        (team)
            _npm_team
            ;;

        (test)
            _npm_test
            ;;

        (token)
            _npm_token
            ;;

        (uninstall)
            _npm_uninstall
            ;;

        (unpublish)
            _npm_unpublish
            ;;

        (unstar)
            _npm_unstar
            ;;

        (update)
            _npm_update
            ;;

        (version)
            _npm_version
            ;;

        (view)
            _npm_view
            ;;

        (whoami)
            _npm_whoami
            ;;

        esac
        ;;
     esac

}

