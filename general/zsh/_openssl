#compdef _openssl openssl

# Auto-generated with h2o

    function _openssl_asn1parse {
        _arguments \
            '-help[Display this summary]' \
            '-inform[input format - one of DER PEM]' \
            '-in[input file]':file:_files \
            '-out[output file (output format is always DER)]':file:_files \
            '-i[indents the output]' \
            '-noout[do not produce any output]' \
            '-oid[file of extra oid definitions]':file:_files \
            '-dump[unknown data in hex form]' \
            '-genstr[string to generate ASN1 structure from]' \
            '-genconf[file to generate ASN1 structure from (-inform will be ignored)]' \
            '-strictpem[do not attempt base64 decode outside PEM markers]' \
            '-item[item to parse and print]' \
            "*: :_files"

    }

    function _openssl_ca {
        _arguments \
            '-help[Display this summary]' \
            '-verbose[Verbose output during processing]' \
            '-config[A config file]' \
            '-name[The particular CA definition to use]' \
            '-subj[Use arg instead of request'\''s subject]' \
            '-utf8[Input characters are UTF8 (default ASCII)]' \
            '-create_serial[If reading serial fails, create a new random serial]' \
            '-rand_serial[Always create a random serial; do not store it]' \
            '-multivalue-rdn[Enable support for multivalued RDNs]' \
            '-startdate[Cert notBefore, YYMMDDHHMMSSZ]' \
            '-enddate[YYMMDDHHMMSSZ cert notAfter (overrides -days)]' \
            '-md[md to use; one of md2, md5, sha or sha1]' \
            '-policy[The CA '\''policy'\'' to support]' \
            '-keyfile[Private key]' \
            '-keyform[Private key file format (PEM or ENGINE)]' \
            '-passin[Input file pass phrase source]' \
            '-key[Key to decode the private key if it is encrypted]' \
            '-cert[The CA cert]':file:_files \
            '-selfsign[Sign a cert with the key associated with it]' \
            '-in[The input PEM encoded cert request(s)]':file:_files \
            '-out[Where to put the output file(s)]':file:_files \
            '-outdir[Where to put output cert]':file:_files \
            '-sigopt[Signature parameter in n:v form]' \
            '-notext[Do not print the generated certificate]' \
            '-batch[Don'\''t ask questions]' \
            '-preserveDN[Don'\''t re-order the DN]' \
            '-noemailDN[Don'\''t add the EMAIL field to the DN]' \
            '-gencrl[Generate a new CRL]' \
            '-msie_hack[msie modifications to handle all those universal strings]' \
            '-infiles[The last argument, requests to process]' \
            '-ss_cert[File contains a self signed cert to sign]':file:_files \
            '-spkac[File contains DN and signed public key and challenge]':file:_files \
            '-revoke[Revoke a cert (given in file)]':file:_files \
            '-valid[Add a Valid(not-revoked) DB entry about a cert (given in file)]' \
            '-extensions[Extension section (override value in config file)]' \
            '-extfile[Configuration file with X509v3 extensions to add]':file:_files \
            '-status[Shows cert status given the serial number]' \
            '-updatedb[Updates db for expired cert]' \
            '-crlexts[CRL extension section (override value in config file)]' \
            '-crl_reason[revocation reason]' \
            '-crl_hold[the hold instruction, an OID. Sets revocation reason to certificateHold]' \
            '-crl_compromise[sets compromise time to val and the revocation reason to keyCompromise]' \
            '-crl_CA_compromise[sets compromise time to val and the revocation reason to CACompromise]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_ciphers {
        _arguments \
            '-help[Display this summary]' \
            '-v[Verbose listing of the SSL/TLS ciphers]' \
            '-V[Even more verbose]' \
            '-s[Only supported ciphers]' \
            '-tls1[TLS1 mode]' \
            '-tls1_1[TLS1.1 mode]' \
            '-tls1_2[TLS1.2 mode]' \
            '-tls1_3[TLS1.3 mode]' \
            '-stdname[Show standard cipher names]' \
            '-psk[include ciphersuites requiring PSK]' \
            '-srp[include ciphersuites requiring SRP]' \
            '-convert[Convert standard name into OpenSSL name]' \
            '-ciphersuites[Configure the TLSv1.3 ciphersuites to use]' \
            "*: :_files"

    }

    function _openssl_cms {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format SMIME (default), PEM or DER]' \
            '-outform[Output format SMIME (default), PEM or DER]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-encrypt[Encrypt message]' \
            '-decrypt[Decrypt encrypted message]' \
            '-sign[Sign message]' \
            '-sign_receipt[Generate a signed receipt for the message]' \
            '-resign[Resign a signed message]' \
            '-verify[Verify signed message]' \
            '-verify_retcode[(No additional info)]' \
            '-verify_receipt[(No additional info)]':file:_files \
            '-cmsout[Output CMS structure]' \
            '-data_out[(No additional info)]' \
            '-data_create[(No additional info)]' \
            '-digest_verify[(No additional info)]' \
            '-digest_create[(No additional info)]' \
            '-compress[(No additional info)]' \
            '-uncompress[(No additional info)]' \
            '-EncryptedData_decrypt[(No additional info)]' \
            '-EncryptedData_encrypt[(No additional info)]' \
            '-debug_decrypt[(No additional info)]' \
            '-text[Include or delete text MIME headers]' \
            '-asciicrlf[(No additional info)]' \
            '-nointern[Don'\''t search certificates in message for signer]' \
            '-noverify[Don'\''t verify signers certificate]' \
            '-nocerts[Don'\''t include signers certificate when signing]' \
            '-noattr[Don'\''t include any signed attributes]' \
            '-nodetach[Use opaque signing]' \
            '-nosmimecap[Omit the SMIMECapabilities attribute]' \
            '-binary[Don'\''t translate message to text]' \
            '-keyid[Use subject key identifier]' \
            '-nosigs[Don'\''t verify message signature]' \
            '-no_content_verify[(No additional info)]' \
            '-no_attr_verify[(No additional info)]' \
            '-stream[Enable CMS streaming]' \
            '-indef[Same as -stream]' \
            '-noindef[Disable CMS streaming]' \
            '-crlfeol[Use CRLF as EOL termination instead of CR only]' \
            '-noout[For the -cmsout operation do not output the parsed CMS structure]' \
            '-receipt_request_print[Print CMS Receipt Request]' \
            '-receipt_request_all[(No additional info)]' \
            '-receipt_request_first[(No additional info)]' \
            '-rctform[Receipt file format]' \
            '-certfile[Other certificates file]':file:_files \
            '-CAfile[Trusted certificates file]':file:_files \
            '-CApath[trusted certificates directory]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-content[Supply or override content for detached signature]':file:_files \
            '-print[For the -cmsout operation print out all fields of the CMS structure]' \
            '-secretkey[(No additional info)]' \
            '-secretkeyid[(No additional info)]' \
            '-pwri_password[(No additional info)]' \
            '-econtent_type[(No additional info)]' \
            '-passin[Input file pass phrase source]' \
            '-to[To address]' \
            '-from[From address]' \
            '-subject[Subject]' \
            '-signer[Signer certificate file]' \
            '-recip[Recipient cert file for decryption]':file:_files \
            '-certsout[Certificate output file]':file:_files \
            '-md[Digest algorithm to use when signing or resigning]' \
            '-inkey[Input private key (if not signer or recipient)]' \
            '-keyform[Input private key format (PEM or ENGINE)]' \
            '-keyopt[Set public key parameters as n:v pairs]' \
            '-receipt_request_from[(No additional info)]' \
            '-receipt_request_to[(No additional info)]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            '-aes128-wrap[Use AES128 to wrap key]' \
            '-aes192-wrap[Use AES192 to wrap key]' \
            '-aes256-wrap[Use AES256 to wrap key]' \
            '-des3-wrap[Use 3DES-EDE to wrap key]' \
            '-engine[Use engine e, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_crl {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format; default PEM]' \
            '-in[Input file - default stdin]':file:_files \
            '-outform[Output format - default PEM]' \
            '-out[output file - default stdout]':file:_files \
            '-keyform[Private key file format (PEM or ENGINE)]' \
            '-key[CRL signing Private key to use]':file:_files \
            '-issuer[Print issuer DN]' \
            '-lastupdate[Set lastUpdate field]' \
            '-nextupdate[Set nextUpdate field]' \
            '-noout[No CRL output]' \
            '-fingerprint[Print the crl fingerprint]' \
            '-crlnumber[Print CRL number]' \
            '-badsig[Corrupt last byte of loaded CRL signature (for test)]' \
            '-gendelta[Other CRL to compare/diff to the Input one]':file:_files \
            '-CApath[Verify CRL using certificates in dir]':file:_files \
            '-CAfile[Verify CRL using certificates in file name]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-verify[Verify CRL signature]' \
            '-text[Print out a text format version]' \
            '-hash[Print hash value]' \
            '-nameopt[Various certificate name options]' \
            '-hash_old[Print old-style (MD5) hash value]' \
            "*: :_files"

    }

    function _openssl_crl2pkcs7 {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - DER or PEM]' \
            '-outform[Output format - DER or PEM]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-nocrl[No crl to load, just certs from '\''-certfile'\'']' \
            '-certfile[File of chain of certs to a trusted CA; can be repeated]':file:_files \
            "*: :_files"

    }

    function _openssl_dgst {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_dhparam {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file]':file:_files \
            '-inform[Input format, DER or PEM]' \
            '-outform[Output format, DER or PEM]' \
            '-out[Output file]':file:_files \
            '-check[Check the DH parameters]' \
            '-text[Print a text form of the DH parameters]' \
            '-noout[Don'\''t output any DH parameters]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-C[Print C code]' \
            '-2[Generate parameters using 2 as the generator value]' \
            '-5[Generate parameters using 5 as the generator value]' \
            '-dsaparam[Read or generate DSA parameters, convert to DH]' \
            '-engine[Use engine e, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_dsa {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format, DER PEM PVK]' \
            '-outform[Output format, DER PEM PVK]' \
            '-in[Input key]' \
            '-out[Output file]':file:_files \
            '-noout[Don'\''t print key out]' \
            '-text[Print the key in text]' \
            '-modulus[Print the DSA public value]' \
            '-pubin[Expect a public key in input file]' \
            '-pubout[Output public key, not private]' \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-pvk-strong[Enable '\''Strong'\'' PVK encoding level (default)]' \
            '-pvk-weak[Enable '\''Weak'\'' PVK encoding level]' \
            '-pvk-none[Don'\''t enforce PVK encoding]' \
            '-engine[Use engine e, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_dsaparam {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - DER or PEM]' \
            '-in[Input file]':file:_files \
            '-outform[Output format - DER or PEM]' \
            '-out[Output file]':file:_files \
            '-text[Print as text]' \
            '-C[Output C code]' \
            '-noout[No output]' \
            '-genkey[Generate a DSA key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_ec {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file]' \
            '-inform[Input format - DER or PEM]' \
            '-out[Output file]':file:_files \
            '-outform[Output format - DER or PEM]' \
            '-noout[Don'\''t print key out]' \
            '-text[Print the key]' \
            '-param_out[Print the elliptic curve parameters]' \
            '-pubin[Expect a public key in input file]' \
            '-pubout[Output public key, not private]' \
            '-no_public[exclude public key from private key]' \
            '-check[check key consistency]' \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-param_enc[Specifies the way the ec parameters are encoded]' \
            '-conv_form[Specifies the point conversion form]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_ecparam {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - default PEM (DER or PEM)]' \
            '-outform[Output format - default PEM]' \
            '-in[Input file - default stdin]':file:_files \
            '-out[Output file - default stdout]':file:_files \
            '-text[Print the ec parameters in text form]' \
            '-C[Print a '\''C'\'' function creating the parameters]' \
            '-check[Validate the ec parameters]' \
            '-list_curves[Prints a list of all curve '\''short names'\'']' \
            '-no_seed[If '\''explicit'\'' parameters are chosen do not use the seed]' \
            '-noout[Do not print the ec parameter]' \
            '-name[Use the ec parameters with specified '\''short name'\'']' \
            '-conv_form[Specifies the point conversion form]' \
            '-param_enc[Specifies the way the ec parameters are encoded]' \
            '-genkey[Generate ec key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_enc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_engine {
        _arguments \
            '-help[Display this summary]' \
            '-v[List '\''control commands'\'' For each specified engine]' \
            '-vv[Also display each command'\''s description]' \
            '-vvv[Also add the input flags for each command]' \
            '-vvvv[Also show internal input flags]' \
            '-c[List the capabilities of specified engine]' \
            '-t[Check that specified engine is available]' \
            '-tt[Display error trace for unavailable engines]' \
            '-pre[Run command against the ENGINE before loading it]' \
            '-post[Run command against the ENGINE after loading it Commands are like "SO_PATH:/lib/libdriver.so"]' \
            "*: :_files"

    }

    function _openssl_errstr {
        _arguments \
            '-help[Display this summary]' \
            "*: :_files"

    }

    function _openssl_gendsa {
        _arguments \
            '-help[Display this summary]' \
            '-out[Output the key to the specified file]':file:_files \
            '-passout[Output file pass phrase source]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_genpkey {
        _arguments \
            '-help[Display this summary]' \
            '-out[Output file]':file:_files \
            '-outform[output format (DER or PEM)]' \
            '-pass[Output file pass phrase source]' \
            '-paramfile[Parameters file]':file:_files \
            '-algorithm[The public key algorithm]' \
            '-pkeyopt[Set the public key algorithm option as opt:value]' \
            '-genparam[Generate parameters, not key]' \
            '-text[Print the in text]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_genrsa {
        _arguments \
            '-help[Display this summary]' \
            '-3[Use 3 for the E value]' \
            '-F4[Use F4 (0x10001) for the E value]' \
            '-f4[Use F4 (0x10001) for the E value]' \
            '-out[Output the key to specified file]':file:_files \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-passout[Output file pass phrase source]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_help {
        _arguments \
            '-help[Display this summary]' \
            "*: :_files"

    }

    function _openssl_list {
        _arguments \
            '-help[Display this summary]' \
            '-1[List in one column]' \
            '-commands[List of standard commands]' \
            '-digest-commands[List of message digest commands]' \
            '-digest-algorithms[List of message digest algorithms]' \
            '-cipher-commands[List of cipher commands]' \
            '-cipher-algorithms[List of cipher algorithms]' \
            '-public-key-algorithms[List of public key algorithms]' \
            '-public-key-methods[List of public key methods]' \
            '-disabled[List of disabled features]' \
            '-missing-help[List missing detailed help strings]' \
            '-options[List options for specified command]' \
            "*: :_files"

    }

    function _openssl_nseq {
        _arguments \
            '-help[Display this summary]' \
            '-toseq[Output NS Sequence file]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            "*: :_files"

    }

    function _openssl_ocsp {
        _arguments \
            '-help[Display this summary]' \
            '-out[Output filename]':file:_files \
            '-url[Responder URL]' \
            '-host[TCP/IP hostname:port to connect to]' \
            '-ignore_err[Ignore error on OCSP request or response and continue running]' \
            '-noverify[Don'\''t verify response at all]' \
            '-nonce[Add OCSP nonce to request]' \
            '-no_nonce[Don'\''t add OCSP nonce to request]' \
            '-resp_no_certs[Don'\''t include any certificates in response]' \
            '-resp_key_id[Identify response by signing certificate key ID]' \
            '-no_certs[Don'\''t include any certificates in signed request]' \
            '-no_signature_verify[Don'\''t check signature on response]' \
            '-no_cert_verify[Don'\''t check signing certificate]' \
            '-no_chain[Don'\''t chain verify response]' \
            '-no_cert_checks[Don'\''t do additional checks on signing certificate]' \
            '-no_explicit[Do not explicitly check the chain, just verify the root]' \
            '-trust_other[Don'\''t verify additional certificates]' \
            '-no_intern[Don'\''t search certificates contained in response for signer]' \
            '-badsig[Corrupt last byte of loaded OCSP response signature (for test)]' \
            '-text[Print text form of request and response]' \
            '-req_text[Print text form of request]' \
            '-resp_text[Print text form of response]' \
            '-reqin[File with the DER-encoded request]' \
            '-respin[File with the DER-encoded response]' \
            '-signer[Certificate to sign OCSP request with]':file:_files \
            '-VAfile[Validator certificates file]':file:_files \
            '-sign_other[Additional certificates to include in signed request]':file:_files \
            '-verify_other[Additional certificates to search for signer]':file:_files \
            '-CAfile[Trusted certificates file]':file:_files \
            '-CApath[Trusted certificates directory]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-validity_period[Maximum validity discrepancy in seconds]' \
            '-signkey[Private key to sign OCSP request with]' \
            '-reqout[Output file for the DER-encoded request]' \
            '-respout[Output file for the DER-encoded response]' \
            '-path[Path to use in OCSP request]' \
            '-issuer[Issuer certificate]':file:_files \
            '-cert[Certificate to check]':file:_files \
            '-serial[Serial number to check]' \
            '-index[Certificate status index file]':file:_files \
            '-CA[CA certificate]':file:_files \
            '-rsigner[Responder certificate to sign responses with]':file:_files \
            '-rkey[Responder key to sign responses with]':file:_files \
            '-rother[Other certificates to include in response]':file:_files \
            '-rmd[Digest Algorithm to use in signature of OCSP response]' \
            '-rsigopt[OCSP response signature parameter in n:v form]' \
            '-header[key=value header to add]' \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            "*: :_files"

    }

    function _openssl_passwd {
        _arguments \
            '-help[Display this summary]' \
            '-in[Read passwords from file]':file:_files \
            '-noverify[Never verify when reading password from terminal]' \
            '-quiet[No warnings]' \
            '-table[Format output as table]' \
            '-reverse[Switch table columns]' \
            '-salt[Use provided salt]' \
            '-stdin[Read passwords from stdin]' \
            '-6[SHA512-based password algorithm]' \
            '-5[SHA256-based password algorithm]' \
            '-apr1[MD5-based password algorithm, Apache variant]' \
            '-1[MD5-based password algorithm]' \
            '-aixmd5[AIX MD5-based password algorithm]' \
            '-crypt[Standard Unix password algorithm (default)]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            "*: :_files"

    }

    function _openssl_pkcs12 {
        _arguments \
            '-help[Display this summary]' \
            '-nokeys[Don'\''t output private keys]' \
            '-keyex[Set MS key exchange type]' \
            '-keysig[Set MS key signature type]' \
            '-nocerts[Don'\''t output certificates]' \
            '-clcerts[Only output client certificates]' \
            '-cacerts[Only output CA certificates]' \
            '-noout[Don'\''t output anything, just verify]' \
            '-info[Print info about PKCS#12 structure]' \
            '-chain[Add certificate chain]' \
            '-twopass[Separate MAC, encryption passwords]' \
            '-nomacver[Don'\''t verify MAC]' \
            '-descert[Encrypt output with 3DES (default RC2-40)]' \
            '-certpbe[Certificate PBE algorithm (default RC2-40)]' \
            '-export[Output PKCS12 file]' \
            '-noiter[Don'\''t use encryption iteration]' \
            '-maciter[Use MAC iteration]' \
            '-nomaciter[Don'\''t use MAC iteration]' \
            '-nomac[Don'\''t generate MAC]' \
            '-LMK[Add local machine keyset attribute to private key]' \
            '-nodes[Don'\''t encrypt private keys]' \
            '-macalg[Digest algorithm used in MAC (default SHA1)]' \
            '-keypbe[Private key PBE algorithm (default 3DES)]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-inkey[Private key if not infile]' \
            '-certfile[Load certs from file]':file:_files \
            '-name[Use name as friendly name]' \
            '-CSP[Microsoft CSP name]' \
            '-caname[Use name as CA friendly name (can be repeated)]' \
            '-in[Input filename]':file:_files \
            '-out[Output filename]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-password[Set import/export password source]' \
            '-CApath[PEM-format directory of CA'\''s]':file:_files \
            '-CAfile[PEM-format file of CA'\''s]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_pkcs7 {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - DER or PEM]' \
            '-in[Input file]':file:_files \
            '-outform[Output format - DER or PEM]' \
            '-out[Output file]':file:_files \
            '-noout[Don'\''t output encoded data]' \
            '-text[Print full details of certificates]' \
            '-print[Print out all fields of the PKCS7 structure]' \
            '-print_certs[Print_certs print any certs or crl in the input]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_pkcs8 {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format (DER or PEM)]' \
            '-outform[Output format (DER or PEM)]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-topk8[Output PKCS8 file]' \
            '-noiter[Use 1 as iteration count]' \
            '-nocrypt[Use or expect unencrypted private key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-v2[Use PKCS#5 v2.0 and cipher]' \
            '-v1[Use PKCS#5 v1.5 and cipher]' \
            '-v2prf[Set the PRF algorithm to use with PKCS#5 v2.0]' \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-traditional[use traditional format private key]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-scrypt[Use scrypt algorithm]' \
            '-scrypt_N[Set scrypt N parameter]' \
            '-scrypt_r[Set scrypt r parameter]' \
            '-scrypt_p[Set scrypt p parameter]' \
            "*: :_files"

    }

    function _openssl_pkey {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format (DER or PEM)]' \
            '-outform[Output format (DER or PEM)]' \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-in[Input key]' \
            '-out[Output file]':file:_files \
            '-pubin[Read public key from input (default is private key)]' \
            '-pubout[Output public key, not private]' \
            '-text_pub[Only output public key components]' \
            '-text[Output in plaintext as well]' \
            '-noout[Don'\''t output the key]' \
            '-traditional[Use traditional format for private keys]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-check[Check key consistency]' \
            '-pubcheck[Check public key consistency]' \
            "*: :_files"

    }

    function _openssl_pkeyparam {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-text[Print parameters as text]' \
            '-noout[Don'\''t output encoded parameters]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-check[Check key param consistency]' \
            "*: :_files"

    }

    function _openssl_pkeyutl {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file - default stdin]':file:_files \
            '-out[Output file - default stdout]':file:_files \
            '-pubin[Input is a public key]' \
            '-certin[Input is a cert with a public key]' \
            '-asn1parse[asn1parse the output data]' \
            '-hexdump[Hex dump output]' \
            '-sign[Sign input data with private key]' \
            '-verify[Verify with public key]' \
            '-verifyrecover[Verify with public key, recover original data]' \
            '-rev[Reverse the order of the input buffer]' \
            '-encrypt[Encrypt input data with public key]' \
            '-decrypt[Decrypt input data with private key]' \
            '-derive[Derive shared secret]' \
            '-kdf[Use KDF algorithm]' \
            '-sigfile[Signature file (verify operation only)]':file:_files \
            '-inkey[Input private key file]' \
            '-peerkey[Peer key file used in key derivation]' \
            '-passin[Input file pass phrase source]' \
            '-peerform[Peer key format - default PEM]' \
            '-keyform[Private key format - default PEM]' \
            '-pkeyopt[Public key options as opt:value]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for crypto operations]' \
            "*: :_files"

    }

    function _openssl_prime {
        _arguments \
            '-help[Display this summary]' \
            '-hex[Hex output]' \
            '-generate[Generate a prime]' \
            '-safe[When used with -generate, generate a safe prime]' \
            "*: :_files"

    }

    function _openssl_rand {
        _arguments \
            '-help[Display this summary]' \
            '-out[Output file]':file:_files \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-base64[Base64 encode output]' \
            '-hex[Hex encode output]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rehash {
        _arguments \
            '-help[Display this summary]' \
            '-h[Display this summary]' \
            '-compat[Create both new- and old-style hash links]' \
            '-old[Use old-style hash to generate links]' \
            '-n[Do not remove existing links]' \
            '-v[Verbose output]' \
            "*: :_files"

    }

    function _openssl_req {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - DER or PEM]' \
            '-outform[Output format - DER or PEM]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-key[Private key to use]' \
            '-keyform[Key file format]' \
            '-pubkey[Output public key]' \
            '-new[New request]' \
            '-config[Request template file]':file:_files \
            '-keyout[File to send the key to]':file:_files \
            '-passin[Private key password source]' \
            '-passout[Output file pass phrase source]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-newkey[Specify as type:bits]' \
            '-pkeyopt[Public key options as opt:value]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-batch[Do not ask anything during request generation]' \
            '-newhdr[Output "NEW" in the header lines]' \
            '-modulus[RSA modulus]' \
            '-verify[Verify signature on REQ]' \
            '-nodes[Don'\''t encrypt the output key]' \
            '-noout[Do not output REQ]' \
            '-verbose[Verbose output]' \
            '-utf8[Input characters are UTF8 (default ASCII)]' \
            '-nameopt[Various certificate name options]' \
            '-reqopt[Various request text options]' \
            '-text[Text form of request]' \
            '-x509[Output a x509 structure instead of a cert request (Required by some CA'\''s)]' \
            '-subj[Set or modify request subject]' \
            '-subject[Output the request'\''s subject]' \
            '-multivalue-rdn[Enable support for multivalued RDNs]' \
            '-set_serial[Serial number to use]' \
            '-addext[Additional cert extension key=value pair (may be given more than once)]' \
            '-extensions[Cert extension section (override value in config file)]' \
            '-reqexts[Request extension section (override value in config file)]' \
            '-precert[Add a poison extension (implies -new)]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-keygen_engine[Specify engine to be used for key generation operations]' \
            "*: :_files"

    }

    function _openssl_rsa {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format, one of DER PEM]' \
            '-outform[Output format, one of DER PEM PVK]' \
            '-in[Input file]' \
            '-out[Output file]':file:_files \
            '-pubin[Expect a public key in input file]' \
            '-pubout[Output a public key]' \
            '-passout[Output file pass phrase source]' \
            '-passin[Input file pass phrase source]' \
            '-RSAPublicKey_in[Input is an RSAPublicKey]' \
            '-RSAPublicKey_out[Output is an RSAPublicKey]' \
            '-noout[Don'\''t print key out]' \
            '-text[Print the key in text]' \
            '-modulus[Print the RSA key modulus]' \
            '-check[Verify key consistency]' \
            '-pvk-strong[Enable '\''Strong'\'' PVK encoding level (default)]' \
            '-pvk-weak[Enable '\''Weak'\'' PVK encoding level]' \
            '-pvk-none[Don'\''t enforce PVK encoding]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rsautl {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-inkey[Input key]' \
            '-keyform[Private key format - default PEM]' \
            '-pubin[Input is an RSA public]' \
            '-certin[Input is a cert carrying an RSA public key]' \
            '-ssl[Use SSL v2 padding]' \
            '-raw[Use no padding]' \
            '-pkcs[Use PKCS#1 v1.5 padding (default)]' \
            '-oaep[Use PKCS#1 OAEP]' \
            '-sign[Sign with private key]' \
            '-verify[Verify with public key]' \
            '-asn1parse[Run output through asn1parse; useful with -verify]' \
            '-hexdump[Hex dump output]' \
            '-x931[Use ANSI X9.31 padding]' \
            '-rev[Reverse the order of the input buffer]' \
            '-encrypt[Encrypt with public key]' \
            '-decrypt[Decrypt with private key]' \
            '-passin[Input file pass phrase source]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_s_client {
        _arguments \
            '-help[Display this summary]' \
            '-host[Use -connect instead]' \
            '-connect[TCP/IP where to connect (default is :4433)]' \
            '-bind[bind local address for connection]' \
            '-proxy[Connect to via specified proxy to the real server]' \
            '-unix[Connect over the specified Unix-domain socket]' \
            '-4[Use IPv4 only]' \
            '-6[Use IPv6 only]' \
            '-cert[Certificate file to use, PEM format assumed]':file:_files \
            '-certform[Certificate format (PEM or DER) PEM default]' \
            '-nameopt[Various certificate name options]' \
            '-key[Private key file to use, if not in -cert file]' \
            '-keyform[Key format (PEM, DER or engine) PEM default]' \
            '-pass[Private key file pass phrase source]' \
            '-CApath[PEM format directory of CA'\''s]':file:_files \
            '-CAfile[PEM format file of CA'\''s]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-requestCAfile[PEM format file of CA names to send to the server]':file:_files \
            '-dane_tlsa_domain[DANE TLSA base domain]' \
            '-dane_tlsa_rrdata[DANE TLSA rrdata presentation form]' \
            '-dane_ee_no_namechecks[Disable name checks when matching DANE-EE(3) TLSA records]' \
            '-reconnect[Drop and re-make the connection with the same Session-ID]' \
            '-showcerts[Show all certificates sent by the server]' \
            '-debug[Extra output]' \
            '-msg[Show protocol messages]' \
            '-msgfile[File to send output of -msg or -trace, instead of stdout]':file:_files \
            '-nbio_test[More ssl protocol testing]' \
            '-state[Print the ssl states]' \
            '-crlf[Convert LF from terminal into CRLF]' \
            '-quiet[No s_client output]' \
            '-ign_eof[Ignore input eof (default when -quiet)]' \
            '-no_ign_eof[Don'\''t ignore input eof]' \
            '-starttls[Use the appropriate STARTTLS command before starting TLS]' \
            '-xmpphost[Alias of -name option for "-starttls xmpp\[-server\]"]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-sess_out[File to write SSL session to]':file:_files \
            '-sess_in[File to read SSL session from]':file:_files \
            '-use_srtp[Offer SRTP key management with a colon-separated profile list]' \
            '-keymatexport[Export keying material using label]' \
            '-fallback_scsv[Send the fallback SCSV]' \
            '-name[Hostname to use for "-starttls lmtp", "-starttls smtp" or "-starttls xmpp\[-server\]"]' \
            '-CRL[CRL file to use]':file:_files \
            '-crl_download[Download CRL from distribution points]' \
            '-CRLform[CRL format (PEM or DER) PEM is default]' \
            '-verify_return_error[Close connection on verification error]' \
            '-verify_quiet[Restrict verify output to errors]' \
            '-brief[Restrict output to brief summary of connection parameters]' \
            '-prexit[Print session information when the program exits]' \
            '-security_debug[Enable security debug messages]' \
            '-security_debug_verbose[Output more security debug output]' \
            '-cert_chain[Certificate chain file (in PEM format)]':file:_files \
            '-chainCApath[Use dir as certificate store path to build CA certificate chain]':file:_files \
            '-verifyCApath[Use dir as certificate store path to verify CA certificate]':file:_files \
            '-build_chain[Build certificate chain]' \
            '-chainCAfile[CA file for certificate chain (PEM format)]':file:_files \
            '-verifyCAfile[CA file for certificate verification (PEM format)]':file:_files \
            '-nocommands[Do not use interactive command letters]' \
            '-servername[Set TLS extension servername (SNI) in ClientHello (default)]' \
            '-noservername[Do not send the server name (SNI) extension in the ClientHello]' \
            '-tlsextdebug[Hex dump of all TLS extensions received]' \
            '-status[Request certificate status from server]' \
            '-serverinfo[types Send empty ClientHello extensions (comma-separated numbers)]' \
            '-alpn[Enable ALPN extension, considering named protocols supported (comma-separated list)]' \
            '-async[Support asynchronous operation]' \
            '-ssl_config[Use specified configuration file]' \
            '-no_ssl3[Just disable SSLv3]' \
            '-no_tls1[Just disable TLSv1]' \
            '-no_tls1_1[Just disable TLSv1.1]' \
            '-no_tls1_2[Just disable TLSv1.2]' \
            '-no_tls1_3[Just disable TLSv1.3]' \
            '-bugs[Turn on SSL bug compatibility]' \
            '-no_comp[Disable SSL/TLS compression (default)]' \
            '-comp[Use SSL/TLS-level compression]' \
            '-no_ticket[Disable use of TLS session tickets]' \
            '-serverpref[Use server'\''s cipher preferences]' \
            '-legacy_renegotiation[Enable use of legacy renegotiation (dangerous)]' \
            '-no_renegotiation[Disable all renegotiation.]' \
            '-legacy_server_connect[Allow initial connection to servers that don'\''t support RI]' \
            '-no_resumption_on_reneg[Disallow session resumption on renegotiation]' \
            '-no_legacy_server_connect[Disallow initial connection to servers that don'\''t support RI]' \
            '-allow_no_dhe_kex[In TLSv1.3 allow non-(ec)dhe based key exchange on resumption]' \
            '-prioritize_chacha[Prioritize ChaCha ciphers when preferred by clients]' \
            '-strict[Enforce strict certificate checks as per TLS standard]' \
            '-sigalgs[Signature algorithms to support (colon-separated list)]' \
            '-client_sigalgs[Signature algorithms to support for client certificate authentication (colon-separated list)]' \
            '-groups[Groups to advertise (colon-separated list)]' \
            '-curves[Groups to advertise (colon-separated list)]' \
            '-named_curve[Elliptic curve used for ECDHE (server-side only)]' \
            '-cipher[Specify TLSv1.2 and below cipher list to be used]' \
            '-ciphersuites[Specify TLSv1.3 ciphersuites to be used]' \
            '-min_protocol[Specify the minimum protocol version to be used]' \
            '-max_protocol[Specify the maximum protocol version to be used]' \
            '-record_padding[Block size to pad TLS 1.3 records to.]' \
            '-debug_broken_protocol[Perform all sorts of protocol violations for testing purposes]' \
            '-no_middlebox[Disable TLSv1.3 middlebox compat mode]' \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            '-xkey[key for Extended certificates]':file:_files \
            '-xcert[cert for Extended certificates]':file:_files \
            '-xchain[chain for Extended certificates]':file:_files \
            '-xchain_build[build certificate chain for the extended certificates]' \
            '-xcertform[format of Extended certificate (PEM or DER) PEM default]' \
            '-xkeyform[format of Extended certificate'\''s key (PEM or DER) PEM default]' \
            '-tls1[Just use TLSv1]' \
            '-tls1_1[Just use TLSv1.1]' \
            '-tls1_2[Just use TLSv1.2]' \
            '-tls1_3[Just use TLSv1.3]' \
            '-dtls[Use any version of DTLS]' \
            '-timeout[Enable send/receive timeout on DTLS connections]' \
            '-dtls1[Just use DTLSv1]' \
            '-dtls1_2[Just use DTLSv1.2]' \
            '-nbio[Use non-blocking IO]' \
            '-psk_identity[PSK identity]' \
            '-psk[PSK in hex (without 0x)]' \
            '-psk_session[File to read PSK SSL session from]':file:_files \
            '-srpuser[SRP authentication for '\''user'\'']' \
            '-srppass[Password for '\''user'\'']' \
            '-srp_lateuser[SRP username into second ClientHello message]' \
            '-srp_moregroups[Tolerate other than the known g N values.]' \
            '-nextprotoneg[Enable NPN extension, considering named protocols supported (comma-separated list)]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-ssl_client_engine[Specify engine to be used for client certificate operations]' \
            '-ct[Request and parse SCTs (also enables OCSP stapling)]' \
            '-noct[Do not request or parse SCTs (default)]' \
            '-ctlogfile[CT log list CONF file]':file:_files \
            '-keylogfile[Write TLS secrets to file]':file:_files \
            '-early_data[File to send as early data]':file:_files \
            '-enable_pha[Enable post-handshake-authentication]' \
            "*: :_files"

    }

    function _openssl_s_server {
        _arguments \
            '-help[Display this summary]' \
            '-accept[TCP/IP optional host and port to listen on for connections (default is *:4433)]' \
            '-unix[Unix domain socket to accept on]' \
            '-4[Use IPv4 only]' \
            '-6[Use IPv6 only]' \
            '-unlink[For -unix, unlink existing socket first]' \
            '-context[Set session ID context]' \
            '-verify[Turn on peer certificate verification]' \
            '-Verify[Turn on peer certificate verification, must have a cert]' \
            '-cert[Certificate file to use; default is server.pem]':file:_files \
            '-nameopt[Various certificate name options]' \
            '-serverinfo[PEM serverinfo file for certificate]' \
            '-certform[Certificate format (PEM or DER) PEM default]' \
            '-key[Private Key if not in -cert; default is server.pem]' \
            '-keyform[Key format (PEM, DER or ENGINE) PEM default]' \
            '-pass[Private key file pass phrase source]' \
            '-dcert[Second certificate file to use (usually for DSA)]':file:_files \
            '-dhparam[DH parameters file to use]':file:_files \
            '-dcertform[Second certificate format (PEM or DER) PEM default]' \
            '-dkey[Second private key file to use (usually for DSA)]':file:_files \
            '-dkeyform[Second key format (PEM, DER or ENGINE) PEM default]' \
            '-dpass[Second private key file pass phrase source]' \
            '-nbio_test[Test with the non-blocking test bio]' \
            '-crlf[Convert LF from terminal into CRLF]' \
            '-debug[Print more output]' \
            '-msg[Show protocol messages]' \
            '-msgfile[File to send output of -msg or -trace, instead of stdout]':file:_files \
            '-state[Print the SSL states]' \
            '-CAfile[PEM format file of CA'\''s]':file:_files \
            '-CApath[PEM format directory of CA'\''s]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-nocert[Don'\''t use any certificates (Anon-DH)]' \
            '-quiet[No server output]' \
            '-no_resume_ephemeral[Disable caching and tickets if ephemeral (EC)DH is used]' \
            '-www[Respond to a '\''GET /'\'' with a status page]' \
            '-WWW[Respond to a '\''GET with the file ./path]' \
            '-servername[Servername for HostName TLS extension]' \
            '-servername_fatal[mismatch send fatal alert (default warning alert)]' \
            '-cert2[Certificate file to use for servername; default isserver2.pem]':file:_files \
            '-key2[-Private Key file to use for servername if not in -cert2]':file:_files \
            '-tlsextdebug[Hex dump of all TLS extensions received]' \
            '-HTTP[Like -WWW but ./path includes HTTP headers]' \
            '-id_prefix[Generate SSL/TLS session IDs prefixed by arg]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-keymatexport[Export keying material using label]' \
            '-CRL[CRL file to use]':file:_files \
            '-crl_download[Download CRL from distribution points]' \
            '-cert_chain[certificate chain file in PEM format]':file:_files \
            '-dcert_chain[second certificate chain file in PEM format]':file:_files \
            '-chainCApath[use dir as certificate store path to build CA certificate chain]':file:_files \
            '-verifyCApath[use dir as certificate store path to verify CA certificate]':file:_files \
            '-no_cache[Disable session cache]' \
            '-ext_cache[Disable internal cache, setup and use external cache]' \
            '-CRLform[CRL format (PEM or DER) PEM is default]' \
            '-verify_return_error[Close connection on verification error]' \
            '-verify_quiet[No verify output except verify errors]' \
            '-build_chain[Build certificate chain]' \
            '-chainCAfile[CA file for certificate chain (PEM format)]':file:_files \
            '-verifyCAfile[CA file for certificate verification (PEM format)]':file:_files \
            '-ign_eof[ignore input eof (default when -quiet)]' \
            '-no_ign_eof[Do not ignore input eof]' \
            '-status[Request certificate status from server]' \
            '-status_verbose[Print more output in certificate status callback]' \
            '-status_timeout[Status request responder timeout]' \
            '-status_url[Status request fallback URL]' \
            '-status_file[File containing DER encoded OCSP Response]':file:_files \
            '-security_debug[Print output from SSL/TLS security framework]' \
            '-security_debug_verbose[Print more output from SSL/TLS security framework]' \
            '-brief[Restrict output to brief summary of connection parameters]' \
            '-rev[act as a simple test server which just sends back with the received text reversed]' \
            '-async[Operate in asynchronous mode]' \
            '-ssl_config[Configure SSL_CTX using the configuration '\''val'\'']' \
            '-no_ssl3[Just disable SSLv3]' \
            '-no_tls1[Just disable TLSv1]' \
            '-no_tls1_1[Just disable TLSv1.1]' \
            '-no_tls1_2[Just disable TLSv1.2]' \
            '-no_tls1_3[Just disable TLSv1.3]' \
            '-bugs[Turn on SSL bug compatibility]' \
            '-no_comp[Disable SSL/TLS compression (default)]' \
            '-comp[Use SSL/TLS-level compression]' \
            '-no_ticket[Disable use of TLS session tickets]' \
            '-serverpref[Use server'\''s cipher preferences]' \
            '-legacy_renegotiation[Enable use of legacy renegotiation (dangerous)]' \
            '-no_renegotiation[Disable all renegotiation.]' \
            '-legacy_server_connect[Allow initial connection to servers that don'\''t support RI]' \
            '-no_resumption_on_reneg[Disallow session resumption on renegotiation]' \
            '-no_legacy_server_connect[Disallow initial connection to servers that don'\''t support RI]' \
            '-allow_no_dhe_kex[In TLSv1.3 allow non-(ec)dhe based key exchange on resumption]' \
            '-prioritize_chacha[Prioritize ChaCha ciphers when preferred by clients]' \
            '-strict[Enforce strict certificate checks as per TLS standard]' \
            '-sigalgs[Signature algorithms to support (colon-separated list)]' \
            '-client_sigalgs[Signature algorithms to support for client certificate authentication (colon-separated list)]' \
            '-groups[Groups to advertise (colon-separated list)]' \
            '-curves[Groups to advertise (colon-separated list)]' \
            '-named_curve[Elliptic curve used for ECDHE (server-side only)]' \
            '-cipher[Specify TLSv1.2 and below cipher list to be used]' \
            '-ciphersuites[Specify TLSv1.3 ciphersuites to be used]' \
            '-min_protocol[Specify the minimum protocol version to be used]' \
            '-max_protocol[Specify the maximum protocol version to be used]' \
            '-record_padding[Block size to pad TLS 1.3 records to.]' \
            '-debug_broken_protocol[Perform all sorts of protocol violations for testing purposes]' \
            '-no_middlebox[Disable TLSv1.3 middlebox compat mode]' \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            '-xkey[key for Extended certificates]':file:_files \
            '-xcert[cert for Extended certificates]':file:_files \
            '-xchain[chain for Extended certificates]':file:_files \
            '-xchain_build[build certificate chain for the extended certificates]' \
            '-xcertform[format of Extended certificate (PEM or DER) PEM default]' \
            '-xkeyform[format of Extended certificate'\''s key (PEM or DER) PEM default]' \
            '-nbio[Use non-blocking IO]' \
            '-psk_identity[PSK identity to expect]' \
            '-psk_hint[PSK identity hint to use]' \
            '-psk[PSK in hex (without 0x)]' \
            '-psk_session[File to read PSK SSL session from]':file:_files \
            '-srpvfile[The verifier file for SRP]':file:_files \
            '-srpuserseed[A seed string for a default user salt]' \
            '-tls1[Just talk TLSv1]' \
            '-tls1_1[Just talk TLSv1.1]' \
            '-tls1_2[just talk TLSv1.2]' \
            '-tls1_3[just talk TLSv1.3]' \
            '-dtls[Use any DTLS version]' \
            '-timeout[Enable timeouts]' \
            '-listen[Listen for a DTLS ClientHello with a cookie and then connect]' \
            '-stateless[Require TLSv1.3 cookies]' \
            '-dtls1[Just talk DTLSv1]' \
            '-dtls1_2[Just talk DTLSv1.2]' \
            '-no_dhe[Disable ephemeral DH]' \
            '-nextprotoneg[Set the advertised protocols for the NPN extension (comma-separated list)]' \
            '-use_srtp[Offer SRTP key management with a colon-separated profile list]' \
            '-alpn[Set the advertised protocols for the ALPN extension (comma-separated list)]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-keylogfile[Write TLS secrets to file]':file:_files \
            '-max_early_data[The maximum number of bytes of early data as advertised in tickets]' \
            '-recv_max_early_data[The maximum number of bytes of early data (hard limit)]' \
            '-early_data[Attempt to read early data]' \
            '-num_tickets[The number of TLSv1.3 session tickets that a server will automatically issue]' \
            '-anti_replay[Switch on anti-replay protection (default)]' \
            '-no_anti_replay[Switch off anti-replay protection]' \
            "*: :_files"

    }

    function _openssl_s_time {
        _arguments \
            '-help[Display this summary]' \
            '-connect[Where to connect as post:port (default is localhost:4433)]' \
            '-cipher[TLSv1.2 and below cipher list to be used]' \
            '-ciphersuites[Specify TLSv1.3 ciphersuites to be used]' \
            '-cert[Cert file to use, PEM format assumed]':file:_files \
            '-nameopt[Various certificate name options]' \
            '-key[File with key, PEM; default is -cert file]':file:_files \
            '-CApath[PEM format directory of CA'\''s]':file:_files \
            '-cafile[PEM format file of CA'\''s]':file:_files \
            '-CAfile[PEM format file of CA'\''s]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-new[Just time new connections]' \
            '-reuse[Just time connection reuse]' \
            '-bugs[Turn on SSL bug compatibility]' \
            '-www[Fetch specified page from the site]' \
            "*: :_files"

    }

    function _openssl_sess_id {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - default PEM (DER or PEM)]' \
            '-outform[Output format - default PEM (PEM, DER or NSS)]' \
            '-in[Input file - default stdin]' \
            '-out[Output file - default stdout]':file:_files \
            '-text[Print ssl session id details]' \
            '-cert[Output certificate]' \
            '-noout[Don'\''t output the encoded session info]' \
            '-context[Set the session ID context]' \
            "*: :_files"

    }

    function _openssl_smime {
        _arguments \
            '-help[Display this summary]' \
            '-encrypt[Encrypt message]' \
            '-decrypt[Decrypt encrypted message]' \
            '-sign[Sign message]' \
            '-verify[Verify signed message]' \
            '-pk7out[Output PKCS#7 structure]' \
            '-nointern[Don'\''t search certificates in message for signer]' \
            '-nosigs[Don'\''t verify message signature]' \
            '-noverify[Don'\''t verify signers certificate]' \
            '-nocerts[Don'\''t include signers certificate when signing]' \
            '-nodetach[Use opaque signing]' \
            '-noattr[Don'\''t include any signed attributes]' \
            '-binary[Don'\''t translate message to text]' \
            '-certfile[Other certificates file]':file:_files \
            '-signer[Signer certificate file]' \
            '-recip[Recipient certificate file for decryption]':file:_files \
            '-in[Input file]':file:_files \
            '-inform[Input format SMIME (default), PEM or DER]' \
            '-inkey[Input private key (if not signer or recipient)]' \
            '-keyform[Input private key format (PEM or ENGINE)]' \
            '-out[Output file]':file:_files \
            '-outform[Output format SMIME (default), PEM or DER]' \
            '-content[Supply or override content for detached signature]':file:_files \
            '-to[To address]' \
            '-from[From address]' \
            '-subject[Subject]' \
            '-text[Include or delete text MIME headers]' \
            '-CApath[Trusted certificates directory]':file:_files \
            '-CAfile[Trusted certificates file]':file:_files \
            '-no-CAfile[Do not load the default certificates file]' \
            '-no-CApath[Do not load certificates from the default certificates directory]' \
            '-resign[Resign a signed message]' \
            '-nochain[set PKCS7_NOCHAIN so certificates contained in the message are not used as untrusted CAs]' \
            '-nosmimecap[Omit the SMIMECapabilities attribute]' \
            '-stream[Enable CMS streaming]' \
            '-indef[Same as -stream]' \
            '-noindef[Disable CMS streaming]' \
            '-crlfeol[Use CRLF as EOL termination instead of CR only]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-md[Digest algorithm to use when signing or resigning]' \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_speed {
        _arguments \
            '-help[Display this summary]' \
            '-evp[Use EVP-named cipher or digest]' \
            '-decrypt[Time decryption instead of encryption (only EVP)]' \
            '-aead[Benchmark EVP-named AEAD cipher in TLS-like sequence]' \
            '-mb[Enable (tls1>=1) multi-block mode on EVP-named cipher]' \
            '-mr[Produce machine readable output]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            '-elapsed[Use wall-clock time instead of CPU user time as divisor]' \
            "*: :_files"

    }

    function _openssl_spkac {
        _arguments \
            '-help[Display this summary]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-key[Create SPKAC using private key]':file:_files \
            '-keyform[Private key file format - default PEM (PEM, DER, or ENGINE)]' \
            '-passin[Input file pass phrase source]' \
            '-challenge[Challenge string]' \
            '-spkac[Alternative SPKAC name]' \
            '-noout[Don'\''t print SPKAC]' \
            '-pubkey[Output public key]' \
            '-verify[Verify SPKAC signature]' \
            '-spksect[Specify the name of an SPKAC-dedicated section of configuration]' \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_srp {
        _arguments \
            '-help[Display this summary]' \
            '-verbose[Talk a lot while doing things]' \
            '-config[A config file]':file:_files \
            '-name[The particular srp definition to use]' \
            '-srpvfile[The srp verifier file name]':file:_files \
            '-add[Add a user and srp verifier]' \
            '-modify[Modify the srp verifier of an existing user]' \
            '-delete[Delete user from verifier file]' \
            '-list[List users]' \
            '-gn[Set g and N values to be used for new verifier]' \
            '-userinfo[Additional info to be set for user]' \
            '-passin[Input file pass phrase source]' \
            '-passout[Output file pass phrase source]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_storeutl {
        _arguments \
            '-help[Display this summary]' \
            '-out[Output file - default stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-text[Print a text form of the objects]' \
            '-noout[No PEM output, just status]' \
            '-certs[Search for certificates only]' \
            '-keys[Search for keys only]' \
            '-crls[Search for CRLs only]' \
            '-subject[Search by subject]' \
            '-issuer[Search by issuer and serial, issuer name]' \
            '-serial[Search by issuer and serial, serial number]' \
            '-fingerprint[Search by public key fingerprint, given in hex]' \
            '-alias[Search by alias]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-r[Recurse through names]' \
            "*: :_files"

    }

    function _openssl_ts {
        _arguments \
            '-help[Display this summary]' \
            '-config[Configuration file]':file:_files \
            '-section[Section to use within config file]' \
            '-query[Generate a TS query]' \
            '-data[File to hash]':file:_files \
            '-digest[Digest (as a hex string)]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-tspolicy[Policy OID to use]' \
            '-no_nonce[Do not include a nonce]' \
            '-cert[Put cert request into query]' \
            '-in[Input file]':file:_files \
            '-token_in[Input is a PKCS#7 file]' \
            '-out[Output file]':file:_files \
            '-token_out[Output is a PKCS#7 file]' \
            '-text[Output text (not DER)]' \
            '-reply[Generate a TS reply]' \
            '-queryfile[File containing a TS query]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-inkey[File with private key for reply]' \
            '-signer[Signer certificate file]' \
            '-chain[File with signer CA chain]':file:_files \
            '-verify[Verify a TS response]' \
            '-CApath[Path to trusted CA files]':file:_files \
            '-CAfile[File with trusted CA certs]':file:_files \
            '-untrusted[File with untrusted certs]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            '-policy[adds policy to the acceptable policy set]' \
            '-purpose[certificate chain purpose]' \
            '-verify_name[verification policy name]' \
            '-verify_depth[chain depth limit]' \
            '-auth_level[chain authentication security level]' \
            '-attime[verification epoch time]' \
            '-verify_hostname[expected peer hostname]' \
            '-verify_email[expected peer email]' \
            '-verify_ip[expected peer IP address]' \
            '-ignore_critical[permit unhandled critical extensions]' \
            '-issuer_checks[(deprecated)]' \
            '-crl_check[check leaf certificate revocation]' \
            '-crl_check_all[check full chain revocation]' \
            '-policy_check[perform rfc5280 policy checks]' \
            '-explicit_policy[set policy variable require-explicit-policy]' \
            '-inhibit_any[set policy variable inhibit-any-policy]' \
            '-inhibit_map[set policy variable inhibit-policy-mapping]' \
            '-x509_strict[disable certificate compatibility work-arounds]' \
            '-extended_crl[enable extended CRL features]' \
            '-use_deltas[use delta CRLs]' \
            '-policy_print[print policy processing diagnostics]' \
            '-check_ss_sig[check root CA self-signatures]' \
            '-trusted_first[search trust store first (default)]' \
            '-suiteB_128_only[Suite B 128-bit-only mode]' \
            '-suiteB_128[Suite B 128-bit mode allowing 192-bit algorithms]' \
            '-suiteB_192[Suite B 192-bit-only mode]' \
            '-partial_chain[accept chains anchored by intermediate trust-store CAs]' \
            '-no_alt_chains[(deprecated)]' \
            '-no_check_time[ignore certificate validity time]' \
            '-allow_proxy_certs[allow the use of proxy certificates]' \
            "*: :_files"

    }

    function _openssl_version {
        _arguments \
            '-help[Display this summary]' \
            '-a[Show all data]' \
            '-b[Show build date]' \
            '-d[Show configuration directory]' \
            '-e[Show engines directory]' \
            '-f[Show compiler flags used]' \
            '-o[Show some internal datatype options]' \
            '-p[Show target build platform]' \
            '-r[Show random seeding options]' \
            '-v[Show library version]' \
            "*: :_files"

    }

    function _openssl_x509 {
        _arguments \
            '-help[Display this summary]' \
            '-inform[Input format - default PEM (one of DER or PEM)]' \
            '-in[Input file - default stdin]':file:_files \
            '-outform[Output format - default PEM (one of DER or PEM)]' \
            '-out[Output file - default stdout]':file:_files \
            '-keyform[Private key format - default PEM]' \
            '-passin[Private key password/pass-phrase source]' \
            '-serial[Print serial number value]' \
            '-subject_hash[Print subject hash value]' \
            '-issuer_hash[Print issuer hash value]' \
            '-hash[Synonym for -subject_hash]' \
            '-subject[Print subject DN]' \
            '-issuer[Print issuer DN]' \
            '-email[Print email address(es)]' \
            '-startdate[Set notBefore field]' \
            '-enddate[Set notAfter field]' \
            '-purpose[Print out certificate purposes]' \
            '-dates[Both Before and After dates]' \
            '-modulus[Print the RSA key modulus]' \
            '-pubkey[Output the public key]' \
            '-fingerprint[Print the certificate fingerprint]' \
            '-alias[Output certificate alias]' \
            '-noout[No output, just status]' \
            '-nocert[No certificate output]' \
            '-ocspid[Print OCSP hash values for the subject name and public key]' \
            '-ocsp_uri[Print OCSP Responder URL(s)]' \
            '-trustout[Output a trusted certificate]' \
            '-clrtrust[Clear all trusted purposes]' \
            '-clrext[Clear all certificate extensions]' \
            '-addtrust[Trust certificate for a given purpose]' \
            '-addreject[Reject certificate for a given purpose]' \
            '-setalias[Set certificate alias]' \
            '-days[How long till expiry of a signed certificate - def 30 days]' \
            '-checkend[Check whether the cert expires in the next arg seconds Exit 1 if so, 0 if not]' \
            '-signkey[Self sign cert with arg]' \
            '-x509toreq[Output a certification request object]' \
            '-req[Input is a certificate request, sign and output]' \
            '-CA[Set the CA certificate, must be PEM format]':file:_files \
            '-CAkey[The CA key, must be PEM format; if not in CAfile]' \
            '-CAcreateserial[Create serial number file if it does not exist]' \
            '-CAserial[Serial file]' \
            '-set_serial[Serial number to use]' \
            '-text[Print the certificate in text form]' \
            '-ext[Print various X509V3 extensions]' \
            '-C[Print out C code forms]' \
            '-extfile[File with X509V3 extensions to add]':file:_files \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-extensions[Section from config file to use]' \
            '-nameopt[Various certificate name options]' \
            '-certopt[Various certificate text options]' \
            '-checkhost[Check certificate matches host]' \
            '-checkemail[Check certificate matches email]' \
            '-checkip[Check certificate matches ipaddr]' \
            '-CAform[CA format - default PEM]' \
            '-CAkeyform[CA key format - default PEM]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-force_pubkey[Force the Key to put inside certificate]':file:_files \
            '-next_serial[Increment current certificate serial number]' \
            '-clrreject[Clears all the prohibited or rejected uses of the certificate]' \
            '-badsig[Corrupt last byte of certificate signature (for test)]' \
            '-subject_hash_old[Print old-style (MD5) subject hash value]' \
            '-issuer_hash_old[Print old-style (MD5) issuer hash value]' \
            '-engine[Use engine, possibly a hardware device]' \
            '-preserve_dates[preserve existing dates when signing]' \
            "*: :_files"

    }

    function _openssl_blake2b512 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_blake2s256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_md4 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_md5 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_mdc2 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_rmd160 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha1 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha224 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha384 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha512 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha3-224 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha3-256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha3-384 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sha3-512 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_shake128 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_shake256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_sm3 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List digests]' \
            '-c[Print the digest with separating colons]' \
            '-r[Print the digest in coreutils format]' \
            '-out[Output to filename rather than stdout]':file:_files \
            '-passin[Input file pass phrase source]' \
            '-sign[Sign digest using private key]' \
            '-verify[Verify a signature using public key]' \
            '-prverify[Verify a signature using private key]' \
            '-signature[File with signature to verify]':file:_files \
            '-keyform[Key file format (PEM or ENGINE)]' \
            '-hex[Print as hex dump]' \
            '-binary[Print in binary form]' \
            '-d[Print debug info]' \
            '-debug[Print debug info]' \
            '-fips-fingerprint[Compute HMAC with the key used in OpenSSL-FIPS fingerprint]' \
            '-hmac[Create hashed MAC with key]' \
            '-mac[Create MAC (not necessarily HMAC)]' \
            '-sigopt[Signature parameter in n:v form]' \
            '-macopt[MAC algorithm parameters in n:v form or key]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine e, possibly a hardware device]' \
            '-engine_impl[Also use engine given by -engine for digest operations]' \
            "*: :_files"

    }

    function _openssl_aes128 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-128-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-128-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-128-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-128-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-128-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes192 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-192-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-192-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-192-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-192-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-192-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-256-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-256-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-256-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-256-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aes-256-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria128 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-128-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-128-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-128-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-128-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-128-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria192 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-192-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-192-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-192-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-192-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-192-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-256-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-256-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-256-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-256-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_aria-256-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_base64 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_bf {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_bf-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_bf-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_bf-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_bf-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia128 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-128-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-128-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-128-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-128-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-128-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia192 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-192-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-192-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-192-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-192-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-192-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia256 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-256-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-256-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-256-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-256-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_camellia-256-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast5-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast5-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast5-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_cast5-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_chacha20 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des3 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_desx {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede3 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede3-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede3-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_des-ede3-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_idea {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_idea-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_idea-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_idea-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_idea-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc2 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc2-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc2-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc2-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc2-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_rc4 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_seed {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_seed-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_seed-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_seed-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_seed-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4 {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4-cbc {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4-cfb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4-ctr {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4-ecb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }

    function _openssl_sm4-ofb {
        _arguments \
            '-help[Display this summary]' \
            '-list[List ciphers]' \
            '-ciphers[Alias for -list]' \
            '-in[Input file]':file:_files \
            '-out[Output file]':file:_files \
            '-pass[Passphrase source]' \
            '-e[Encrypt]' \
            '-d[Decrypt]' \
            '-p[Print the iv/key]' \
            '-P[Print the iv/key and exit]' \
            '-v[Verbose output]' \
            '-nopad[Disable standard block padding]' \
            '-salt[Use salt in the KDF (default)]' \
            '-nosalt[Do not use salt in the KDF]' \
            '-debug[Print debug info]' \
            '-a[Base64 encode/decode, depending on encryption flag]' \
            '-base64[Same as option -a]' \
            '-A[Used with -\[base64|a\] to specify base64 buffer as a single line]' \
            '-bufsize[Buffer size]' \
            '-k[Passphrase]' \
            '-kfile[Read passphrase from file]':file:_files \
            '-K[Raw key, in hex]' \
            '-S[Salt, in hex]' \
            '-iv[IV in hex]' \
            '-md[Use specified digest to create a key from the passphrase]' \
            '-pbkdf2[Use password-based key derivation function 2]' \
            '-none[Don'\''t encrypt]' \
            '-rand[Load the file(s) into the random number generator]' \
            '-writerand[Write random data to the specified file]':file:_files \
            '-engine[Use engine, possibly a hardware device]' \
            "*: :_files"

    }


function _openssl {
    local line state

    function _commands {
        local -a commands
        commands=(
            'asn1parse:Parse an ASN.1 sequence.'
            'ca:Certificate Authority (CA) Management.'
            'ciphers:Cipher Suite Description Determination.'
            'cms:CMS (Cryptographic Message Syntax) command.'
            'crl:Certificate Revocation List (CRL) Management.'
            'crl2pkcs7:CRL to PKCS#7 Conversion.'
            'dgst:Message Digest calculation. MAC calculations are superseded by openssl-mac(1).'
            'dhparam:Generation and Management of Diffie-Hellman Parameters. Superseded by openssl-genpkey(1) and openssl-pkeyparam(1).'
            'dsa:DSA Data Management.'
            'dsaparam:DSA Parameter Generation and Management. Superseded by openssl-genpkey(1) and openssl-pkeyparam(1).'
            'ec:EC (Elliptic curve) key processing.'
            'ecparam:EC parameter manipulation and generation.'
            'enc:Encryption, decryption, and encoding.'
            'engine:Engine (loadable module) information and manipulation.'
            'errstr:Error Number to Error String Conversion.'
            'gendsa:Generation of DSA Private Key from Parameters. Superseded by openssl-genpkey(1) and openssl-pkey(1).'
            'genpkey:Generation of Private Key or Parameters.'
            'genrsa:Generation of RSA Private Key. Superseded by openssl-genpkey(1).'
            'help:Display information about a command'\''s options.'
            'list:List algorithms and features.'
            'nseq:Create or examine a Netscape certificate sequence.'
            'ocsp:Online Certificate Status Protocol command.'
            'passwd:Generation of hashed passwords.'
            'pkcs12:PKCS#12 Data Management.'
            'pkcs7:PKCS#7 Data Management.'
            'pkcs8:PKCS#8 format private key conversion command.'
            'pkey:Public and private key management.'
            'pkeyparam:Public key algorithm parameter management.'
            'pkeyutl:Public key algorithm cryptographic operation command.'
            'prime:Compute prime numbers.'
            'rand:Generate pseudo-random bytes.'
            'rehash:Create symbolic links to certificate and CRL files named by the hash values.'
            'req:PKCS#10 X.509 Certificate Signing Request (CSR) Management.'
            'rsa:RSA key management.'
            'rsautl:RSA command for signing, verification, encryption, and decryption. Superseded by openssl-pkeyutl(1).'
            's_client:A generic SSL/TLS client which can establish a transparent connection to a remote server speaking SSL/TLS.'
            's_server:A generic SSL/TLS server which accepts connections from remote clients speaking SSL/TLS.'
            's_time:SSL Connection Timer.'
            'sess_id:SSL Session Data Management.'
            'smime:S/MIME mail processing.'
            'speed:Algorithm Speed Measurement.'
            'spkac:SPKAC printing and generating command.'
            'srp:Maintain SRP password file. This command is deprecated.'
            'storeutl:Command to list and display certificates, keys, CRLs, etc.'
            'ts:Time Stamping Authority command.'
            'version:OpenSSL Version Information.'
            'x509:X.509 Certificate Data Management.'
            'blake2b512:BLAKE2b-512 Digest'
            'blake2s256:BLAKE2s-256 Digest'
            'md4:MD4 Digest'
            'md5:MD5 Digest'
            'mdc2:MDC2 Digest'
            'rmd160:RMD-160 Digest'
            'sha1:SHA-1 Digest'
            'sha224:SHA-2 224 Digest'
            'sha256:SHA-2 256 Digest'
            'sha384:SHA-2 384 Digest'
            'sha512:SHA-2 512 Digest'
            'sha3-224:SHA-3 224 Digest'
            'sha3-256:SHA-3 256 Digest'
            'sha3-384:SHA-3 384 Digest'
            'sha3-512:SHA-3 512 Digest'
            'shake128:SHA-3 SHAKE128 Digest'
            'shake256:SHA-3 SHAKE256 Digest'
            'sm3:SM3 Digest'
            'aes128:AES-128 Cipher'
            'aes-128-cbc:AES-128 Cipher'
            'aes-128-cfb:AES-128 Cipher'
            'aes-128-ctr:AES-128 Cipher'
            'aes-128-ecb:AES-128 Cipher'
            'aes-128-ofb:AES-128 Cipher'
            'aes192:AES-192 Cipher'
            'aes-192-cbc:AES-192 Cipher'
            'aes-192-cfb:AES-192 Cipher'
            'aes-192-ctr:AES-192 Cipher'
            'aes-192-ecb:AES-192 Cipher'
            'aes-192-ofb:AES-192 Cipher'
            'aes256:AES-256 Cipher'
            'aes-256-cbc:AES-256 Cipher'
            'aes-256-cfb:AES-256 Cipher'
            'aes-256-ctr:AES-256 Cipher'
            'aes-256-ecb:AES-256 Cipher'
            'aes-256-ofb:AES-256 Cipher'
            'aria128:Aria-128 Cipher'
            'aria-128-cbc:Aria-128 Cipher'
            'aria-128-cfb:Aria-128 Cipher'
            'aria-128-ctr:Aria-128 Cipher'
            'aria-128-ecb:Aria-128 Cipher'
            'aria-128-ofb:Aria-128 Cipher'
            'aria192:Aria-192 Cipher'
            'aria-192-cbc:Aria-192 Cipher'
            'aria-192-cfb:Aria-192 Cipher'
            'aria-192-ctr:Aria-192 Cipher'
            'aria-192-ecb:Aria-192 Cipher'
            'aria-192-ofb:Aria-192 Cipher'
            'aria256:Aria-256 Cipher'
            'aria-256-cbc:Aria-256 Cipher'
            'aria-256-cfb:Aria-256 Cipher'
            'aria-256-ctr:Aria-256 Cipher'
            'aria-256-ecb:Aria-256 Cipher'
            'aria-256-ofb:Aria-256 Cipher'
            'base64:Base64 Encoding'
            'bf:Blowfish Cipher'
            'bf-cbc:Blowfish Cipher'
            'bf-cfb:Blowfish Cipher'
            'bf-ecb:Blowfish Cipher'
            'bf-ofb:Blowfish Cipher'
            'camellia128:Camellia-128 Cipher'
            'camellia-128-cbc:Camellia-128 Cipher'
            'camellia-128-cfb:Camellia-128 Cipher'
            'camellia-128-ctr:Camellia-128 Cipher'
            'camellia-128-ecb:Camellia-128 Cipher'
            'camellia-128-ofb:Camellia-128 Cipher'
            'camellia192:Camellia-192 Cipher'
            'camellia-192-cbc:Camellia-192 Cipher'
            'camellia-192-cfb:Camellia-192 Cipher'
            'camellia-192-ctr:Camellia-192 Cipher'
            'camellia-192-ecb:Camellia-192 Cipher'
            'camellia-192-ofb:Camellia-192 Cipher'
            'camellia256:Camellia-256 Cipher'
            'camellia-256-cbc:Camellia-256 Cipher'
            'camellia-256-cfb:Camellia-256 Cipher'
            'camellia-256-ctr:Camellia-256 Cipher'
            'camellia-256-ecb:Camellia-256 Cipher'
            'camellia-256-ofb:Camellia-256 Cipher'
            'cast:CAST Cipher'
            'cast-cbc:CAST Cipher'
            'cast5-cbc:CAST5 Cipher'
            'cast5-cfb:CAST5 Cipher'
            'cast5-ecb:CAST5 Cipher'
            'cast5-ofb:CAST5 Cipher'
            'chacha20:Chacha20 Cipher'
            'des:DES Cipher'
            'des-cbc:DES Cipher'
            'des-cfb:DES Cipher'
            'des-ecb:DES Cipher'
            'des-ede:DES Cipher'
            'des-ede-cbc:DES Cipher'
            'des-ede-cfb:DES Cipher'
            'des-ede-ofb:DES Cipher'
            'des-ofb:DES Cipher'
            'des3:Triple-DES Cipher'
            'desx:Triple-DES Cipher'
            'des-ede3:Triple-DES Cipher'
            'des-ede3-cbc:Triple-DES Cipher'
            'des-ede3-cfb:Triple-DES Cipher'
            'des-ede3-ofb:Triple-DES Cipher'
            'idea:IDEA Cipher'
            'idea-cbc:IDEA Cipher'
            'idea-cfb:IDEA Cipher'
            'idea-ecb:IDEA Cipher'
            'idea-ofb:IDEA Cipher'
            'rc2:RC2 Cipher'
            'rc2-cbc:RC2 Cipher'
            'rc2-cfb:RC2 Cipher'
            'rc2-ecb:RC2 Cipher'
            'rc2-ofb:RC2 Cipher'
            'rc4:RC4 Cipher'
            'seed:SEED Cipher'
            'seed-cbc:SEED Cipher'
            'seed-cfb:SEED Cipher'
            'seed-ecb:SEED Cipher'
            'seed-ofb:SEED Cipher'
            'sm4:SM4 Cipher'
            'sm4-cbc:SM4 Cipher'
            'sm4-cfb:SM4 Cipher'
            'sm4-ctr:SM4 Cipher'
            'sm4-ecb:SM4 Cipher'
            'sm4-ofb:SM4 Cipher'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-help[Provides a terse summary of all options. If an option takes an argument, the "type" of argument is also given.]' \
        '--[This terminates the list of options. It is mostly useful if any filename parameters start with a minus sign:]' \
        '-rand[A file or files containing random data used to seed the random number generator. Multiple files can be specified separated by an OS-dependent character. The separator is ";" for MS-Windows, "," for OpenVMS, and ":" for all others. Another way to specify multiple files is to repeat this flag with different filenames.]':file:_files \
        '-writerand[Writes the seed data to the specified file upon exit. This file can be used in a subsequent command invocation.]':file:_files \
        {-ssl3,-tls1,-tls1_1,-tls1_2,-tls1_3,-no_ssl3,-no_tls1,-no_tls1_1,-no_tls1_2,-no_tls1_3}'[These options require or disable the use of the specified SSL or TLS protocols. When a specific TLS version is required, only that version will be offered or accepted. Only one specific protocol can be given and it cannot be combined with any of the no_ options.]' \
        {-dtls,-dtls1,-dtls1_2}'[These options specify to use DTLS instead of DLTS. With -dtls, clients will negotiate any supported DTLS protocol version. Use the -dtls1 or -dtls1_2 options to support only DTLS1.0 or DTLS1.2, respectively.]' \
        '-engine[Load the engine identified by id and use all the methods it implements (algorithms, key storage, etc.), unless specified otherwise in the command-specific documentation or it is configured to do so, as described in "Engine Configuration" in config(5).]' \
        '-provider[Load and initialize the provider identified by name. The name can be also a path to the provider module. In that case the provider name will be the specified path and not just the provider module name. Interpretation of relative paths is platform specific. The configured "MODULESDIR" path, OPENSSL_MODULES environment variable, or the path specified by -provider-path is prepended to relative paths. See provider(7) for a more detailed description.]' \
        '-provider-path[Specifies the search path that is to be used for looking for providers. Equivalently, the OPENSSL_MODULES environment variable may be set.]':file:_files \
        '-propquery[Specifies the property query clause to be used when fetching algorithms from the loaded providers. See property(7) for a more detailed description.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (asn1parse)
            _openssl_asn1parse
            ;;

        (ca)
            _openssl_ca
            ;;

        (ciphers)
            _openssl_ciphers
            ;;

        (cms)
            _openssl_cms
            ;;

        (crl)
            _openssl_crl
            ;;

        (crl2pkcs7)
            _openssl_crl2pkcs7
            ;;

        (dgst)
            _openssl_dgst
            ;;

        (dhparam)
            _openssl_dhparam
            ;;

        (dsa)
            _openssl_dsa
            ;;

        (dsaparam)
            _openssl_dsaparam
            ;;

        (ec)
            _openssl_ec
            ;;

        (ecparam)
            _openssl_ecparam
            ;;

        (enc)
            _openssl_enc
            ;;

        (engine)
            _openssl_engine
            ;;

        (errstr)
            _openssl_errstr
            ;;

        (gendsa)
            _openssl_gendsa
            ;;

        (genpkey)
            _openssl_genpkey
            ;;

        (genrsa)
            _openssl_genrsa
            ;;

        (help)
            _openssl_help
            ;;

        (list)
            _openssl_list
            ;;

        (nseq)
            _openssl_nseq
            ;;

        (ocsp)
            _openssl_ocsp
            ;;

        (passwd)
            _openssl_passwd
            ;;

        (pkcs12)
            _openssl_pkcs12
            ;;

        (pkcs7)
            _openssl_pkcs7
            ;;

        (pkcs8)
            _openssl_pkcs8
            ;;

        (pkey)
            _openssl_pkey
            ;;

        (pkeyparam)
            _openssl_pkeyparam
            ;;

        (pkeyutl)
            _openssl_pkeyutl
            ;;

        (prime)
            _openssl_prime
            ;;

        (rand)
            _openssl_rand
            ;;

        (rehash)
            _openssl_rehash
            ;;

        (req)
            _openssl_req
            ;;

        (rsa)
            _openssl_rsa
            ;;

        (rsautl)
            _openssl_rsautl
            ;;

        (s_client)
            _openssl_s_client
            ;;

        (s_server)
            _openssl_s_server
            ;;

        (s_time)
            _openssl_s_time
            ;;

        (sess_id)
            _openssl_sess_id
            ;;

        (smime)
            _openssl_smime
            ;;

        (speed)
            _openssl_speed
            ;;

        (spkac)
            _openssl_spkac
            ;;

        (srp)
            _openssl_srp
            ;;

        (storeutl)
            _openssl_storeutl
            ;;

        (ts)
            _openssl_ts
            ;;

        (version)
            _openssl_version
            ;;

        (x509)
            _openssl_x509
            ;;

        (blake2b512)
            _openssl_blake2b512
            ;;

        (blake2s256)
            _openssl_blake2s256
            ;;

        (md4)
            _openssl_md4
            ;;

        (md5)
            _openssl_md5
            ;;

        (mdc2)
            _openssl_mdc2
            ;;

        (rmd160)
            _openssl_rmd160
            ;;

        (sha1)
            _openssl_sha1
            ;;

        (sha224)
            _openssl_sha224
            ;;

        (sha256)
            _openssl_sha256
            ;;

        (sha384)
            _openssl_sha384
            ;;

        (sha512)
            _openssl_sha512
            ;;

        (sha3-224)
            _openssl_sha3-224
            ;;

        (sha3-256)
            _openssl_sha3-256
            ;;

        (sha3-384)
            _openssl_sha3-384
            ;;

        (sha3-512)
            _openssl_sha3-512
            ;;

        (shake128)
            _openssl_shake128
            ;;

        (shake256)
            _openssl_shake256
            ;;

        (sm3)
            _openssl_sm3
            ;;

        (aes128)
            _openssl_aes128
            ;;

        (aes-128-cbc)
            _openssl_aes-128-cbc
            ;;

        (aes-128-cfb)
            _openssl_aes-128-cfb
            ;;

        (aes-128-ctr)
            _openssl_aes-128-ctr
            ;;

        (aes-128-ecb)
            _openssl_aes-128-ecb
            ;;

        (aes-128-ofb)
            _openssl_aes-128-ofb
            ;;

        (aes192)
            _openssl_aes192
            ;;

        (aes-192-cbc)
            _openssl_aes-192-cbc
            ;;

        (aes-192-cfb)
            _openssl_aes-192-cfb
            ;;

        (aes-192-ctr)
            _openssl_aes-192-ctr
            ;;

        (aes-192-ecb)
            _openssl_aes-192-ecb
            ;;

        (aes-192-ofb)
            _openssl_aes-192-ofb
            ;;

        (aes256)
            _openssl_aes256
            ;;

        (aes-256-cbc)
            _openssl_aes-256-cbc
            ;;

        (aes-256-cfb)
            _openssl_aes-256-cfb
            ;;

        (aes-256-ctr)
            _openssl_aes-256-ctr
            ;;

        (aes-256-ecb)
            _openssl_aes-256-ecb
            ;;

        (aes-256-ofb)
            _openssl_aes-256-ofb
            ;;

        (aria128)
            _openssl_aria128
            ;;

        (aria-128-cbc)
            _openssl_aria-128-cbc
            ;;

        (aria-128-cfb)
            _openssl_aria-128-cfb
            ;;

        (aria-128-ctr)
            _openssl_aria-128-ctr
            ;;

        (aria-128-ecb)
            _openssl_aria-128-ecb
            ;;

        (aria-128-ofb)
            _openssl_aria-128-ofb
            ;;

        (aria192)
            _openssl_aria192
            ;;

        (aria-192-cbc)
            _openssl_aria-192-cbc
            ;;

        (aria-192-cfb)
            _openssl_aria-192-cfb
            ;;

        (aria-192-ctr)
            _openssl_aria-192-ctr
            ;;

        (aria-192-ecb)
            _openssl_aria-192-ecb
            ;;

        (aria-192-ofb)
            _openssl_aria-192-ofb
            ;;

        (aria256)
            _openssl_aria256
            ;;

        (aria-256-cbc)
            _openssl_aria-256-cbc
            ;;

        (aria-256-cfb)
            _openssl_aria-256-cfb
            ;;

        (aria-256-ctr)
            _openssl_aria-256-ctr
            ;;

        (aria-256-ecb)
            _openssl_aria-256-ecb
            ;;

        (aria-256-ofb)
            _openssl_aria-256-ofb
            ;;

        (base64)
            _openssl_base64
            ;;

        (bf)
            _openssl_bf
            ;;

        (bf-cbc)
            _openssl_bf-cbc
            ;;

        (bf-cfb)
            _openssl_bf-cfb
            ;;

        (bf-ecb)
            _openssl_bf-ecb
            ;;

        (bf-ofb)
            _openssl_bf-ofb
            ;;

        (camellia128)
            _openssl_camellia128
            ;;

        (camellia-128-cbc)
            _openssl_camellia-128-cbc
            ;;

        (camellia-128-cfb)
            _openssl_camellia-128-cfb
            ;;

        (camellia-128-ctr)
            _openssl_camellia-128-ctr
            ;;

        (camellia-128-ecb)
            _openssl_camellia-128-ecb
            ;;

        (camellia-128-ofb)
            _openssl_camellia-128-ofb
            ;;

        (camellia192)
            _openssl_camellia192
            ;;

        (camellia-192-cbc)
            _openssl_camellia-192-cbc
            ;;

        (camellia-192-cfb)
            _openssl_camellia-192-cfb
            ;;

        (camellia-192-ctr)
            _openssl_camellia-192-ctr
            ;;

        (camellia-192-ecb)
            _openssl_camellia-192-ecb
            ;;

        (camellia-192-ofb)
            _openssl_camellia-192-ofb
            ;;

        (camellia256)
            _openssl_camellia256
            ;;

        (camellia-256-cbc)
            _openssl_camellia-256-cbc
            ;;

        (camellia-256-cfb)
            _openssl_camellia-256-cfb
            ;;

        (camellia-256-ctr)
            _openssl_camellia-256-ctr
            ;;

        (camellia-256-ecb)
            _openssl_camellia-256-ecb
            ;;

        (camellia-256-ofb)
            _openssl_camellia-256-ofb
            ;;

        (cast)
            _openssl_cast
            ;;

        (cast-cbc)
            _openssl_cast-cbc
            ;;

        (cast5-cbc)
            _openssl_cast5-cbc
            ;;

        (cast5-cfb)
            _openssl_cast5-cfb
            ;;

        (cast5-ecb)
            _openssl_cast5-ecb
            ;;

        (cast5-ofb)
            _openssl_cast5-ofb
            ;;

        (chacha20)
            _openssl_chacha20
            ;;

        (des)
            _openssl_des
            ;;

        (des-cbc)
            _openssl_des-cbc
            ;;

        (des-cfb)
            _openssl_des-cfb
            ;;

        (des-ecb)
            _openssl_des-ecb
            ;;

        (des-ede)
            _openssl_des-ede
            ;;

        (des-ede-cbc)
            _openssl_des-ede-cbc
            ;;

        (des-ede-cfb)
            _openssl_des-ede-cfb
            ;;

        (des-ede-ofb)
            _openssl_des-ede-ofb
            ;;

        (des-ofb)
            _openssl_des-ofb
            ;;

        (des3)
            _openssl_des3
            ;;

        (desx)
            _openssl_desx
            ;;

        (des-ede3)
            _openssl_des-ede3
            ;;

        (des-ede3-cbc)
            _openssl_des-ede3-cbc
            ;;

        (des-ede3-cfb)
            _openssl_des-ede3-cfb
            ;;

        (des-ede3-ofb)
            _openssl_des-ede3-ofb
            ;;

        (idea)
            _openssl_idea
            ;;

        (idea-cbc)
            _openssl_idea-cbc
            ;;

        (idea-cfb)
            _openssl_idea-cfb
            ;;

        (idea-ecb)
            _openssl_idea-ecb
            ;;

        (idea-ofb)
            _openssl_idea-ofb
            ;;

        (rc2)
            _openssl_rc2
            ;;

        (rc2-cbc)
            _openssl_rc2-cbc
            ;;

        (rc2-cfb)
            _openssl_rc2-cfb
            ;;

        (rc2-ecb)
            _openssl_rc2-ecb
            ;;

        (rc2-ofb)
            _openssl_rc2-ofb
            ;;

        (rc4)
            _openssl_rc4
            ;;

        (seed)
            _openssl_seed
            ;;

        (seed-cbc)
            _openssl_seed-cbc
            ;;

        (seed-cfb)
            _openssl_seed-cfb
            ;;

        (seed-ecb)
            _openssl_seed-ecb
            ;;

        (seed-ofb)
            _openssl_seed-ofb
            ;;

        (sm4)
            _openssl_sm4
            ;;

        (sm4-cbc)
            _openssl_sm4-cbc
            ;;

        (sm4-cfb)
            _openssl_sm4-cfb
            ;;

        (sm4-ctr)
            _openssl_sm4-ctr
            ;;

        (sm4-ecb)
            _openssl_sm4-ecb
            ;;

        (sm4-ofb)
            _openssl_sm4-ofb
            ;;

        esac
        ;;
     esac

}

