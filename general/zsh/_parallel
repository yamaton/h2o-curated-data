#compdef _parallel parallel

# Auto-generated with h2o


function _parallel {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {--null,-0}'[Use NUL as delimiter.]' \
        {--arg-file,-a}'[Use input-file as input source.]':file:_files \
        '--arg-file-sep[Use sep-str instead of :::: as separator string between command and argument files.]' \
        '--arg-sep[Use sep-str instead of ::: as separator string.]' \
        '--bar[Show progress as a progress bar.]' \
        {--basefile,--bf}'[file will be transferred to each sshlogin before first job is started.]':file:_files \
        {--basenamereplace,--bnr}'[Use the replacement string replace-str instead of {/} for basename of input line.]' \
        {--basenameextensionreplace,--bner}'[Use the replacement string replace-str instead of {/.} for basename of input line without extension.]' \
        '--bin[Use binexpr as binning key and bin input to the jobs.]' \
        '--bg[Run command in background.]' \
        {--bibtex,--citation}'[Print the citation notice and BibTeX entry for GNU parallel, silence citation notice for all future runs, and exit. It will not run any commands.]' \
        {--block,--block-size}'[Size of block in bytes to read at a time. The size can be postfixed with K, M, G, T, P, k, m, g, t, or p.]' \
        {--block-timeout,--bt}'[Timeout for reading block when using --pipe.]' \
        '--cat[Create a temporary file with content.]' \
        '--cleanup[Remove transferred files.]' \
        '--color[Colour output.]' \
        {--color-failed,--cf}'[Colour the output from failing jobs white on red.]' \
        {--colsep,-C}'[Column separator.]' \
        '--compress[Compress temporary files.]' \
        {--compress-program,--decompress-program}'[Use prg for (de)compressing temporary files.]' \
        '--csv[Treat input as CSV-format.]' \
        '--ctag[Color tag.]' \
        '--ctagstring[Color tagstring.]' \
        '--delay[Delay starting next job by duration.]' \
        {--delimiter,-d}'[Input items are terminated by delim.]' \
        {--dirnamereplace,--dnr}'[Use the replacement string replace-str instead of {//} for dirname of input line.]' \
        '--dry-run[Print the job to run on stdout (standard output), but do not run the job.]' \
        '-E[Set the end of file string to eof-str.]' \
        {--eof,-e}'[This option is a synonym for the -E option.]' \
        '--embed[Embed GNU parallel in a shell script.]' \
        '--env[Copy exported environment variable var.]' \
        '--eta[Show the estimated number of seconds before finishing.]' \
        '--fg[Run command in foreground.]' \
        '--fifo[Create a temporary fifo with content.]' \
        '--filter[Only run jobs where filter is true.]' \
        '--filter-hosts[Remove down hosts.]' \
        '--gnu[Behave like GNU parallel.]' \
        '--group[Group output.]' \
        '--group-by[Group input by value.]' \
        {--help,-h}'[Print a summary of the options to GNU parallel and exit.]' \
        {--halt-on-error,--halt}'[When should GNU parallel terminate?]' \
        '--header[Use regexp as header.]' \
        {--hostgroups,--hgrp}'[Enable hostgroups on arguments.]' \
        '-I[Use the replacement string replace-str instead of {}.]' \
        {--replace,-i}'[This option is deprecated; use -I instead.]' \
        '--joblog[Logfile for executed jobs.]':file:_files \
        {--jobs,-j,--max-procs,-P}'[Number of jobslots on each machine.]' \
        {--jobs,-j,--max-procs,-P}'[Add N to the number of CPU threads.]' \
        {--jobs,-j,--max-procs,-P}'[Subtract N from the number of CPU threads.]' \
        {--jobs,-j,--max-procs,-P}'[Read parameter from file.]':file:_files \
        {--keep-order,-k}'[Keep sequence of output same as the order of input.]' \
        '-L[When used with --pipe: Read records of recsize.]' \
        {--max-lines,-l}'[When used with --pipe: Read records of recsize lines.]' \
        '--limit[Dynamic job limit.]' \
        {--latest-line,--ll}'[Print the lastest line of each running job.]' \
        {--line-buffer,--lb}'[Buffer output on line basis.]' \
        {--link,--xapply}'[Link input sources.]' \
        '--load[Only start jobs if load is less than max-load.]' \
        {--controlmaster,-M}'[Use ssh'\''s ControlMaster to make ssh connections faster.]' \
        '-m[Multiple arguments.]' \
        '--memfree[Minimum memory free when starting another job.]' \
        '--memsuspend[Suspend jobs when there is less memory available.]' \
        '--minversion[Print the version GNU parallel and exit.]' \
        {--max-args,-n}'[Use at most max-args arguments per command line.]' \
        {--max-replace-args,-N}'[Use at most max-args arguments per command line.]' \
        '--nonall[--onall with no arguments.]' \
        '--onall[Run all the jobs on all computers given with --sshlogin.]' \
        {--open-tty,-o}'[Open terminal tty.]' \
        {--output-as-files,--outputasfiles,--files}'[Save output to files.]' \
        {--pipe,--spreadstdin}'[Spread input to jobs on stdin (standard input).]' \
        '--pipe-part[Pipe parts of a physical file.]' \
        '--plain[Ignore --profile, $PARALLEL, and ~/.parallel/config.]' \
        '--plus[Add more replacement strings.]' \
        '--process-slot-var[Set the environment variable varname to the jobslot number-1.]' \
        '--progress[Show progress of computations.]' \
        '--max-line-length-allowed[Print maximal command line length.]' \
        '--number-of-cpus[Print the number of physical CPU cores and exit.]' \
        '--number-of-cores[Print the number of physical CPU cores and exit (used by GNU parallel itself to determine the number of physical CPU cores on remote computers).]' \
        '--number-of-sockets[Print the number of filled CPU sockets and exit (used by GNU parallel itself to determine the number of filled CPU sockets on remote computers).]' \
        '--number-of-threads[Print the number of hyperthreaded CPU cores and exit (used by GNU parallel itself to determine the number of hyperthreaded CPU cores on remote computers).]' \
        '--no-keep-order[Overrides an earlier --keep-order (e.g. if set in ~/.parallel/config).]' \
        '--nice[Run the command at this niceness.]' \
        {--interactive,-p}'[Ask user before running a job.]' \
        '--parens[Use parensstring instead of {==}.]' \
        {--profile,-J}'[Use profile profilename for options.]':file:_files \
        {--quote,-q}'[Quote command.]' \
        {--no-run-if-empty,-r}'[Do not run empty input.]' \
        '--noswap[Do not start job is computer is swapping.]' \
        '--record-env[Record exported environment.]' \
        {--recstart,--recend}'[Split record between endstring and startstring.]' \
        '--regexp[Use --regexp to interpret --recstart and --recend as regular expressions. This is slow, however.]' \
        {--remove-rec-sep,--removerecsep,--rrs}'[Remove record separator.]' \
        {--results,--res}'[Save the output into files.]' \
        '--resume[Resumes from the last unfinished job.]' \
        '--resume-failed[Retry all failed and resume from the last unfinished job.]' \
        '--retry-failed[Retry all failed jobs in joblog.]' \
        '--retries[Try failing jobs n times.]' \
        '--return[Transfer files from remote computers.]':file:_files \
        {--round-robin,--round}'[Distribute chunks of standard input in a round robin fashion.]' \
        '--rpl[Define replacement string.]' \
        '--rsync-opts[Options to pass on to rsync.]' \
        {--max-chars,-s}'[Limit length of command.]' \
        '--show-limits[Display limits given by the operating system.]' \
        '--semaphore[Work as a counting semaphore.]' \
        {--semaphore-name,--id}'[Use name as the name of the semaphore.]' \
        {--semaphore-timeout,--st}'[If secs > 0: If the semaphore is not released within secs seconds, take it anyway.]' \
        '--seqreplace[Use the replacement string replace-str instead of {#} for job sequence number.]' \
        '--session[Record names in current environment in $PARALLEL_IGNORED_NAMES and exit.]' \
        '--shard[Use shardexpr as shard key and shard input to the jobs.]' \
        {--shebang,--hashbang}'[GNU parallel can be called as a shebang (#!) command as the first line of a script. The content of the file will be treated as inputsource.]' \
        '--shebang-wrap[GNU parallel can parallelize scripts by wrapping the shebang line.]' \
        '--shell-completion[Generate shell completion code for interactive shells.]' \
        '--shell-quote[Does not run the command but quotes it. Useful for making quoted composed commands for GNU parallel.]' \
        '--shuf[Shuffle jobs.]' \
        '--skip-first-line[Do not use the first line of input (used by GNU parallel itself when called with --shebang).]' \
        '--sql[Use --sql-master instead.]' \
        '--sql-master[Submit jobs via SQL server.]' \
        '--sql-and-worker[Shorthand for: --sql-master DBURL --sql-worker DBURL.]' \
        '--sql-worker[Execute jobs via SQL server. Read the input sources variables from the table pointed to by DBURL. The command on the command line should be the same as given by --sqlmaster.]' \
        '--ssh[GNU parallel defaults to using ssh for remote access. This can be overridden with --ssh. It can also be set on a per server basis with --sshlogin.]' \
        '--ssh-delay[Delay starting next ssh by duration.]' \
        {--sshloginfile,--slf}'[File with sshlogins. The file consists of sshlogins on separate lines. Empty lines and lines starting with '\''#'\'' are ignored.]':file:_files \
        '--slotreplace[Use the replacement string replace-str instead of {%} for job slot number.]' \
        '--silent[Silent.]' \
        {--template,--tmpl}'[Replace replacement strings in file and save it in repl.]':file:_files \
        '--tty[Open terminal tty.]' \
        '--tag[Tag lines with arguments.]' \
        '--tagstring[Tag lines with a string.]' \
        '--tee[Pipe all data to all jobs.]' \
        '--term-seq[Termination sequence.]' \
        '--tmpdir[Directory for temporary files.]':file:_files \
        '--tmux[Use tmux for output. Start a tmux session and run each job in a window in that session. No other output will be produced.]' \
        '--tmuxpane[Use tmux for output but put output into panes in the first window. Useful if you want to monitor the progress of less than 100 concurrent jobs.]' \
        '--timeout[Time out for command. If the command runs for longer than duration seconds it will get killed as per --term-seq.]' \
        {--verbose,-t}'[Print the job to be run on stderr (standard error).]' \
        '--transfer[Transfer files to remote computers.]' \
        {--transferfile,--tf}'[Transfer filename to remote computers.]':file:_files \
        '--trc[Transfer, Return, Cleanup. Shorthand for: --transfer --return filename --cleanup]':file:_files \
        '--trim[Trim white space in input.]' \
        {--ungroup,-u}'[Ungroup output.]' \
        {--extensionreplace,--er}'[Use the replacement string replace-str instead of {.} for input line without extension.]' \
        '--use-sockets-instead-of-threads[See also: --use-cores-instead-of-threads]' \
        {--use-cores-instead-of-threads,--use-cpus-instead-of-cores}'[Determine how GNU parallel counts the number of CPUs.]' \
        '-v[Verbose.]' \
        {--version,-V}'[Print the version GNU parallel and exit.]' \
        {--workdir,--wd}'[Jobs will be run in the dir mydir. The default is the current dir for the local machine, and the login dir for remote computers.]':file:_files \
        '--wait[Wait for all commands to complete.]' \
        '-X[Multiple arguments with context replace.]' \
        {--exit,-x}'[Exit if the size (see the -s option) is exceeded.]' \
        '--xargs[Multiple arguments. Insert as many arguments as the command line length permits.]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

