#compdef _pkg-config pkg-config

# Generated with h2o 0.1.18


function _pkg-config {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--modversion[Requests that the version information of the libraries specified on the command line be displayed. If pkg-config can find all the libraries on the command line, each library'\''s version string is printed to stdout, one version per line. In this case pkg-config exits successfully. If one or more libraries is unknown, pkg-config exits with a nonzero code, and the contents of stdout are undefined.]' \
        '--version[Displays the version of pkg-config and terminates.]' \
        '--atleast-pkgconfig-version[Requires at least the given version of pkg-config.]' \
        '--help[Displays a help message and terminates.]' \
        '--print-errors[If one or more of the modules on the command line, or their dependencies, are not found, or if an error occurs in parsing a .pc file, then this option will cause errors explaining the problem to be printed. With "predicate" options such as "--exists" pkg-config runs silently by default, because it'\''s usually used in scripts that want to control what'\''s output. This option can be used alone (to just print errors encountered locating modules on the command line) or with other options. The PKG_CONFIG_DEBUG_SPEW environment variable overrides this option.]' \
        '--short-errors[Print short error messages.]' \
        '--silence-errors[If one or more of the modules on the command line, or their dependencies, are not found, or if an error occurs in parsing a a .pc file, then this option will keep errors explaining the problem from being printed. With "predicate" options such as "--exists" pkg-config runs silently by default, because it'\''s usually used in scripts that want to control what'\''s output. So this option is only useful with options such as "--cflags" or "--modversion" that print errors by default. The PKG_CONFIG_DEBUG_SPEW environment variable overrides this option.]' \
        '--errors-to-stdout[If printing errors, print them to stdout rather than the default stderr]' \
        '--debug[Print debugging information. This is slightly different than the PKG_CONFIG_DEBUG_SPEW environment variable, which also enable "--print-errors".]' \
        '--cflags[This prints pre-processor and compile flags required to compile the packages on the command line, including flags for all their dependencies. Flags are "compressed" so that each identical flag appears only once. pkg-config exits with a nonzero code if it can'\''t find metadata for one or more of the packages on the command line.]' \
        '--cflags-only-I[This prints the -I part of "--cflags". That is, it defines the header search path but doesn'\''t specify anything else.]' \
        '--cflags-only-other[This prints parts of "--cflags" not covered by "--cflags-only-I".]' \
        '--libs[This option is identical to "--cflags", only it prints the link flags. As with "--cflags", duplicate flags are merged (maintaining proper ordering), and flags for dependencies are included in the output.]' \
        '--libs-only-L[This prints the -L/-R part of "--libs". That is, it defines the library search path but doesn'\''t specify which libraries to link with.]' \
        '--libs-only-l[This prints the -l part of "--libs" for the libraries specified on the command line. Note that the union of "--libs-only-l" and "--libs-only-L" may be smaller than "--libs", due to flags such as -rdynamic.]' \
        '--libs-only-other[This prints the parts of "--libs" not covered by "--libs-only-L" and "--libs-only-l", such as "--pthread".]' \
        '--variable[This returns the value of a variable defined in a package'\''s .pc file. Most packages define the variable "prefix", for example, so you can say:]' \
        '--define-variable[This sets a global value for a variable, overriding the value in any .pc files. Most packages define the variable "prefix", for example, so you can say:]' \
        '--print-variables[Returns a list of all variables defined in the package.]' \
        '--uninstalled[Normally if you request the package "foo" and the package "foo-uninstalled" exists, pkg-config will prefer the "-uninstalled" variant. This allows compilation/linking against uninstalled packages. If you specify the "--uninstalled" option, pkg-config will return successfully if any "-uninstalled" packages are being used, and return failure (false) otherwise. (The PKG_CONFIG_DISABLE_UNINSTALLED environment variable keeps pkg-config from implicitly choosing "-uninstalled" packages, so if that variable is set, they will only have been used if you pass a name like "foo-uninstalled" on the command line explicitly.)]' \
        '--max-version[These options test whether the package or list of packages on the command line are known to pkg-config, and optionally whether the version number of a package meets certain constraints. If all packages exist and meet the specified version constraints, pkg-config exits successfully. Otherwise it exits unsuccessfully. Only the first VERSION comparing option will be honored. Subsequent options of this type will be ignored.]' \
        '--validate[Checks the syntax of a package'\''s .pc file for validity. This is the same as --exists except that dependencies are not verified. This can be useful for package developers to test their .pc file prior to release:]' \
        '--msvc-syntax[This option is available only on Windows. It causes pkg-config to output -l and -L flags in the form recognized by the Microsoft Visual C++ command-line compiler, cl. Specifically, instead of -Lx:/some/path it prints /libpath:x/some/path, and instead of -lfoo it prints foo.lib. Note that the --libs output consists of flags for the linker, and should be placed on the cl command line after a /link switch.]' \
        '(--define-prefix --dont-define-prefix)'{--define-prefix,--dont-define-prefix}'[These options control whether pkg-config overrides the value of the variable prefix in each .pc file. With --define-prefix, pkg-config uses the installed location of the .pc file to determine the prefix. --dont-define-prefix prevents this behavior. The default is usually --define-prefix.]' \
        '--prefix-variable[Set the name of the variable that pkg-config overrides instead of prefix when using the --define-prefix feature.]' \
        '--static[Output libraries suitable for static linking. That means including any private libraries in the output. This relies on proper tagging in the .pc files, else a too large number of libraries will ordinarily be output.]' \
        '--list-all[List all modules found in the pkg-config path.]' \
        '--print-provides[List all modules the given packages provides.]' \
        '--print-requires[List all modules the given packages requires.]' \
        '--print-requires-private[List all modules the given packages requires for static linking (see --static).]' \
        '1: :_commands' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

