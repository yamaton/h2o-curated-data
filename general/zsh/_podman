#compdef _podman podman

# Auto-generated with h2o

    function _podman_attach {
        _arguments \
            '--detach-keys[Specify the key sequence for detaching a container. Format is a single character \[a-Z\] or one or more ctrl-<value> characters where <value> is one of: a-z, @, ^, \[, , or _. Specifying "" will disable this feature. The default is ctrl-p,ctrl-q.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container ID or name, use the last created container. If other methods than Podman are used to run containers such as CRI-O, the last started container could be from either of those methods. The default is false. IMPORTANT: This OPTION is not available with the remote Podman client. This OPTION does not need a container name or ID as input argument.]' \
            '--no-stdin[Do not attach STDIN. The default is false.]' \
            '--sig-proxy[Proxy received signals to the process (non-TTY mode only). SIGCHLD, SIGSTOP, and SIGKILL are not proxied. The default is true.]' \
            "*: :_files"

    }

    function _podman_build {
        _arguments \
            '--manifest[nifest]' \
            '--timestamp[econds]' \
            '--annotation[--disable-compression, -D]' \
            "*: :_files"

    }

    function _podman_commit {
        _arguments \
            '(--author -a)'{--author,-a}'[Set the author for the committed image.]' \
            '(--change -c)'{--change,-c}'[Apply the following possible instructions to the created image:]' \
            '--iidfile[Write the image ID to the file.]:file:_files' \
            '--include-volumes[Include in the committed image any volumes added to the container by the --volume or --mount OPTIONS to the podman create and podman run commands. The default is false.]' \
            '(--message -m)'{--message,-m}'[Set commit message for committed image. IMPORTANT: The message field is not supported in oci format.]' \
            '(--pause -p)'{--pause,-p}'[Pause the container when creating an image. The default is false.]' \
            '(--quiet -q)'{--quiet,-q}'[Suppresses output. The default is false.]' \
            "*: :_files"

    }

    function _podman_container {
        _arguments \
            "*: :_files"

    }

    function _podman_cp {
        _arguments \
            '(--archive -a)'{--archive,-a}'[Archive mode (copy all uid/gid information). When set to true, files copied to a container will have changed ownership to the primary UID/GID of the container. When set to false, maintain uid/gid from archive sources instead of changing them to the primary uid/gid of the destination container. The default is true.]' \
            "*: :_files"

    }

    function _podman_create {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip)]' \
            '--annotation[Add an annotation to the container. The format is key=value. The --annotation option can be set multiple times.]' \
            '--arch[Override the architecture, defaults to hosts, of the image to be pulled. For example, arm.]' \
            '(--attach -a)'{--attach,-a}'[Attach to STDIN, STDOUT or STDERR.]' \
            '--authfile[Path of the authentication file. Default is ${XDG_RUNTIME_DIR}/containers/auth.json]:file:_files' \
            '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
            '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT).]' \
            '--cap-add[Add Linux capabilities]' \
            '--cap-drop[Drop Linux capabilities]' \
            '--cgroupns[Set the cgroup namespace mode for the container.]' \
            '--cgroups[Determines whether the container will create CGroups. Valid values are enabled, disabled, no-conmon, split, which the default being enabled.]' \
            '--cgroup-parent[Path to cgroups under which the cgroup for the container will be created. If the path is not absolute, the path is considered to be relative to the cgroups path of the init process. Cgroups will be created if they do not already exist.]:file:_files' \
            '--cgroup-conf[When running on cgroup v2, specify the cgroup file to write to and its value. For example --cgroup-conf=memory.high=1073741824 sets the memory.high limit to 1GB.]' \
            '--cidfile[Write the container ID to the file]' \
            '--conmon-pidfile[Write the pid of the conmon process to a file. conmon runs in a separate process than Podman, so this is necessary when using systemd to restart Podman containers. (This option is not available with the remote Podman client)]:file:_files' \
            '--cpu-period[Set the CPU period for the Completely Fair Scheduler (CFS), which is a duration in microseconds. Once the container'\''s CPU quota is used up, it will not be scheduled to run until the current period ends. Defaults to 100000 microseconds.]' \
            '--cpu-quota[Limit the CPU Completely Fair Scheduler (CFS) quota.]' \
            '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
            '--cpu-shares[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs. The default is 0.0 which means no limit. This is shorthand for --cpu-period and --cpu-quota, so you may only set either]' \
            '(--cpus --cpu-period --cpu-quota.)'{--cpus,--cpu-period,--cpu-quota.}'[On some systems, changing the CPU limits may not be allowed for non-root users. For more details, see]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '--device[Add a host device to the container. Optional permissions parameter can be used to specify device permissions, it is combination of r for read, w for write, and m for mknod(2).]' \
            '--device-cgroup-rule[Add a rule to the cgroup allowed devices list. The rule is expected to be in the format specified in the Linux kernel documentation (Documentation/cgroup-v1/devices.txt):]' \
            '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]:file:_files' \
            '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]:file:_files' \
            '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]:file:_files' \
            '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]:file:_files' \
            '--disable-content-trust[This is a Docker specific option to disable image verification to a Docker registry and is not supported by Podman. This flag is a NOOP and provided solely for scripting compatibility.]' \
            '--dns[Set custom DNS servers. Invalid if using --dns and --network that is set to '\''none'\'' or container:<name|id>.]' \
            '--dns-opt[Set custom DNS options. Invalid if using --dns-opt and --network that is set to '\''none'\'' or container:<name|id>.]' \
            '--dns-search[Set custom DNS search domains. Invalid if using --dns-search and --network that is set to '\''none'\'' or container:<name|id>. (Use --dns-search=. if you don'\''t wish to set the search domain)]' \
            '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
            '(--env -e)'{--env,-e}'[Set environment variables]' \
            '--env-host[Use host environment inside of the container. See Environment note below for precedence. (This option is not available with the remote Podman client)]' \
            '--env-file[Read in a line delimited file of environment variables. See Environment note below for precedence.]:file:_files' \
            '--expose[Expose a port, or a range of ports (e.g. --expose=3300-3310) to set up port redirection on the host system.]' \
            '--gidmap[GID map for the user namespace. Using this flag will run the container with user namespace enabled. It conflicts with the --userns and --subgidname flags.]' \
            '--group-add[Add additional groups to assign to primary user running within the container process.]' \
            '--health-cmd[Set or alter a healthcheck command for a container. The command is a command to be executed inside your container that determines your container health. The command is required for other healthcheck options to be applied. A value of none disables existing healthchecks.]' \
            '--health-interval[Set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
            '--health-retries[The number of retries allowed before a healthcheck is considered to be unhealthy. The default value is 3.]' \
            '--health-start-period[The initialization time needed for a container to bootstrap. The value can be expressed in time format like 2m3s. The default value is 0s]' \
            '--health-timeout[The maximum time allowed to complete the healthcheck before an interval is considered failed. Like start-period, the value can be expressed in a time format such as 1m22s. The default value is 30s.]' \
            '(--hostname -h)'{--hostname,-h}'[Container host name]' \
            '--help[Print usage statement]' \
            '--http-proxy[By default proxy environment variables are passed into the container if set for the Podman process. This can be disabled by setting the --http-proxy option to false. The environment variables passed in include http_proxy, https_proxy, ftp_proxy, no_proxy, and also the upper case versions of those. This option is only needed when the host system must use a proxy but the container should not use any proxy. Proxy environment variables specified for the container in any other way will override the values that would have been passed through from the host. (Other ways to specify the proxy for the container include passing the values with the --env flag, or hard coding the proxy environment at container build time.) (This option is not available with the remote Podman client)]' \
            '--init[Run an init inside the container that forwards signals and reaps processes.]' \
            '--init-path[Path to the container-init binary.]:file:_files' \
            '(--interactive -i)'{--interactive,-i}'[Keep STDIN open even if not attached. The default is false.]' \
            '--ip6[Not implemented]' \
            '--ip[Specify a static IP address for the container, for example 10.88.64.128. This option can only be used if the container is joined to only a single network - i.e., --network=_network-name_ is used at most once - and if the container is not joining another container'\''s network namespace via --network=container:_id_. The address must be within the CNI network'\''s IP address pool (default 10.88.0.0/16).]' \
            '--ipc[Default is to create a private IPC namespace (POSIX SysV IPC) for the container]' \
            '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '(--label -l)'{--label,-l}'[Add metadata to a container (e.g., --label com.example.key=value)]' \
            '--label-file[Read in a line delimited file of labels]:file:_files' \
            '--link-local-ip[Not implemented]' \
            '--log-driver[Logging driver for the container. Currently available options are k8s-file, journald, and none, with json-file aliased to k8s-file for scripting compatibility.]:file:_files' \
            '--log-opt[Set custom logging configuration. The following *name*s are supported:]' \
            '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
            '(--memory -m)'{--memory,-m}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-swap[A limit value equal to memory plus swap. Must be used with the -m (--memory) flag. The swap LIMIT should always be larger than -m (--memory) value. By default, the swap LIMIT will be set to double the value of --memory.]' \
            '--memory-swappiness[Tune a container'\''s memory swappiness behavior. Accepts an integer between 0 and 100.]' \
            '--mount[Attach a filesystem mount to the container]' \
            '--name[Assign a name to the container]' \
            '(--network --net)'{--network,--net}'[Set the network mode for the container. Invalid if using --dns, --dns-opt, or --dns-search with --network that is set to none or container:id. If used together with --pod, the container will not join the pod'\''s network namespace.]' \
            '--network-alias[Add network-scoped alias for the container]' \
            '--no-healthcheck[Disable any defined healthchecks for container.]' \
            '--no-hosts[Do not create /etc/hosts for the container. By default, Podman will manage /etc/hosts, adding the container'\''s own IP address and any hosts from --add-host.]' \
            '--oom-kill-disable[Whether to disable OOM Killer for the container or not.]' \
            '--oom-score-adj[Tune the host'\''s OOM preferences for containers (accepts -1000 to 1000)]' \
            '--os[Override the OS, defaults to hosts, of the image to be pulled. For example, windows.]' \
            '--pid[Set the PID mode for the container Default is to create a private PID namespace for the container - container:<name|id>: join another container'\''s PID namespace - host: use the host'\''s PID namespace for the container. Note: the host mode gives the container full access to local PID and is therefore considered insecure. - ns: join the specified PID namespace - private: create a new namespace for the container (default)]' \
            '--pids-limit[Tune the container'\''s pids limit. Set 0 to have unlimited pids for the container. (default "4096" on systems that support PIDS cgroups).]' \
            '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os) The --platform option can be used to override the current architecture and operating system.]' \
            '--pod[Run container in an existing pod. If you want Podman to make the pod for you, preference the pod name with new:. To make a pod with more granular options, use the podman pod create command before creating a container.]' \
            '--pod-id-file[Run container in an existing pod and read the pod'\''s ID from the specified file. If a container is run within a pod, and the pod has an infra-container, the infra-container will be started before the container is.]:file:_files' \
            '--privileged[Give extended privileges to this container. The default is false.]' \
            '(--publish -p)'{--publish,-p}'[Publish a container'\''s port, or range of ports, to the host]' \
            '(--publish-all -P)'{--publish-all,-P}'[Publish all exposed ports to random ports on the host interfaces. The default is false.]' \
            '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing").]' \
            '(--quiet -q)'{--quiet,-q}'[Suppress output information when pulling images]' \
            '--read-only[Mount the container'\''s root filesystem as read only.]' \
            '--read-only-tmpfs[If container is running in --read-only mode, then mount a read-write tmpfs on /run, /tmp, and /var/tmp. The default is true]' \
            '--replace[If another container with the same name already exists, replace and remove it. The default is false.]' \
            '--requires[Specify one or more requirements. A requirement is a dependency container that will be started before this container. Containers can be specified by name or ID, with multiple containers being separated by commas.]' \
            '--restart[Restart policy to follow when containers exit. Restart policy will not take effect if a container is stopped via the podman kill or podman stop commands.]' \
            '--rm[Automatically remove the container when it exits. The default is false.]' \
            '--rootfs[If specified, the first argument refers to an exploded container on the file system.]' \
            '--sdnotify[Determines how to use the NOTIFY_SOCKET, as passed with systemd and Type=notify.]' \
            '--seccomp-policy[Specify the policy to select the seccomp profile. If set to image, Podman will look for a "io.containers.seccomp.profile" label in the container-image config and use its value as a seccomp profile. Otherwise, Podman will follow the default policy by applying the default profile unless specified otherwise via --security-opt seccomp as described below.]' \
            '--secret[Give the container access to a secret. Can be specified multiple times.]' \
            '--security-opt[Security Options]' \
            '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) If you omit the unit, the system uses bytes. If you omit the size entirely, the system uses 64m. When size is 0, there is no limit on the amount of memory used for IPC by the container.]' \
            '--stop-signal[Signal to stop a container. Default is SIGTERM.]' \
            '--stop-timeout[Timeout (in seconds) to stop a container. Default is 10. Remote connections use local containers.conf for defaults]' \
            '--subgidname[Name for GID map from the /etc/subgid file. Using this flag will run the container with user namespace enabled. This flag conflicts with --userns and --gidmap.]' \
            '--subuidname[Name for UID map from the /etc/subuid file. Using this flag will run the container with user namespace enabled. This flag conflicts with --userns and --uidmap.]' \
            '--sysctl[Configure namespaced kernel parameters at runtime]' \
            '--systemd[Run container in systemd mode. The default is true.]' \
            '--timeout[Maximum time a container is allowed to run before conmon sends it the kill signal. By default containers will run until they exit or are stopped by podman stop.]' \
            '--tmpfs[Create a tmpfs mount]' \
            '(--tty -t)'{--tty,-t}'[Allocate a pseudo-TTY. The default is false.]' \
            '--tz[Set timezone in container. This flag takes area-based timezones, GMT time, as well as local, which sets the timezone in the container to match the host machine. See /usr/share/zoneinfo/ for valid timezones. Remote connections use local containers.conf for defaults]' \
            '--umask[Set the umask inside the container. Defaults to 0022. Remote connections use local containers.conf for defaults]' \
            '--uidmap[Run the container in a new user namespace using the supplied mapping. This option conflicts with the --userns and --subuidname options. This option provides a way to map host UIDs to container UIDs. It can be passed several times to map different ranges.]' \
            '--ulimit[Ulimit options]' \
            '(--user -u)'{--user,-u}'[Sets the username or UID used and optionally the groupname or GID for the specified command.]' \
            '--userns[Set the user namespace mode for the container. It defaults to the PODMAN_USERNS environment variable. An empty value ("") means user namespaces are disabled unless an explicit mapping is set with the --uidmap and --gidmap options.]' \
            '--uts[Set the UTS namespace mode for the container. The following values are supported:]' \
            '--variant[Use VARIANT instead of the default architecture variant of the container image. Some images can use multiple variants of the arm architectures, such as arm/v5 and arm/v7.]' \
            '(--volume -v)'{--volume,-v}'[Create a bind mount. If you specify, -v /HOST-DIR:/CONTAINER-DIR, Podman bind mounts /HOST-DIR in the host to /CONTAINER-DIR in the Podman container. Similarly, -v SOURCE-VOLUME:/CONTAINER-DIR will mount the volume in the host to the container. If no such named volume exists, Podman will create one. The OPTIONS are a comma-separated list and can be: \[1\] ⟨#Footnote1⟩ (Note when using the remote client, the volumes will be mounted from the remote server, not necessarily the client machine.)]:file:_files' \
            '--volumes-from[Mount volumes from the specified container(s). Used to share volumes between containers. The options is a comma-separated list with the following available elements:]' \
            '(--workdir -w)'{--workdir,-w}'[Working directory inside the container]:file:_files' \
            '--pidfile[When the pidfile location is specified, the container process'\'' PID will be written to the pidfile. (This option is not available with the remote Podman client) If the pidfile option is not specified, the container process'\'' PID will be written to /run/containers/storage/${storage-driver}-containers/$CID/userdata/pidfile.]:file:_files' \
            "*: :_files"

    }

    function _podman_diff {
        _arguments \
            '--format[Alter the output into a different format. The only valid format for podman diff is json.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            "*: :_files"

    }

    function _podman_events {
        _arguments \
            '-[-until.]' \
            '--help[Print usage statement.]' \
            '--format[Format the output to JSON Lines or using the given Go template.]' \
            '--filter[Filter events that are displayed. They must be in the format of "filter=value". The following filters are supported:]' \
            '--since[Show all events created since the given timestamp]' \
            '--until[Show all events created until the given timestamp]' \
            "*: :_files"

    }

    function _podman_exec {
        _arguments \
            '(--detach -d)'{--detach,-d}'[Start the exec session, but do not attach to it. The command will run in the background and the exec session will be automatically removed when it completes. The podman exec command will print the ID of the exec session and exit immediately after it starts.]' \
            '--detach-keys[Specify the key sequence for detaching a container. Format is a single character \[a-Z\] or one or more ctrl-<value> characters where <value> is one of: a-z, @, ^, \[, , or _. Specifying "" will disable this feature. The default is ctrl-p,ctrl-q.]' \
            '(--env -e)'{--env,-e}'[You may specify arbitrary environment variables that are available for the command to be executed.]' \
            '--env-file[Read in a line delimited file of environment variables.]:file:_files' \
            '(--interactive -i)'{--interactive,-i}'[When set to true, keep stdin open even if not attached. The default is false.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '--preserve-fds[Pass down to the process N additional file descriptors (in addition to 0, 1, 2). The total FDs will be 3+N.]' \
            '--privileged[Give extended privileges to this container. The default is false.]' \
            '(--tty -t)'{--tty,-t}'[Allocate a pseudo-TTY.]' \
            '(--user -u)'{--user,-u}'[Sets the username or UID used and optionally the groupname or GID for the specified command. The following examples are all valid: --user \[user | user:group | uid | uid:gid | user:gid | uid:group \]]' \
            '(--workdir -w)'{--workdir,-w}'[Working directory inside the container]:file:_files' \
            "*: :_files"

    }

    function _podman_export {
        _arguments \
            '(--output -o)'{--output,-o}'[Write to a file, default is STDOUT]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_generate {
        _arguments \
            "*: :_files"

    }

    function _podman_history {
        _arguments \
            '(--human -H)'{--human,-H}'[Display sizes and dates in human readable format (default true).]' \
            '--no-trunc[Do not truncate the output (default false).]' \
            '--notruncate[Do not truncate the output]' \
            '(--quiet -q)'{--quiet,-q}'[Print the numeric IDs only (default false).]' \
            '--format[Alter the output for a format like '\''json'\'' or a Go template.]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_image {
        _arguments \
            "*: :_files"

    }

    function _podman_images {
        _arguments \
            '(--all -a)'{--all,-a}'[Show all images (by default filter out the intermediate image layers). The default is false.]' \
            '--digests[Show image digests]' \
            '(--filter -f)'{--filter,-f}'[Filter output based on conditions provided]' \
            '--format[Change the default output format. This can be of a supported type like '\''json'\'' or a Go template. Valid placeholders for the Go template are listed below:]' \
            '--history[Display the history of image names. If an image gets re-tagged or untagged, then the image name history gets prepended (latest image first). This is especially useful when undoing a tag operation or an image does not contain any name because it has been untagged.]' \
            '(--noheading -n)'{--noheading,-n}'[Omit the table headings from the listing of images.]' \
            '--no-trunc[Do not truncate output.]' \
            '(--quiet -q)'{--quiet,-q}'[Lists only the image IDs.]' \
            '--sort[Sort by created, id, repository, size or tag (default: created)]' \
            "*: :_files"

    }

    function _podman_import {
        _arguments \
            '(--change -c)'{--change,-c}'[Apply the following possible instructions to the created image: CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
            '(--message -m)'{--message,-m}'[Set commit message for imported image]' \
            '(--quiet -q)'{--quiet,-q}'[Shows progress on the import]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_info {
        _arguments \
            '(--debug -D)'{--debug,-D}'[Show additional information]' \
            '(--format -f)'{--format,-f}'[Change output format to "json" or a Go template.]' \
            "*: :_files"

    }

    function _podman_init {
        _arguments \
            '(--all -a)'{--all,-a}'[Initialize all containers. Containers that have already initialized (including containers that have been started and are running) are ignored.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            "*: :_files"

    }

    function _podman_inspect {
        _arguments \
            '(--type -t)'{--type,-t}'[Return JSON for the specified type. Type can be '\''container'\'', '\''image'\'', '\''volume'\'', '\''network'\'', '\''pod'\'', or '\''all'\'' (default: all) (Only meaningful when invoked as podman inspect)]' \
            '(--format -f)'{--format,-f}'[Format the output using the given Go template. The keys of the returned JSON can be used as the values for the --format flag (see examples below).]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods.]' \
            '(--size -s)'{--size,-s}'[In addition to normal output, display the total file size if the type is a container.]' \
            "*: :_files"

    }

    function _podman_kill {
        _arguments \
            '(--all -a)'{--all,-a}'[Signal all running containers. This does not include paused containers.]' \
            '--cidfile[Read container ID from the specified file and remove the container. Can be specified multiple times.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '(--signal -s)'{--signal,-s}'[Signal to send to the container. For more information on Linux signals, refer to man signal(7).]' \
            "*: :_files"

    }

    function _podman_load {
        _arguments \
            '(--input -i)'{--input,-i}'[Read from archive file, default is STDIN.]' \
            '(--quiet -q)'{--quiet,-q}'[Suppress the progress output]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_login {
        _arguments \
            '--authfile[Path of the authentication file. Default is ${XDG_RUNTIME_DIR}/containers/auth.json.]:file:_files' \
            '--cert-dir[Use certificates at path (*.crt, *.cert, *.key) to connect to the registry. Please refer to containers-certs.d(5) for details. (This option is not available with the remote Podman client)]:file:_files' \
            '--get-login[Return the logged-in user for the registry. Return error if no login is found.]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '(--password -p)'{--password,-p}'[Password for registry]' \
            '--password-stdin[Take the password from stdin]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default: true). If explicitly set to true, then TLS verification will be used. If set to false, then TLS verification will not be used. If not specified, TLS verification will be used unless the target registry is listed as an insecure registry in registries.conf.]' \
            '(--username -u)'{--username,-u}'[Username for registry]' \
            '(--verbose -v)'{--verbose,-v}'[print detailed information about credential store]' \
            "*: :_files"

    }

    function _podman_logout {
        _arguments \
            '--authfile[Path of the authentication file. Default is ${XDG_RUNTIME_DIR}/containers/auth.json.]:file:_files' \
            '(--all -a)'{--all,-a}'[Remove the cached credentials for all registries in the auth file]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_logs {
        _arguments \
            '(--follow -f)'{--follow,-f}'[Follow log output. Default is false.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '(--names -n)'{--names,-n}'[Output the container name in the log]' \
            '--since[Show logs since TIMESTAMP. The --since option can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. 10m, 1h30m) computed relative to the client machine'\''s time. Supported formats for date formatted time stamps include RFC3339Nano, RFC3339, 2006-01-02T15:04:05, 2006-01-02T15:04:05.999999999, 2006-01-02Z07:00, and 2006-01-02.]' \
            '--until[Show logs until TIMESTAMP. The --until option can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. 10m, 1h30m) computed relative to the client machine'\''s time. Supported formats for date formatted time stamps include RFC3339Nano, RFC3339, 2006-01-02T15:04:05, 2006-01-02T15:04:05.999999999, 2006-01-02Z07:00, and 2006-01-02.]' \
            '--tail[Output the specified number of LINES at the end of the logs. LINES must be an integer. Defaults to -1, which prints all lines]' \
            '(--timestamps -t)'{--timestamps,-t}'[Show timestamps in the log outputs. The default is false]' \
            "*: :_files"

    }

    function _podman_mount {
        _arguments \
            '(--all -a)'{--all,-a}'[Mount all podman containers. (External containers will not be mounted)]' \
            '--format[Print the mounted containers in specified format (json).]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '--notruncate[Do not truncate IDs in output.]' \
            "*: :_files"

    }

    function _podman_network {
        _arguments \
            "*: :_files"

    }

    function _podman_pause {
        _arguments \
            '(--all -a)'{--all,-a}'[Pause all running containers.]' \
            "*: :_files"

    }

    function _podman_play {
        _arguments \
            "*: :_files"

    }

    function _podman_pod {
        _arguments \
            "*: :_files"

    }

    function _podman_port {
        _arguments \
            '(--all -a)'{--all,-a}'[List all known port mappings for running containers. When using this option, you cannot pass any container names or private ports/protocols as filters.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            "*: :_files"

    }

    function _podman_ps {
        _arguments \
            '(--all -a)'{--all,-a}'[Show all the containers created by Podman, default is only running containers.]' \
            '--external[Display external containers that are not controlled by Podman but are stored in containers storage. These external containers are generally created via other container technology such as Buildah or CRI-O and may depend on the same container images that Podman is also using. External containers are denoted with either a '\''buildah'\'' or '\''storage'\'' in the COMMAND and STATUS column of the ps output. Only used with the --all option.]' \
            '(--filter -f)'{--filter,-f}'[Filter what containers are shown in the output. Multiple filters can be given with multiple uses of the --filter flag. Filters with the same key work inclusive with the only exception being label which is exclusive. Filters with different keys always work exclusive.]' \
            '--format[Pretty-print containers to JSON or using a Go template]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '(--last -n)'{--last,-n}'[Print the n last created containers (all states)]' \
            '(--latest -l)'{--latest,-l}'[Show the latest container created (all states) (This option is not available with the remote Podman client)]' \
            '(--namespace --ns)'{--namespace,--ns}'[Display namespace information]' \
            '--noheading[Omit the table headings from the listing of containers.]' \
            '--no-trunc[Display the extended information]' \
            '(--pod -p)'{--pod,-p}'[Display the pods the containers are associated with]' \
            '(--quiet -q)'{--quiet,-q}'[Print the numeric IDs of the containers only]' \
            '--sort[Sort by command, created, id, image, names, runningfor, size, or status", Note: Choosing size will sort by size of rootFs, not alphabetically like the rest of the options Default: created]' \
            '(--size -s)'{--size,-s}'[Display the total file size]' \
            '--sync[Force a sync of container state with the OCI runtime. In some cases, a container'\''s state in the runtime can become out of sync with Podman'\''s state. This will update Podman'\''s state based on what the OCI runtime reports. Forcibly syncing is much slower, but can resolve inconsistent state issues.]' \
            '(--watch -w)'{--watch,-w}'[Refresh the output with current containers on an interval in seconds.]' \
            "*: :_files"

    }

    function _podman_pull {
        _arguments \
            '--arch[Override the architecture, defaults to hosts, of the image to be pulled. For example, arm.]' \
            '--authfile[Path of the authentication file. If the authorization state is not found there, $HOME/.docker/config.json is checked, which is set using docker login.]:file:_files' \
            '--cert-dir[Use certificates at path (*.crt, *.cert, *.key) to connect to the registry. Please refer to containers-certs.d(5) for details. (This option is not available with the remote Podman client)]:file:_files' \
            '--creds[The \[username\[:password\]\] to use to authenticate with the registry if required. If one or both values are not supplied, a command line prompt will appear and the value can be entered. The password is entered without echo.]' \
            '--disable-content-trust[This is a Docker specific option to disable image verification to a Docker registry and is not supported by Podman. This flag is a NOOP and provided solely for scripting compatibility.]' \
            '(--help -h)'{--help,-h}'[Print the usage statement.]' \
            '--os[Override the OS, defaults to hosts, of the image to be pulled. For example, windows.]' \
            '--platform[Specify the platform for selecting the image. The --platform option can be used to override the current architecture and operating system.]' \
            '(--quiet -q)'{--quiet,-q}'[Suppress output information when pulling images]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default: true). If explicitly set to true, then TLS verification will be used. If set to false, then TLS verification will not be used. If not specified, TLS verification will be used unless the target registry is listed as an insecure registry in registries.conf.]' \
            '--variant[Use VARIANT instead of the default architecture variant of the container image. Some images can use multiple variants of the arm architectures, such as arm/v5 and arm/v7.]' \
            "*: :_files"

    }

    function _podman_push {
        _arguments \
            '--authfile[Path of the authentication file. Default is ${XDG_RUNTIME_DIR}/containers/auth.json, which is set using podman login. If the authorization state is not found there, $HOME/.docker/config.json is checked, which is set using docker login.]:file:_files' \
            '--creds[The \[username\[:password\]\] to use to authenticate with the registry if required. If one or both values are not supplied, a command line prompt will appear and the value can be entered. The password is entered without echo.]' \
            '--cert-dir[Use certificates at path (*.crt, *.cert, *.key) to connect to the registry. Please refer to containers-certs.d(5) for details. (This option is not available with the remote Podman client)]:file:_files' \
            '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type, compressed or uncompressed, as source) Note: This flag can only be set when using the dir transport]' \
            '--digestfile[After copying the image, write the digest of the resulting image to the file. (This option is not available with the remote Podman client)]:file:_files' \
            '--disable-content-trust[This is a Docker specific option to disable image verification to a Docker registry and is not supported by Podman. This flag is a NOOP and provided solely for scripting compatibility.]' \
            '(--format -f)'{--format,-f}'[Manifest Type (oci, v2s2, or v2s1) to use when pushing an image.]' \
            '(--quiet -q)'{--quiet,-q}'[When writing the output image, suppress progress output]' \
            '--remove-signatures[Discard any pre-existing signatures in the image. (This option is not available with the remote Podman client)]' \
            '--sign-by[Add a signature at the destination using the specified key. (This option is not available with the remote Podman client)]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default: true). If explicitly set to true, then TLS verification will be used. If set to false, then TLS verification will not be used. If not specified, TLS verification will be used unless the target registry is listed as an insecure registry in registries.conf.]' \
            "*: :_files"

    }

    function _podman_restart {
        _arguments \
            '(--all -a)'{--all,-a}'[Restart all containers regardless of their current state.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '--running[Restart all containers that are already in the running state.]' \
            '(--time -t)'{--time,-t}'[Timeout to wait before forcibly stopping the container.]' \
            "*: :_files"

    }

    function _podman_rm {
        _arguments \
            '(--all -a)'{--all,-a}'[Remove all containers. Can be used in conjunction with -f as well.]' \
            '--cidfile[Read container ID from the specified file and remove the container. Can be specified multiple times.]' \
            '(--force -f)'{--force,-f}'[Force the removal of running and paused containers. Forcing a container removal also removes containers from container storage even if the container is not known to podman. Containers could have been created by a different container engine. In addition, forcing can be used to remove unusable containers, e.g. containers whose OCI runtime has become unavailable.]' \
            '(--ignore -i)'{--ignore,-i}'[Ignore errors when specified containers are not in the container store. A user might have decided to manually remove a container which would lead to a failure during the ExecStop directive of a systemd service referencing that container.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '(--volumes -v)'{--volumes,-v}'[Remove anonymous volumes associated with the container. This does not include named volumes created with podman volume create, or the --volume option of podman run and podman create.]' \
            "*: :_files"

    }

    function _podman_rmi {
        _arguments \
            '(--all -a)'{--all,-a}'[Remove all images in the local storage.]' \
            '(--force -f)'{--force,-f}'[This option will cause podman to remove all containers that are using the image before removing the image from the system.]' \
            "*: :_files"

    }

    function _podman_run {
        _arguments \
            '--interactive[, -i=true|false]' \
            '--no-hosts[sables this, and the image'\''s /etc/hosts will be preserved unmodified.]' \
            '(--publish -p)'{--publish,-p}'[=ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort]' \
            '--publish-all[, -P=true|false]' \
            '-[The `O` flag conflicts with other options listed above.]' \
            '(--workdir -w)'{--workdir,-w}'[=dir]' \
            '--security-opt[$ podman run --security-opt mask=/foo/bar:/second/path fedora bash]' \
            "*: :_files"

    }

    function _podman_save {
        _arguments \
            '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type, compressed or uncompressed, as source) Note: This flag can only be set when using the dir transport i.e --format=oci-dir or --format=docker-dir]' \
            '(--output -o)'{--output,-o}'[Write to a file, default is STDOUT]:file:_files' \
            '--format[Save image to docker-archive, oci-archive (see containers-transports(5)), oci-dir (oci transport), or docker-dir (dir transport with v2s2 manifest type).]' \
            '(--multi-image-archive -m)'{--multi-image-archive,-m}'[Allow for creating archives with more than one image. Additional names will be interpreted as images instead of tags. Only supported for docker-archive. The default for this option can be modified via the multi_image_archive="true"|"false" flag in containers.conf.]' \
            '(--quiet -q)'{--quiet,-q}'[Suppress the output]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_search {
        _arguments \
            '--authfile[Path of the authentication file. Default is ${XDG_RUNTIME_DIR}/containers/auth.json]:file:_files' \
            '(--filter -f)'{--filter,-f}'[Filter output based on conditions provided (default \[\])]' \
            '--format[Change the output format to a Go template]' \
            '--limit[Limit the number of results (default 25). Note: The results from each registry will be limited to this value. Example if limit is 10 and two registries are being searched, the total number of results will be 20, 10 from each (if there are at least 10 matches in each). The order of the search results is the order in which the API endpoint returns the results.]' \
            '--list-tags[List the available tags in the repository for the specified image. Note: --list-tags requires the search term to be a fully specified image name. The result contains the Image name and its tag, one line for every tag associated with the image.]' \
            '--no-trunc[Do not truncate the output]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default: true). If explicitly set to true, then TLS verification will be used. If set to false, then TLS verification will not be used if needed. If not specified, default registries will be searched through (in /etc/containers/registries.conf), and TLS will be skipped if a default registry is listed in the insecure registries.]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_start {
        _arguments \
            '(--attach -a)'{--attach,-a}'[Attach container'\''s STDOUT and STDERR. The default is false. This option cannot be used when starting multiple containers.]' \
            '--detach-keys[Specify the key sequence for detaching a container. Format is a single character \[a-Z\] or one or more ctrl-<value> characters where <value> is one of: a-z, @, ^, \[, , or _. Specifying "" will disable this feature. The default is ctrl-p,ctrl-q.]' \
            '(--interactive -i)'{--interactive,-i}'[Attach container'\''s STDIN. The default is false.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '--sig-proxy[Proxy received signals to the process (non-TTY mode only). SIGCHLD, SIGSTOP, and SIGKILL are not proxied. The default is true when attaching, false otherwise.]' \
            '--all[Start all the containers created by Podman, default is only running containers.]' \
            '(--filter -f)'{--filter,-f}'[Filter what containers are going to be started from the given arguments. Multiple filters can be given with multiple uses of the --filter flag. Filters with the same key work inclusive with the only exception being label which is exclusive. Filters with different keys always work exclusive.]' \
            "*: :_files"

    }

    function _podman_stats {
        _arguments \
            '(--all -a)'{--all,-a}'[Show all containers. Only running containers are shown by default]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '--no-reset[Do not clear the terminal/screen in between reporting intervals]' \
            '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
            '--format[Pretty-print container statistics to JSON or using a Go template]' \
            "*: :_files"

    }

    function _podman_stop {
        _arguments \
            '(--all -a)'{--all,-a}'[Stop all running containers. This does not include paused containers.]' \
            '--cidfile[Read container ID from the specified file and remove the container. Can be specified multiple times.]' \
            '(--ignore -i)'{--ignore,-i}'[Ignore errors when specified containers are not in the container store. A user might have decided to manually remove a container which would lead to a failure during the ExecStop directive of a systemd service referencing that container.]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            '(--time -t)'{--time,-t}'[Time to wait before forcibly stopping the container]' \
            "*: :_files"

    }

    function _podman_system {
        _arguments \
            "*: :_files"

    }

    function _podman_tag {
        _arguments \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_top {
        _arguments \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods.(This option is not available with the remote Podman client)]' \
            "*: :_files"

    }

    function _podman_unpause {
        _arguments \
            '(--all -a)'{--all,-a}'[Unpause all paused containers.]' \
            "*: :_files"

    }

    function _podman_unshare {
        _arguments \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '--rootless-cni[Join the rootless network namespace used for CNI networking. It can be used to connect to a rootless container via IP address (CNI networking). This is otherwise not possible from the host network namespace. Note: Using this option with more than one unshare session can have unexpected results.]' \
            "*: :_files"

    }

    function _podman_untag {
        _arguments \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            "*: :_files"

    }

    function _podman_version {
        _arguments \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '(--format -f)'{--format,-f}'[Change output format to "json" or a Go template.]' \
            "*: :_files"

    }

    function _podman_volume {
        _arguments \
            "*: :_files"

    }

    function _podman_wait {
        _arguments \
            '--condition[Condition to wait on (default "stopped")]' \
            '(--help -h)'{--help,-h}'[Print usage statement]' \
            '(--interval -i)'{--interval,-i}'[Time interval to wait before polling for completion. A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Time unit defaults to "ms".]' \
            '(--latest -l)'{--latest,-l}'[Instead of providing the container name or ID, use the last created container. If you use methods other than Podman to run containers such as CRI-O, the last started container could be from either of those methods. (This option is not available with the remote Podman client)]' \
            "*: :_files"

    }


function _podman {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'build:Build an image using instructions from Containerfiles'
            'commit:Create new image based on the changed container'
            'container:Manage containers'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Display the changes to the object'\''s file system'
            'events:Show podman events'
            'exec:Run a process in a running container'
            'export:Export container'\''s filesystem contents as a tar archive'
            'generate:Generate structured data based on containers, pods or volumes.'
            'history:Show history of a specified image'
            'image:Manage images'
            'images:List images in local storage'
            'import:Import a tarball to create a filesystem image'
            'info:Display podman system information'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of object denoted by ID'
            'kill:Kill one or more running containers with a specific signal'
            'load:Load image(s) from a tar archive'
            'login:Login to a container registry'
            'logout:Logout of a container registry'
            'logs:Fetch the logs of one or more containers'
            'mount:Mount a working container'\''s root filesystem'
            'network:Manage networks'
            'pause:Pause all the processes in one or more containers'
            'play:Play containers, pods or volumes from a structured file.'
            'pod:Manage pods'
            'port:List port mappings or a specific mapping for the container'
            'ps:List containers'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Removes one or more images from local storage'
            'run:Run a command in a new container'
            'save:Save image(s) to an archive'
            'search:Search registry for image'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'system:Manage podman'
            'tag:Add an additional name to a local image'
            'top:Display the running processes of a container'
            'unpause:Unpause the processes in one or more containers'
            'unshare:Run a command in a modified user namespace'
            'untag:Remove a name from a local image'
            'version:Display the Podman Version Information'
            'volume:Manage volumes'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cgroup-manager[Cgroup manager to use ("cgroupfs"|"systemd") (default "cgroupfs")]' \
        '--cni-config-dir[Path of the configuration directory for CNI networks]' \
        '--conmon[Path of the conmon binary]' \
        '(-c --connection)'{-c,--connection}'[Connection to use for remote Podman service]' \
        '--events-backend[Events backend to use ("file"|"journald"|"none") (default "journald")]' \
        '--help[Help for podman]' \
        '--hooks-dir[Set the OCI hooks directory path (may be set multiple times) (default \[/usr/share/containers/oci/hooks.d\])]' \
        '--identity[path to SSH identity file, (CONTAINER_SSHKEY)]' \
        '--log-level[Log messages above specified level (trace, debug, info, warn, warning, error, fatal, panic) (default "warn")]' \
        '--namespace[Set the libpod namespace, used to create separate views of the containers and pods on the system]' \
        '--network-cmd-path[Path to the command for configuring the network]' \
        '(-r --remote)'{-r,--remote}'[Access remote Podman service (default false)]' \
        '--root[Path to the root directory in which data, including images, is stored]' \
        '--runroot[Path to the '\''run directory'\'' where all state information is stored]' \
        '--runtime[Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc]' \
        '--runtime-flag[add global flags for the container runtime]' \
        '--storage-driver[Select which storage driver is used to manage storage of images and containers (default is overlay)]' \
        '--storage-opt[Used to pass an option to the storage driver]' \
        '--syslog[Output logging information to syslog as well as the console (default false)]' \
        '--tmpdir[Path to the tmp directory for libpod state content.   Note: use the environment variable '\''TMPDIR'\'' to change the temporary storage location for container images, '\''/var/tmp'\''.]' \
        '--url[URL to access Podman service (CONTAINER_HOST) (default "unix:/run/user/1000/podman/podman.sock")]' \
        '(-v --version)'{-v,--version}'[version for podman]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_attach
            ;;

        (build)
            _podman_build
            ;;

        (commit)
            _podman_commit
            ;;

        (container)
            _podman_container
            ;;

        (cp)
            _podman_cp
            ;;

        (create)
            _podman_create
            ;;

        (diff)
            _podman_diff
            ;;

        (events)
            _podman_events
            ;;

        (exec)
            _podman_exec
            ;;

        (export)
            _podman_export
            ;;

        (generate)
            _podman_generate
            ;;

        (history)
            _podman_history
            ;;

        (image)
            _podman_image
            ;;

        (images)
            _podman_images
            ;;

        (import)
            _podman_import
            ;;

        (info)
            _podman_info
            ;;

        (init)
            _podman_init
            ;;

        (inspect)
            _podman_inspect
            ;;

        (kill)
            _podman_kill
            ;;

        (load)
            _podman_load
            ;;

        (login)
            _podman_login
            ;;

        (logout)
            _podman_logout
            ;;

        (logs)
            _podman_logs
            ;;

        (mount)
            _podman_mount
            ;;

        (network)
            _podman_network
            ;;

        (pause)
            _podman_pause
            ;;

        (play)
            _podman_play
            ;;

        (pod)
            _podman_pod
            ;;

        (port)
            _podman_port
            ;;

        (ps)
            _podman_ps
            ;;

        (pull)
            _podman_pull
            ;;

        (push)
            _podman_push
            ;;

        (restart)
            _podman_restart
            ;;

        (rm)
            _podman_rm
            ;;

        (rmi)
            _podman_rmi
            ;;

        (run)
            _podman_run
            ;;

        (save)
            _podman_save
            ;;

        (search)
            _podman_search
            ;;

        (start)
            _podman_start
            ;;

        (stats)
            _podman_stats
            ;;

        (stop)
            _podman_stop
            ;;

        (system)
            _podman_system
            ;;

        (tag)
            _podman_tag
            ;;

        (top)
            _podman_top
            ;;

        (unpause)
            _podman_unpause
            ;;

        (unshare)
            _podman_unshare
            ;;

        (untag)
            _podman_untag
            ;;

        (version)
            _podman_version
            ;;

        (volume)
            _podman_volume
            ;;

        (wait)
            _podman_wait
            ;;

        esac
        ;;
     esac

}

