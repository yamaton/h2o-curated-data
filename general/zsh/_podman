#compdef _podman podman

# Auto-generated with h2o

    function _podman_attach {
        _arguments \
            '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--no-stdin[Do not attach STDIN. The default is false]' \
            '--sig-proxy[Proxy received signals to the process (default true)]' \
            "*: :_files"

    }

    function _podman_auto-update {
        _arguments \
            '--authfile[Path to the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--dry-run[Check for pending updates]' \
            '--format[Change the output format to JSON or a Go template]' \
            "*: :_files"

    }

    function _podman_build {
        _arguments \
            '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
            '--annotation[Set metadata for an image (default \[\])]' \
            '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
            '--authfile[path of the authentication file.]' \
            '--build-arg[argument=value to supply to the builder]' \
            '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
            '--cap-add[add the specified capability when running (default \[\])]' \
            '--cap-drop[drop the specified capability when running (default \[\])]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--cgroup-parent[optional parent cgroup for the container]' \
            '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]:file:_files' \
            '--compress[This is legacy option, which has no effect on the image]' \
            '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
            '(-c --cpu-shares)'{-c,--cpu-shares}'[CPU shares (relative weight)]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '--creds[use \[username\[:password\]\] for accessing the registry]' \
            '--decryption-key[key needed to decrypt the image]' \
            '--device[Additional devices to be used within containers (default \[\])]' \
            '(-D --disable-compression)'{-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '--dns-option[Set custom DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            '(-f --file)'{-f,--file}'[pathname or URL of a Dockerfile]:file:_files' \
            '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful. (default true)]' \
            '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
            '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
            '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
            '--ignorefile[path to an alternate .dockerignore file]' \
            '--iidfile[file to write the image ID to]:file:_files' \
            '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']:file:_files' \
            '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
            '--jobs[how many stages to run in parallel (default 1)]' \
            '--label[Set metadata for an image (default \[\])]' \
            '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override. (default true)]' \
            '--logfile[log to file instead of stdout/stderr]:file:_files' \
            '--manifest[add the image to the specified manifest list. Creates manifest if it does not exist]' \
            '(-m --memory)'{-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
            '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
            '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
            '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
            '--pid[private, path of PID namespace to join, or '\''host'\'']:file:_files' \
            '--platform[set the OS/ARCH to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default "linux/amd64")]' \
            '--pull[Always attempt to pull the image (errors are fatal) (default true)]' \
            '--pull-always[pull the image even if the named image is present in store]' \
            '--pull-never[do not pull the image, use the image present in store if available]' \
            '(-q --quiet)'{-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
            '--rm[Remove intermediate containers after a successful build (default true)]' \
            '--secret[secret file to expose to the build]' \
            '--security-opt[security options (default \[\])]' \
            '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
            '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
            '--squash[squash newly built layers into a single new layer]' \
            '--squash-all[Squash all layers into a single layer]' \
            '--stdin[pass stdin into containers]' \
            '(-t --tag)'{-t,--tag}'[tagged name to apply to the built image]' \
            '--target[set the target build stage to build]' \
            '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
            '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
            '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
            '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']:file:_files' \
            '--userns-gid-map[containerGID:hostGID:length GID mapping to use in user namespace]' \
            '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
            '--userns-uid-map[containerUID:hostUID:length UID mapping to use in user namespace]' \
            '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
            '--uts[private, :path of UTS namespace to join, or '\''host'\'']:file:_files' \
            '--variant[override the variant of the specified image]' \
            '(-v --volume)'{-v,--volume}'[bind mount a volume into the container]' \
            "*: :_files"

    }

    function _podman_commit {
        _arguments \
            '(-a --author)'{-a,--author}'[Set the author for the image committed]' \
            '(-c --change)'{-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
            '(-f --format)'{-f,--format}'[Format of the image manifest and metadata (default "oci")]' \
            '--iidfile[file to write the image ID to]:file:_files' \
            '--include-volumes[Include container volumes as image volumes]' \
            '(-m --message)'{-m,--message}'[Set commit message for imported image]' \
            '(-p --pause)'{-p,--pause}'[Pause container during commit]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output]' \
            "*: :_files"

    }

    function _podman_container {
        _arguments \
            "*: :_files"

    }

    function _podman_cp {
        _arguments \
            '(-a --archive)'{-a,--archive}'[Chown copied files to the primary uid/gid of the destination container. (default true)]' \
            "*: :_files"

    }

    function _podman_create {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
            '--annotation[Add annotations to container (key:value)]' \
            '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
            '(-a --attach)'{-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
            '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
            '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
            '--cap-add[Add capabilities to the container]' \
            '--cap-drop[Drop capabilities from the container]' \
            '--cgroup-conf[Configure cgroup v2 (key=value)]' \
            '--cgroup-parent[Optional parent cgroup for the container]' \
            '--cgroupns[cgroup namespace to use]' \
            '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
            '--cidfile[Write the container ID to the file]' \
            '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
            '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
            '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
            '--cpu-shares[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '--device[Add a host device to the container]' \
            '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
            '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
            '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
            '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
            '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '--dns[Set custom DNS servers]' \
            '--dns-opt[Set custom DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
            '(-e --env)'{-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
            '--env-file[Read in a file of environment variables]' \
            '--env-host[Use all current host environment variables in container]' \
            '--expose[Expose a port or a range of ports]' \
            '--gidmap[GID map to use for the user namespace]' \
            '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
            '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
            '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
            '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
            '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
            '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
            '(-h --hostname)'{-h,--hostname}'[Set container hostname]' \
            '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
            '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
            '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
            '--init-path[Path to the container-init binary]' \
            '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
            '--ip[Specify a static IPv4 address for the container]' \
            '--ipc[IPC namespace to use]' \
            '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '(-l --label)'{-l,--label}'[Set metadata on container]' \
            '--label-file[Read in a line delimited file of labels]' \
            '--log-driver[Logging driver for the container (default "k8s-file")]' \
            '--log-opt[Logging driver options]' \
            '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
            '(-m --memory)'{-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
            '--mount[Attach a filesystem mount to the container]' \
            '--name[Assign a name to the container]' \
            '--network[Connect a container to a network]' \
            '--network-alias[Add network-scoped alias for the container]' \
            '--no-healthcheck[Disable healthchecks on container]' \
            '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
            '--oom-kill-disable[Disable OOM Killer]' \
            '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
            '--os[use OS instead of the running OS for choosing images]' \
            '--pid[PID namespace to use]' \
            '--pidfile[Write the container process ID to the file]' \
            '--pids-limit[Tune container pids limit (set 0 for unlimited, -1 for server defaults)]' \
            '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
            '--pod[Run container in an existing pod]' \
            '--pod-id-file[Read the pod ID from the file]' \
            '--privileged[Give extended privileges to container]' \
            '(-p --publish)'{-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
            '(-P --publish-all)'{-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
            '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output information when pulling images]' \
            '--read-only[Make containers root filesystem read-only]' \
            '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
            '--replace[If a container with the same name exists, replace it]' \
            '--requires[Add one or more requirement containers that must be started before this container will start]' \
            '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
            '--rm[Remove container (and pod if created) after exit]' \
            '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
            '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
            '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
            '--secret[Add secret to container]' \
            '--security-opt[Security Options]' \
            '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
            '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
            '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
            '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
            '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
            '--sysctl[Sysctl options]' \
            '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
            '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
            '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
            '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY for container]' \
            '--tz[Set timezone in container]' \
            '--uidmap[UID map to use for the user namespace]' \
            '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
            '--umask[Set umask in container (default "0022")]' \
            '(-u --user)'{-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
            '--userns[User namespace to use]' \
            '--uts[UTS namespace to use]' \
            '--variant[Use _VARIANT_ instead of the running architecture variant for choosing images]' \
            '(-v --volume)'{-v,--volume}'[Bind mount a volume into the container]' \
            '--volumes-from[Mount volumes from the specified container(s)]' \
            '(-w --workdir)'{-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _podman_diff {
        _arguments \
            '--format[Change the output format (json)]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }

    function _podman_events {
        _arguments \
            '--filter[filter output]' \
            '--format[format the output using a Go template]' \
            '--since[show all events created since timestamp]' \
            '--until[show all events until timestamp]' \
            "*: :_files"

    }

    function _podman_exec {
        _arguments \
            '(-d --detach)'{-d,--detach}'[Run the exec session in detached mode (backgrounded)]' \
            '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or ctrl-<value> where <value> is one of: a-z, @, ^, \[, , or _ (default "ctrl-p,ctrl-q")]' \
            '(-e --env)'{-e,--env}'[Set environment variables]' \
            '--env-file[Read in a file of environment variables]' \
            '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--preserve-fds[Pass N additional file descriptors to the container]' \
            '--privileged[Give the process extended Linux capabilities inside the container. The default is false]' \
            '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY. The default is false]' \
            '(-u --user)'{-u,--user}'[Sets the username or UID used and optionally the groupname or GID for the specified command]' \
            '(-w --workdir)'{-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _podman_export {
        _arguments \
            '(-o --output)'{-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
            "*: :_files"

    }

    function _podman_history {
        _arguments \
            '--format[Change the output to JSON or a Go template]' \
            '(-H --human)'{-H,--human}'[Display sizes and dates in human readable format (default true)]' \
            '--no-trunc[Do not truncate the output]' \
            '--notruncate[Do not truncate the output]' \
            '(-q --quiet)'{-q,--quiet}'[Display the numeric IDs only]' \
            "*: :_files"

    }

    function _podman_image {
        _arguments \
            "*: :_files"

    }

    function _podman_images {
        _arguments \
            '(-a --all)'{-a,--all}'[Show all images (default hides intermediate images)]' \
            '--digests[Show digests]' \
            '(-f --filter)'{-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
            '--format[Change the output format to JSON or a Go template]' \
            '--history[Display the image name history]' \
            '--no-trunc[Do not truncate output]' \
            '(-n --noheading)'{-n,--noheading}'[Do not print column headings]' \
            '(-q --quiet)'{-q,--quiet}'[Display only image IDs]' \
            '--sort[Sort by created, id, repository, size, tag (default "created")]' \
            "*: :_files"

    }

    function _podman_import {
        _arguments \
            '(-c --change)'{-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
            '(-m --message)'{-m,--message}'[Set commit message for imported image]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output]' \
            "*: :_files"

    }

    function _podman_info {
        _arguments \
            '(-D --debug)'{-D,--debug}'[Display additional debug information]' \
            '(-f --format)'{-f,--format}'[Change the output format to JSON or a Go template]' \
            "*: :_files"

    }

    function _podman_init {
        _arguments \
            '(-a --all)'{-a,--all}'[Initialize all containers]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }

    function _podman_inspect {
        _arguments \
            '(-f --format)'{-f,--format}'[Format the output to a Go template or json (default "json")]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '(-s --size)'{-s,--size}'[Display total file size]' \
            '(-t --type)'{-t,--type}'[Specify inspect-object type ("image", "container" or "all") (default "all")]' \
            "*: :_files"

    }

    function _podman_kill {
        _arguments \
            '(-a --all)'{-a,--all}'[Signal all running containers]' \
            '--cidfile[Read the container ID from the file]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '(-s --signal)'{-s,--signal}'[Signal to send to the container (default "KILL")]' \
            "*: :_files"

    }

    function _podman_load {
        _arguments \
            '(-i --input)'{-i,--input}'[Read from specified archive file (default: stdin)]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress the output]' \
            "*: :_files"

    }

    function _podman_login {
        _arguments \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[use certificates at the specified path to access the registry]' \
            '--get-login[Return the current login user for the registry]' \
            '(-p --password)'{-p,--password}'[Password for registry]' \
            '--password-stdin[Take the password from stdin]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries]' \
            '(-u --username)'{-u,--username}'[Username for registry]' \
            '(-v --verbose)'{-v,--verbose}'[Write more detailed information to stdout]' \
            "*: :_files"

    }

    function _podman_logout {
        _arguments \
            '(-a --all)'{-a,--all}'[Remove the cached credentials for all registries in the auth file]' \
            '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            "*: :_files"

    }

    function _podman_logs {
        _arguments \
            '(-f --follow)'{-f,--follow}'[Follow log output. The default is false]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '(-n --names)'{-n,--names}'[Output the container name in the log]' \
            '--since[Show logs since TIMESTAMP]' \
            '--tail[Output the specified number of LINES at the end of the logs. Defaults to -1, which prints all lines (default -1)]' \
            '(-t --timestamps)'{-t,--timestamps}'[Output the timestamps in the log]' \
            '--until[Show logs until TIMESTAMP]' \
            "*: :_files"

    }

    function _podman_machine {
        _arguments \
            "*: :_files"

    }

    function _podman_manifest {
        _arguments \
            "*: :_files"

    }

    function _podman_mount {
        _arguments \
            '(-a --all)'{-a,--all}'[Mount all containers]' \
            '--format[Print the mounted containers in specified format (json)]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--notruncate[Do not truncate output]' \
            "*: :_files"

    }

    function _podman_network {
        _arguments \
            "*: :_files"

    }

    function _podman_pause {
        _arguments \
            '(-a --all)'{-a,--all}'[Pause all running containers]' \
            "*: :_files"

    }

    function _podman_pod {
        _arguments \
            "*: :_files"

    }

    function _podman_port {
        _arguments \
            '(-a --all)'{-a,--all}'[Display port information for all containers]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }

    function _podman_ps {
        _arguments \
            '(-a --all)'{-a,--all}'[Show all the containers, default is only running containers]' \
            '--external[Show containers in storage not controlled by Podman]' \
            '(-f --filter)'{-f,--filter}'[Filter output based on conditions given]' \
            '--format[Pretty-print containers to JSON or using a Go template]' \
            '(-n --last)'{-n,--last}'[Print the n last created containers (all states) (default -1)]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--no-trunc[Display the extended information]' \
            '--noheading[Do not print headers]' \
            '--ns[Display namespace information]' \
            '(-p --pod)'{-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
            '(-q --quiet)'{-q,--quiet}'[Print the numeric IDs of the containers only]' \
            '(-s --size)'{-s,--size}'[Display the total file sizes]' \
            '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
            '--sync[Sync container state with OCI runtime]' \
            '(-w --watch)'{-w,--watch}'[Watch the ps output on an interval in seconds]' \
            "*: :_files"

    }

    function _podman_pull {
        _arguments \
            '--all-tags[All tagged images in the repository will be pulled]' \
            '--arch[Use ARCH instead of the architecture of the machine for choosing images]' \
            '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[Pathname of a directory containing TLS certificates and keys]:file:_files' \
            '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '--os[Use OS instead of the running OS for choosing images]' \
            '--platform[Specify the platform for selecting the image. (Conflicts with arch and os)]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output information when pulling images]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
            '--variant[use VARIANT instead of the running architecture variant for choosing images]' \
            "*: :_files"

    }

    function _podman_push {
        _arguments \
            '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--cert-dir[Path to a directory containing TLS certificates and keys]' \
            '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
            '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
            '--digestfile[Write the digest of the pushed image to the specified file]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '(-f --format)'{-f,--format}'[Manifest type (oci, v2s2, or v2s1) to use in the destination (default is manifest type of source, with fallbacks)]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output information when pushing images]' \
            '--remove-signatures[Discard any pre-existing signatures in the image]' \
            '--sign-by[Add a signature at the destination using the specified key]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
            "*: :_files"

    }

    function _podman_restart {
        _arguments \
            '(-a --all)'{-a,--all}'[Restart all non-running containers]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--running[Restart only running containers when --all is used]' \
            '(-t --time)'{-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
            "*: :_files"

    }

    function _podman_rm {
        _arguments \
            '(-a --all)'{-a,--all}'[Remove all containers]' \
            '--cidfile[Read the container ID from the file]' \
            '(-f --force)'{-f,--force}'[Force removal of a running or unusable container. The default is false]' \
            '(-i --ignore)'{-i,--ignore}'[Ignore errors when a specified container is missing]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '(-v --volumes)'{-v,--volumes}'[Remove anonymous volumes associated with the container]' \
            "*: :_files"

    }

    function _podman_rmi {
        _arguments \
            '(-a --all)'{-a,--all}'[Remove all images]' \
            '(-f --force)'{-f,--force}'[Force Removal of the image]' \
            "*: :_files"

    }

    function _podman_run {
        _arguments \
            '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
            '--annotation[Add annotations to container (key:value)]' \
            '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
            '(-a --attach)'{-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
            '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
            '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
            '--cap-add[Add capabilities to the container]' \
            '--cap-drop[Drop capabilities from the container]' \
            '--cgroup-conf[Configure cgroup v2 (key=value)]' \
            '--cgroup-parent[Optional parent cgroup for the container]' \
            '--cgroupns[cgroup namespace to use]' \
            '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
            '--cidfile[Write the container ID to the file]' \
            '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
            '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
            '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
            '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
            '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
            '--cpu-shares[CPU shares (relative weight)]' \
            '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
            '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
            '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
            '(-d --detach)'{-d,--detach}'[Run container in background and print container ID]' \
            '--detach-keys[Override the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-cf`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
            '--device[Add a host device to the container]' \
            '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
            '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
            '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
            '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
            '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
            '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
            '--dns[Set custom DNS servers]' \
            '--dns-opt[Set custom DNS options]' \
            '--dns-search[Set custom DNS search domains]' \
            '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
            '(-e --env)'{-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
            '--env-file[Read in a file of environment variables]' \
            '--env-host[Use all current host environment variables in container]' \
            '--expose[Expose a port or a range of ports]' \
            '--gidmap[GID map to use for the user namespace]' \
            '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
            '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
            '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
            '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
            '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
            '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
            '(-h --hostname)'{-h,--hostname}'[Set container hostname]' \
            '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
            '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
            '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
            '--init-path[Path to the container-init binary]' \
            '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
            '--ip[Specify a static IPv4 address for the container]' \
            '--ipc[IPC namespace to use]' \
            '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '(-l --label)'{-l,--label}'[Set metadata on container]' \
            '--label-file[Read in a line delimited file of labels]' \
            '--log-driver[Logging driver for the container (default "k8s-file")]' \
            '--log-opt[Logging driver options]' \
            '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
            '(-m --memory)'{-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
            '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
            '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
            '--mount[Attach a filesystem mount to the container]' \
            '--name[Assign a name to the container]' \
            '--network[Connect a container to a network]' \
            '--network-alias[Add network-scoped alias for the container]' \
            '--no-healthcheck[Disable healthchecks on container]' \
            '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
            '--oom-kill-disable[Disable OOM Killer]' \
            '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
            '--os[use OS instead of the running OS for choosing images]' \
            '--pid[PID namespace to use]' \
            '--pidfile[Write the container process ID to the file]' \
            '--pids-limit[Tune container pids limit (set 0 for unlimited, -1 for server defaults)]' \
            '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
            '--pod[Run container in an existing pod]' \
            '--pod-id-file[Read the pod ID from the file]' \
            '--preserve-fds[Pass a number of additional file descriptors into the container]' \
            '--privileged[Give extended privileges to container]' \
            '(-p --publish)'{-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
            '(-P --publish-all)'{-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
            '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress output information when pulling images]' \
            '--read-only[Make containers root filesystem read-only]' \
            '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
            '--replace[If a container with the same name exists, replace it]' \
            '--requires[Add one or more requirement containers that must be started before this container will start]' \
            '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
            '--rm[Remove container (and pod if created) after exit]' \
            '--rmi[Remove container image unless used by other containers]' \
            '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
            '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
            '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
            '--secret[Add secret to container]' \
            '--security-opt[Security Options]' \
            '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
            '--sig-proxy[Proxy received signals to the process (default true)]' \
            '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
            '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
            '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
            '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
            '--sysctl[Sysctl options]' \
            '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
            '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
            '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
            '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY for container]' \
            '--tz[Set timezone in container]' \
            '--uidmap[UID map to use for the user namespace]' \
            '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
            '--umask[Set umask in container (default "0022")]' \
            '(-u --user)'{-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
            '--userns[User namespace to use]' \
            '--uts[UTS namespace to use]' \
            '--variant[Use _VARIANT_ instead of the running architecture variant for choosing images]' \
            '(-v --volume)'{-v,--volume}'[Bind mount a volume into the container]' \
            '--volumes-from[Mount volumes from the specified container(s)]' \
            '(-w --workdir)'{-w,--workdir}'[Working directory inside the container]' \
            "*: :_files"

    }

    function _podman_save {
        _arguments \
            '--compress[Compress tarball image layers when saving to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
            '--format[Save image to oci-archive, oci-dir (directory with oci manifest type), docker-archive, docker-dir (directory with v2s2 manifest type) (default "docker-archive")]' \
            '(-m --multi-image-archive)'{-m,--multi-image-archive}'[Interpret additional arguments as images not tags and create a multi-image-archive (only for docker-archive)]' \
            '(-o --output)'{-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
            '(-q --quiet)'{-q,--quiet}'[Suppress the output]' \
            "*: :_files"

    }

    function _podman_search {
        _arguments \
            '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
            '(-f --filter)'{-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
            '--format[Change the output format to JSON or a Go template]' \
            '--limit[Limit the number of results]' \
            '--list-tags[List the tags of the input registry]' \
            '--no-trunc[Do not truncate the output]' \
            '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
            "*: :_files"

    }

    function _podman_secret {
        _arguments \
            "*: :_files"

    }

    function _podman_start {
        _arguments \
            '--all[Start all containers regardless of their state or configuration]' \
            '(-a --attach)'{-a,--attach}'[Attach container'\''s STDOUT and STDERR]' \
            '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
            '(-f --filter)'{-f,--filter}'[Filter output based on conditions given]' \
            '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--sig-proxy[Proxy received signals to the process (default true if attaching, false otherwise)]' \
            "*: :_files"

    }

    function _podman_stats {
        _arguments \
            '(-a --all)'{-a,--all}'[Show all containers. Only running containers are shown by default. The default is false]' \
            '--format[Pretty-print container statistics to JSON or using a Go template]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '--no-reset[Disable resetting the screen between intervals]' \
            '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
            "*: :_files"

    }

    function _podman_stop {
        _arguments \
            '(-a --all)'{-a,--all}'[Stop all running containers]' \
            '--cidfile[Read the container ID from the file]' \
            '(-i --ignore)'{-i,--ignore}'[Ignore errors when a specified container is missing]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            '(-t --time)'{-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
            "*: :_files"

    }

    function _podman_system {
        _arguments \
            "*: :_files"

    }

    function _podman_tag {
        _arguments \
            "*: :_files"

    }

    function _podman_top {
        _arguments \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }

    function _podman_unmount {
        _arguments \
            '(-a --all)'{-a,--all}'[Unmount all of the currently mounted containers]' \
            '(-f --force)'{-f,--force}'[Force the complete unmount of the specified mounted containers]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }

    function _podman_unpause {
        _arguments \
            '(-a --all)'{-a,--all}'[Pause all running containers]' \
            "*: :_files"

    }

    function _podman_unshare {
        _arguments \
            '--rootless-cni[Join the rootless network namespace used for CNI networking]' \
            "*: :_files"

    }

    function _podman_untag {
        _arguments \
            "*: :_files"

    }

    function _podman_volume {
        _arguments \
            "*: :_files"

    }

    function _podman_wait {
        _arguments \
            '--condition[Condition to wait on (default "stopped")]' \
            '(-i --interval)'{-i,--interval}'[Time Interval to wait before polling for completion (default "250ms")]' \
            '(-l --latest)'{-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
            "*: :_files"

    }


function _podman {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'auto-update:Auto update containers according to their auto-update policy'
            'build:Build an image using instructions from Containerfiles'
            'commit:Create new image based on the changed container'
            'container:Manage containers'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Display the changes to the object'\''s file system'
            'events:Show podman events'
            'exec:Run a process in a running container'
            'export:Export container'\''s filesystem contents as a tar archive'
            'history:Show history of a specified image'
            'image:Manage images'
            'images:List images in local storage'
            'import:Import a tarball to create a filesystem image'
            'info:Display podman system information'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of object denoted by ID'
            'kill:Kill one or more running containers with a specific signal'
            'load:Load image(s) from a tar archive'
            'login:Login to a container registry'
            'logout:Logout of a container registry'
            'logs:Fetch the logs of one or more containers'
            'machine:Manage a virtual machine'
            'manifest:Manipulate manifest lists and image indexes'
            'mount:Mount a working container'\''s root filesystem'
            'network:Manage networks'
            'pause:Pause all the processes in one or more containers'
            'pod:Manage pods'
            'port:List port mappings or a specific mapping for the container'
            'ps:List containers'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Removes one or more images from local storage'
            'run:Run a command in a new container'
            'save:Save image(s) to an archive'
            'search:Search registry for image'
            'secret:Manage secrets'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'system:Manage podman'
            'tag:Add an additional name to a local image'
            'top:Display the running processes of a container'
            'unmount:Unmounts working container'\''s root filesystem'
            'unpause:Unpause the processes in one or more containers'
            'unshare:Run a command in a modified user namespace'
            'untag:Remove a name from a local image'
            'volume:Manage volumes'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cgroup-manager[Cgroup manager to use ("cgroupfs"|"systemd") (default "cgroupfs")]' \
        '--cni-config-dir[Path of the configuration directory for CNI networks]' \
        '--conmon[Path of the conmon binary]' \
        '(-c --connection)'{-c,--connection}'[Connection to use for remote Podman service]' \
        '--events-backend[Events backend to use ("file"|"journald"|"none") (default "file")]' \
        '--help[Help for podman]' \
        '--hooks-dir[Set the OCI hooks directory path (may be set multiple times) (default \[/usr/share/containers/oci/hooks.d\])]' \
        '--identity[path to SSH identity file, (CONTAINER_SSHKEY)]' \
        '--log-level[Log messages above specified level (trace, debug, info, warn, warning, error, fatal, panic) (default "warn")]' \
        '--namespace[Set the libpod namespace, used to create separate views of the containers and pods on the system]' \
        '--network-cmd-path[Path to the command for configuring the network]' \
        '(-r --remote)'{-r,--remote}'[Access remote Podman service (default false)]' \
        '--root[Path to the root directory in which data, including images, is stored]' \
        '--runroot[Path to the '\''run directory'\'' where all state information is stored]' \
        '--runtime[Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc]' \
        '--runtime-flag[add global flags for the container runtime]' \
        '--storage-driver[Select which storage driver is used to manage storage of images and containers (default is overlay)]' \
        '--storage-opt[Used to pass an option to the storage driver]' \
        '--syslog[Output logging information to syslog as well as the console (default false)]' \
        '--tmpdir[Path to the tmp directory for libpod state content.]' \
        '--url[URL to access Podman service (CONTAINER_HOST) (default "unix:/tmp/podman-run-1000/podman/podman.sock")]' \
        '(-v --version)'{-v,--version}'[version for podman]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_attach
            ;;

        (auto-update)
            _podman_auto-update
            ;;

        (build)
            _podman_build
            ;;

        (commit)
            _podman_commit
            ;;

        (container)
            _podman_container
            ;;

        (cp)
            _podman_cp
            ;;

        (create)
            _podman_create
            ;;

        (diff)
            _podman_diff
            ;;

        (events)
            _podman_events
            ;;

        (exec)
            _podman_exec
            ;;

        (export)
            _podman_export
            ;;

        (history)
            _podman_history
            ;;

        (image)
            _podman_image
            ;;

        (images)
            _podman_images
            ;;

        (import)
            _podman_import
            ;;

        (info)
            _podman_info
            ;;

        (init)
            _podman_init
            ;;

        (inspect)
            _podman_inspect
            ;;

        (kill)
            _podman_kill
            ;;

        (load)
            _podman_load
            ;;

        (login)
            _podman_login
            ;;

        (logout)
            _podman_logout
            ;;

        (logs)
            _podman_logs
            ;;

        (machine)
            _podman_machine
            ;;

        (manifest)
            _podman_manifest
            ;;

        (mount)
            _podman_mount
            ;;

        (network)
            _podman_network
            ;;

        (pause)
            _podman_pause
            ;;

        (pod)
            _podman_pod
            ;;

        (port)
            _podman_port
            ;;

        (ps)
            _podman_ps
            ;;

        (pull)
            _podman_pull
            ;;

        (push)
            _podman_push
            ;;

        (restart)
            _podman_restart
            ;;

        (rm)
            _podman_rm
            ;;

        (rmi)
            _podman_rmi
            ;;

        (run)
            _podman_run
            ;;

        (save)
            _podman_save
            ;;

        (search)
            _podman_search
            ;;

        (secret)
            _podman_secret
            ;;

        (start)
            _podman_start
            ;;

        (stats)
            _podman_stats
            ;;

        (stop)
            _podman_stop
            ;;

        (system)
            _podman_system
            ;;

        (tag)
            _podman_tag
            ;;

        (top)
            _podman_top
            ;;

        (unmount)
            _podman_unmount
            ;;

        (unpause)
            _podman_unpause
            ;;

        (unshare)
            _podman_unshare
            ;;

        (untag)
            _podman_untag
            ;;

        (volume)
            _podman_volume
            ;;

        (wait)
            _podman_wait
            ;;

        esac
        ;;
     esac

}

