#compdef _protoc protoc

# Auto-generated with h2o


function _protoc {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-I,--proto_path}'[Specify the directory in which to search for imports. May be specified multiple times; directories will be searched in order. If not given, the current working directory is used. If not found in any of the these directories, the --descriptor_set_in descriptors will be checked for required proto file.]':file:_files \
        '--version[Show version info and exit.]' \
        {-h,--help}'[Show this text and exit.]' \
        '--encode[Read a text-format message of the given type from standard input and write it in binary to standard output. The message type must be defined in PROTO_FILES or their imports.]' \
        '--deterministic_output[When using --encode, ensure map fields are deterministically ordered. Note that this order is not canonical, and changes across builds or releases of protoc.]' \
        '--decode[Read a binary message of the given type from standard input and write it in text format to standard output. The message type must be defined in PROTO_FILES or their imports.]' \
        '--decode_raw[Read an arbitrary protocol message from standard input and write the raw tag/value pairs in text format to standard output. No PROTO_FILES should be given when using this flag.]' \
        '--descriptor_set_in[Specifies a delimited list of FILES each containing a FileDescriptorSet (a protocol buffer defined in descriptor.proto). The FileDescriptor for each of the PROTO_FILES provided will be loaded from these FileDescriptorSets. If a FileDescriptor appears multiple times, the first occurrence will be used.]':file:_files \
        {-o,--descriptor_set_out}'[Writes a FileDescriptorSet (a protocol buffer, defined in descriptor.proto) containing all of the input files to FILE.]':file:_files \
        '--include_imports[When using --descriptor_set_out, also include all dependencies of the input files in the set, so that the set is self-contained.]' \
        '--include_source_info[When using --descriptor_set_out, do not strip SourceCodeInfo from the FileDescriptorProto. This results in vastly larger descriptors that include information about the original location of each decl in the source file as well as surrounding comments.]' \
        '--dependency_out[Write a dependency output file in the format expected by make. This writes the transitive set of input file paths to FILE]':file:_files \
        '--error_format[Set the format in which to print errors. FORMAT may be '\''gcc'\'' (the default) or '\''msvs'\'' (Microsoft Visual Studio format).]' \
        '--fatal_warnings[Make warnings be fatal (similar to -Werr in gcc). This flag will make protoc return with a non-zero exit code if any warnings are generated.]' \
        '--print_free_field_numbers[Print the free field numbers of the messages defined in the given proto files. Groups share the same field number space with the parent message. Extension ranges are counted as occupied fields numbers.]' \
        '--plugin[Specifies a plugin executable to use. Normally, protoc searches the PATH for plugins, but you may specify additional executables not in the path using this flag. Additionally, EXECUTABLE may be of the form NAME=PATH, in which case the given plugin name is mapped to the given executable even if the executable'\''s own name differs.]' \
        '--cpp_out[Generate C++ header and source.]':file:_files \
        '--csharp_out[Generate C# source file.]':file:_files \
        '--java_out[Generate Java source file.]':file:_files \
        '--js_out[Generate JavaScript source.]':file:_files \
        '--kotlin_out[Generate Kotlin file.]':file:_files \
        '--objc_out[Generate Objective-C header and source.]':file:_files \
        '--php_out[Generate PHP source file.]':file:_files \
        '--python_out[Generate Python source file.]':file:_files \
        '--ruby_out[Generate Ruby source file.]':file:_files \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

