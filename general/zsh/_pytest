#compdef _pytest pytest

# Auto-generated with h2o


function _pytest {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-k[only run tests which match the given substring expression. An expression is a python evaluatable expression where all names are substring-matched against test names and their parent classes. Example: -k '\''test_method or test_other'\'' matches all test functions and classes whose name contains '\''test_method'\'' or '\''test_other'\'', while -k '\''not test_method'\'' matches those that don'\''t contain '\''test_method'\'' in their names. -k '\''not test_method and not test_other'\'' will eliminate the matches. Additionally keywords are matched to classes and functions containing extra names in their '\''extra_keyword_matches'\'' set, as well as functions which have names assigned directly to them. The matching is case-insensitive.]' \
        '-m[only run tests matching given mark expression.   For example: -m '\''mark1 and not mark2'\''.]' \
        '--markers[show markers (builtin, plugin and per-project ones).]' \
        {-x,--exitfirst}'[exit instantly on first error or failed test.]' \
        {--fixtures,--funcargs}'[show available fixtures, sorted by plugin appearance (fixtures with leading '\''_'\'' are only shown with '\''-v'\'')]' \
        '--fixtures-per-test[show fixtures per test]' \
        '--pdb[start the interactive Python debugger on errors or KeyboardInterrupt.]' \
        '--pdbcls[specify a custom interactive Python debugger for use with --pdb.For example: --pdbcls=IPython.terminal.debugger:TerminalPdb]' \
        '--trace[Immediately break when running each test.]' \
        '--capture[per-test capturing method: one of fd|sys|no|tee-sys.]' \
        '-s[shortcut for --capture=no.]' \
        '--runxfail[report the results of xfail tests as if they were not marked]' \
        {--lf,--last-failed}'[rerun only the tests that failed at the last run (or all if none failed)]' \
        {--ff,--failed-first}'[run all tests, but run the last failures first.   This may re-order tests and thus lead to repeated fixture setup/teardown.]' \
        {--nf,--new-first}'[run tests from new files first, then the rest of the tests sorted by file mtime]' \
        '--cache-show[show cache contents, don'\''t perform collection or tests. Optional argument: glob (default: '\''*'\'').]' \
        '--cache-clear[remove all cache contents at start of test run.]' \
        {--lfnf,--last-failed-no-failures}'[which tests to run with no previously (known) failures.]' \
        {--sw,--stepwise}'[exit on test failure and continue from last failing test next time]' \
        {--sw-skip,--stepwise-skip}'[ignore the first failing test but stop on the next failing test. implicitly enables --stepwise.]' \
        '--durations[show N slowest setup/test durations (N=0 for all).]' \
        '--durations-min[Minimal duration in seconds for inclusion in slowest list. Default 0.005]' \
        {-v,--verbose}'[increase verbosity.]' \
        '--no-header[disable header]' \
        '--no-summary[disable summary]' \
        {-q,--quiet}'[decrease verbosity.]' \
        '--verbosity[set verbosity. Default is 0.]' \
        '-r[show extra test summary info as specified by chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)assed, (P)assed with output, (a)ll except passed (p/P), or (A)ll. (w)arnings are enabled by default (see --disable-warnings), '\''N'\'' can be used to reset the list. (default: '\''fE'\'').]' \
        {--disable-warnings,--disable-pytest-warnings}'[disable warnings summary]' \
        {-l,--showlocals}'[show locals in tracebacks (disabled by default).]' \
        '--tb[traceback print mode (auto/long/short/line/native/no).]' \
        '--show-capture[Controls how captured stdout/stderr/log is shown on failed tests. Default is '\''all'\''.]' \
        '--full-trace[don'\''t cut any tracebacks (default is to cut).]' \
        '--color[color terminal output (yes/no/auto).]' \
        '--code-highlight[Whether code should be highlighted (only if --color is also enabled)]' \
        '--pastebin[send failed|all info to bpaste.net pastebin service.]' \
        '--junit-xml[create junit-xml style report file at given path.]':file:_files \
        '--junit-prefix[prepend prefix to classnames in junit-xml output]' \
        {-W,--pythonwarnings}'[set which warnings to report, see -W option of python itself.]' \
        '--maxfail[exit after first num failures or errors.]' \
        '--strict-config[any warnings encountered while parsing the `pytest` section of the configuration file raise errors.]' \
        '--strict-markers[markers not registered in the `markers` section of the configuration file raise errors.]' \
        '--strict[(deprecated) alias to --strict-markers.]' \
        '-c[load configuration from `file` instead of trying to locate one of the implicit configuration files.]':file:_files \
        '--continue-on-collection-errors[Force test execution even if collection errors occur.]' \
        '--rootdir[Define root directory for tests. Can be relative path: '\''root_dir'\'', '\''./root_dir'\'', '\''root_dir/another_dir/'\''; absolute path: '\''/home/user/root_dir'\''; path with variables: '\''$HOME/root_dir'\''.]':file:_files \
        {--collect-only,--co}'[only collect tests, don'\''t execute them.]' \
        '--pyargs[try to interpret all arguments as python packages.]' \
        '--ignore[ignore path during collection (multi-allowed).]':file:_files \
        '--ignore-glob[ignore path pattern during collection (multi-allowed).]':file:_files \
        '--deselect[deselect item (via node id prefix) during collection (multi-allowed).]' \
        '--confcutdir[only load conftest.py'\''s relative to specified dir.]':file:_files \
        '--noconftest[Don'\''t load any conftest.py files.]' \
        '--keep-duplicates[Keep duplicate tests.]' \
        '--collect-in-virtualenv[Don'\''t ignore tests in a local virtualenv directory]' \
        '--import-mode[prepend/append to sys.path when importing test modules and conftest files, default is to prepend.]' \
        '--doctest-modules[run doctests in all .py modules]' \
        '--doctest-report[choose another output format for diffs on doctest failure]' \
        '--doctest-glob[doctests file matching pattern, default: test*.txt]' \
        '--doctest-ignore-import-errors[ignore doctest ImportErrors]' \
        '--doctest-continue-on-failure[for a given doctest, continue to run after the first failure]' \
        '--basetemp[base temporary directory for this test run.(warning: this directory is removed if it exists)]':file:_files \
        {-V,--version}'[display pytest version and information about plugins. When given twice, also display information about plugins.]' \
        {-h,--help}'[show help message and configuration info]' \
        '-p[early-load given plugin module name or entry point (multi-allowed).   To avoid loading of plugins, use the `no:` prefix, e.g. `no:doctest`.]' \
        '--trace-config[trace considerations of conftest.py files.]' \
        '--debug[store internal tracing debug information in this log file. This file is opened with '\''w'\'' and truncated as a result, care advised. Defaults to '\''pytestdebug.log'\''.]':file:_files \
        {-o,--override-ini}'[override ini option with "option=value" style, e.g. `-o xfail_strict=True -o cache_dir=cache`.]' \
        '--assert[Control assertion debugging tools.   '\''plain'\'' performs no assertion debugging. '\''rewrite'\'' (the default) rewrites assert statements in test modules on import to provide assert expression information.]' \
        '--setup-only[only setup fixtures, do not execute tests.]' \
        '--setup-show[show setup of fixtures while executing tests.]' \
        '--setup-plan[show what fixtures and tests would be executed but don'\''t execute anything.]' \
        '--log-level[level of messages to catch/display.   Not set by default, so it depends on the root/parent log handler'\''s effective level, where it is "WARNING" by default.]' \
        '--log-format[log format as used by the logging module.]' \
        '--log-date-format[log date format as used by the logging module.]' \
        '--log-cli-level[cli logging level.]' \
        '--log-cli-format[log format as used by the logging module.]' \
        '--log-cli-date-format[log date format as used by the logging module.]' \
        '--log-file[path to a file when logging will be written to.]':file:_files \
        '--log-file-level[log file logging level.]':file:_files \
        '--log-file-format[log format as used by the logging module.]':file:_files \
        '--log-file-date-format[log date format as used by the logging module.]':file:_files \
        '--log-auto-indent[Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

