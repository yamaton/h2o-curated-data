#compdef _python python

# Auto-generated with h2o


function _python {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-B[Don'\''t write .pyc files on import. See also PYTHONDONTWRITEBYTECODE.]' \
        '-b[Issue warnings about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str. (-bb: issue errors)]' \
        '-c[Specify the command to execute (see next section). This terminates the option list (following options are passed as arguments to the command).]' \
        '--check-hash-based-pycs[Configure how Python evaluates the up-to-dateness of hash-based .pyc files.]' \
        '-d[Turn on parser debugging output (for expert only, depending on compilation options).]' \
        '-E[Ignore environment variables like PYTHONPATH and PYTHONHOME that modify the behavior of the interpreter.]' \
        {-h,-?,--help}'[Prints the usage for the interpreter executable and exits.]' \
        '-i[When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command. It does not read the $PYTHONSTARTUP file. This can be useful to inspect global variables or a stack trace when a script raises an exception.]' \
        '-I[Run Python in isolated mode. This also implies -E and -s. In isolated mode sys.path contains neither the script'\''s directory nor the user'\''s site-packages directory. All PYTHON* environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code.]' \
        '-m[Searches sys.path for the named module and runs the corresponding .py file as a script.]' \
        '-O[Remove assert statements and any code conditional on the value of __debug__; augment the filename for compiled (bytecode) files by adding .opt-1 before the .pyc extension.]' \
        '-OO[Do -O and also discard docstrings; change the filename for compiled (bytecode) files by adding .opt-2 before the .pyc extension.]' \
        '-q[Do not print the version and copyright messages. These messages are also suppressed in non-interactive mode.]' \
        '-s[Don'\''t add user site directory to sys.path.]' \
        '-S[Disable the import of the module site and the site-dependent manipulations of sys.path that it entails. Also disable these manipulations if site is explicitly imported later.]' \
        '-u[Force the stdout and stderr streams to be unbuffered. This option has no effect on the stdin stream.]' \
        '-v[Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded. When given twice, print a message for each file that is checked for when searching for a module. Also provides information on module cleanup at exit.]' \
        {-V,--version}'[Prints the Python version number of the executable and exits. When given twice, print more information about the build.]' \
        '-W[Warning control. Python sometimes prints warning message to sys.stderr. A typical warning message has the following form: file:line: category: message. By default, each warning is printed once for each source line where it occurs. This option controls how often warnings are printed. Multiple -W options may be given; when a warning matches more than one option, the action for the last matching option is performed. Invalid -W options are ignored (a warning message is printed about invalid options when the first warning is issued). Warnings can also be controlled from within a Python program using the warnings module.]' \
        '-X[Set implementation specific option. The following options are available:]' \
        '-x[Skip the first line of the source. This is intended for a DOS specific hack only. Warning: the line numbers in error messages will be off by one!]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

