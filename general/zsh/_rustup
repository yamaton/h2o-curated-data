#compdef _rustup rustup

# Auto-generated with h2o

    function _rustup_show {
        _arguments \
            {-v,--verbose}'[Enable verbose output with rustc information for all installed toolchains]' \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_update {
        _arguments \
            '--force[Force an update, even if some components are missing]' \
            '--force-non-host[Install toolchains that require an emulator. See https://github.com/rustlang/rustup/wiki/Non-host-toolchains]' \
            {-h,--help}'[Prints help information]' \
            '--no-self-update[Don'\''t perform self update when running the `rustup update` command]' \
            "*: :_files"

    }

    function _rustup_check {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_default {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_toolchain {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_target {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_component {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_override {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_run {
        _arguments \
            {-h,--help}'[Prints help information]' \
            '--install[Install the requested toolchain if needed]' \
            "*: :_files"

    }

    function _rustup_which {
        _arguments \
            {-h,--help}'[Prints help information]' \
            '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
            "*: :_files"

    }

    function _rustup_doc {
        _arguments \
            '--alloc[The Rust core allocation and collections library]' \
            '--book[The Rust Programming Language book]' \
            '--cargo[The Cargo Book]' \
            '--core[The Rust Core Library]' \
            '--edition-guide[The Rust Edition Guide]' \
            '--embedded-book[The Embedded Rust Book]' \
            {-h,--help}'[Prints help information]' \
            '--nomicon[The Dark Arts of Advanced and Unsafe Rust Programming]' \
            '--path[Only print the path to the documentation]' \
            '--proc_macro[A support library for macro authors when defining new macros]' \
            '--reference[The Rust Reference]' \
            '--rust-by-example[A collection of runnable examples that illustrate various Rust concepts and standard libraries]' \
            '--rustc[The compiler for the Rust programming language]' \
            '--rustdoc[Generate documentation for Rust projects]' \
            '--std[Standard library API documentation]' \
            '--test[Support code for rustc'\''s built in unit-test and micro-benchmarking framework]' \
            '--unstable-book[The Unstable Book]' \
            '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
            "*: :_files"

    }

    function _rustup_man {
        _arguments \
            {-h,--help}'[Prints help information]' \
            '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
            "*: :_files"

    }

    function _rustup_self {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_set {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }

    function _rustup_completions {
        _arguments \
            {-h,--help}'[Prints help information]' \
            "*: :_files"

    }


function _rustup {
    local line state

    function _commands {
        local -a commands
        commands=(
            'show:Show the active and installed toolchains or profiles'
            'update:Update Rust toolchains and rustup'
            'check:Check for updates to Rust toolchains and rustup'
            'default:Set the default toolchain'
            'toolchain:Modify or query the installed toolchains'
            'target:Modify a toolchain'\''s supported targets'
            'component:Modify a toolchain'\''s installed components'
            'override:Modify directory toolchain overrides'
            'run:Run a command with an environment configured for a given toolchain'
            'which:Display which binary will be run for a given command'
            'doc:Open the documentation for the current toolchain'
            'man:View the man page for a given command'
            'self:Modify the rustup installation'
            'set:Alter rustup settings'
            'completions:Generate tab-completion scripts for your shell'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-v,--verbose}'[Enable verbose output]' \
        {-q,--quiet}'[Disable progress output]' \
        {-h,--help}'[Prints help information]' \
        {-V,--version}'[Prints version information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (show)
            _rustup_show
            ;;

        (update)
            _rustup_update
            ;;

        (check)
            _rustup_check
            ;;

        (default)
            _rustup_default
            ;;

        (toolchain)
            _rustup_toolchain
            ;;

        (target)
            _rustup_target
            ;;

        (component)
            _rustup_component
            ;;

        (override)
            _rustup_override
            ;;

        (run)
            _rustup_run
            ;;

        (which)
            _rustup_which
            ;;

        (doc)
            _rustup_doc
            ;;

        (man)
            _rustup_man
            ;;

        (self)
            _rustup_self
            ;;

        (set)
            _rustup_set
            ;;

        (completions)
            _rustup_completions
            ;;

        esac
        ;;
     esac

}

