#compdef _systemctl systemctl

# Auto-generated with h2o

    function _systemctl_list-units {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-sockets {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-timers {
        _arguments \
            "*: :_files"

    }

    function _systemctl_start {
        _arguments \
            "*: :_files"

    }

    function _systemctl_stop {
        _arguments \
            "*: :_files"

    }

    function _systemctl_reload {
        _arguments \
            "*: :_files"

    }

    function _systemctl_restart {
        _arguments \
            "*: :_files"

    }

    function _systemctl_try-restart {
        _arguments \
            "*: :_files"

    }

    function _systemctl_reload-or-restart {
        _arguments \
            "*: :_files"

    }

    function _systemctl_try-reload-or-restart {
        _arguments \
            "*: :_files"

    }

    function _systemctl_isolate {
        _arguments \
            "*: :_files"

    }

    function _systemctl_kill {
        _arguments \
            "*: :_files"

    }

    function _systemctl_clean {
        _arguments \
            "*: :_files"

    }

    function _systemctl_is-active {
        _arguments \
            "*: :_files"

    }

    function _systemctl_is-failed {
        _arguments \
            "*: :_files"

    }

    function _systemctl_status {
        _arguments \
            "*: :_files"

    }

    function _systemctl_show {
        _arguments \
            "*: :_files"

    }

    function _systemctl_cat {
        _arguments \
            "*: :_files"

    }

    function _systemctl_set-property {
        _arguments \
            "*: :_files"

    }

    function _systemctl_reset-failed {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-dependencies {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-unit-files {
        _arguments \
            "*: :_files"

    }

    function _systemctl_enable {
        _arguments \
            "*: :_files"

    }

    function _systemctl_disable {
        _arguments \
            "*: :_files"

    }

    function _systemctl_reenable {
        _arguments \
            "*: :_files"

    }

    function _systemctl_preset {
        _arguments \
            "*: :_files"

    }

    function _systemctl_preset-all {
        _arguments \
            "*: :_files"

    }

    function _systemctl_is-enabled {
        _arguments \
            "*: :_files"

    }

    function _systemctl_mask {
        _arguments \
            "*: :_files"

    }

    function _systemctl_unmask {
        _arguments \
            "*: :_files"

    }

    function _systemctl_revert {
        _arguments \
            "*: :_files"

    }

    function _systemctl_add-wants {
        _arguments \
            "*: :_files"

    }

    function _systemctl_add-requires {
        _arguments \
            "*: :_files"

    }

    function _systemctl_edit {
        _arguments \
            "*: :_files"

    }

    function _systemctl_get-default {
        _arguments \
            "*: :_files"

    }

    function _systemctl_set-default {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-machines {
        _arguments \
            "*: :_files"

    }

    function _systemctl_list-jobs {
        _arguments \
            "*: :_files"

    }

    function _systemctl_cancel {
        _arguments \
            "*: :_files"

    }

    function _systemctl_show-environment {
        _arguments \
            "*: :_files"

    }

    function _systemctl_set-environment {
        _arguments \
            "*: :_files"

    }

    function _systemctl_unset-environment {
        _arguments \
            "*: :_files"

    }

    function _systemctl_import-environment {
        _arguments \
            "*: :_files"

    }

    function _systemctl_daemon-reload {
        _arguments \
            "*: :_files"

    }

    function _systemctl_daemon-reexec {
        _arguments \
            "*: :_files"

    }

    function _systemctl_log-level {
        _arguments \
            "*: :_files"

    }

    function _systemctl_log-target {
        _arguments \
            "*: :_files"

    }

    function _systemctl_service-watchdogs {
        _arguments \
            "*: :_files"

    }

    function _systemctl_is-system-running {
        _arguments \
            "*: :_files"

    }

    function _systemctl_default {
        _arguments \
            "*: :_files"

    }

    function _systemctl_rescue {
        _arguments \
            "*: :_files"

    }

    function _systemctl_emergency {
        _arguments \
            "*: :_files"

    }

    function _systemctl_halt {
        _arguments \
            "*: :_files"

    }

    function _systemctl_poweroff {
        _arguments \
            "*: :_files"

    }

    function _systemctl_reboot {
        _arguments \
            "*: :_files"

    }

    function _systemctl_kexec {
        _arguments \
            "*: :_files"

    }

    function _systemctl_exit {
        _arguments \
            "*: :_files"

    }

    function _systemctl_switch-root {
        _arguments \
            "*: :_files"

    }

    function _systemctl_suspend {
        _arguments \
            "*: :_files"

    }

    function _systemctl_hibernate {
        _arguments \
            "*: :_files"

    }

    function _systemctl_hybrid-sleep {
        _arguments \
            "*: :_files"

    }

    function _systemctl_suspend-then-hibernate {
        _arguments \
            "*: :_files"

    }


function _systemctl {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list-units:List units currently in memory'
            'list-sockets:List socket units currently in memory, ordered by address'
            'list-timers:List timer units currently in memory, ordered by next elapse'
            'start:Start (activate) one or more units'
            'stop:Stop (deactivate) one or more units'
            'reload:Reload one or more units'
            'restart:Start or restart one or more units'
            'try-restart:Restart one or more units if active'
            'reload-or-restart:Reload one or more units if possible, otherwise start or restart'
            'try-reload-or-restart:If active, reload one or more units, if supported, otherwise restart'
            'isolate:Start one unit and stop all others'
            'kill:Send signal to processes of a unit'
            'clean:Clean runtime, cache, state, logs or configuration of unit'
            'is-active:Check whether units are active'
            'is-failed:Check whether units are failed'
            'status:Show runtime status of one or more units'
            'show:Show properties of one or more units/jobs or the manager'
            'cat:Show files and drop-ins of specified units'
            'set-property:Sets one or more properties of a unit'
            'reset-failed:Reset failed state for all, one, or more units'
            'list-dependencies:Recursively show units which are required or wanted by the units or by which those units are required or wanted'
            'list-unit-files:List installed unit files'
            'enable:Enable one or more unit files'
            'disable:Disable one or more unit files'
            'reenable:Reenable one or more unit files'
            'preset:Enable/disable one or more unit files based on preset configuration'
            'preset-all:Enable/disable all unit files based on preset configuration'
            'is-enabled:Check whether unit files are enabled'
            'mask:Mask one or more units'
            'unmask:Unmask one or more units'
            'revert:Revert one or more unit files to vendor version'
            'add-wants:Add '\''Wants'\'' dependency for the target on specified one or more units'
            'add-requires:Add '\''Requires'\'' dependency for the target on specified one or more units'
            'edit:Edit one or more unit files'
            'get-default:Get the name of the default target'
            'set-default:Set the default target'
            'list-machines:List local containers and host'
            'list-jobs:List jobs'
            'cancel:Cancel all, one, or more jobs'
            'show-environment:Dump environment'
            'set-environment:Set one or more environment variables'
            'unset-environment:Unset one or more environment variables'
            'import-environment:Import all or some environment variables'
            'daemon-reload:Reload systemd manager configuration'
            'daemon-reexec:Reexecute systemd manager'
            'log-level:Get/set logging threshold for manager'
            'log-target:Get/set logging target for manager'
            'service-watchdogs:Get/set service watchdog state'
            'is-system-running:Check whether system is fully running'
            'default:Enter system default mode'
            'rescue:Enter system rescue mode'
            'emergency:Enter system emergency mode'
            'halt:Shut down and halt the system'
            'poweroff:Shut down and power-off the system'
            'reboot:Shut down and reboot the system'
            'kexec:Shut down and reboot the system with kexec'
            'exit:Request user instance or container exit'
            'switch-root:Change to a different root file system'
            'suspend:Suspend the system'
            'hibernate:Hibernate the system'
            'hybrid-sleep:Hibernate and suspend the system'
            'suspend-then-hibernate:Suspend the system, wake after a period of'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list-units)
            _systemctl_list-units
            ;;

        (list-sockets)
            _systemctl_list-sockets
            ;;

        (list-timers)
            _systemctl_list-timers
            ;;

        (start)
            _systemctl_start
            ;;

        (stop)
            _systemctl_stop
            ;;

        (reload)
            _systemctl_reload
            ;;

        (restart)
            _systemctl_restart
            ;;

        (try-restart)
            _systemctl_try-restart
            ;;

        (reload-or-restart)
            _systemctl_reload-or-restart
            ;;

        (try-reload-or-restart)
            _systemctl_try-reload-or-restart
            ;;

        (isolate)
            _systemctl_isolate
            ;;

        (kill)
            _systemctl_kill
            ;;

        (clean)
            _systemctl_clean
            ;;

        (is-active)
            _systemctl_is-active
            ;;

        (is-failed)
            _systemctl_is-failed
            ;;

        (status)
            _systemctl_status
            ;;

        (show)
            _systemctl_show
            ;;

        (cat)
            _systemctl_cat
            ;;

        (set-property)
            _systemctl_set-property
            ;;

        (reset-failed)
            _systemctl_reset-failed
            ;;

        (list-dependencies)
            _systemctl_list-dependencies
            ;;

        (list-unit-files)
            _systemctl_list-unit-files
            ;;

        (enable)
            _systemctl_enable
            ;;

        (disable)
            _systemctl_disable
            ;;

        (reenable)
            _systemctl_reenable
            ;;

        (preset)
            _systemctl_preset
            ;;

        (preset-all)
            _systemctl_preset-all
            ;;

        (is-enabled)
            _systemctl_is-enabled
            ;;

        (mask)
            _systemctl_mask
            ;;

        (unmask)
            _systemctl_unmask
            ;;

        (revert)
            _systemctl_revert
            ;;

        (add-wants)
            _systemctl_add-wants
            ;;

        (add-requires)
            _systemctl_add-requires
            ;;

        (edit)
            _systemctl_edit
            ;;

        (get-default)
            _systemctl_get-default
            ;;

        (set-default)
            _systemctl_set-default
            ;;

        (list-machines)
            _systemctl_list-machines
            ;;

        (list-jobs)
            _systemctl_list-jobs
            ;;

        (cancel)
            _systemctl_cancel
            ;;

        (show-environment)
            _systemctl_show-environment
            ;;

        (set-environment)
            _systemctl_set-environment
            ;;

        (unset-environment)
            _systemctl_unset-environment
            ;;

        (import-environment)
            _systemctl_import-environment
            ;;

        (daemon-reload)
            _systemctl_daemon-reload
            ;;

        (daemon-reexec)
            _systemctl_daemon-reexec
            ;;

        (log-level)
            _systemctl_log-level
            ;;

        (log-target)
            _systemctl_log-target
            ;;

        (service-watchdogs)
            _systemctl_service-watchdogs
            ;;

        (is-system-running)
            _systemctl_is-system-running
            ;;

        (default)
            _systemctl_default
            ;;

        (rescue)
            _systemctl_rescue
            ;;

        (emergency)
            _systemctl_emergency
            ;;

        (halt)
            _systemctl_halt
            ;;

        (poweroff)
            _systemctl_poweroff
            ;;

        (reboot)
            _systemctl_reboot
            ;;

        (kexec)
            _systemctl_kexec
            ;;

        (exit)
            _systemctl_exit
            ;;

        (switch-root)
            _systemctl_switch-root
            ;;

        (suspend)
            _systemctl_suspend
            ;;

        (hibernate)
            _systemctl_hibernate
            ;;

        (hybrid-sleep)
            _systemctl_hybrid-sleep
            ;;

        (suspend-then-hibernate)
            _systemctl_suspend-then-hibernate
            ;;

        esac
        ;;
     esac

}

