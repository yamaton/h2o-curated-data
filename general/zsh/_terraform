#compdef _terraform terraform

# Auto-generated with h2o

    function _terraform_init {
        _arguments \
            '-backend[Disable backend or Terraform Cloud initialization for this configuration and use what was previously initialized instead.]' \
            '-backend-config[Configuration to be merged with what is in the configuration file'\''s '\''backend'\'' block. This can be either a path to an HCL file with key/value assignments (same format as terraform.tfvars) or a '\''key=value'\'' format, and can be specified multiple times. The backend type must be in the configuration itself.]':file:_files \
            '-force-copy[Suppress prompts about copying state data when initializating a new state backend. This is equivalent to providing a "yes" to all confirmation prompts.]' \
            '-from-module[Copy the contents of the given module into the target directory before initialization.]' \
            '-get[Disable downloading modules for this configuration.]' \
            '-input[Disable interactive prompts. Note that some actions may require interactive prompts and will error if input is disabled.]' \
            '-lock[Don'\''t hold a state lock during backend migration. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-plugin-dir[Directory containing plugin binaries. This overrides all default search paths for plugins, and prevents the automatic installation of plugins. This flag can be used multiple times.]' \
            '-reconfigure[Reconfigure a backend, ignoring any saved configuration.]' \
            '-migrate-state[Reconfigure a backend, and attempt to migrate any existing state.]' \
            '-upgrade[Install the latest module and provider versions allowed within configured constraints, overriding the default behavior of selecting exactly the version recorded in the dependency lockfile.]' \
            '-lockfile[Set a dependency lockfile mode.   Currently only "readonly" is valid.]' \
            '-ignore-remote-version[A rare option used for Terraform Cloud and the remote backend only. Set this to ignore checking that the local and remote Terraform versions use compatible state representations, making an operation proceed even when there is a potential mismatch. See the documentation on configuring Terraform with Terraform Cloud for more information.]' \
            "*: :_files"

    }

    function _terraform_validate {
        _arguments \
            '-json[Produce output in a machine-readable JSON format, suitable for use in text editor integrations and other automated systems. Always disables color.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            "*: :_files"

    }

    function _terraform_plan {
        _arguments \
            '-destroy[Select the "destroy" planning mode, which creates a plan to destroy all objects currently managed by this Terraform configuration instead of the usual behavior.]' \
            '-refresh-only[Select the "refresh only" planning mode, which checks whether remote objects still match the outcome of the most recent Terraform apply but does not propose any actions to undo any changes made outside of Terraform.]' \
            '-refresh[Skip checking for external changes to remote objects while creating the plan. This can potentially make planning faster, but at the expense of possibly planning against a stale record of the remote system state.]' \
            '-replace[Force replacement of a particular resource instance using its resource address. If the plan would'\''ve normally produced an update or no-op action for this instance, Terraform will plan to replace it instead. You can use this option multiple times to replace more than one object.]' \
            '-target[Limit the planning operation to only the given module, resource, or resource instance and all of its dependencies. You can use this option multiple times to include more than one object. This is for exceptional use only.]' \
            '-var[Set a value for one of the input variables in the root module of the configuration. Use this option more than once to set more than one variable.]' \
            '-var-file[Load variable values from the given file, in addition to the default files terraform.tfvars and *.auto.tfvars. Use this option more than once to include more than one variables file.]':file:_files \
            '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, shows them in a more compact form that includes only the summary messages.]' \
            '-detailed-exitcode[Return detailed exit codes when the command exits. This will change the meaning of exit codes to: 0 - Succeeded, diff is empty (no changes) 1 - Errored 2 - Succeeded, there is a diff]' \
            '-input[Ask for input for variables if not directly set.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-out[Write a plan file to the given path. This can be used as input to the "apply" command.]':file:_files \
            '-parallelism[Limit the number of concurrent operations. Defaults to 10.]' \
            '-state[A legacy option used for the local backend only. See the local backend'\''s documentation for more information.]':file:_files \
            "*: :_files"

    }

    function _terraform_apply {
        _arguments \
            '-auto-approve[Skip interactive approval of plan before applying.]' \
            '-backup[Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]':file:_files \
            '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, show them in a more compact form that includes only the summary messages.]' \
            '-destroy[Destroy Terraform-managed infrastructure. The command "terraform destroy" is a convenience alias for this option.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-input[Ask for input for variables if not directly set.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-parallelism[Limit the number of parallel resource operations. Defaults to 10.]' \
            '-state[Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]':file:_files \
            '-state-out[Path to write state to that is different than "-state". This can be used to preserve the old state.]':file:_files \
            "*: :_files"

    }

    function _terraform_destroy {
        _arguments \
            "*: :_files"

    }

    function _terraform_console {
        _arguments \
            '-state[Legacy option for the local backend only. See the local backend'\''s documentation for more information.]':file:_files \
            '-var[Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
            '-var-file[Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]' \
            "*: :_files"

    }

    function _terraform_fmt {
        _arguments \
            '-list[Don'\''t list files whose formatting differs (always disabled if using STDIN)]' \
            '-write[Don'\''t write to source files (always disabled if using STDIN or -check)]' \
            '-diff[Display diffs of formatting changes]' \
            '-check[Check if the input is formatted. Exit status will be 0 if all input is properly formatted and non-zero otherwise.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-recursive[Also process files in subdirectories. By default, only the given directory (or current directory) is processed.]' \
            "*: :_files"

    }

    function _terraform_force-unlock {
        _arguments \
            '-force[Don'\''t ask for input for unlock confirmation.]' \
            "*: :_files"

    }

    function _terraform_get {
        _arguments \
            '-update[Check already-downloaded modules for available updates and install the newest versions available.]' \
            '-no-color[Disable text coloring in the output.]' \
            "*: :_files"

    }

    function _terraform_graph {
        _arguments \
            '-plan[Render graph using the specified plan file instead of the configuration in the current directory.]' \
            '-draw-cycles[Highlight any cycles in the graph with colored edges. This helps when diagnosing cycle errors.]' \
            '-type[Type of graph to output. Can be: plan, plan-refresh-only, plan-destroy, or apply. By default Terraform chooses]' \
            '-module-depth[(deprecated) In prior versions of Terraform, specified the]' \
            "*: :_files"

    }

    function _terraform_import {
        _arguments \
            '-config[Path to a directory of Terraform configuration files to use to configure the provider. Defaults to pwd. If no config files are present, they must be provided via the input prompts or env vars.]':file:_files \
            '-input[Disable interactive input prompts.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-var[Set a variable in the Terraform configuration. This flag can be set multiple times. This is only useful with the "-config" flag.]' \
            '-var-file[Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]' \
            '-ignore-remote-version[A rare option used for the remote backend only. See the remote backend documentation for more information.]' \
            "*: :_files"

    }

    function _terraform_login {
        _arguments \
            "*: :_files"

    }

    function _terraform_logout {
        _arguments \
            "*: :_files"

    }

    function _terraform_output {
        _arguments \
            '-state[Path to the state file to read. Defaults to "terraform.tfstate". Ignored when remote state is used.]':file:_files \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-json[If specified, machine readable output will be printed in JSON format.]' \
            '-raw[For value types that can be automatically converted to a string, will print the raw string directly, rather than a human-oriented representation of the value.]' \
            "*: :_files"

    }

    function _terraform_providers {
        _arguments \
            "*: :_files"

    }

    function _terraform_refresh {
        _arguments \
            '-compact-warnings[If Terraform produces any warnings that are not accompanied by errors, show them in a more compact form that includes only the summary messages.]' \
            '-input[Ask for input for variables if not directly set.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-parallelism[Limit the number of concurrent operations. Defaults to 10.]' \
            '-target[Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]' \
            '-var[Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
            '-var-file[Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]' \
            "*: :_files"

    }

    function _terraform_show {
        _arguments \
            '-no-color[If specified, output won'\''t contain any color.]' \
            '-json[If specified, output the Terraform plan or state in a machine-readable form.]' \
            "*: :_files"

    }

    function _terraform_state {
        _arguments \
            "*: :_files"

    }

    function _terraform_taint {
        _arguments \
            '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-ignore-remote-version[A rare option used for the remote backend only. See the remote backend documentation for more information.]' \
            "*: :_files"

    }

    function _terraform_test {
        _arguments \
            '-[Testing of subsequent updates to existing infrastructure, where currently it only supports initial creation and then destruction.]' \
            '-[Testing top-level modules that are intended to be used for "real" environments, which typically have hard-coded values that don'\''t permit creating a separate "copy" for testing.]' \
            '-[Some sort of support for unit test runs that don'\''t interact with remote systems at all, e.g. for use in checking pull requests from untrusted contributors.]' \
            '-compact-warnings[Use a more compact representation for warnings, if this command produces only warnings and no errors.]' \
            '-junit-xml[In addition to the usual output, also write test results to the given file path in JUnit XML format. This format is commonly supported by CI systems, and they typically expect to be given a filename to search for in the test workspace after the test run finishes.]':file:_files \
            '-no-color[Don'\''t include virtual terminal formatting sequences in the output.]' \
            "*: :_files"

    }

    function _terraform_untaint {
        _arguments \
            '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
            '-lock[Don'\''t hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.]' \
            '-lock-timeout[Duration to retry a state lock.]' \
            '-ignore-remote-version[A rare option used for the remote backend only. See the remote backend documentation for more information.]' \
            "*: :_files"

    }

    function _terraform_version {
        _arguments \
            '-json[Output the version information as a JSON object.]' \
            "*: :_files"

    }

    function _terraform_workspace {
        _arguments \
            "*: :_files"

    }


function _terraform {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Prepare your working directory for other commands'
            'validate:Check whether the configuration is valid'
            'plan:Show changes required by the current configuration'
            'apply:Create or update infrastructure'
            'destroy:Destroy previously-created infrastructure'
            'console:Try Terraform expressions at an interactive command prompt'
            'fmt:Reformat your configuration in the standard style'
            'force-unlock:Release a stuck lock on the current workspace'
            'get:Install or upgrade remote Terraform modules'
            'graph:Generate a Graphviz graph of the steps in an operation'
            'import:Associate existing infrastructure with a Terraform resource'
            'login:Obtain and save credentials for a remote host'
            'logout:Remove locally-stored credentials for a remote host'
            'output:Show output values from your root module'
            'providers:Show the providers required for this configuration'
            'refresh:Update the state to match remote systems'
            'show:Show the current state or a saved plan'
            'state:Advanced state management'
            'taint:Mark a resource instance as not fully functional'
            'test:Experimental support for module integration testing'
            'untaint:Remove the '\''tainted'\'' state from a resource instance'
            'version:Show the current Terraform version'
            'workspace:Workspace management'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-chdir[Switch to a different working directory before executing the given subcommand.]':file:_files \
        '-help[Show this help output, or the help for a specified subcommand.]' \
        '-version[An alias for the "version" subcommand.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _terraform_init
            ;;

        (validate)
            _terraform_validate
            ;;

        (plan)
            _terraform_plan
            ;;

        (apply)
            _terraform_apply
            ;;

        (destroy)
            _terraform_destroy
            ;;

        (console)
            _terraform_console
            ;;

        (fmt)
            _terraform_fmt
            ;;

        (force-unlock)
            _terraform_force-unlock
            ;;

        (get)
            _terraform_get
            ;;

        (graph)
            _terraform_graph
            ;;

        (import)
            _terraform_import
            ;;

        (login)
            _terraform_login
            ;;

        (logout)
            _terraform_logout
            ;;

        (output)
            _terraform_output
            ;;

        (providers)
            _terraform_providers
            ;;

        (refresh)
            _terraform_refresh
            ;;

        (show)
            _terraform_show
            ;;

        (state)
            _terraform_state
            ;;

        (taint)
            _terraform_taint
            ;;

        (test)
            _terraform_test
            ;;

        (untaint)
            _terraform_untaint
            ;;

        (version)
            _terraform_version
            ;;

        (workspace)
            _terraform_workspace
            ;;

        esac
        ;;
     esac

}

