#compdef _valgrind valgrind

# Auto-generated with h2o


function _valgrind {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--tool[use the Valgrind tool named <name> \[memcheck\]]' \
        {-h,--help}'[show this message]' \
        '--help-debug[show this message, plus debugging options]' \
        '--version[show version]' \
        {-q,--quiet}'[run silently; only print error msgs]' \
        {-v,--verbose}'[be more verbose -- show misc extra info]' \
        '--trace-children[Valgrind-ise child processes (follow execve)? \[no\]]' \
        '--trace-children-skip[specifies a list of executables that --trace-children=yes should not trace into]' \
        '--trace-children-skip-by-arg[same as --trace-children-skip but check the argv\[\] entries for children, rather than the exe name, to make a follow/no-follow decision]' \
        '--child-silent-after-fork[omit child output between fork & exec? \[no\]]' \
        '--vgdb[activate gdbserver? \[yes\]   full is slower but provides precise watchpoint/step]' \
        '--vgdb-error[invoke gdbserver after <number> errors \[999999999\] to get started quickly, use --vgdb-error=0 and follow the on-screen directions]' \
        '--vgdb-stop-at[invoke gdbserver for given events \[none\]]' \
        '--track-fds[track open file descriptors? \[no\]]' \
        '--time-stamp[add timestamps to log messages? \[no\]]' \
        '--log-fd[log messages to file descriptor \[2=stderr\]]' \
        '--log-file[log messages to <file>]':file:_files \
        '--log-socket[log messages to socket ipaddr:port]' \
        '--xml[emit error output in XML (some tools only)]' \
        '--xml-fd[XML output to file descriptor]' \
        '--xml-file[XML output to <file>]':file:_files \
        '--xml-socket[XML output to socket ipaddr:port]' \
        '--xml-user-comment[copy STR verbatim into XML output]' \
        '--demangle[automatically demangle C++ names? \[yes\]]' \
        '--num-callers[show <number> callers in stack traces \[12\]]' \
        '--error-limit[stop showing new errors if too many? \[yes\]]' \
        '--exit-on-first-error[exit code on the first error found? \[no\]]' \
        '--error-exitcode[exit code to return if errors found \[0=disable\]]' \
        '--error-markers[add lines with begin/end markers before/after each error output in plain text mode \[none\]]' \
        '--show-error-list[show detected errors list and suppression counts at exit \[no\]]' \
        '-s[same as --show-error-list=yes]' \
        '--keep-debuginfo[Keep symbols etc for unloaded code \[no\] This allows saved stack traces (e.g. memory leaks) to include file/line info for code that has been dlclose'\''d (or similar)]' \
        '--show-below-main[continue stack traces below main() \[no\]]' \
        '--default-suppressions[load default suppressions \[yes\]]' \
        '--suppressions[suppress errors described in <filename>]':file:_files \
        '--gen-suppressions[print suppressions for errors? \[no\]]' \
        '--input-fd[file descriptor for input \[0=stdin\]]' \
        '--dsymutil[run dsymutil on Mac OS X when helpful? \[yes\]]' \
        '--max-stackframe[assume stack switch for SP changes larger than <number> bytes \[2000000\]]' \
        '--main-stacksize[set size of main thread'\''s stack (in bytes) \[min(max(current '\''ulimit'\'' value,1MB),16MB)\]]' \
        '--alignment[set minimum alignment of heap allocations \[16\]]' \
        '--redzone-size[set minimum size of redzones added before/after heap blocks (in bytes). \[16\]]' \
        '--xtree-memory[profile heap memory in an xtree \[none\] and produces a report at the end of the execution none: no profiling, allocs: current allocated size/blocks, full: profile current and cumulative allocated size/blocks and freed size/blocks.]' \
        '--xtree-memory-file[xtree memory report file \[xtmemory.kcg.%p\]]':file:_files \
        '--fullpath-after[if the argument is empty, (with nothing after the '\''='\'') show full source paths in call stacks. like --fullpath-after=, but only show the part of the path after '\''string'\''. Allows removal of path prefixes. Use this flag multiple times to specify a set of prefixes to remove.]' \
        '--extra-debuginfo-path[absolute path to search for additional debug symbols, in addition to existing default well known search paths.]':file:_files \
        '--debuginfo-server[also query this server (valgrind-di-server) for debug symbols]' \
        '--allow-mismatched-debuginfo[for the above two flags only, accept debuginfo objects that don'\''t "match" the main object \[no\]]' \
        '--smc-check[checks for self-modifying code: none, only for code found in stacks, for all code, or for all code except that from file-backed mappings \[all-non-file\]]':file:_files \
        '--read-inline-info[read debug info about inlined function calls and use it to do better stack traces. \[yes\] on Linux/Android/Solaris for the tools Memcheck/Massif/Helgrind/DRD only. \[no\] for all other tools and platforms.]' \
        '--read-var-info[read debug info on stack and global variables and use it to print better error messages in tools that make use of it (Memcheck, Helgrind, DRD) \[no\]]' \
        '--vgdb-poll[gdbserver poll max every <number> basic blocks \[5000\]]' \
        '--vgdb-shadow-registers[let gdb see the shadow registers \[no\]]' \
        '--vgdb-prefix[prefix for vgdb FIFOs \[/tmp/vgdb-pipe\]]' \
        '--run-libc-freeres[free up glibc memory at exit on Linux? \[yes\]]' \
        '--run-cxx-freeres[free up libstdc++ memory at exit on Linux and Solaris? \[yes\]]' \
        '--sim-hints[activate unusual sim behaviours \[none\] where hint is one of: lax-ioctls lax-doors fuse-compatible enable-outer no-inner-prefix no-nptl-pthread-stackcache fallback-llsc none]' \
        '--fair-sched[schedule threads fairly on multicore systems \[no\]]' \
        '--kernel-variant[handle non-standard kernel variants \[none\] where variant is one of: bproc android-no-hw-tls android-gpu-sgx5xx android-gpu-adreno3xx none]' \
        '--merge-recursive-frames[merge frames between identical program counters in max <number> frames) \[0\]]' \
        '--num-transtab-sectors[size of translated code cache \[32\] more sectors may increase performance, but use more memory.]' \
        '--avg-transtab-entry-size[avg size in bytes of a translated basic block \[0, meaning use tool provided default\]]' \
        '--aspace-minaddr[avoid mapping memory below 0xPP \[guessed\]]' \
        '--valgrind-stacksize[size of valgrind (host) thread'\''s stack]' \
        '--show-emwarns[show warnings about emulation limits? \[no\]]' \
        '--require-text-symbol[abort run if the stated shared object doesn'\''t have the stated text symbol. Patterns can contain ? and *.]' \
        '--soname-synonyms[synonym soname specify patterns for function wrapping or replacement.]' \
        '--sigill-diagnostics[warn about illegal instructions? \[yes\]]' \
        '--unw-stack-scan-thresh[Enable stack-scan unwind if fewer than <number> good frames found \[0, meaning "disabled"\]]' \
        '--unw-stack-scan-frames[Max number of frames that can be recovered by stack scanning \[5\]]' \
        '--resync-filter[attempt to avoid expensive address-space-resync operations]' \
        '--max-threads[maximum number of threads that valgrind can handle \[500\]]' \
        '--leak-check[search for memory leaks at exit? \[summary\]]' \
        '--leak-resolution[differentiation of leak stack traces \[high\]]' \
        '--show-leak-kinds[which leak kinds to show? \[definite,possible\]]' \
        '--errors-for-leak-kinds[which leak kinds are errors? \[definite,possible\] where kind is one of: definite indirect possible reachable all none]' \
        '--leak-check-heuristics[which heuristics to use for improving leak search false positive \[all\] where heur is one of: stdstring length64 newarray multipleinheritance all none]' \
        '--show-possibly-lost[Alternative way to specify the leak kinds to show.]' \
        '--show-reachable[Alternative way to specify the leak kinds to show.]' \
        '--xtree-leak[output leak result in xtree format? \[no\]]' \
        '--xtree-leak-file[xtree leak report file \[xtleak.kcg.%p\]]':file:_files \
        '--undef-value-errors[check for undefined value errors \[yes\]]' \
        '--track-origins[show origins of undefined values? \[no\]]' \
        '--partial-loads-ok[too hard to explain here; see manual \[yes\]]' \
        '--expensive-definedness-checks[Use extra-precise definedness tracking \[auto\]]' \
        '--freelist-vol[volume of freed blocks queue \[20000000\]]' \
        '--freelist-big-blocks[releases first blocks with size>= \[1000000\]]' \
        '--workaround-gcc296-bugs[self explanatory \[no\]. Deprecated. Use --ignore-range-below-sp instead.]' \
        '--ignore-ranges[assume given addresses are OK]' \
        '--ignore-range-below-sp[do not report errors for accesses at the given offsets below SP]' \
        '--malloc-fill[fill malloc'\''d areas with given value]' \
        '--free-fill[fill free'\''d areas with given value]' \
        '--keep-stacktraces[stack trace(s) to keep for malloc'\''d/free'\''d areas \[alloc-and-free\]]' \
        '--show-mismatched-frees[show frees that don'\''t match the allocator? \[yes\]]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

