#compdef _vsce vsce

# Auto-generated with h2o

    function _vsce_ls {
        _arguments \
            '--yarn[Use yarn instead of npm (default inferred from presence of yarn.lock or .yarnrc)]' \
            '--no-yarn[Use npm instead of yarn (default inferred from lack of yarn.lock or .yarnrc)]' \
            '--packagedDependencies[Select packages that should be published only (includes dependencies)]':file:_files \
            '--ignoreFile[Indicate alternative .vscodeignore]':file:_files \
            '--no-dependencies[Disable dependency detection via npm or yarn]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_package {
        _arguments \
            {-o,--out}'[Output .vsix extension file to <path> location (defaults to <name>-<version>.vsix)]':file:_files \
            {-t,--target}'[Target architecture]' \
            {-m,--message}'[Commit message used when calling `npm version`.]' \
            '--no-git-tag-version[Do not create a version commit and tag when calling `npm version`. Valid only when \[version\] is provided.]' \
            '--no-update-package-json[Do not update `package.json`. Valid only when \[version\] is provided.]' \
            '--githubBranch[The GitHub branch used to infer relative links in README.md. Can be overriden by --baseContentUrl and --baseImagesUrl.]' \
            '--gitlabBranch[The GitLab branch used to infer relative links in README.md. Can be overriden by --baseContentUrl and --baseImagesUrl.]' \
            '--no-rewrite-relative-links[Skip rewriting relative links.]' \
            '--baseContentUrl[Prepend all relative links in README.md with this url.]' \
            '--baseImagesUrl[Prepend all relative image links in README.md with this url.]' \
            '--yarn[Use yarn instead of npm (default inferred from presence of yarn.lock or .yarnrc)]' \
            '--no-yarn[Use npm instead of yarn (default inferred from lack of yarn.lock or .yarnrc)]' \
            '--ignoreFile[Indicate alternative .vscodeignore]':file:_files \
            '--no-gitHubIssueLinking[Disable automatic expansion of GitHub-style issue syntax into links]' \
            '--no-gitLabIssueLinking[Disable automatic expansion of GitLab-style issue syntax into links]' \
            '--no-dependencies[Disable dependency detection via npm or yarn]' \
            '--pre-release[Mark this package as a pre-release]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_publish {
        _arguments \
            {-p,--pat}'[Personal Access Token (defaults to VSCE_PAT environment variable)]' \
            {-t,--target}'[Target architectures]' \
            {-m,--message}'[Commit message used when calling `npm version`.]' \
            '--no-git-tag-version[Do not create a version commit and tag when calling `npm version`. Valid only when \[version\] is provided.]' \
            '--no-update-package-json[Do not update `package.json`. Valid only when \[version\] is provided.]' \
            {-i,--packagePath}'[Publish the provided VSIX packages.]':file:_files \
            '--githubBranch[The GitHub branch used to infer relative links in README.md. Can be overriden by --baseContentUrl and --baseImagesUrl.]' \
            '--gitlabBranch[The GitLab branch used to infer relative links in README.md. Can be overriden by --baseContentUrl and --baseImagesUrl.]' \
            '--baseContentUrl[Prepend all relative links in README.md with this url.]' \
            '--baseImagesUrl[Prepend all relative image links in README.md with this url.]' \
            '--yarn[Use yarn instead of npm (default inferred from presence of yarn.lock or .yarnrc)]' \
            '--no-yarn[Use npm instead of yarn (default inferred from lack of yarn.lock or .yarnrc)]' \
            {--noVerify,--ignoreFile}'[Indicate alternative .vscodeignore]':file:_files \
            '--no-dependencies[Disable dependency detection via npm or yarn]' \
            '--pre-release[Mark this package as a pre-release]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_unpublish {
        _arguments \
            {-p,--pat}'[Personal Access Token]' \
            {-f,--force}'[Forces Unpublished Extension]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_ls-publishers {
        _arguments \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_delete-publisher {
        _arguments \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_login {
        _arguments \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_logout {
        _arguments \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_verify-pat {
        _arguments \
            {-p,--pat}'[Personal Access Token (defaults to VSCE_PAT environment variable)]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_show {
        _arguments \
            '--json[Output data in json format (default: false)]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }

    function _vsce_search {
        _arguments \
            '--json[Output result in json format (default: false)]' \
            {-h,--help}'[display help for command]' \
            "*: :_files"

    }


function _vsce {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ls:Lists all the files that will be published'
            'package:Packages an extension'
            'publish:Publishes an extension'
            'unpublish:Unpublishes an extension. Example extension id: microsoft.csharp.'
            'ls-publishers:List all known publishers'
            'delete-publisher:Deletes a publisher'
            'login:Add a publisher to the known publishers list'
            'logout:Remove a publisher from the known publishers list'
            'verify-pat:Verify if the Personal Access Token has publish rights for the publisher.'
            'show:Show extension metadata'
            'search:search extension gallery'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-V,--version}'[output the version number]' \
        {-h,--help}'[display help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ls)
            _vsce_ls
            ;;

        (package)
            _vsce_package
            ;;

        (publish)
            _vsce_publish
            ;;

        (unpublish)
            _vsce_unpublish
            ;;

        (ls-publishers)
            _vsce_ls-publishers
            ;;

        (delete-publisher)
            _vsce_delete-publisher
            ;;

        (login)
            _vsce_login
            ;;

        (logout)
            _vsce_logout
            ;;

        (verify-pat)
            _vsce_verify-pat
            ;;

        (show)
            _vsce_show
            ;;

        (search)
            _vsce_search
            ;;

        esac
        ;;
     esac

}

