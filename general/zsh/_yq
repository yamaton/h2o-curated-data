#compdef _yq yq

# Generated with h2o 0.1.18

    function _yq_eval {
        _arguments \
            '(-h --help)'{-h,--help}'[help for eval]' \
            '(-C --colors)'{-C,--colors}'[force print with colors]' \
            '(-e --exit-status)'{-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
            '(-f --front-matter)'{-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
            '--header-preprocess[Slurp any header comments and seperators before processing expression. This is a workaround for go-yaml to persist header content. This flag will be removed once this feature has been out in the wild for a while. (default true)]' \
            '(-I --indent)'{-I,--indent}'[sets indent level for output (default 2)]' \
            '(-i --inplace)'{-i,--inplace}'[update the yaml file inplace of first yaml file given.]' \
            '(-M --no-colors)'{-M,--no-colors}'[force print with no colors]' \
            '(-N --no-doc)'{-N,--no-doc}'[Don'\''t print document separators (---)]' \
            '(-n --null-input)'{-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.]' \
            '(-o --output-format)'{-o,--output-format}'[\[yaml|y|json|j|props|p\] output format type. (default "yaml")]' \
            '(-P --prettyPrint)'{-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
            '--unwrapScalar[unwrap scalar, print the value with no quotes, colors or comments (default true)]' \
            '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
            "*: :_files"

    }

    function _yq_eval-all {
        _arguments \
            '(-h --help)'{-h,--help}'[help for eval-all]' \
            '(-C --colors)'{-C,--colors}'[force print with colors]' \
            '(-e --exit-status)'{-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
            '(-f --front-matter)'{-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
            '--header-preprocess[Slurp any header comments and seperators before processing expression. This is a workaround for go-yaml to persist header content. This flag will be removed once this feature has been out in the wild for a while. (default true)]' \
            '(-I --indent)'{-I,--indent}'[sets indent level for output (default 2)]' \
            '(-i --inplace)'{-i,--inplace}'[update the yaml file inplace of first yaml file given.]' \
            '(-M --no-colors)'{-M,--no-colors}'[force print with no colors]' \
            '(-N --no-doc)'{-N,--no-doc}'[Don'\''t print document separators (---)]' \
            '(-n --null-input)'{-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.]' \
            '(-o --output-format)'{-o,--output-format}'[\[yaml|y|json|j|props|p\] output format type. (default "yaml")]' \
            '(-P --prettyPrint)'{-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
            '--unwrapScalar[unwrap scalar, print the value with no quotes, colors or comments (default true)]' \
            '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
            "*: :_files"

    }

    function _yq_help {
        _arguments \
            '(-h --help)'{-h,--help}'[help for help]' \
            '(-C --colors)'{-C,--colors}'[force print with colors]' \
            '(-e --exit-status)'{-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
            '(-f --front-matter)'{-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
            '--header-preprocess[Slurp any header comments and seperators before processing expression. This is a workaround for go-yaml to persist header content. This flag will be removed once this feature has been out in the wild for a while. (default true)]' \
            '(-I --indent)'{-I,--indent}'[sets indent level for output (default 2)]' \
            '(-i --inplace)'{-i,--inplace}'[update the yaml file inplace of first yaml file given.]' \
            '(-M --no-colors)'{-M,--no-colors}'[force print with no colors]' \
            '(-N --no-doc)'{-N,--no-doc}'[Don'\''t print document separators (---)]' \
            '(-n --null-input)'{-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.]' \
            '(-o --output-format)'{-o,--output-format}'[\[yaml|y|json|j|props|p\] output format type. (default "yaml")]' \
            '(-P --prettyPrint)'{-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
            '--unwrapScalar[unwrap scalar, print the value with no quotes, colors or comments (default true)]' \
            '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
            "*: :_files"

    }

    function _yq_shell-completion {
        _arguments \
            '(-h --help)'{-h,--help}'[help for shell-completion]' \
            '(-C --colors)'{-C,--colors}'[force print with colors]' \
            '(-e --exit-status)'{-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
            '(-f --front-matter)'{-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
            '--header-preprocess[Slurp any header comments and seperators before processing expression. This is a workaround for go-yaml to persist header content. This flag will be removed once this feature has been out in the wild for a while. (default true)]' \
            '(-I --indent)'{-I,--indent}'[sets indent level for output (default 2)]' \
            '(-i --inplace)'{-i,--inplace}'[update the yaml file inplace of first yaml file given.]' \
            '(-M --no-colors)'{-M,--no-colors}'[force print with no colors]' \
            '(-N --no-doc)'{-N,--no-doc}'[Don'\''t print document separators (---)]' \
            '(-n --null-input)'{-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.]' \
            '(-o --output-format)'{-o,--output-format}'[\[yaml|y|json|j|props|p\] output format type. (default "yaml")]' \
            '(-P --prettyPrint)'{-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
            '--unwrapScalar[unwrap scalar, print the value with no quotes, colors or comments (default true)]' \
            '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
            "*: :_files"

    }


function _yq {
    local line state

    function _commands {
        local -a commands
        commands=(
            'eval:Apply the expression to each document in each yaml file in sequence'
            'eval-all:Loads _all_ yaml documents of _all_ yaml files and runs expression once'
            'help:Help about any command'
            'shell-completion:Generate completion script'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '(-C --colors)'{-C,--colors}'[force print with colors]' \
        '(-e --exit-status)'{-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '(-f --front-matter)'{-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and seperators before processing expression. This is a workaround for go-yaml to persist header content. This flag will be removed once this feature has been out in the wild for a while. (default true)]' \
        '(-h --help)'{-h,--help}'[help for yq]' \
        '(-I --indent)'{-I,--indent}'[sets indent level for output (default 2)]' \
        '(-i --inplace)'{-i,--inplace}'[update the yaml file inplace of first yaml file given.]' \
        '(-M --no-colors)'{-M,--no-colors}'[force print with no colors]' \
        '(-N --no-doc)'{-N,--no-doc}'[Don'\''t print document separators (---)]' \
        '(-n --null-input)'{-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.]' \
        '(-o --output-format)'{-o,--output-format}'[\[yaml|y|json|j|props|p\] output format type. (default "yaml")]' \
        '(-P --prettyPrint)'{-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        '--unwrapScalar[unwrap scalar, print the value with no quotes, colors or comments (default true)]' \
        '(-v --verbose)'{-v,--verbose}'[verbose mode]' \
        '(-V --version)'{-V,--version}'[Print version information and quit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (eval)
            _yq_eval
            ;;

        (eval-all)
            _yq_eval-all
            ;;

        (help)
            _yq_help
            ;;

        (shell-completion)
            _yq_shell-completion
            ;;

        esac
        ;;
     esac

}

