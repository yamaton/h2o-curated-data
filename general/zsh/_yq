#compdef yq

# Auto-generated with h2o


function _yq {
    local line state

    function _commands {
        local -a commands
        commands=(
            'completion:Generate the autocompletion script for the specified shell'
            'eval:(default) Apply the expression to each document in each yaml file in sequence'
            'eval-all:Loads _all_ yaml documents of _all_ yaml files and runs expression once'
            'help:Help about any command'
            'shell-completion:Generate completion script'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-C,--colors}'[force print with colors]' \
        {-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '--expression[forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file.]' \
        '--from-file[Load expression from specified file.]' \
        {-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and separators before processing expression. (default true)]' \
        {-h,--help}'[help for yq]' \
        {-I,--indent}'[sets indent level for output (default 2)]' \
        {-i,--inplace}'[update the file inplace of first file given.]' \
        {-p,--input-format}'[\[auto|a|yaml|y|props|p|xml|x|tsv|t|csv|c|toml\] parse format for input. Note that json is a subset of yaml. (default "auto")]' \
        {-M,--no-colors}'[force print with no colors]' \
        {-N,--no-doc}'[Don'\''t print document separators (---)]' \
        {-0,--nul-output}'[Use NUL char to separate values. If unwrap scalar is also set, fail if unwrapped scalar contains NUL char.]' \
        {-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating docs from scratch.]' \
        {-o,--output-format}'[\[auto|a|yaml|y|json|j|props|p|xml|x|tsv|t|csv|c\] output format type. (default "auto")]' \
        {-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        {-s,--split-exp}'[print each result (or doc) into a file named (exp). \[exp\] argument must return a string. You can use $index in the expression as the result counter.]' \
        '--split-exp-file[Use a file to specify the split-exp expression.]' \
        {-r,--unwrapScalar}'[unwrap scalar, print the value with no quotes, colors or comments. Defaults to true for yaml (default true)]' \
        {-v,--verbose}'[verbose mode]' \
        {-V,--version}'[Print version information and quit]' \
        '--xml-attribute-prefix[prefix for xml attributes (default "+@")]' \
        '--xml-content-name[name for xml content (if no attribute name is present). (default "+content")]' \
        '--xml-directive-name[name for xml directives (e.g. <!DOCTYPE thing cat>) (default "+directive")]' \
        '--xml-keep-namespace[enables keeping namespace after parsing attributes (default true)]' \
        '--xml-proc-inst-prefix[prefix for xml processing instructions (e.g. <?xml version="1"?>) (default "+p_")]' \
        '--xml-raw-token[enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)]' \
        '--xml-skip-directives[skip over directives (e.g. <!DOCTYPE thing cat>)]' \
        '--xml-skip-proc-inst[skip over process instructions (e.g. <?xml version="1"?>)]' \
        '--xml-strict-mode[enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (completion)
            _yq_completion
            ;;

        (eval)
            _yq_eval
            ;;

        (eval-all)
            _yq_eval-all
            ;;

        (help)
            _yq_help
            ;;

        (shell-completion)
            _yq_shell-completion
            ;;

        esac
        ;;
     esac

}

function _yq_completion {
    _arguments \
        {-h,--help}'[help for eval]' \
        {-C,--colors}'[force print with colors]' \
        {-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '--expression[forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file.]' \
        '--from-file[Load expression from specified file.]' \
        {-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and separators before processing expression. (default true)]' \
        {-I,--indent}'[sets indent level for output (default 2)]' \
        {-i,--inplace}'[update the file inplace of first file given.]' \
        {-p,--input-format}'[\[auto|a|yaml|y|props|p|xml|x|tsv|t|csv|c|toml\] parse format for input. Note that json is a subset of yaml. (default "auto")]' \
        {-M,--no-colors}'[force print with no colors]' \
        {-N,--no-doc}'[Don'\''t print document separators (---)]' \
        {-0,--nul-output}'[Use NUL char to separate values. If unwrap scalar is also set, fail if unwrapped scalar contains NUL char.]' \
        {-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating docs from scratch.]' \
        {-o,--output-format}'[\[auto|a|yaml|y|json|j|props|p|xml|x|tsv|t|csv|c\] output format type. (default "auto")]' \
        {-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        {-s,--split-exp}'[print each result (or doc) into a file named (exp). \[exp\] argument must return a string. You can use $index in the expression as the result counter.]' \
        '--split-exp-file[Use a file to specify the split-exp expression.]' \
        {-r,--unwrapScalar}'[unwrap scalar, print the value with no quotes, colors or comments. Defaults to true for yaml (default true)]' \
        {-v,--verbose}'[verbose mode]' \
        '--xml-attribute-prefix[prefix for xml attributes (default "+@")]' \
        '--xml-content-name[name for xml content (if no attribute name is present). (default "+content")]' \
        '--xml-directive-name[name for xml directives (e.g. <!DOCTYPE thing cat>) (default "+directive")]' \
        '--xml-keep-namespace[enables keeping namespace after parsing attributes (default true)]' \
        '--xml-proc-inst-prefix[prefix for xml processing instructions (e.g. <?xml version="1"?>) (default "+p_")]' \
        '--xml-raw-token[enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)]' \
        '--xml-skip-directives[skip over directives (e.g. <!DOCTYPE thing cat>)]' \
        '--xml-skip-proc-inst[skip over process instructions (e.g. <?xml version="1"?>)]' \
        '--xml-strict-mode[enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details.]' \
        "*: :_files"

}

function _yq_eval {
    _arguments \
        {-h,--help}'[help for eval]' \
        {-C,--colors}'[force print with colors]' \
        {-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '--expression[forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file.]' \
        '--from-file[Load expression from specified file.]' \
        {-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and separators before processing expression. (default true)]' \
        {-I,--indent}'[sets indent level for output (default 2)]' \
        {-i,--inplace}'[update the file inplace of first file given.]' \
        {-p,--input-format}'[\[auto|a|yaml|y|props|p|xml|x|tsv|t|csv|c|toml\] parse format for input. Note that json is a subset of yaml. (default "auto")]' \
        {-M,--no-colors}'[force print with no colors]' \
        {-N,--no-doc}'[Don'\''t print document separators (---)]' \
        {-0,--nul-output}'[Use NUL char to separate values. If unwrap scalar is also set, fail if unwrapped scalar contains NUL char.]' \
        {-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating docs from scratch.]' \
        {-o,--output-format}'[\[auto|a|yaml|y|json|j|props|p|xml|x|tsv|t|csv|c\] output format type. (default "auto")]' \
        {-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        {-s,--split-exp}'[print each result (or doc) into a file named (exp). \[exp\] argument must return a string. You can use $index in the expression as the result counter.]' \
        '--split-exp-file[Use a file to specify the split-exp expression.]' \
        {-r,--unwrapScalar}'[unwrap scalar, print the value with no quotes, colors or comments. Defaults to true for yaml (default true)]' \
        {-v,--verbose}'[verbose mode]' \
        '--xml-attribute-prefix[prefix for xml attributes (default "+@")]' \
        '--xml-content-name[name for xml content (if no attribute name is present). (default "+content")]' \
        '--xml-directive-name[name for xml directives (e.g. <!DOCTYPE thing cat>) (default "+directive")]' \
        '--xml-keep-namespace[enables keeping namespace after parsing attributes (default true)]' \
        '--xml-proc-inst-prefix[prefix for xml processing instructions (e.g. <?xml version="1"?>) (default "+p_")]' \
        '--xml-raw-token[enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)]' \
        '--xml-skip-directives[skip over directives (e.g. <!DOCTYPE thing cat>)]' \
        '--xml-skip-proc-inst[skip over process instructions (e.g. <?xml version="1"?>)]' \
        '--xml-strict-mode[enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details.]' \
        "*: :_files"

}

function _yq_eval-all {
    _arguments \
        {-h,--help}'[help for eval-all]' \
        {-C,--colors}'[force print with colors]' \
        {-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '--expression[forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file.]' \
        '--from-file[Load expression from specified file.]' \
        {-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and separators before processing expression. (default true)]' \
        {-I,--indent}'[sets indent level for output (default 2)]' \
        {-i,--inplace}'[update the file inplace of first file given.]' \
        {-p,--input-format}'[\[auto|a|yaml|y|props|p|xml|x|tsv|t|csv|c|toml\] parse format for input. Note that json is a subset of yaml. (default "auto")]' \
        {-M,--no-colors}'[force print with no colors]' \
        {-N,--no-doc}'[Don'\''t print document separators (---)]' \
        {-0,--nul-output}'[Use NUL char to separate values. If unwrap scalar is also set, fail if unwrapped scalar contains NUL char.]' \
        {-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating docs from scratch.]' \
        {-o,--output-format}'[\[auto|a|yaml|y|json|j|props|p|xml|x|tsv|t|csv|c\] output format type. (default "auto")]' \
        {-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        {-s,--split-exp}'[print each result (or doc) into a file named (exp). \[exp\] argument must return a string. You can use $index in the expression as the result counter.]' \
        '--split-exp-file[Use a file to specify the split-exp expression.]' \
        {-r,--unwrapScalar}'[unwrap scalar, print the value with no quotes, colors or comments. Defaults to true for yaml (default true)]' \
        {-v,--verbose}'[verbose mode]' \
        '--xml-attribute-prefix[prefix for xml attributes (default "+@")]' \
        '--xml-content-name[name for xml content (if no attribute name is present). (default "+content")]' \
        '--xml-directive-name[name for xml directives (e.g. <!DOCTYPE thing cat>) (default "+directive")]' \
        '--xml-keep-namespace[enables keeping namespace after parsing attributes (default true)]' \
        '--xml-proc-inst-prefix[prefix for xml processing instructions (e.g. <?xml version="1"?>) (default "+p_")]' \
        '--xml-raw-token[enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)]' \
        '--xml-skip-directives[skip over directives (e.g. <!DOCTYPE thing cat>)]' \
        '--xml-skip-proc-inst[skip over process instructions (e.g. <?xml version="1"?>)]' \
        '--xml-strict-mode[enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details.]' \
        "*: :_files"

}

function _yq_help {
    _arguments \
        "*: :_files"

}

function _yq_shell-completion {
    _arguments \
        {-h,--help}'[help for shell-completion]' \
        {-C,--colors}'[force print with colors]' \
        {-e,--exit-status}'[set exit status if there are no matches or null or false is returned]' \
        '--expression[forcibly set the expression argument. Useful when yq argument detection thinks your expression is a file.]' \
        '--from-file[Load expression from specified file.]' \
        {-f,--front-matter}'[(extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact]' \
        '--header-preprocess[Slurp any header comments and separators before processing expression. (default true)]' \
        {-I,--indent}'[sets indent level for output (default 2)]' \
        {-i,--inplace}'[update the file inplace of first file given.]' \
        {-p,--input-format}'[\[auto|a|yaml|y|props|p|xml|x|tsv|t|csv|c|toml\] parse format for input. Note that json is a subset of yaml. (default "auto")]' \
        {-M,--no-colors}'[force print with no colors]' \
        {-N,--no-doc}'[Don'\''t print document separators (---)]' \
        {-0,--nul-output}'[Use NUL char to separate values. If unwrap scalar is also set, fail if unwrapped scalar contains NUL char.]' \
        {-n,--null-input}'[Don'\''t read input, simply evaluate the expression given. Useful for creating docs from scratch.]' \
        {-o,--output-format}'[\[auto|a|yaml|y|json|j|props|p|xml|x|tsv|t|csv|c\] output format type. (default "auto")]' \
        {-P,--prettyPrint}'[pretty print, shorthand for '\''... style = ""'\'']' \
        {-s,--split-exp}'[print each result (or doc) into a file named (exp). \[exp\] argument must return a string. You can use $index in the expression as the result counter.]' \
        '--split-exp-file[Use a file to specify the split-exp expression.]' \
        {-r,--unwrapScalar}'[unwrap scalar, print the value with no quotes, colors or comments. Defaults to true for yaml (default true)]' \
        {-v,--verbose}'[verbose mode]' \
        '--xml-attribute-prefix[prefix for xml attributes (default "+@")]' \
        '--xml-content-name[name for xml content (if no attribute name is present). (default "+content")]' \
        '--xml-directive-name[name for xml directives (e.g. <!DOCTYPE thing cat>) (default "+directive")]' \
        '--xml-keep-namespace[enables keeping namespace after parsing attributes (default true)]' \
        '--xml-proc-inst-prefix[prefix for xml processing instructions (e.g. <?xml version="1"?>) (default "+p_")]' \
        '--xml-raw-token[enables using RawToken method instead Token. Commonly disables namespace translations. See https://pkg.go.dev/encoding/xml#Decoder.RawToken for details. (default true)]' \
        '--xml-skip-directives[skip over directives (e.g. <!DOCTYPE thing cat>)]' \
        '--xml-skip-proc-inst[skip over process instructions (e.g. <?xml version="1"?>)]' \
        '--xml-strict-mode[enables strict parsing of XML. See https://pkg.go.dev/encoding/xml for more details.]' \
        "*: :_files"

}

_yq "$@"

