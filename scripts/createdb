#!/usr/bin/env python
#
# Create sqlite file containing all available command specs
# with command name a
# and save them as general.txt and bio.txt, respectively
#
# Usage:
#
#   $ ./createdb
#

import json
import logging
import sqlite3
import subprocess

from pathlib import Path
from typing import Iterable, List

DBNAME = "commandspecs.db"
CATEGORIES = ("general", "bio")


def get_json_paths() -> List[Path]:
    rootdir = Path(__file__).parent.parent.absolute()
    return [p for p in rootdir.glob("**/*.json") if p.parent.parent.name in CATEGORIES]


def create_db(paths: Iterable[Path]) -> None:
    """Create sqlite database"""
    p = Path(DBNAME)
    p.unlink(missing_ok=True)  # remove existing db file

    db = sqlite3.connect(p)
    cur = db.cursor()
    cur.execute("create table command (name text, json json)")

    cnt = 0
    names = set()
    for path in paths:
        with open(path) as f:
            raw = f.read()
        d = json.loads(raw)
        if "name" not in d:
            logging.error(f"Failed to read: {path})")
            continue
        name = d['name']
        if name in names:
            logging.warning(f"Duplicate command name: {name}")
            continue
        names.add(name)
        cur.execute("insert into command values (?, json(?))", (name, raw))
        cnt += 1

    db.commit()
    print(f"Processed {cnt} JSON files.")
    db.close()


def validate(paths: Iterable[Path]) -> None:
    """Validate JSON files"""
    validator = Path(__file__).parent / "validate-json"
    for p in paths:
        res = subprocess.run([str(validator), str(p)])
        if res.returncode != 0:
            logging.error(f"Failed to validate: {p}")
            exit(1)


if __name__ == "__main__":
    paths = get_json_paths()
    create_db(paths)
