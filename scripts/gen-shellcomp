#!/usr/bin/env bash
#
# Create Bash/Zsh/Fish shell completion script from JSON file
#
# Usage: gen-shellcomp {bash|zsh|fish} <command>
#
#   Create fish completion script for conda.
#
#   $ ./gen-shellcomp fish conda
#
#   Or for parallel processing
#   $ parallel ./gen-shellcomp {} bcftools ::: bash zsh fish
#
#   Then fish/conda.fish is created.
#   The first argument must be either "bash", "zsh", or "fish"
#

set -o errexit
set -o nounset
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

if [[ ! "$(command -v h2o)" ]]; then
    echo "[error] h2o is missing"
    exit 1
fi

basedir="$(dirname "$(readlink -f "$0")")"
toshell=$1
name="$2"

if (( "$#" != 2 ))  || [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    echo "Usage: to-shellcomp.sh {bash|zsh|fish} <command>"
    exit 1
fi


if "./check-if-completion-available-to" "$toshell" "$name"; then
    echo "👀 $name is already supported officially in $toshell 👀"
    echo "➡️ $name : Skip creating completion script for $toshell shell."
    exit
fi


case "$toshell" in
  bash)
    outpath="$toshell/$name"
    ;;
  zsh)
    outpath="$toshell/_$name"
    ;;
  fish)
    outpath="$toshell/$name.fish"
    ;;
  *)
    echo "ERROR: The first argument must be either 'bash', 'zsh', or 'fish'."
    exit 1
    ;;
esac

echo "Running: to-shellcomp.sh $toshell $name ..."

function genScript() {
  local dir="$1"
  local json="$basedir/../$dir/json/$name.json"
  if [[ -f "$json" ]]; then
      mkdir -p "$basedir/../$dir/$toshell"
      output="$basedir/../$dir/$outpath"
      echo "  from: $json"
      echo "  to  : $output"
      h2o --loadjson "$json" --format "$toshell" > "$output"
  fi
}

genScript general
genScript bio
genScript experimental
